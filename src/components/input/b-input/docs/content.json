[
  {
    "name": "BInput",
    "desc": "b-input component allows users to input text.",
    "sample": "<BInput hintText='Hint Text' type='text' floatingText='Floating Text' errorText='Field is required' value=987623 onFocus='myFocusEvent()' onblur='myBlurEvent()' onChange='myChangeEvent()' maxLength=7  />"
  },
  {
    "name": "Props",
    "infoArray": [
      {
        "name": "counterLabelShow",
        "type": "bool",
        "header": "not required",
        "desc": "Shows the counter label if set to true. Default is false."
      },
      {
        "name": "disabled",
        "type": "bool",
        "header": "not required",
        "desc": "Disables the text field if set to true. Default is false."
      },
      {
        "name": "errorStyle",
        "type": "object",
        "header": "not required",
        "desc": "The style object to use to override error styles."
      },
      {
        "name": "errorText",
        "type": "node",
        "header": "not required",
        "desc": "The error content to display."
      },
      {
        "name": "floatingLabelFixed",
        "type": "bool",
        "header": "not required",
        "desc": "If true, the floating label will float even when there is no value. Default is false."
      },
      {
        "name": "floatingLabelFocusStyle",
        "type": "object",
        "header": "not required",
        "desc": "The style object to use to override floating label styles when focused."
      },
      {
        "name": "floatingLabelShrinkStyle",
        "type": "object",
        "header": "not required",
        "desc": "The style object to use to override floating label styles when shrunk."
      },
      {
        "name": "floatingLabelStyle",
        "type": "object",
        "header": "not required",
        "desc": "The style object to use to override floating label styles."
      },
      {
        "name": "floatingLabelText",
        "type": "node",
        "header": "not required",
        "desc": "The content to use for the floating label element."
      },
      {
        "name": "fullWidth",
        "type": "bool",
        "header": "not required",
        "desc": "If true, the field receives the property width 100%. Default is false."
      },
      {
        "name": "hintStyle",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the TextField's hint text element."
      },
      {
        "name": "hintText",
        "type": "node",
        "header": "not required",
        "desc": "The hint content to display."
      },
      {
        "name": "id",
        "type": "string",
        "header": "not required",
        "desc": "The id prop for the text field."
      },
      {
        "name": "inputAlign",
        "type": "oneOf('left', 'right')",
        "header": "not required",
        "desc": "Alignment of the TextField's input element. When inputAlign set: override alignment to current rtl behaviour."
      },
      {
        "name": "inputStyle",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the TextField's input element. When multiLine is false: define the style of the input element. When multiLine is true: define the style of the container of the textarea."
      },
      {
        "name": "maxLength",
        "type": "number",
        "header": "not required",
        "desc": "Limit of the input text's character length."
      },
      {
        "name": "multiLine",
        "type": "bool",
        "header": "not required",
        "desc": "If true, a textarea element will be rendered. The textarea also grows and shrinks according to the number of lines. Default is false."
      },
      {
        "name": "name",
        "type": "string",
        "header": "not required",
        "desc": "Name applied to the input."
      },
      {
        "name": "noWrap",
        "type": "bool",
        "header": "not required",
        "desc": "If true, the text inside input does not go down line. Default is true."
      },
      {
        "name": "rows",
        "type": "number",
        "header": "not required",
        "desc": "Number of rows to display when multiLine option is set to true. Default is 1."
      },
      {
        "name": "rowsMax",
        "type": "number",
        "header": "not required",
        "desc": "Maximum number of rows to display when multiLine option is set to true."
      },
      {
        "name": "style",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the root element."
      },
      {
        "name": "textareaStyle",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the TextField's textarea element. The TextField use either a textarea or an input, this property has effects only when multiLine is true."
      },
      {
        "name": "type",
        "type": "string",
        "header": "not required",
        "desc": "Specifies the type of input to display such as 'password' or 'text'. Default is 'text'"
      },
      {
        "name": "underlineDisabledStyle",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the TextField's underline element when disabled."
      },
      {
        "name": "underlineFocusStyle",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the TextField's underline element when focussed."
      },
      {
        "name": "underlineShow",
        "type": "bool",
        "header": "not required",
        "desc": "If true, shows the underline for the text field. Default is true."
      },
      {
        "name": "underlineStyle",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the TextField's underline element."
      },
      {
        "name": "value",
        "type": "any",
        "header": "not required",
        "desc": "The value of the text field."
      },
      {
        "name": "timerDuration",
        "type": "number",
        "header": "not required",
        "desc": "The value of the timer duration."
      },
      {
        "name": "bottomLeftInfoEnable",
        "type": "bool",
        "header": "not required",
        "desc": "If false, bottomLeft info disabled, default is true."
      },
      {
        "name": "bottomLeftInfo",
        "type": "string",
        "header": "not required",
        "desc": "The value of info at bottomLeft of textfield."
      },
      {
        "name": "bottomRightInfoEnable",
        "type": "bool",
        "header": "not required",
        "desc": "If false, bottomRight info disabled, default is true."
      },
      {
        "name": "bottomRightInfo",
        "type": "string",
        "header": "not required",
        "desc": "The value of info at bottomRight of textfield."
      },
      {
        "name": "prefixText",
        "type": "string",
        "header": "not required",
        "desc": "It can be used to clarify units or to add input in advance. prefixText is left justified in the text field."
      },
      {
        "name": "suffixText",
        "type": "string",
        "header": "not required",
        "desc": "It can be used to clarify units or to add input in advance. suffixText is right justified in the text field."
      }
    ]
  },
  {
    "name": "Events",
    "infoArray": [
      {
        "name": "onBlur",
        "header": "function(event: object) => void",
        "desc": "Callback function that is fired when the user looses the focus of textfield."
      },
      {
        "name": "onChange",
        "header": "function(event: object, newValue: string) => void",
        "desc": "Callback function that is fired when the textfield's value changes."
      },
      {
        "name": "onFocus",
        "header": "function(event: object) => void",
        "desc": "Callback function that is fired when the user focuses textfield."
      },
      {
        "name": "onKeyDown",
        "header": "function(event: object) => void",
        "desc": "Callback function that is fired when a key is down."
      },
      {
        "name": "onTimerFinished",
        "header": "function(event: object) => void",
        "desc": "Callback function that is fired when a timer is finished."
      }
    ]
  }
]
