[
  {
    "name": "BDialog",
    "desc": "Dialogs contain text and UI controls focused on a specific task. They inform users about critical information, require users to make decisions, or involve multiple tasks.",
    "sample": "<BDialog context={this.props.context} title=\"Dialog With Actions\" actions={actions} modal={this.state.modal} open={this.state.open}  onRequestClose={this.handleClose}> The actions in this window were passed in as an array of React objects.</BDialog>"
  },
  {
    "name": "Props",
    "infoArray": [
      {
        "name": "actions",
        "type": "node",
        "header": "not required",
        "desc": "Action buttons to display below the Dialog content (`children`). This property accepts either a React element, or an array of React elements."
      },
      {
        "name": "actionsContainerClassName",
        "type": "string",
        "header": "not required",
        "desc": "The `className` to add to the actions container's root element."
      },
      {
        "name": "actionsContainerStyle",
        "type": "object",
        "header": "not required",
        "desc": "Overrides the inline-styles of the actions container's root element."
      },
      {
        "name": "autoDetectWindowHeight",
        "type": "bool",
        "header": "not required",
        "desc": "If set to true, the height of the `Dialog` will be auto detected. A max height will be enforced so that the content does not extend beyond the viewport."
      },
      {
        "name": "autoScrollBodyContent",
        "type": "bool",
        "header": "not required",
        "desc": "If set to true, the body content of the `Dialog` will be scrollable."
      },
      {
        "name": "bodyClassName",
        "type": "string",
        "header": "required",
        "desc": "The `className` to add to the content's root element under the title."
      },
      {
        "name": "bodyStyle",
        "type": "object",
        "header": "not required",
        "desc": "Overrides the inline-styles of the content's root element under the title."
      },
      {
        "name": "children",
        "type": "node",
        "header": "not required",
        "desc": "The contents of the `Dialog`."
      },
      {
        "name": "className",
        "type": "string",
        "header": "not required",
        "desc": "The css class name of the root element."
      },
      {
        "name": "contentClassName",
        "type": "string",
        "header": "not required",
        "desc": " The `className` to add to the content container."
      },
      {
        "name": "contentStyle",
        "type": "object",
        "header": "not required",
        "desc": "Overrides the inline-styles of the content container."
      },
      {
        "name": "modal",
        "type": "bool",
        "header": "not required",
        "desc": "Force the user to use one of the actions in the `Dialog`. Clicking outside the `Dialog` will not trigger the `onRequestClose`."
      },
      {
        "name": "open",
        "type": "bool",
        "header": "required",
        "desc": "Controls whether the Dialog is opened or not."
      },
      {
        "name": "overlayClassName",
        "type": "string",
        "header": "not required",
        "desc": "The `className` to add to the `Overlay` component that is rendered behind the `Dialog`."
      },
      {
        "name": "overlayStyle",
        "type": "object",
        "header": "not required",
        "desc": "Overrides the inline-styles of the `Overlay` component that is rendered behind the `Dialog`."
      },
      {
        "name": "repositionOnUpdate",
        "type": "bool",
        "header": "not required",
        "desc": "Determines whether the `Dialog` should be repositioned when it's contents are updated."
      },
      {
        "name": "style",
        "type": "object",
        "header": "not required",
        "desc": "Override the inline-styles of the root element."
      },
      {
        "name": "title",
        "type": "node",
        "header": "not required",
        "desc": "The title to display on the `Dialog`. Could be number, string, element or an array containing these types."
      },
      {
        "name": "titleClassName",
        "type": "string",
        "header": "not required",
        "desc": "The `className` to add to the title's root container element."
      },
      {
        "name": "titleStyle",
        "type": "object",
        "header": "not required",
        "desc": "Overrides the inline-styles of the title's root container element."
      }
    ]
  },
  {
    "name": "Events",
    "infoArray": [
      {
        "name": "onRequestClose",
        "header": "function(buttonClicked: bool) => void",
        "desc": "Fired when the `Dialog` is requested to be closed by a click outside the `Dialog` or on the buttons."
      }
    ]
  },
  {
    "name": "BDialogHelper",
    "desc": "Utility class for showing and closing dialogs. It can show string messages, response.results and also react components.",
    "sample": "BDialogHelper.show(this.props.context, dialog, 0, 0, 'Mernis Adres ve Kimlik Bilgisi Sorgulama EkranÄ±', this.handleClose.bind(this))"
  },
  {
    "name": "Methods",
    "infoArray": [
      {
        "name": "show",
        "type": "show(context, content, dialogType = BComponent.DialogType.INFO, dialogResponseStyle = BComponent.DialogResponseStyle.OK, title, onClose) => void",
        "desc": "Shows passed object. It requires context for creating dialog."
      },
      {
        "name": "close",
        "type": "close(component, dialogResponse = BComponent.DialogResponse.NONE, returnValue) => void",
        "desc": "Closes dialog where passed with parameter. It returns dialog response and returnValue."
      }
    ]
  }
]
