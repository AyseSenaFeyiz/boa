{
	"description": "A toggle switch is used as an on/off control.",
	"displayName": "Toggle",
	"methods": [
		{
			"name": "getValue",
			"docblock": null,
			"modifiers": [],
			"params": [],
			"returns": null
		},
		{
			"name": "setValue",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "value",
					"type": null
				}
			],
			"returns": null
		},
		{
			"name": "resetValue",
			"docblock": null,
			"modifiers": [],
			"params": [],
			"returns": null
		},
		{
			"name": "setDisable",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "value",
					"type": null
				}
			],
			"returns": null
		},
		{
			"name": "handleOnToggle",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "event",
					"type": null
				},
				{
					"name": "value",
					"type": null
				}
			],
			"returns": null
		}
	],
	"props": {
		"defaultToggled": {
			"type": {
				"name": "bool"
			},
			"required": false,
			"description": "The default value of toggle.",
			"defaultValue": {
				"value": false,
				"computed": false
			}
		},
		"elementStyle": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the style of element."
		},
		"errorText": {
			"type": {
				"name": "string"
			},
			"required": false,
			"description": "Indicates the style of icon."
		},
		"iconProperties": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the icon properties."
		},
		"iconStyle": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the style of icon."
		},
		"informationText": {
			"type": {
				"name": "string"
			},
			"required": false,
			"description": "Indicates the icon information text."
		},
		"inputStyle": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the style of input."
		},
		"label": {
			"type": {
				"name": "node"
			},
			"required": false,
			"description": "The label of toggle component."
		},
		"labelPosition": {
			"type": {
				"name": "enum",
				"value": [
					{
						"value": "left",
						"computed": false
					},
					{
						"value": "right",
						"computed": false
					}
				]
			},
			"required": false,
			"description": "The position of the label in toggle.",
			"defaultValue": {
				"value": "left",
				"computed": false
			}
		},
		"labelStyle": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the style of label."
		},
		"onToggle": {
			"type": {
				"name": "func"
			},
			"required": false,
			"description": "The event to handle toggle."
		},
		"rippleStyle": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the style of ripple."
		},
		"toggled": {
			"type": {
				"name": "bool"
			},
			"required": false,
			"description": "Indicates the toggled or not.",
			"defaultValue": {
				"value": false,
				"computed": false
			}
		},
		"trackSwitchedStyle": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the style of track switched."
		},
		"valueLink": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Indicates the value of link."
		}
	},
	"composes": [
		"@kuveytturk/boa-base"
	],
	"composeProps": {
		"packages/base/src/ComponentBase/index.js": {
			"componentSize": {
				"type": {
					"name": "enum",
					"value": [
						{
							"value": "ComponentSize.LARGE",
							"computed": true
						},
						{
							"value": "ComponentSize.MEDIUM",
							"computed": true
						},
						{
							"value": "ComponentSize.SMALL",
							"computed": true
						},
						{
							"value": "ComponentSize.XSMALL",
							"computed": true
						}
					]
				},
				"required": false,
				"description": "Defines the size of the component. The ComponentSize constant exported from enums.\n@ignore",
				"defaultValue": {
					"value": "ComponentSize.LARGE",
					"computed": true
				}
			},
			"context": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "Defines application requirements such as localization, theme, platform."
			},
			"disabled": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "If true, all of the component functionality will be disabled.",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"id": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "All components should be have id prop."
			},
			"newLine": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "As described in componentSize prop, if any components take part in the new line\non a card we're using this prop.\n@ignore",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"snapKey": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "The snapKey property is used to manage snapshots of the child components.\n@ignore"
			},
			"snapshot": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "In our SPA, we want to keep the state of each component when a page will unmount.\nAnd the same page will mount again, the component mounts with snapshot prop and\nit should get the previous state.\n@ignore"
			},
			"style": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "All components should be have style prop."
			},
			"valueConstraint": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "The valueConstraint is used to some validation on components like limit, required etc."
			},
			"visible": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "In ComponentComposer, we change the visibility of the component with this prop.",
				"defaultValue": {
					"value": true,
					"computed": false
				}
			}
		}
	}
}