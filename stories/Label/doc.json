{
	"description": "This component allows fitting label contents to the specified width by changing the font size.",
	"displayName": "Label",
	"methods": [
		{
			"name": "checkLabelFontSize",
			"docblock": null,
			"modifiers": [],
			"params": [
				{
					"name": "props",
					"type": null
				}
			],
			"returns": null
		}
	],
	"props": {
		"maxFontSize": {
			"type": {
				"name": "union",
				"value": [
					{
						"name": "string"
					},
					{
						"name": "number"
					}
				]
			},
			"required": false,
			"description": "Max font size of the label element.",
			"defaultValue": {
				"value": "Number.POSITIVE_INFINITY",
				"computed": true
			}
		},
		"maxWidth": {
			"type": {
				"name": "number"
			},
			"required": false,
			"description": "Max width of the label container element."
		},
		"minFontSize": {
			"type": {
				"name": "union",
				"value": [
					{
						"name": "string"
					},
					{
						"name": "number"
					}
				]
			},
			"required": false,
			"description": "Min font size of the label element.",
			"defaultValue": {
				"value": "Number.NEGATIVE_INFINITY",
				"computed": true
			}
		},
		"style": {
			"type": {
				"name": "object"
			},
			"required": false,
			"description": "Override style of the element."
		},
		"text": {
			"type": {
				"name": "string"
			},
			"required": false,
			"description": "Text of the label element."
		},
		"textPosition": {
			"type": {
				"name": "enum",
				"value": [
					{
						"value": "center",
						"computed": false
					},
					{
						"value": "left",
						"computed": false
					},
					{
						"value": "right",
						"computed": false
					}
				]
			},
			"required": false,
			"description": "Position of the text of the label.\nIt applies given position to text if label width is greater than the text width."
		}
	},
	"composeProps": {
		"packages/base/src/ComponentBase/index.js": {
			"componentSize": {
				"type": {
					"name": "enum",
					"value": [
						{
							"value": "ComponentSize.LARGE",
							"computed": true
						},
						{
							"value": "ComponentSize.MEDIUM",
							"computed": true
						},
						{
							"value": "ComponentSize.SMALL",
							"computed": true
						},
						{
							"value": "ComponentSize.XSMALL",
							"computed": true
						}
					]
				},
				"required": false,
				"description": "Defines the size of the component. The ComponentSize constant exported from enums.\n@ignore",
				"defaultValue": {
					"value": "ComponentSize.LARGE",
					"computed": true
				}
			},
			"context": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "Defines application requirements such as localization, theme, platform."
			},
			"disabled": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "If true, all of the component functionality will be disabled.",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"id": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "All components should be have id prop."
			},
			"newLine": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "As described in componentSize prop, if any components take part in the new line\non a card we're using this prop.\n@ignore",
				"defaultValue": {
					"value": false,
					"computed": false
				}
			},
			"snapKey": {
				"type": {
					"name": "string"
				},
				"required": false,
				"description": "The snapKey property is used to manage snapshots of the child components.\n@ignore"
			},
			"snapshot": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "In our SPA, we want to keep the state of each component when a page will unmount.\nAnd the same page will mount again, the component mounts with snapshot prop and\nit should get the previous state.\n@ignore"
			},
			"style": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "All components should be have style prop."
			},
			"valueConstraint": {
				"type": {
					"name": "object"
				},
				"required": false,
				"description": "The valueConstraint is used to some validation on components like limit, required etc."
			},
			"visible": {
				"type": {
					"name": "bool"
				},
				"required": false,
				"description": "In ComponentComposer, we change the visibility of the component with this prop.",
				"defaultValue": {
					"value": true,
					"computed": false
				}
			}
		}
	}
}