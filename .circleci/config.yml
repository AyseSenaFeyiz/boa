defaults: &defaults
  working_directory: /tmp/boa-components
  docker:
    - image: circleci/node:10.0

install_js: &install_js
  run:
    name: Install js dependencies
    command: npm install

restore_npm_cache: &restore_npm_cache
  restore_cache: # special step to restore the dependency cache
    key: dependency-cache-{{ checksum "package.json" }}

version: 2
jobs:
  checkout:
    <<: *defaults
    steps:
      - checkout
      - *restore_npm_cache
      - run:
          name: Check versions and env
          command: |
            node --version
            npm --version
            docker --version
            docker-compose --version
            env
      - *install_js
      - run:
          name: Should not have any git not staged
          command: git diff --exit-code
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
  lint:
    <<: *defaults
    steps:
      - checkout
      - *restore_npm_cache
      - *install_js
      - run:
          name: Export changed files
          command: |
            # changed files on this branch
            # `git diff --name-only master` but since the checkout used reset --hard
            # we need to parse the revs for the actual master
            echo 'export CHANGED_FILES=$(git diff --name-only $(git rev-parse origin/master)...)' >> $BASH_ENV
      - run:
          name: Check if npm run prettier was run
          command: |
            # if we use an empty string as a pattern grep will match everything
            if [ -z "$CHANGED_FILES" ]; then
              echo "no changes"
            else
              # Files that should have been formatted while working on this branch
              # CircleCI does not support interpolation when setting environment variables
              echo 'export FORMATTED_FILES=$(npm run --silent prettier:files | grep "$CHANGED_FILES")' >> $BASH_ENV
              source $BASH_ENV

              if [ -z "$FORMATTED_FILES" ]; then
                echo "no files for prettier were changed"
              else
                npm run prettier-ci $FORMATTED_FILES
              fi
            fi
      - run:
          name: Javascript Lint
          command: npm run lint
      - run:
          name: Typescript Lint
          command: npm run typescript
  test_unit:
    <<: *defaults
    steps:
      - checkout
      - *restore_npm_cache
      - *install_js
      - run:
          name: Unit tests
          command: npm run test-coverage
      - run:
          name: Check coverage generated
          command: |
            if ! [[ -s coverage/lcov.info ]]
            then
              exit 1
            fi
      - run:
          name: Coverage
          command: bash <(curl -s https://codecov.io/bash)
  test_build:
    <<: *defaults
    # This isn't user facing code.
    # Let's take advantage of the most up to date node version.
    docker:
      - image: circleci/node:9.10
    steps:
      - checkout
      - *restore_npm_cache
      - *install_js
      - run:
          name: Can we build components?
          command: npm run build
      - run:
          name: Is the size acceptable?
          command: npm run size
  test_browser:
    <<: *defaults
    steps:
      - checkout
      - *restore_npm_cache
      - *install_js
      - run:
          name: Install dependencies for Chrome Headless
          command: |
            sudo apt-get update
            sudo apt-get install -y gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      - run:
          name: Tests real browsers
          command: npm run test-karma
  test_regressions:
    <<: *defaults
    docker:
      - image: circleci/node:9.10
      - image: selenium/standalone-chrome:3.11.0
    steps:
      - checkout
      - *restore_npm_cache
      - *install_js
      - run:
          name: Visual regression tests
          command: |
            DOCKER_TEST_URL=http://$(ip addr show lo | grep "inet\b" | awk '{print $2}' | cut -d/ -f1):3090 npm run test-regressions
            npm run argos
workflows:
  version: 2
  pipeline:
    jobs:
      - checkout
      - lint:
          requires:
            - checkout
      - test_unit:
          requires:
            - checkout
      - test_build:
          requires:
            - checkout
      - test_browser:
          requires:
            - checkout
      - test_regressions:
          requires:
            - test_unit
            - test_build
            - test_browser
