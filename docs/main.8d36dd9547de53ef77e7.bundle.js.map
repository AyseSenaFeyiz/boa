{"version":3,"file":"main.8d36dd9547de53ef77e7.bundle.js","sources":["webpack:///./packages/components/src/Button/Button.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport merge from 'lodash/merge';\nimport MuiButton from '@material-ui/core/Button';\nimport { withStyles } from '@material-ui/core/styles';\nimport { ComponentBase, ComponentComposer } from '@kuveytturk/boa-base';\nimport { Localization } from '@kuveytturk/boa-utils';\nimport { Icon } from '../Icon';\nimport { IconButton } from '../IconButton';\n\nconst styles = () => ({\n  label: {\n    width: '100%',\n    display: 'inherit',\n    alignItems: 'inherit',\n    justifyContent: 'inherit',\n  },\n});\n\n/**\n * Buttons allow users to take actions, and make choices, with a single tap.\n * This component is wrapped from `@material-ui/core/Button`.\n * It also renders an `<IconButton />` when the \"type\" prop is \"icon\".\n */\n@ComponentComposer\n@withStyles(styles)\nclass Button extends ComponentBase {\n  static propTypes = {\n    /**\n     * Base properties from ComponentBase.\n     */\n    ...ComponentBase.propTypes,\n    /**\n     * If `false`, content of the button is shown uppercase.\n     */\n    allowLabelCase: PropTypes.bool,\n    /**\n     * Predefined sizes of the button.\n     */\n    buttonSize: PropTypes.oneOf(['small', 'medium', 'large']),\n    /**\n     * Color of the component.\n     * It supports the theme colors that make sense for this component.\n     */\n    colorType: PropTypes.oneOf(['default', 'primary', 'secondary']),\n    /**\n     * Icon name from BOA icon library.\n     */\n    dynamicIcon: PropTypes.string,\n    /**\n     * Font icon name from font icon's library.\n     * @ignore\n     */\n    fontIcon: PropTypes.string,\n    /**\n     * If true, the button has the full width of its container.\n     */\n    fullWidth: PropTypes.bool,\n    /**\n     * Custom icon element to be rendered inside the button.\n     */\n    icon: PropTypes.any,\n    /**\n     * Icon props that are passed to the `<Icon />` element.\n     */\n    iconProperties: PropTypes.object,\n    /**\n     * If `true`, and `variant` is `'fab'`, will use mini floating action button styling.\n     */\n    mini: PropTypes.bool,\n    /**\n     * @ignore\n     */\n    onClick: PropTypes.func,\n    /**\n     * SVG Icon name from material svg icon library.\n     * @ignore\n     */\n    svgIcon: PropTypes.string,\n    /**\n     * Button content.\n     */\n    text: PropTypes.string,\n    /**\n     * Position of the text in the button.\n     * It assigns given position to text if button width is greater than the text width.\n     */\n    textPosition: PropTypes.oneOf(['center', 'left', 'right']),\n    /**\n     * Styles applied to the span element that wraps the children.\n     */\n    textStyle: PropTypes.object,\n    /**\n     * If type is 'icon', a tooltip is generated on the icon button.\n     */\n    tooltip: PropTypes.string,\n    /**\n     * Position of the button tooltip.\n     */\n    tooltipPosition: PropTypes.string,\n    /**\n     * Button type should be `contained`, `text`, `fab` or `icon`.\n     */\n    type: PropTypes.oneOf(['contained', 'text', 'fab', 'icon']).isRequired,\n  };\n\n  static defaultProps = {\n    ...ComponentBase.defaultProps,\n    type: 'contained',\n    text: 'Click',\n    allowLabelCase: false,\n    textPosition: 'center',\n    buttonSize: 'medium',\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      disabled: props.disabled,\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.disabled !== this.props.disabled) {\n      this.setDisable(nextProps.disabled);\n    }\n  }\n\n  setDisable(value) {\n    this.setState({ disabled: value });\n  }\n\n  getLabel() {\n    const { allowLabelCase, text, textStyle } = this.props;\n    const label = allowLabelCase ? text : Localization.stringUpperCase(!text ? '' : text);\n    return textStyle ? <div style={textStyle}>{label}</div> : label;\n  }\n\n  createButtonElement(variant) {\n    let props = this.props;\n    const { textPosition, allowLabelCase, style } = this.props;\n\n    /* istanbul ignore else  */\n    if (variant !== 'fab') {\n      props = Object.assign({}, props);\n      const iconStyle = !this.getLabel() ? null : { marginRight: 8 };\n      if (props.iconProperties && props.iconProperties.style) {\n        props.iconProperties.style = merge(iconStyle, props.iconProperties.style);\n      } else {\n        props.iconProperties = { style: iconStyle };\n      }\n    }\n\n    const icon = Icon.getIcon(props);\n    const buttonStyle = {\n      justifyContent: textPosition === 'right' ? 'flex-end' : textPosition,\n      textAlign: textPosition,\n      textTransform: allowLabelCase ? 'none' : '',\n      ...style,\n    };\n\n    return (\n      <MuiButton\n        id={this.props.id}\n        style={buttonStyle}\n        fullWidth={this.props.fullWidth}\n        color={this.props.colorType}\n        disabled={this.state.disabled}\n        disableRipple={this.state.disabled}\n        onClick={this.props.onClick}\n        variant={variant}\n        size={this.props.buttonSize}\n        mini={this.props.mini}\n      >\n        {icon}\n        {this.getLabel()}\n        {this.props.children}\n      </MuiButton>\n    );\n  }\n\n  createIconButtonElement() {\n    return (\n      <IconButton\n        {...this.props}\n        disabled={this.state.disabled}\n        disableRipple={this.state.disabled}\n        onClick={this.props.onClick}\n      />\n    );\n  }\n\n  createButton() {\n    if (this.props.type && this.props.type === 'icon') {\n      return this.createIconButtonElement();\n    }\n    return this.createButtonElement(this.props.type);\n  }\n\n  render() {\n    return this.createButton();\n  }\n}\n\nexport default Button;\n"],"mappings":"AA0BA","sourceRoot":""}