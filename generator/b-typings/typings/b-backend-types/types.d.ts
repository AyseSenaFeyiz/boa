declare namespace BOA.Business.Kernel.Investment.StockExchange {
    interface StockContract {
        buyPrice?: number;
        closedAmount?: string;
        lot?: string;
        marketCode?: string;
        stockAmount?: string;
        stockCode?: string;
        stockCost?: string;
        stockName?: string;
        stockProfitLost?: string;
    }
    interface StockCustomerPortfolioContract extends BOA.Common.Types.ContractBase {
        fundAmount?: string;
        fXAmount?: string;
        stockAmount?: string;
        stockBalance?: BOA.Types.Kernel.Investment.StockExchange.StockBalance;
        stockList?: BOA.Business.Kernel.Investment.StockExchange.StockListContract;
        sukukAmount?: string;
        sukukList?: BOA.Business.Kernel.Investment.StockExchange.SukukListContract;
        t2Amount?: string;
        totalInvestmentAmount?: string;
        totalPortfolioAmount?: string;
    }
    interface StockListContract {
        stock?: BOA.Business.Kernel.Investment.StockExchange.StockContract[];
    }
    interface SukukContract {
        sukukAmount?: string;
        sukukCost?: string;
        sukukCount?: string;
        sukukISINCode?: string;
        sukukPrice?: string;
        transactionLimit?: number;
    }
    interface SukukListContract {
        sukuk?: BOA.Business.Kernel.Investment.StockExchange.SukukContract[];
    }
}
declare namespace BOA.Common.Constant {
    export const enum CustomerAddressType {

        Home = 0,
        Work = 1,
        Formal = 7,
        Factory = 12
    }
    export const enum CountryId {
        TRCountryId = 1,
        USCountryId = 65
    }
    export const enum RelationshipType {
        KinshipRelation = 1,
        DelegateRelation = 2,
        PartnershipRelation = 3,
        OtherRelation = 5,
        Vast = 24,
        Authorized = 26,
        Share = 32,
        Firm = 31,
    }
}
declare namespace BOA.Common.Types {
    export const enum AccountingType {
        Accounting = 0,
        Commission = 1
    }
    export const enum ActionStandardsWarningStatus {
        WrongIcon = 0,
        WrongName = 1,
        UndefinedAction = 2
    }
    export const enum AfterMethodCallType {
        OnSuccess = 0,
        Always = 1,
        NotOnSuccess = 2
    }
    export const enum AlertTypes {
        Info = 0,
        Error = 1,
        Warning = 2,
        Workflow = 3,
        Restart = 4
    }
    export const enum Algorithm {
        Ssl = 0,
        Standart = 1,
        ClearText = 2
    }
    export const enum ApplicationEnvironment {
        Development = 0,
        Test = 1,
        PreProduction = 2,
        Production = 3
    }
    export const enum ApplicationSide {
        Client = 0,
        Server = 1,
        Database = 2,
        DatabaseConnection = 3,
        Transportation = 4,
        Dispatcher = 5,
        Pipeline = 6,
        BroadcastTransportation = 7,
        Orchestration = 8,
        AccountingEngine = 9,
        CommissionEngine = 10,
        SlipEngine = 11,
        TellerEngine = 12,
        AuthorizationEngine = 13,
        FutureTransactionEngine = 14,
        RevokeEngine = 15,
        WorkflowEngine = 16,
        AccountControl = 17,
        ReverseAccountControl = 18,
        RuleEngine = 19,
        FraudEngine = 20,
        TransactionAuthorization = 21
    }
    export const enum BroadcastCallbackType {
        AlertMessage = 0,
        SessionExpired = 1,
        CacheInvalidate = 2,
        CacheActivate = 3
    }
    export const enum ChannelApplication {
        BOAWpfContainer = 1,
        BOAOneOffice = 2,
        BOAOneCorporate = 3
    }

    export const enum ChannelContract {
        All = -1,
        Batch = 0,
        Branch = 1,
        Internet = 2,
        ATM = 3,
        IVR = 4,
        Mobile = 5,
        CallCenter = 6,
        POS = 7,
        EOD = 8,
        Kiosk = 9,
        Insurance = 10,
        Synthetic = 12,
        XTM = 13,
        InternetSite = 14,
        Intranet = 15,
        XTMAgent = 16,
        MobileApprovalService = 19,
        TakasBank = 20,
        Corporate = 21,
        BOAWebGate = 22,
        BOACloud = 24,
        Tablet = 25,
        BoaLite = 26,
        XtmMarketing = 27,
        Foreks = 28,
        YourBank = 29,
        TabletBranch = 30,
        ATMDomestic = 31,
        ATMInternational = 32,
        POSDomestic = 33,
        POSInternational = 34,
        VPOS = 35,
        VPOSDomestic = 36,
        VPOSInternational = 37,
        DebitCardSwitchGate = 38,
        AgentBanking = 39,
        BOAStore = 40,
        API = 41,
        APIGateway = 42,
        APIMarket = 43,
        MobileInvestment = 44,
        CorporateInternetBranch = 45
    }
    export const enum CommandName {
        Denominate = 0,
        Dispense = 1,
        Present = 2,
        CashIn = 3,
        CashInEnd = 4,
        CashInRollback = 5,
        CancelCashIn = 6,
        PrintSlip = 7,
        PrintAccountStatement = 8,
        TakeAPhoto = 9,
        Scan = 10,
        Cancel = 11,
        VideoConnection = 12,
        FecList = 13,
        Print = 14,
        PrintAccountInfo = 15,
        Hold = 16,
        VideoResume = 17,
        VideoHold = 18,
        OpenKeyStrokeDefinitionWindow = 19,
        CloseKeyStrokeDefinitionWindow = 20,
        FaceRecognitionTakeAPhoto = 21,
        CallTransfer = 22,
        GetDeviceStatus = 23,
        DispenseReject = 24,
        PrintCard = 25,
        RestartDeviceVideoDevices = 26,
        RestartDeviceSoundDevices = 27,
        OpenDocumentShutter = 28,
        CloseDocumentShutter = 29,
        CustomerNameInfo = 30,
        Denominate_Exchange = 31,
        Dispense_Exchange = 32,
        Present_Exchange = 33,
        CashIn_Exchange = 34,
        CashInEnd_Exchange = 35,
        CashInRollback_Exchange = 36,
        CancelCashIn_Exchange = 37,
        PrintSlip_Exchange = 38,
        PrintAccountStatement_Exchange = 39,
        DispenseReject_Exchange = 40,
        FecList_Exchange = 41,
        OpenScannerCamera = 42,
        CloseScannerCamera = 43,
        AgreementViewer = 44
    }
    export const enum CommandStatus {
        Started = 0,
        WaitingForBroadcasting = 1,
        BroadcastedToXtm = 2,
        Executing = 3,
        Success = 4,
        Failed = 5,
        DeviceError = 6,
        HalfSuccess = 7
    }
    export const enum CommissionDiscountType {
        CustomerClassDiscount = 1,
        ValueSegmentDiscount = 2
    }
    export const enum CommissionPaymentType {
        WithEntirePayment = 1,
        WithPartialPayment = 2,
        WithoutPayment = 3
    }
    export const enum CommissionRediscountExceptionTypes {
        Revise = 1,
        EarlyClosing = 2,
        FallToDelayedScope = 3,
        Compensation = 4,
        Return = 5,
        ReviseCancelation = 6,
        EarlyClosingCancelation = 7,
        FallToDelayedScopeCancelation = 8,
        CompensationCancelation = 9,
        ReturnCancelation = 10
    }
    export const enum CommissionRediscountStatus {
        OnHold = 0,
        Working = 1,
        Completed = 2,
        Cancel = 3,
        Accrued = 4
    }
    export const enum CommissionRediscountType {
        Project = 1,
        FundLetterOfGuarantee = 2,
        ExchangeLetterOfGuarantee = 3
    }
    export const enum CommissionTaxType {
        TaxFree = 0,
        BITT = 1,
        VAT = 2
    }
    export const enum CommissionType {
        FromBox = 1,
        FromAccount = 2,
        FromGeneralLedger = 3
    }
    export const enum ComponentLabelWarningStatus {
        UndefinedLabel = 0,
        WrongLabel = 1,
        UndefinedComponentProperty = 2
    }
    export const enum CONTAINER_OPEN_MODE {
        NORMAL = 0,
        SILENT = 1,
        DIVIT = 2,
        MAIL = 3
    }
    export const enum ContextType {
        ThreadContext = 0,
        GlobalContext = 1
    }
    export const enum Databases {
        DbKuveyt2 = 0,
        Boa = 1,
        BoaLog = 2,
        BoaReference = 3,
        Divit = 4,
        BoaStats = 5,
        BoaWeb = 6,
        DWH = 7,
        DW = 8,
        BoaCatalog = 9,
        VeribranchProd = 10,
        SMSinteractive = 11,
        SMSBulk = 12,
        BanksoftCC = 13,
        BDSKuveyt = 14,
        WEBFile = 15,
        BanksoftATM = 16,
        BoaERP = 17,
        Budget = 18,
        IMKB = 19,
        CallCenterAgentStatus = 20,
        CallCenterCallLog = 21,
        CallCenterI3_IC = 22,
        CallCenterOutbound = 23,
        CallCenterDailer = 24,
        Fraud = 25,
        BoaCRM = 26,
        AnaliticData = 27,
        SSIS = 28,
        BoaStatsAtlas = 29,
        KTSiteCMS = 30,
        DBArchiveI3_IC = 31,
        Forex = 32,
        BOADWH = 33,
        KTAccessories = 34,
        Deniz = 35,
        Sedef = 36,
        BOAINC = 37,
        BOACloud = 38,
        CallCenterI3_IC_30 = 39,
        CallAnalysis = 40,
        BOAReadOnly = 41,
        Mi4bizDB = 42,
        KTTemp = 43,
        AnalyticDB = 44,
        OldBudget = 45,
        PPSReport = 46,
        BOAQueue = 47,
        KARTAL = 48,
        BoaCatalogDev = 49,
        Oracle = 50,
        DBArchive_DBKuveyt2 = 51,
        Abacus = 52,
        ContinuumDB = 53,
        SocialMedia = 54,
        APlus = 55,
        BoaERP_BI = 56,
        BoaArchiveCold = 57
    }
    export const enum DebitCreditCodeType {
        Debit = 68,
        Credit = 67
    }
    export const enum DynamicRequestType {
        SpCall = 0,
        RuleCall = 1
    }
    export const enum EODTaskType {
        SP = 1,
        WebService = 2,
        SSIS = 3,
        Orchestration = 4,
        BOAEod = 5
    }
    export const enum EODWarning {
        Sms = 1,
        Email = 2
    }
    export const enum FileSide {
        Local = 0,
        Network = 1,
        ProgramFiles = 2
    }
    export const enum FutureDatedResult {
        Return = 0,
        ExecuteMainProcess = 1,
        Deleted = 2
    }
    export const enum InformationHour {
        Zero = 0,
        Two = 2,
        Four = 4,
        Six = 6,
        Eight = 8,
        Ten = 10,
        Twelve = 12,
        Fourteen = 14,
        Sixteen = 16,
        Eighteen = 18,
        Twenty = 20,
        TwentyTwo = 22,
        TwentyFour = 24
    }
    export const enum InstanceUserWorkState {
        Pause = 1,
        Working = 2,
        Forwarded = 3,
        WaitingProcess = 4
    }
    export const enum InstanceUserWorkStateDetail {
        Working = 1,
        AutomaticForward = 2,
        TakeOn = 3,
        Illness = 4,
        OverLoad = 5,
        Meeting = 6,
        Other = 7,
        ManagerForward = 8
    }
    export const enum IntegrationType {
        WebApplication = 0,
        WindowsApplication = 1
    }
    export const enum JournalNeedType {
        Mandatory = 1,
        NegativeMandatory = 2,
        Optional = 3
    }
    export const enum PackageRequestSource {
        Pool = 0,
        Inbox = 1,
        WorkManagementPool = 2,
        Alert = 3,
        OtherResources = 4
    }
    export const enum PrayerAlert {
        None = -1,
        WarnOnTime = 0
    }
    export const enum RedirectedTransactionGroupCode {
        Invoice = 1
    }
    export const enum ReportFieldWarningStatus {
        UndefinedField = 0,
        WrongField = 1
    }
    export const enum ResourceClickedMenu {
        OutlookBarResourceTree = 1,
        OutlookBarResourceSearch = 2,
        OutlookBarReportTree = 3,
        OutlookBarReportSearch = 4,
        Favorites = 5,
        Duties = 6,
        ScreenAssistant = 7,
        Ribbon = 8,
        WorkFlow = 9,
        SearchBOA = 10,
        SearchReports = 11,
        QAT = 12,
        Mail = 13,
        BOALeftMenuSearch = 14,
        BOALeftMenu = 15,
        Shortcut = 16
    }
    export const enum ResourceOpenSource {
        Normal = 0,
        Workflow = 1,
        RevokableTransaction = 2
    }
    export const enum ResourceOpenState {
        Starting = 0,
        Started = 1,
        Explore = 2,
        ReStarting = 3
    }
    export const enum ResourceType {
        Root = 0,
        Menu = 1,
        Window = 2,
        HiddenMenu = 3,
        HiddenWindow = 4
    }
    export const enum ReverseOperation {
        Cancel = 0,
        Delete = 1
    }
    export const enum ReverseReason {
        Timeout = 0,
        Technical = 1
    }
    export const enum RevokableTransactionOperation {
        Revoke = 0,
        Delete = 1
    }
    export const enum RevokableTransactionStatus {
        Normal = 0,
        Revoked = 1,
        Deleted = 2
    }
    export const enum RibbonSizingMode {
        ImageAndTextLarge = 0,
        ImageAndTextNormal = 1,
        ImageOnly = 2
    }
    export const enum SecureDataAlgorithms {
        Rijndael = 0,
        RSA = 1
    }
    export const enum SecureDataCertificates {
        BOA_SData_General = 1,
        BOA_SData_Salary = 2
    }
    export const enum ServerItemType {
        Any = 0,
        Folder = 1,
        File = 2
    }
    export const enum Severity {
        Error = 0,
        Warning = 1,
        Information = 2,
        BusinessError = 3
    }
    export const enum SlipType {
        BranchSlip = 0,
        AtmSlip = 1,
        InternetSlip = 2
    }
    export const enum SubChannelContract {
        VirtualPos = 1,
        CarMemberSytem = 2
    }
    export const enum TaskOpenState {
        Normal = 0,
        Open = 1,
        Explore = 2,
        Update = 3
    }
    export const enum TaskState {
        NotStarted = 0,
        Working = 1,
        Completed = 2,
        Rejected = 3
    }
    export const enum TellerProcessType {
        XTM = 5,
        ATS = 2,
        IHunter = 1,
        None = 0
    }
    export const enum TimeoutReverseOperationType {
        None = 0,
        Normal = 1,
        Reverse = 2
    }
    export const enum TimeoutReverseStateType {
        WaitingForReverse = 0,
        Successful = 1,
        Failed = 2
    }
    export const enum TransactionConstraintType {
        IsAllowed = 0,
        IsAllowedByTime = 1,
        IsForbidden = 2
    }
    export const enum TransactionLimitType {
        Unit = 1,
        Amount = 2
    }
    export const enum TransactionPeriod {
        Yearly = 1,
        Quarterly = 2,
        Monthly = 3,
        Daily = 4,
        Single = 5
    }
    export const enum TransactionPersonType {
        Individual = 0,
        Company = 1
    }
    export const enum TransactionRole {
        FullyAuthorized = 1,
        Authorized = 2,
        Creator = 3,
        Approver = 4
    }
    export const enum TransactionTrackerProcessType {
        Rule = 1,
        Information = 2,
        Survey = 3
    }
    export const enum TransactionTrackerType {
        OutScope = 0,
        InScope = 1,
        Fraud = 2,
        Survey = 3,
        OnlineFraud = 4
    }
    export const enum UIType {
        WPF = 0,
        Web = 1,
        Report = 2,
        WebOuterBrowser = 3,
        One = 4
    }
    export const enum UserStatus {
        Busy = 0,
        Available = 1,
        Offline = 2,
        ShortWait = 3
    }
    export const enum UserStatusChangedBy {
        SelfChange = 0,
        ManagerChange = 1,
        SystemChange = 2,
        ServiceChange = 3
    }
    export const enum UserStatusReason {
        Available = 0,
        NatStart = 1,
        Busy = 2,
        Meeting = 3,
        OutOfWorking = 4,
        ShortBreak = 5,
        LongBreak = 6,
        Offline = 99
    }
    export const enum WhoPayCommissionBsmvAmount {
        Customer = 1,
        Bank = 2
    }
    export const enum WorkflowAlertType {
        UserTakedOn = 0,
        UserGivedBack = 1,
        UserRunned = 2,
        WorkflowFinishedWithReturn = 3,
        WorkflowFinishedWithCallMethod = 4,
        SendToPool = 5,
        SendToUser = 6
    }
    export const enum WorkflowCommitType {
        CommitIfNotErrorExists = 0,
        CommitAllways = 1
    }
    export const enum WorkFlowFinishigProcessType {
        Unknown = 0,
        DoNotCallDefaultMethod = 1,
        CallDefaultMethod = 2
    }
    export const enum WorkflowInstanceStatus {
        Running = 0,
        Finished = 1,
        TakedBack = 2,
        AutoDeleted = 3,
        TakedBackByManager = 4
    }
    export const enum WorkflowInstanceUserStatus {
        OnUser = 0,
        Runned = 1,
        GivedBack = 2
    }
    export const enum WorkflowItemType {
        StartPoint = 1,
        EndPoint = 2,
        State = 3,
        DecisionRule = 4,
        SubFLow = 5,
        Information = 6,
        Survey = 7
    }
    export const enum WorkflowResult {
        Return = 1,
        ExecuteMainProcess = 2
    }
    export const enum WorkflowRoleExtensionType {
        Manager = 1
    }
    export const enum WorkflowRoleType {
        StarterUser = 1,
        InstanceOwnerUser = 2,
        ProcessOwner = 3,
        OldProcessedUser = 4,
        MainFlowStarterUser = 5
    }
    export const enum WorkflowRuleExpressionType {
        RuleMethod = 0,
        RuleExpression = 1,
        RouteExpression = 2,
        RuleEngineCall = 3
    }
    export const enum WorkflowStateType {
        StartPoint = 0,
        EndPoint = 1,
        State = 2
    }
    interface AccessPointAccessRightContract {
        bitmask?: number;
        isAllow?: boolean;
        name?: string;
        resourceId?: number;
    }
    interface AccessPointContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        activeFrom?: Date;
        activeTo?: Date;
        hostIP?: string;
        hostName?: string;
        isDefault?: boolean;
        roleId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userId?: number;
        userName?: string;
        workgroupId?: number;
    }
    interface AccessRightReportContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        actionId?: number;
        actionName?: string;
        actionType?: number;
        actionTypeName?: string;
        activeFrom?: Date;
        activeTo?: Date;
        bitMask?: number;
        hostIP?: string;
        hostName?: string;
        isAllow?: boolean;
        isAssignable?: boolean;
        isSelect?: boolean;
        resourceCode?: string;
        resourceId?: number;
        resourceName?: string;
        roleId?: number;
        roleName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
        workGroupId?: number;
        workGroupName?: string;
    }
    interface AccountControlRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDetails?: BOA.Common.Types.AccountingDetailContract[];
    }
    interface AccountControlResponse extends BOA.Common.Types.ResponseBase {
    }
    interface AccountingContract extends BOA.Common.Types.BaseAccountingContract {
        accountingDetails?: BOA.Common.Types.AccountingDetailContract[];
    }
    interface AccountingContract2 {
        accountingList?: BOA.Common.Types.AccountingContract[];
    }
    interface AccountingDefinitionContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionName?: string;
        condition?: string;
        description?: string;
        hostIp?: string;
        hostName?: string;
        id?: number;
        registryID?: number;
        resourceId?: number;
        resourceName?: string;
        systemDate?: Date;
        tranBranchId?: string;
        typeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AccountingDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        accountingDefinitionId?: number;
        accountNumber?: string;
        accountSuffix?: string;
        amount?: string;
        assemblyName?: string;
        branchId?: string;
        codeType?: BOA.Common.Types.DebitCreditCodeType;
        comment?: string;
        condition?: string;
        costCenterId?: string;
        debitCreditCode?: string;
        description?: string;
        fec?: string;
        fer?: string;
        groupComment?: string;
        groupCondition?: string;
        hostIp?: string;
        hostName?: string;
        id?: number;
        ledgerId?: string;
        matrixColumn?: number;
        matrixTable?: number;
        productCode?: string;
        runOrder?: number;
        sectorCode?: string;
        statisticsCode?: string;
        systemDate?: Date;
        tranBranchId?: string;
        unitId?: string;
        userName?: string;
        valueDate?: string;
        visibilityOrder?: number;
    }
    interface AccountingDetailContract {
        accountBusinessKey?: number;
        accountingType?: BOA.Common.Types.AccountingType;
        accountNumber?: number;
        accountProductType?: string;
        accountSuffix?: number;
        branchId?: number;
        businessKey?: number;
        comment?: string;
        costCenterId?: number;
        credit?: number;
        currentBalance?: number;
        debit?: number;
        debitCreditCode?: number;
        fec?: number;
        fer?: number;
        ledgerId?: number;
        matrixColumn?: number;
        matrixTable?: number;
        printedCount?: number;
        productCode?: string;
        runOrder?: number;
        seqNum?: number;
        statisticsCodeList?: string[];
        tranDate?: Date;
        unitId?: number;
        valueDate?: Date;
    }
    interface AccountingErrors {
    }
    interface AccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingActionId?: number;
        accountingMessage?: BOA.Common.Types.IAccounting;
        accountingResourceId?: number;
    }
    interface AccountingResponse extends BOA.Common.Types.ResponseBase {
        accountingBranchId?: number;
        accountingBusinessKey?: number;
        accountingDate?: Date;
        accountingReference?: string;
    }
    interface ActiveAccessPointContract {
        accessPointId?: number;
        isDefault?: boolean;
        roleId?: number;
        userId?: number;
        workgroupId?: number;
    }
    interface AlertAccessContract extends BOA.Common.Types.ContractBase {
        accessPointID?: number;
        alertID?: number;
        isReaded?: boolean;
        isShowBalloon?: boolean;
    }
    interface AlertContract extends BOA.Common.Types.ContractBase {
        accessList?: BOA.Common.Types.AlertAccessContract[];
        accessPoints?: number[];
        alertID?: number;
        alertType?: BOA.Common.Types.AlertTypes;
        duration?: number;
        header?: string;
        hostIP?: string;
        hostName?: string;
        isReaded?: boolean;
        isShowBalloon?: boolean;
        message?: string;
        resourceId?: number;
        systemDate?: Date;
        tag?: string;
        userId?: number;
        userName?: string;
    }
    interface AlertRequest extends BOA.Common.Types.RequestBase {
        lastAlertId?: number;
        userId?: number;
    }
    export const enum AnnouncementTypeIds {
        BOAdle = 6,
        Education = 2,
        General = 0,
        HR = 5,
        ImportantDay = 10,
        News = 1,
        Portfolio360 = 7,
        Project = 2,
        System = 4,
    }

    export const enum ImportantDayTypes {
        Anniversary = 1,
        Absence = 2,
        Birthday = 3,
        Other = 4,
        Quiz = 5,
        Education = 6,
        Travel = 7
    }
    interface ApplicationContext {
        authentication?: BOA.Common.Types.AuthenticationContext;
        channel?: BOA.Common.Types.ChannelContext;
        communication?: BOA.Common.Types.CommunicationContext;
        globalAccess?: BOA.Common.Types.GlobalAccessContext;
        hasTellerProcessInfo?: boolean;
        isAuthenticated?: boolean;
        isBOAOfflineMode?: boolean;
        isUserOnLeave?: boolean;
        personOverTimeInfo?: BOA.Common.Types.BOAPersonOverTimeContract;
        teller?: BOA.Common.Types.TellerContext;
        user?: BOA.Common.Types.UserContract;
        userManager?: BOA.Common.Types.UserManager;
        isBOALogin?: boolean;
    }
    interface AuthenticationContext extends BOA.Common.Types.TransportationContext {
        databaseName?: string;
        databaseServerName?: string;
        loginBranchServerName?: string;
        serverDirectory?: string;
        serverName?: string;
    }
    interface AuthenticationListResponse extends BOA.Common.Types.ResponseBase {
        authenticationList?: any;
    }
    interface AuthenticationRequest extends BOA.Common.Types.RequestBase {
        authenticationCertificate?: any;
        authenticationContext?: BOA.Common.Types.AuthenticationContext;
        isReAuthenticate?: boolean;
        today?: Date;
    }
    interface AuthenticationResponse extends BOA.Common.Types.ResponseBase {
        applicationContext?: BOA.Common.Types.ApplicationContext;
        globalAccessContext?: BOA.Common.Types.GlobalAccessContext;
        tellerContext?: BOA.Common.Types.TellerContext;
        transactionRedirectionContext?: BOA.Common.Types.TransactionRedirectionContext;
    }
    interface AuthorizationAccessPointNode extends BOA.Common.Types.GenericTreeNode<BOA.Common.Types.AuthorizationAccessPointNode> {
        isCheckBoxEnabled?: boolean;
        isExpandedBefore?: boolean;
        role?: BOA.Common.Types.AuthorizationRoleContract;
        user?: BOA.Common.Types.AuthorizationUserContract;
        workgroup?: BOA.Common.Types.AuthorizationWorkgroupContract;
    }
    interface AuthorizationDefinitionContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionName?: string;
        description?: string;
        hostIp?: string;
        hostName?: string;
        id?: number;
        registryId?: number;
        resourceId?: number;
        resourceName?: string;
        systemDate?: Date;
        typeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AuthorizationDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        authorizationDefinitionId?: number;
        condition?: string;
        errorCode?: string;
        errorMessage?: string;
        id?: number;
    }
    interface AuthorizationModuleContract extends BOA.Common.Types.ContractBase {
        businessOwnerWorkgroupId?: number;
        businessOwnerWorkgroupName?: string;
        businessPowerUser?: number;
        businessPowerUser2?: number;
        businessPowerUser3?: number;
        businessPowerUserName?: string;
        businessPowerUserName2?: string;
        businessPowerUserName3?: string;
        description?: string;
        iTOwnerWorkgroupId?: number;
        iTOwnerWorkgroupName?: string;
        iTPowerUser?: number;
        iTPowerUserName?: string;
        moduleCode?: string;
        moduleId?: number;
    }
    interface AuthorizationRoleContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        isChecked?: boolean;
        roleId?: number;
        roleName?: string;
        workgroupId?: number;
        workGroupName?: string;
    }
    interface AuthorizationUserContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        isChecked?: boolean;
        name?: string;
        roleId?: number;
        roleName?: string;
        userCode?: string;
        userId?: number;
        workgroupId?: number;
        workGroupName?: string;
    }
    interface AuthorizationWorkgroupContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        name?: string;
        parentId?: number;
        workgroupId?: number;
    }
    interface AuthorizationWorkgroupNode extends BOA.Common.Types.GenericTreeNode<BOA.Common.Types.AuthorizationWorkgroupNode> {
        isChecked?: boolean;
        workgroup?: BOA.Common.Types.AuthorizationWorkgroupContract;
    }
    interface AuthorizedAccessPointContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        activeFrom?: Date;
        activeTo?: Date;
        bitmask?: number;
        fullPath?: string;
        hostIP?: string;
        hostName?: string;
        isAllow?: boolean;
        isCheckBoxEnabled?: boolean;
        isChecked?: boolean;
        roleName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
        workgroupName?: string;
    }
    interface AuthorizedContext {
        resourceNodeList?: BOA.Common.Types.ResourceNode[];
    }
    interface AuthorizedUserForWorkflowStateContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        actionId?: number;
        actionName?: string;
        name?: string;
        resourceId?: number;
        resourceName?: string;
        roleId?: number;
        roleName?: string;
        userCode?: string;
        userId?: number;
        workgroupId?: number;
        workgroupName?: string;
    }
    interface BackgroundRevokableTransactionData {
        deleteHasAccounting?: boolean;
        deleteHasAuthorization?: boolean;
        deleteHasCommission?: boolean;
        deleteHasFutureDated?: boolean;
        deleteHasSlip?: boolean;
        deleteHasTellerTransaction?: boolean;
        deleteHasWorkflow?: boolean;
        deleteMethodName?: string;
        revokeHasAccounting?: boolean;
        revokeHasAuthorization?: boolean;
        revokeHasCommission?: boolean;
        revokeHasFutureDated?: boolean;
        revokeHasSlip?: boolean;
        revokeHasTellerTransaction?: boolean;
        revokeHasWorkflow?: boolean;
        revokeMethodName?: string;
    }
    interface BanknoteContract extends BOA.Common.Types.ContractBase {
        fec?: number;
        fecCode?: string;
        name?: string;
        unitPrice?: number;
    }
    interface BanknoteProcessContract extends BOA.Common.Types.ContractBase {
        depositeAmount?: number;
        depositeCount?: number;
        fec?: number;
        fecCode?: string;
        isSmallChange?: boolean;
        name?: string;
        total?: number;
        unitPrice?: number;
        withdrawalAmount?: number;
        withdrawalCount?: number;
    }
    interface BaseAccountingContract {
        accountingKey?: number;
        businessKey?: number;
        channelId?: number;
        departmantId?: number;
        description?: string;
        hostName?: string;
        mainBusinessKey?: number;
        resourceCode?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
        tranUnitId?: number;
        userName?: string;
    }
    interface BinaryDataResponse extends BOA.Common.Types.ResponseBase {
        binaryData?: number[];
    }
    interface BOALoginContract extends BOA.Common.Types.ContractBase {
        authenticationToken?: string;
        channelId?: number;
        hostIP?: string;
        hostName?: string;
        isLogin?: number;
        loginDate?: Date;
        logoutDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
    }
    interface BOALoginRequest extends BOA.Common.Types.RequestBase {
        channelId?: number;
        dataContract?: BOA.Common.Types.BOALoginContract;
        hostIP?: string;
        isServiceUser?: boolean;
        userCode?: string;
    }
    interface BOAMessageBase {
        businessKey?: number;
    }
    interface BOAPersonOverTimeContract extends BOA.Common.Types.ContractBase {
        personIsManager?: boolean;
        personOverTimeBeginDate?: Date;
        personOverTimeBeginLimit?: Date;
        personOverTimeEndDate?: Date;
        personOverTimeEndLimit?: Date;
    }
    interface BOAPortalAnnouncementAccessContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        announcementId?: number;
    }
    interface BOAPortalAnnouncementCommentsContract extends BOA.Common.Types.ContractBase {
        announcementId?: number;
        canPublish?: boolean;
        canUpdate?: boolean;
        comment?: string;
        commentInfo?: string;
        defaultImageVisibility?: boolean;
        defaultWorkGroup?: string;
        hostName?: string;
        id?: number;
        name?: string;
        personImage?: number[];
        personImageSource?: any;
        roleName?: string;
        systemDate?: Date;
        updateAndDeleteVisibility?: boolean;
        userId?: number;
        userName?: string;
    }
    interface BOAPortalAnnouncementContract extends BOA.Common.Types.ContractBase {
        accessList?: BOA.Common.Types.BOAPortalAnnouncementAccessContract[];
        allowComments?: boolean;
        announcementType?: number;
        commentsMustBeApproved?: boolean;
        details?: string;
        finishDate?: Date;
        header?: string;
        hostName?: string;
        iconPath?: string;
        id?: number;
        imageName?: string;
        importance?: number;
        importantDayType?: number;
        isActive?: boolean;
        isDefaultImage?: boolean;
        isPublicRead?: number;
        linkText?: string;
        resourceCode?: string;
        startDate?: Date;
        startDateString?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workInboxCount?: number;
    }
    interface BoaUserContract extends BOA.Common.Types.ContractBase {
        activeFrom?: Date;
        activeTo?: Date;
        assignment?: string;
        branchId?: number;
        customerId?: number;
        email?: string;
        employeeCase?: string;
        employeeSign?: number;
        fax?: string;
        hostIP?: string;
        hostName?: string;
        initials?: string;
        isActive?: boolean;
        isAuto?: boolean;
        isServiceUser?: boolean;
        languageId?: number;
        mobilePhone?: string;
        name?: string;
        printType?: string;
        roleId?: number;
        roleName?: string;
        shortRoleName?: string;
        status?: number;
        systemDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userId?: number;
        userName?: string;
        voip?: string;
        workgroupId?: number;
        workgroupName?: string;
        workPhone?: string;
        workPhoneExtension?: string;
    }
    interface BranchContract extends BOA.Common.Types.ContractBase {
        address?: string;
        branchId?: number;
        branchType?: string;
        caseLimit?: number;
        category?: string;
        channels?: string;
        city?: number;
        clearingOffice?: number;
        closeDate?: Date;
        country?: number;
        customerid?: number;
        email?: string;
        extendedBranchId?: number;
        faxNumber?: string;
        hRBranchId?: number;
        isActive?: number;
        isInFreeZone?: number;
        journalDate?: Date;
        latitude?: string;
        longitude?: string;
        name?: string;
        officalReportDate?: Date;
        openDate?: Date;
        orderinCountry?: number;
        phoneNumber?: string;
        receiptDate?: Date;
        reginalOffice?: number;
        region?: number;
        serverName?: string;
        shortName?: string;
        type?: string;
        voip?: string;
    }
    interface BranchHRBranchContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        hRBranchId?: number;
    }
    interface BranchIntegrationReverseContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        cardNumber?: string;
        channelId?: number;
        hostName?: string;
        originalReferenceNumber?: string;
        reverseMessageString?: string;
        reverseReferenceNumber?: string;
        reverseResultCode?: string;
        reverseResultMessage?: string;
        reverseStatus?: number;
        systemDate?: Date;
        tranDate?: Date;
        transactionCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BranchIntegrationReverseRequest extends BOA.Common.Types.RequestBase {
        messageList?: BOA.Common.Types.BSObjectHelperContexData[];
    }
    interface BranchUnitContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchName?: string;
        branchUnitContractList?: BOA.Common.Types.BranchUnitContract[];
        name?: string;
        unitId?: number;
        unitType?: number;
    }
    interface BSObjectHelperContexData {
        cardNumber?: string;
        originalRequest?: any;
        referenceNumber?: string;
        requestMessage?: string;
        reverseMessageString?: string;
        saveAlways?: boolean;
        saveForReverse?: boolean;
        transactionCode?: string;
    }
    interface CacheActivateCallbackContract {
        isActive?: boolean;
    }
    interface CacheInvalidateCallbackContract {
        fullRequestName?: string;
        invalidateAll?: boolean;
    }
    interface CacheRequest extends BOA.Common.Types.RequestBase {
    }
    interface ChannelContext extends BOA.Common.Types.ContractBase {
        afterTomorrow?: string;
        applicationName?: BOA.Common.Types.ChannelApplication;
        beforeYesterday?: string;
        businessKeyBranchId?: number;
        channelId?: BOA.Common.Types.ChannelContract;
        channelName?: string;
        dbTimeout?: number;
        mainChannelId?: BOA.Common.Types.ChannelContract;
        now?: Date;
        today?: Date;
        todayUTC?: string;
        tomorrow?: string;
        yesterday?: string;
    }
    interface ClientAccessedCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerName?: string;
        date?: Date;
        userName?: string;
    }
    interface ClientPerformanceLogContract extends BOA.Common.Types.ContractBase {
        description?: string;
        duration?: number;
        processUniquIdentifier?: any;
        resourceId?: number;
        systemDate?: Date;
    }
    interface ClientResourceAccessContract extends BOA.Common.Types.ContractBase {
        accessTime?: Date;
        accessType?: number;
        actionId?: number;
        branchId?: number;
        cacheHit?: number;
        callId?: string;
        clickedMenu?: number;
        communicationKey?: string;
        executionDuration?: number;
        hostIP?: string;
        hostName?: string;
        privateMemorySize?: number;
        processDuration?: number;
        processorUsage?: number;
        resourceId?: number;
        roundTrip?: number;
        terminalId?: number;
        ticketNumber?: number;
        userName?: string;
        virtualMemorySize?: number;
    }
    interface CommandContract extends BOA.Common.Types.ContractBase {
        callId?: number;
        comAmount?: number;
        comBusinessKey?: number;
        comFec?: number;
        errorMessage?: string;
        id?: number;
        machineName?: string;
        name?: BOA.Common.Types.CommandName;
        receiveCommand?: number[];
        sendCommand?: number[];
        sessionId?: number;
        status?: BOA.Common.Types.CommandStatus;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
        xtmId?: number;
    }
    interface CommissionAccountInfoContract extends BOA.Common.Types.ContractBase {
        accountFEC?: number;
        isEmployee?: boolean;
        isKTCorporateAccount?: boolean;
        isSpecialAccount?: boolean;
    }
    interface CommissionAutoPriceContract extends BOA.Common.Types.ContractBase {
        commissionAutoPriceJournalId?: number;
        commissionAutoPriceSerializeId?: number;
        commissionJournalId?: number;
        commissionPricingGroupId?: number;
        commissionPricingGroupName?: string;
        commissionSerializeId?: number;
        description?: string;
        discountType?: BOA.Common.Types.CommissionDiscountType;
        factor?: number;
        maxFactorDiscountRate?: number;
        tranDate?: Date;
    }
    interface CommissionAutoPriceContract extends BOA.Common.Types.ContractBase {
        commissionAutoPriceJournalId?: number;
        commissionAutoPriceSerializeId?: number;
        commissionJournalId?: number;
        commissionPricingGroupId?: number;
        commissionPricingGroupName?: string;
        commissionSerializeId?: number;
        description?: string;
        discountType?: BOA.Common.Types.CommissionDiscountType;
        factor?: number;
        maxFactorDiscountRate?: number;
        tranDate?: Date;
    }
    interface CommissionBsmvContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        bSMVAmount?: number;
        commissionAmount?: number;
        minBalanceAmount?: number;
        paidAmount?: number;
    }
    interface CommissionCompaignContract extends BOA.Common.Types.ContractBase {
        packageAdvantageId?: number;
        packageLeftAmount?: number;
        packageName?: string;
        packageValue?: number;
    }
    interface CommissionContract extends BOA.Common.Types.ContractBase {
        accountBranchId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        autoCalculatedAmount?: number;
        autoPriceAmount?: number;
        autoPriceBSMVAmount?: number;
        autoPriceContractList?: BOA.Common.Types.CommissionAutoPriceContract[];
        baseAmount?: number;
        bSMVAmount?: number;
        bSMVIncluded?: boolean;
        bSMVLedgerId?: number;
        calculatedMinAmount?: number;
        calculateFromTotalAmount?: boolean;
        campaignAdvantageId?: number;
        canChangeAmount?: number;
        canChangeMaturity?: number;
        chargeAccountingBranch?: boolean;
        comment?: string;
        commissionAmount?: number;
        commissionBaseAmount?: number;
        commissionBaseCount?: number;
        commissionBranchId?: number;
        commissionCount?: number;
        commissionDefinitionFEC?: number;
        commissionPaymentType?: BOA.Common.Types.CommissionPaymentType;
        commissionPricingGroupId?: number;
        commissionRate?: number;
        commissionType?: BOA.Common.Types.CommissionType;
        countable?: boolean;
        currentLedgerId?: number;
        description?: string;
        dimensionId?: number;
        dimensionType?: number;
        doNotCheckBalance?: boolean;
        doNotEligibleDiscountControl?: boolean;
        employeeRate?: number;
        fecAmount?: number;
        generalLedgerId?: number;
        hasBSMV?: boolean;
        hasCommissionBranch?: number;
        hasInstalment?: number;
        hasSlip?: boolean;
        id?: number;
        includeEmployee?: boolean;
        includeKTCorporate?: boolean;
        includeSpecialAccount?: boolean;
        information?: string;
        instalmentList?: BOA.Common.Types.CommissionInstalmentContract[];
        isDimension?: number;
        isException?: boolean;
        isFixedDefinition?: boolean;
        isRediscount?: boolean;
        lastInstalmentDate?: Date;
        ledgerId?: number;
        maxApprovalAmount?: number;
        maxApprovalRate?: number;
        maxCommissionAmount?: number;
        maxCommissionRate?: number;
        maxDayCountOfInstalmentInterval?: number;
        maxTransactionAmount?: number;
        minAmountOfInstalment?: number;
        minApprovalAmount?: number;
        minApprovalRate?: number;
        minCommissionAmount?: number;
        minCommissionRate?: number;
        minTransactionAmount?: number;
        portfolioClass?: number;
        profitLedgerId?: number;
        rediscountBeginDate?: Date;
        rediscountEndDate?: Date;
        rediscountType?: BOA.Common.Types.CommissionRediscountType;
        requestedCommissionAmount?: number;
        requestedCommissionAmountLc?: number;
        requestedCommissionBaseFEC?: number;
        requestedCommissionFEC?: number;
        requestedCommissionFER?: number;
        slipDescription?: string;
        slipHeader?: string;
        specialAccountRate?: number;
        taxRate?: number;
        taxType?: BOA.Common.Types.CommissionTaxType;
        transactionAccountNumber?: number;
        transactionAccountSuffix?: number;
        transactionAmount?: number;
        transactionAmountFEC?: number;
        transactionAmountFER?: number;
        transactionAmountForFEC?: number;
        transactionBranchId?: number;
        transactionReference?: string;
        transactionUnitId?: number;
        useTransactionAccountNumber?: boolean;
        useTransactionAccountSuffix?: boolean;
        useTransactionBranchId?: boolean;
        whoPayBsmvAmount?: BOA.Common.Types.WhoPayCommissionBsmvAmount;
        withCustomer?: boolean;
    }
    interface CommissionContract extends BOA.Common.Types.ContractBase {
        accountBranchId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        autoCalculatedAmount?: number;
        autoPriceAmount?: number;
        autoPriceBSMVAmount?: number;
        autoPriceContractList?: BOA.Common.Types.CommissionAutoPriceContract[];
        baseAmount?: number;
        bSMVAmount?: number;
        bSMVIncluded?: boolean;
        bSMVLedgerId?: number;
        calculatedMinAmount?: number;
        calculateFromTotalAmount?: boolean;
        campaignAdvantageId?: number;
        canChangeAmount?: number;
        canChangeMaturity?: number;
        chargeAccountingBranch?: boolean;
        comment?: string;
        commissionAmount?: number;
        commissionBaseAmount?: number;
        commissionBaseCount?: number;
        commissionBranchId?: number;
        commissionCount?: number;
        commissionDefinitionFEC?: number;
        commissionPaymentType?: BOA.Common.Types.CommissionPaymentType;
        commissionPricingGroupId?: number;
        commissionRate?: number;
        commissionType?: BOA.Common.Types.CommissionType;
        countable?: boolean;
        currentLedgerId?: number;
        description?: string;
        dimensionId?: number;
        dimensionType?: number;
        doNotCheckBalance?: boolean;
        doNotEligibleDiscountControl?: boolean;
        employeeRate?: number;
        fecAmount?: number;
        generalLedgerId?: number;
        hasBSMV?: boolean;
        hasCommissionBranch?: number;
        hasInstalment?: number;
        hasSlip?: boolean;
        id?: number;
        includeEmployee?: boolean;
        includeKTCorporate?: boolean;
        includeSpecialAccount?: boolean;
        information?: string;
        instalmentList?: BOA.Common.Types.CommissionInstalmentContract[];
        isDimension?: number;
        isException?: boolean;
        isFixedDefinition?: boolean;
        isRediscount?: boolean;
        lastInstalmentDate?: Date;
        ledgerId?: number;
        maxApprovalAmount?: number;
        maxApprovalRate?: number;
        maxCommissionAmount?: number;
        maxCommissionRate?: number;
        maxDayCountOfInstalmentInterval?: number;
        maxTransactionAmount?: number;
        minAmountOfInstalment?: number;
        minApprovalAmount?: number;
        minApprovalRate?: number;
        minCommissionAmount?: number;
        minCommissionRate?: number;
        minTransactionAmount?: number;
        portfolioClass?: number;
        profitLedgerId?: number;
        rediscountBeginDate?: Date;
        rediscountEndDate?: Date;
        rediscountType?: BOA.Common.Types.CommissionRediscountType;
        requestedCommissionAmount?: number;
        requestedCommissionAmountLc?: number;
        requestedCommissionBaseFEC?: number;
        requestedCommissionFEC?: number;
        requestedCommissionFER?: number;
        slipDescription?: string;
        slipHeader?: string;
        specialAccountRate?: number;
        taxRate?: number;
        taxType?: BOA.Common.Types.CommissionTaxType;
        transactionAccountNumber?: number;
        transactionAccountSuffix?: number;
        transactionAmount?: number;
        transactionAmountFEC?: number;
        transactionAmountFER?: number;
        transactionAmountForFEC?: number;
        transactionBranchId?: number;
        transactionReference?: string;
        transactionUnitId?: number;
        useTransactionAccountNumber?: boolean;
        useTransactionAccountSuffix?: boolean;
        useTransactionBranchId?: boolean;
        whoPayBsmvAmount?: BOA.Common.Types.WhoPayCommissionBsmvAmount;
        withCustomer?: boolean;
    }
    interface CommissionDiscountInfoContract extends BOA.Common.Types.ContractBase {
        commissionAdvantageId?: number;
        commissionAmount?: number;
        commissionInformation?: string;
        isException?: boolean;
    }
    interface CommissionInstalmentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        amountLc?: number;
        bSMVAmount?: number;
        bsmvAmountLc?: number;
        collectionStatus?: number;
        collectionStatusDesc?: string;
        commissionAmount?: number;
        commissionAmountLc?: number;
        commissionInstalmentId?: number;
        commissionJournalId?: number;
        date?: Date;
        effectiveAsk?: number;
        effectiveBid?: number;
        hasUpdate?: boolean;
        isActive?: number;
        paidAmount?: number;
        paidBSMVAmount?: number;
        paidBsmvAmountLc?: number;
        paidCommissionAmountLc?: number;
        rediscountBeginDate?: Date;
        rediscountEndDate?: Date;
        totalPaidAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface CommissionInstalmentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        amountLc?: number;
        bSMVAmount?: number;
        bsmvAmountLc?: number;
        collectionStatus?: number;
        collectionStatusDesc?: string;
        commissionAmount?: number;
        commissionAmountLc?: number;
        commissionInstalmentId?: number;
        commissionJournalId?: number;
        date?: Date;
        effectiveAsk?: number;
        effectiveBid?: number;
        hasUpdate?: boolean;
        isActive?: number;
        paidAmount?: number;
        paidBSMVAmount?: number;
        paidBsmvAmountLc?: number;
        paidCommissionAmountLc?: number;
        rediscountBeginDate?: Date;
        rediscountEndDate?: Date;
        totalPaidAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface CommissionInstantContract extends BOA.Common.Types.ContractBase {
        accountClassCode?: string;
        branchId?: number;
        commissionDate?: Date;
        commissionTime?: string;
        depositCommission?: number;
        instantDiscountRatio?: number;
        sysDate?: Date;
        targetCommission?: number;
        targetDiscountRatio?: number;
    }
    interface CommissionJournalContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        autoPriceAmount?: number;
        autoPriceBSMVAmount?: number;
        autoPriceContractList?: BOA.Common.Types.CommissionAutoPriceContract[];
        baseAmount?: number;
        baseBSMVAmount?: number;
        branchId?: number;
        bsmvAmount?: number;
        bsmvAmountLc?: number;
        bSMVIncluded?: boolean;
        businessKey?: number;
        businessKeyMainTransaction?: number;
        calculatedMinAmount?: number;
        calculatedMinBSMVAmount?: number;
        chargeAccountingBranch?: boolean;
        collectionStatus?: number;
        commissionAmount?: number;
        commissionAmountLc?: number;
        commissionBaseAmount?: number;
        commissionBaseCount?: number;
        commissionCount?: number;
        commissionDefinitionTLFER?: number;
        commissionId?: number;
        commissionRate?: number;
        commissionType?: BOA.Common.Types.CommissionType;
        commLedgerId?: number;
        description?: string;
        fecAmount?: number;
        fecCommission?: number;
        fecMainTransaction?: number;
        ferMainTransaction?: number;
        hasBSMV?: boolean;
        hostName?: string;
        id?: number;
        information?: string;
        isActive?: boolean;
        isCommissionHasInstalment?: number;
        isRevised?: number;
        maxCommissionAmount?: number;
        minCommissionAmount?: number;
        paidBsmvAmount?: number;
        paidBsmvAmountLc?: number;
        paidCommissionAmount?: number;
        paidCommissionAmountLc?: number;
        parentId?: number;
        portfolioClass?: number;
        profitLedgerId?: number;
        recordSource?: number;
        requestedCommissionFEC?: number;
        requestedCommissionFER?: number;
        systemDate?: Date;
        taxRate?: number;
        taxType?: BOA.Common.Types.CommissionTaxType;
        tranDate?: Date;
        transactionAccountSuffix?: number;
        transactionAmount?: number;
        transactionReference?: string;
        transactionTLFER?: number;
        transactionUnitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        useTransactionAccountSuffix?: boolean;
    }
    interface CommissionPaymentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amountFEC?: number;
        baseFEC?: number;
        bsmvAmount?: number;
        businessKeyMainTransaction?: number;
        businessKeyPayment?: number;
        collectionAmount?: number;
        collectionFec?: number;
        collectionFer?: number;
        commissionId?: number;
        commissionInstallmentId?: number;
        commissionJournalId?: number;
        commissionPaymentId?: number;
        costCollectionId?: number;
        description?: string;
        fec?: number;
        fer?: number;
        hostName?: string;
        isActive?: boolean;
        ledgerId?: number;
        paymentAmount?: number;
        paymentAmountLc?: number;
        paymentFer?: number;
        paymentType?: number;
        safeOrAccount?: number;
        systemDate?: Date;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        updateHostname?: string;
        updateSystemDate?: Date;
        updateUsername?: string;
        userName?: string;
    }
    interface CommissionSlipRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Common.Types.CommissonSlipContract;
    }
    interface CommissionSpecialAccessPointContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        commissionDescription?: string;
        commissionKey?: string;
        commissionRatio?: number;
        id?: number;
        productCode?: string;
        productName?: string;
        resourceCode?: string;
        resourceDescription?: string;
        roleDescription?: string;
        userDescription?: string;
        workgroupDescription?: string;
    }
    interface CommissonSlipContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        bsmvAmount?: number;
        collectionAmount?: number;
        collectionFec?: number;
        commissionAmount?: number;
        customerClass?: number;
        fec?: number;
        personType?: number;
        slipDescription?: string;
        slipHeader?: string;
        systemDate?: Date;
        transactionAccountNumber?: number;
        transactionAccountSuffix?: number;
        transactionBranchId?: number;
        transactionDate?: Date;
        transactionReference?: string;
        username?: string;
    }
    interface CommunicationContext {
        actionId?: number;
        businessKey?: number;
        callId?: string;
        communicationKey?: string;
        resourceCode?: string;
        resourceId?: number;
        terminalId?: number;
        ticketNumber?: number;
    }
    interface CommunicationSummaryContract {
        beginDate?: Date;
        documentId?: number;
        documentName?: string;
        documentNo?: string;
        documentType?: number;
        documentTypeDescription?: string;
        userFullName?: string;
        userName?: string;
    }
    interface ComponentLabelStandardsContract extends BOA.Common.Types.ContractBase {
        component?: string;
        componentObject?: any;
        correctLabel?: string;
        label?: string;
        property?: string;
        warningStatus?: BOA.Common.Types.ComponentLabelWarningStatus;
    }
    interface ComputeCommissionAmountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        calculatedMinAmount?: number;
        calculateFromTotalAmount?: boolean;
        channelId?: number;
        commissionBaseCount?: number;
        commissionKey?: string;
        commissionResourceId?: number;
        customCommissionRate?: number;
        customerTypeId?: number;
        date?: Date;
        dayCountOfMaturity?: number;
        efficiency?: number;
        fec?: number;
        regionId?: number;
        resourceCode?: string;
        taxRate?: number;
        useCustomCommissionRate?: boolean;
    }
    interface Constants {
    }
    interface ContainerStartUpParameter {
        pARAM_IS_EXIST?: boolean;
        pARAM_NAME?: string;
        pARAM_VALUE?: string;
    }
    interface ContractBase {
        isSelectable?: boolean;
        isSelected?: boolean;
    }
    interface ContractBase {
        isSelectable?: boolean;
        isSelected?: boolean;
    }
    interface ContractBaseExtensions {
    }
    interface CustomerExceptionCheckContract extends BOA.Common.Types.ContractBase {
        errorCode?: number;
        hasInternalMoneyTransfer?: boolean;
        hasPunishment?: boolean;
        param1?: string;
        param2?: string;
        productType?: string;
        punishmentAmount?: number;
    }
    interface CustomerExceptionCheckResponse extends BOA.Common.Types.RequestBase {
        hasInternalMoneyTransfer?: boolean;
        hasPunishment?: boolean;
        productType?: string;
    }
    interface DebitCreditCode {
        code?: string;
        type?: BOA.Common.Types.DebitCreditCodeType;
    }
    interface DynamicRequestDefinition {
        dynamicKey?: BOA.Common.Types.IDynamicKey;
        dynamicType?: BOA.Common.Types.DynamicRequestType;
        id?: string;
        isOrchestration?: boolean;
        methodName?: string;
        propertyMapList?: BOA.Common.Types.PropertyMap[];
        requestType?: string;
    }
    interface EngineContext {
        accountingDetails?: BOA.Common.Types.AccountingDetailContract[];
        banksoftBranchMessagesList?: BOA.Common.Types.BSObjectHelperContexData[];
        doNotCollectAccountingDetails?: boolean;
        isApplicationContextReplaced?: boolean;
        isCanceled?: boolean;
        isReverse?: boolean;
        mainBusinessKey?: number;
        realApplicationContext?: BOA.Common.Types.ApplicationContext;
        reverseAccountingDetails?: BOA.Common.Types.AccountingDetailContract[];
        reverseData?: BOA.Common.Types.RevokableRequestData;
        seqNum?: number;
        transactionLog?: BOA.Common.Types.TransactionLogContract;
        transactionTrackerList?: BOA.Common.Types.TransactionTrackerContract[];
    }
    interface EnumerableDataReader {
        depth?: number;
        fieldCount?: number;
        isClosed?: boolean;
        recordsAffected?: number;
    }
    interface EnvironmentClientResourceAccessContract extends BOA.Common.Types.ContractBase {
        cRAContract?: BOA.Common.Types.ClientResourceAccessContract;
        environment?: string;
        realUserName?: string;
    }
    interface EODDefinitionContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        className?: string;
        dependencyId?: number;
        endDate?: Date;
        endTime?: string;
        eodNamespace?: string;
        eodResourceCode?: string;
        eodResourceId?: number;
        executionPeriod?: number;
        expectedDuration?: number;
        hostName?: string;
        id?: number;
        isRepeatable?: boolean;
        isScheduled?: number;
        itemDescription?: string;
        itemName?: string;
        itemOwner?: string;
        methodName?: string;
        name?: string;
        orchestrationMethod?: string;
        registryId?: number;
        retryCount?: number;
        runOrder?: number;
        scheduleHour?: number;
        scheduleMinute?: number;
        severity?: number;
        sleep?: number;
        spTimeout?: number;
        startTime?: string;
        systemDate?: Date;
        threadCount?: number;
        threadParamDefinition?: string;
        type?: number;
        userName?: string;
    }
    interface EODDefinitionRequest extends BOA.Common.Types.TransactionRequestBase {
        eODDefinitionContract?: BOA.Common.Types.EODDefinitionContract;
    }
    interface EODDependencyContract extends BOA.Common.Types.ContractBase {
        dependentItemName?: string;
        dependentName?: string;
        dependentProcessId?: number;
        dependentRunOrder?: number;
        dependentType?: number;
    }
    interface EodHeaderContext extends BOA.Common.Types.HeaderContextBase {
    }
    interface EODParameterContract extends BOA.Common.Types.ContractBase {
        code?: number;
        description?: string;
    }
    interface EODParameterListRequest extends BOA.Common.Types.RequestBase {
        businessDate?: Date;
        languageId?: number;
        paramType?: string;
        processId?: number;
    }
    interface EODProcessContract extends BOA.Common.Types.EODDefinitionContract {
        businessDate?: Date;
        enabled?: boolean;
        failed?: boolean;
        isRunning?: boolean;
        paramName?: string;
        processBeginningTime?: Date;
        processBusinessDate?: Date;
        processDuration?: number;
        processEndingTime?: Date;
        processErrorMessage?: string;
        processErrorNumber?: number;
        processId?: number;
        threadId?: number;
        tranBranchId?: number;
    }
    interface EODProcessExecutionDetailRequest extends BOA.Common.Types.RequestBase {
        date?: Date;
        processId?: number;
    }
    interface EODProcessExecutionRequest extends BOA.Common.Types.TransactionRequestBase {
        eODProcess?: BOA.Common.Types.EODProcessContract;
        eODProcessExecutionList?: BOA.Common.Types.EODProcessContract[];
        tranProcessDate?: Date;
    }
    interface EODProcessExecutionWarning extends BOA.Common.Types.ContractBase {
        id?: number;
        processId?: number;
        warningInformation?: string;
        warningType?: BOA.Common.Types.EODWarning;
    }
    interface EODProcessExecutionWarningRequest extends BOA.Common.Types.TransactionRequestBase {
        processExecutionWarningList?: BOA.Common.Types.EODProcessExecutionWarning[];
        processId?: number;
    }
    interface EODProcessListRequest extends BOA.Common.Types.TransactionRequestBase {
        isScheduled?: number;
        processDate?: Date;
        processExecutionPeriod?: number;
        processType?: number;
    }
    interface EODRequest extends BOA.Common.Types.TransactionRequestBase {
        businessDate?: Date;
        eodBranchId?: number;
        eodResourceCode?: string;
        eodResourceId?: number;
    }
    interface EODTrackContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        eodId?: number;
        eodInstanceKey?: string;
        eodKey?: string;
        eodTypeName?: string;
        hostIP?: string;
        hostName?: string;
        runningState?: number;
        serviceUserName?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        userName?: string;
    }
    interface EODTrackLogContract extends BOA.Common.Types.EODTrackContract {
        exceptionMessage?: string;
        hasException?: number;
        message?: string;
    }
    interface ExecutionItem {
        endTime?: Date;
        key?: string;
        response?: BOA.Common.Types.ResponseBase;
        results?: BOA.Common.Types.Result[];
        startTime?: Date;
        statement?: string;
        success?: boolean;
    }
    interface ExternalUserContract extends BOA.Common.Types.ContractBase {
        boaUser?: string;
        clientIP?: string;
        customerId?: number[];
        password?: string;
        userId?: number;
        userName?: string;
        whiteList?: string[];
    }
    interface ExternalUserRequest extends BOA.Common.Types.RequestBase {
        userName?: string;
    }
    interface FutureDatedEmailContract extends BOA.Common.Types.ContractBase {
        attachment?: string;
        bCC?: string;
        body?: string;
        cC?: string;
        from?: string;
        programId?: number;
        query?: string;
        spName?: string;
        subject?: string;
        templateId?: number;
        to?: string;
    }
    interface FutureDatedReportContract extends BOA.Common.Types.ContractBase {
        agreementDate?: Date;
        amount?: number;
        commission?: number;
        defaultAddress?: string;
        description?: string;
        fec?: string;
        fromAccountNumber?: number;
        fromName?: string;
        fromSuffix?: number;
        id?: number;
        phoneNumber?: string;
        productName?: string;
        status?: string;
        toAccountNumber?: number;
        toName?: string;
        toSuffix?: number;
        toTranBranch?: string;
        tranBranch?: string;
        tranBranchCity?: string;
        tranBranchId?: number;
        tranData?: number[];
        tranDate?: Date;
        tranType?: string;
    }
    interface FutureDatedResponse extends BOA.Common.Types.ResponseBase {
        futureDatedResult?: BOA.Common.Types.FutureDatedResult;
    }
    interface FutureDatedServiceScheduleContract extends BOA.Common.Types.ContractBase {
        endTime?: string;
        executeOnSpecialDay?: boolean;
        executeOnSpecialDayName?: string;
        executeOnWeekendDay?: boolean;
        executeOnWeekendDayName?: string;
        getDefaultIfNotFound?: boolean;
        hostIP?: string;
        hostName?: string;
        id?: number;
        isActive?: boolean;
        isDefaultResource?: boolean;
        repeatInterval?: string;
        resourceCode?: string;
        resourceCodeName?: string;
        startTime?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FutureDatedServiceUpdateRequest extends BOA.Common.Types.RequestBase {
        businessKey?: number;
        errorInfo?: string;
        id?: number;
        status?: number;
        time?: Date;
    }
    interface FutureDatedSMSContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        gSMNumber?: string;
        message?: string;
    }
    interface FutureDatedTransactionContract extends BOA.Common.Types.ContractBase {
        agreementDate?: Date;
        amount?: number;
        businessKey?: number;
        channelId?: number;
        commission?: number;
        description?: string;
        email?: string;
        fec?: number;
        fromAccountNumber?: number;
        fromSuffix?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        resourceCode?: string;
        sMS?: string;
        systemDate?: Date;
        toAccountNumber?: number;
        toName?: string;
        toSuffix?: number;
        tranBranch?: number;
        tranData?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FutureDatedTransactionData {
        email?: string;
        futureDatedTransactionList?: BOA.Common.Types.FutureDatedTransactionDetailContract[];
        id?: number;
        isFutureDated?: boolean;
        isFutureDatedExecution?: boolean;
        selectedDates?: Date[];
        selectedRepeatInterval?: string;
        sMS?: string;
        toName?: string;
        tranName?: string;
    }
    interface FutureDatedTransactionDetailContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        detailId?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FutureDatedTransactionDetailSelectContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        detailId?: number;
        fec?: string;
        fromAccountNumber?: number;
        fromSuffix?: number;
        id?: number;
        status?: string;
        statusCode?: number;
        toAccountNumber?: number;
        toSuffix?: number;
        tranBranch?: string;
        tranDate?: Date;
        tranType?: string;
    }
    interface GenericNode<T> {
        children?: T[];
        isExpanded?: boolean;
        isSelected?: boolean;
    }
    interface GenericTreeNode<T> {
        children?: T[];
        identity?: number;
        isCheckBoxVisible?: boolean;
        isChecked?: boolean;
        isExpanded?: boolean;
        isSelectable?: boolean;
        isSelected?: boolean;
        parent?: T;
    }
    interface GlobalAccessContext {
        globalAccessRightList?: BOA.Common.Types.GlobalAccessRight[];
        isPermitted?: (code: string) => boolean;
    }
    interface GlobalAccessRight {
        accessRight?: boolean;
        permissionCode?: string;
        permissionDescription?: string;
        permissionId?: number;
    }
    interface HeaderContextBase {
    }
    interface IAccounting {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
    }
    interface IAuthorization {
    }
    interface IBackgroundRevokableTransaction {
        backgroundRevokableTransactionData?: BOA.Common.Types.BackgroundRevokableTransactionData;
    }
    interface IBANCountryInformation {
        countryCode?: string;
        iBANCharacterLength?: number;
        iBANMask?: string;
        informationList?: BOA.Common.Types.IBANCountryInformation[];
    }
    interface IBChartable {
        pointLabel?: string;
        pointValue?: number;
    }
    interface IBMultiSeriesChartable {
        pointLabel?: string;
        pointValue?: number;
        seriesLabel?: string;
    }
    interface IBroadcastCallbackService {
    }
    interface IBroadcastService {
    }
    interface IBusinessRule {
    }
    interface ICacheable {
        doNotUseCache?: boolean;
    }
    interface ICommission {
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
    }
    interface IDynamicKey {
    }
    interface IFutureDated {
        futureDatedData?: BOA.Common.Types.FutureDatedTransactionData;
    }
    interface IGate {
    }
    interface IGateBase {
    }
    interface IIdToName {
    }
    interface IInformationMail {
        mailSendData?: BOA.Common.Types.MailSendData;
    }
    interface IInformationSMS {
        sMSSendData?: BOA.Common.Types.SMSSendData;
    }
    interface INotifiable {
        notificationData?: BOA.Common.Types.NotificationData;
    }
    interface InstanceAssignedUserContract extends BOA.Common.Types.ContractBase {
        instanceId?: number;
        instanceStateId?: number;
        instanceUserId?: number;
        name?: string;
        roleName?: string;
        userCode?: string;
        userId?: number;
        workgroupName?: string;
    }
    interface InstanceStateUserCountContract extends BOA.Common.Types.ContractBase {
        activeUserCount?: number;
        instanceStateId?: number;
    }
    interface InstantErrorContract extends BOA.Common.Types.ContractBase {
        date?: Date;
        errorDetails?: string;
        errorHeader?: string;
        errorMessage?: string;
        machineName?: string;
        resourceName?: string;
        userMessage?: string;
        userName?: string;
    }
    interface IPriority {
        priority?: number;
    }
    interface IRedirectedRequest {
    }
    interface IRevokableTransaction {
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
    }
    interface ISecureItem {
        journalLogActive?: boolean;
    }
    interface ISlip {
    }
    interface ISlipViewer {
    }
    interface ISlipWindow {
    }
    interface ITellerTransaction {
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
    }
    interface ITimeoutReverse {
        timeoutData?: BOA.Common.Types.TimeoutReverseData;
    }
    interface ITLUSDValue {
        amount?: number;
        fecInfo?: number;
        tLAmount?: number;
        uSDAmount?: number;
    }
    interface IWorkFlow {
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface IWorkFlowHistory {
    }
    interface IWorkflowResponse {
        afterExecuteSuccess?: boolean;
        flowName?: string;
        flowVerisonId?: number;
        instanceId?: number;
        isCompleted?: boolean;
        isFollowOnCurrentUser?: boolean;
        isSimulated?: boolean;
        saveStateVisible?: boolean;
        sendStateList?: BOA.Common.Types.WorkflowResultStateInfo[];
        setUserStatusChangeTimer?: boolean;
        workflowResult?: BOA.Common.Types.WorkflowResult;
    }
    interface IWorkFlowRouteHistory {
    }
    interface IWorkFlowSimpleHistory {
    }
    interface IWorkFlowTaskList {
    }
    interface IWorkFlowUserNotes {
    }
    interface JournalContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionName?: string;
        applicationServerName?: string;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        communicationKey?: string;
        duration?: number;
        executionTree?: number[];
        hasAccounting?: number;
        hasCommission?: number;
        hasException?: number;
        hasSlip?: number;
        hasTellerTransaction?: number;
        hostIP?: string;
        hostName?: string;
        isFriendly?: boolean;
        languageId?: number;
        mainAccountNumber?: number;
        mainAmount?: number;
        mainBranchId?: number;
        mainCustomerName?: string;
        mainFec?: number;
        mainSuffix?: number;
        methodName?: string;
        networkOverheadDuration?: number;
        request?: number[];
        requestSize?: number;
        requestType?: number;
        resourceCode?: string;
        resourceId?: number;
        resourceName?: string;
        response?: number[];
        responseSize?: number;
        severity?: BOA.Common.Types.Severity;
        systemDate?: Date;
        terminalId?: number;
        ticketNumber?: number;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
        transactionName?: string;
        userName?: string;
        windowInstanceId?: any;
        withNetworkDuration?: number;
        withoutNetworkDuration?: number;
    }
    interface LastAccessOfResourceContract extends BOA.Common.Types.ContractBase {
        accessCount?: number;
        accessTime?: Date;
        iconPath?: string;
        name?: string;
        resourceCode?: string;
        resourceId?: number;
        uIType?: BOA.Common.Types.UIType;
    }
    interface LimitConsumptionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerType?: number;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        limitCode?: string;
        limitDetailId?: number;
        period?: number;
        periodBeginDate?: Date;
        periodEndDate?: Date;
        remainedAmount?: number;
        remainedUnit?: number;
        role?: number;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LimitDefinitionContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        beginTime?: any;
        definition?: string;
        endDate?: Date;
        endTime?: any;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        isNew?: boolean;
        limitCode?: string;
        limitDetailList?: BOA.Common.Types.LimitDetailContract[];
        limitTransactionList?: BOA.Common.Types.LimitTransactionContract[];
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workflowInstanceId?: number;
    }
    interface LimitDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        beginDate?: Date;
        endDate?: Date;
        fec?: number;
        globalAmount?: number;
        globalFEC?: number;
        globalUnit?: number;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        isNew?: boolean;
        limitCode?: string;
        limitConsumption?: BOA.Common.Types.LimitConsumptionContract;
        limitControlType?: boolean;
        limitType?: number;
        minAmount?: number;
        period?: number;
        personId?: number;
        personType?: number;
        role?: number;
        systemDate?: Date;
        unit?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LimitTransactionContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        channelId?: number;
        channelName?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        isNew?: boolean;
        limitCode?: string;
        systemDate?: Date;
        transactionCode?: string;
        transactionDetail?: string;
        transactionDetailDesc?: string;
        transactionGroup?: string;
        transactionGroupDesc?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LogContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionName?: string;
        applicationSide?: BOA.Common.Types.ApplicationSide;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        communicationKey?: string;
        duration?: number;
        exceptionMessage?: string;
        hasException?: number;
        hostIP?: string;
        hostName?: string;
        isFriendly?: boolean;
        languageId?: number;
        mainAccountNumber?: number;
        message?: string;
        resourceCode?: string;
        resourceId?: number;
        resourceName?: string;
        resultType?: string;
        serverName?: string;
        sqlQuery?: string;
        systemDate?: Date;
        totalDuration?: number;
        tranBranchId?: number;
        tranDate?: Date;
        transactionName?: string;
        userName?: string;
    }
    interface MailPoolActiveFlowItemAuthorizedActionUserContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        commandName?: string;
        email?: string;
        instanceStateId?: number;
        resActDescription?: string;
        resActGroupName?: string;
        sortId?: number;
        userCode?: string;
        userId?: number;
    }
    interface MailPoolActiveFlowItemStateContract extends BOA.Common.Types.ContractBase {
        checkOwnerWorkGroup?: boolean;
        checkTransactionWorkGroup?: boolean;
        concurrentOwnerCount?: number;
        description?: string;
        flowId?: number;
        flowVersionId?: number;
        instanceId?: number;
        instanceStartDate?: Date;
        instanceStateId?: number;
        instanceTranDate?: Date;
        ownerWorkGroupId?: number;
        resourceId?: number;
        starterUser?: string;
        starterUserDescription?: string;
        stateId?: number;
        workGroupId?: number;
    }
    interface MailPoolActiveFlowItemUserContract extends BOA.Common.Types.ContractBase {
        instanceStateId?: number;
        runId?: number;
        status?: number;
        userCode?: string;
    }
    interface MailPoolContract extends BOA.Common.Types.ContractBase {
        activeItemAndStates?: BOA.Common.Types.MailPoolActiveFlowItemStateContract[];
        activeItemAtUserInbox?: BOA.Common.Types.MailPoolActiveFlowItemUserContract[];
        authorizedActionUserItems?: BOA.Common.Types.MailPoolActiveFlowItemAuthorizedActionUserContract[];
    }
    interface MailPoolItemUserContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        commandName?: string;
        email?: string;
        flowId?: number;
        instanceId?: number;
        instanceStateId?: number;
        resActDescription?: string;
        resActGroupName?: string;
        sortId?: number;
        stateId?: number;
        userCode?: string;
        userDescription?: string;
        userId?: number;
    }
    interface MailSendData {
        attachmentPath?: string;
        bCC?: string;
        body?: string;
        cC?: string;
        from?: string;
        subject?: string;
        to?: string;
    }
    interface MessageContract extends BOA.Common.Types.ContractBase {
        className?: string;
        code?: number;
        description?: string;
        groupId?: number;
        groupName?: string;
        languageId?: number;
        propertyName?: string;
        severity?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface MobileOTPActivationItem {
        mobileOTPActivationCode?: string;
        mobileOTPActivationId?: number;
        mobileOTPAppVersion?: string;
        mobileOTPCreateDate?: Date;
        mobileOTPCustomerId?: string;
        mobileOTPDeviceInfo?: string;
        mobileOTPExpireDate?: Date;
        mobileOTPIsActive?: boolean;
        mobileOTPIsLocked?: boolean;
        mobileOTPKey?: string;
        mobileOTPLastLockedDate?: Date;
        mobileOTPLastOTP?: string;
        mobileOTPNTUsername?: string;
        mobileOTPRetryCount?: number;
        mobileOTPSerialNumber?: string;
        mobileOTPType?: string;
        mobileOTPUserId?: string;
        mobileOTPWrongInputCount?: number;
    }
    interface MobileOTPAppActivationContract extends BOA.Common.Types.ContractBase {
        activationCode?: string;
        key?: string;
        lastOTP?: string;
        serialNo?: string;
        version?: string;
    }
    interface MobileOTPCheckOTPContract extends BOA.Common.Types.ContractBase {
        result?: boolean;
    }
    interface MobileOTPGenerateActivationCodeContract extends BOA.Common.Types.ContractBase {
        generatedActivationCode?: string;
    }
    interface MobileOTPRelationContract extends BOA.Common.Types.ContractBase {
        mobileOTPRelationCustomerId?: number;
        mobileOTPRelationUserId?: number;
    }
    interface MobilePoolContract extends BOA.Common.Types.ContractBase {
        actionList?: BOA.Common.Types.MobilePoolItemActionContract[];
        approverCount?: number;
        atUserInbox?: boolean;
        canStarterUserApprove?: boolean;
        checkOwnerWorkGroup?: boolean;
        checkTransactionWorkGroup?: boolean;
        concurrentOwnerCount?: number;
        description?: string;
        divitFlowId?: string;
        divitInstanceId?: string;
        fec?: number;
        fecCode?: string;
        flowId?: number;
        flowName?: string;
        flowVersionId?: number;
        instanceId?: number;
        instanceStartDate?: Date;
        instanceStateId?: number;
        instanceTranDate?: Date;
        isEditable?: boolean;
        itemNumber?: number;
        mainAccountNumber?: number;
        mainAmount?: number;
        mainBranchId?: number;
        mainBranchName?: string;
        mainCustomerName?: string;
        mainSuffix?: number;
        ownerWorkGroupId?: number;
        priority?: number;
        priorityText?: string;
        resourceId?: number;
        resourceName?: string;
        rootMenu?: string;
        starterUser?: string;
        starterUserDescription?: string;
        starterUserLongName?: string;
        starterWorkgroupName?: string;
        stateId?: number;
        stateName?: string;
        stateType?: number;
        workGroupId?: number;
    }
    interface MobilePoolItemActionContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        commandName?: string;
        commandText?: string;
        instanceStateId?: number;
        sortId?: number;
    }
    interface MobileRouteHistoryContract extends BOA.Common.Types.ContractBase {
        actionName?: string;
        actionStatusTitle?: string;
        bubleColour?: string;
        endDate?: Date;
        imageBytes?: number[];
        imageSource?: any;
        instanceStateId?: number;
        itemType?: number;
        itemTypeName?: string;
        orderNumber?: number;
        showRelatedUsers?: boolean;
        startDate?: Date;
        stateName?: string;
        status?: number;
        statusColor?: string;
        subInstanceId?: number;
        userAssignDate?: Date;
        userCode?: string;
        userName?: string;
        voip?: string;
        workGroupName?: string;
    }
    interface MultipleRequest extends BOA.Common.Types.RequestBase {
        requestList?: BOA.Common.Types.RequestBase[];
        useSameReference?: boolean;
        useSameTransaction?: boolean;
    }
    interface MultipleResponse extends BOA.Common.Types.ResponseBase {
        responseList?: BOA.Common.Types.ResponseBase[];
        success?: boolean;
    }
    interface MultipleTransactionRequest extends BOA.Common.Types.TransactionRequestBase {
        requestList?: BOA.Common.Types.RequestBase[];
        useSameAccountingRef?: boolean;
    }
    interface MultipleTransactionResponse extends BOA.Common.Types.ResponseBase {
        responseList?: BOA.Common.Types.ResponseBase[];
    }
    interface NotificationData {
        accountNumber?: number;
        amount?: number;
        beginHour?: BOA.Common.Types.InformationHour;
        endHour?: BOA.Common.Types.InformationHour;
        notificationCode?: string;
        parameters?: any;
        personList?: number[];
        relationshipTypeList?: number[];
        templateCode?: string;
    }
    interface OpenDataForApproveRequestPackContract extends BOA.Common.Types.ContractBase {
        inQueue?: boolean;
        instanceId?: number;
        instanceRunId?: number;
        instanceStateId?: number;
        isInstanceInInbox?: boolean;
        itemNumber?: number;
        requestSource?: BOA.Common.Types.PackageRequestSource;
        status?: BOA.Common.Types.UserStatus;
        userStatusContract?: BOA.Common.Types.UserStatusContract;
        workStateContract?: BOA.Common.Types.WorkflowChangeWorkStateContract;
    }
    interface PaperSize {
        height?: number;
        width?: number;
    }
    interface PropertyMap {
        propertyValue?: any;
        sourcePropertyName?: string;
        targetPropertyName?: string;
    }
    interface RedirectedTransactionContract {
        groupCode?: string;
        serverName?: string;
        typeName?: string;
    }
    interface RegistryContract extends BOA.Common.Types.GenericNode<BOA.Common.Types.RegistryContract> {
        assemblyName?: string;
        iconPath?: string;
        registryDescription?: string;
        registryID?: number;
        typeName?: string;
    }
    interface RegistryDescriptionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        registryDescriptionID?: number;
        registryGroupID?: number;
        registryID?: number;
    }
    interface RegistryGroupContract extends BOA.Common.Types.GenericNode<BOA.Common.Types.RegistryGroupContract> {
        groupName?: string;
        iconPath?: string;
        registryGroupID?: number;
        upperGroupID?: number;
    }
    interface RegistryGroupMappingContract extends BOA.Common.Types.ContractBase {
        registryGroupID?: number;
        registryGroupMappingID?: number;
        registryID?: number;
    }
    interface RelatedEducationContract extends BOA.Common.Types.ContractBase {
        educationId?: number;
        educationName?: string;
        linkText?: string;
        resourceId?: number;
    }
    interface RelationInfo {
        isFlowWait?: boolean;
        isStateWait?: boolean;
        mainInstanceId?: number;
        mainStateId?: number;
        waitStateId?: number;
    }
    interface ReportBaseExportToExcelContract extends BOA.Common.Types.ContractBase {
        databaseDuration?: number;
        exportDuration?: number;
        fileName?: string;
        filePath?: string;
        rowCount?: number;
        sqlCommand?: string;
    }
    interface ReportBaseFieldInfo extends BOA.Common.Types.ContractBase {
        index?: number;
        name?: string;
        type?: any;
    }
    interface ReportBaseGenericRow extends BOA.Common.Types.ContractBase {
        item?: any;
        itemArray?: any[];
        table?: BOA.Common.Types.ReportBaseGenericRow[];
    }
    interface ReportFieldStandardsContract extends BOA.Common.Types.ContractBase {
        correctField?: string;
        reportField?: string;
        warningStatus?: BOA.Common.Types.ReportFieldWarningStatus;
    }
    interface ReportIdentityContract extends BOA.Common.Types.ContractBase {
        avarageDuration?: number;
        description?: string;
        lastMonthUsage?: number;
        name?: string;
        ownerUserCode?: string;
        ownerUserId?: number;
        ownerUserName?: string;
        ownerVoip?: string;
        personImage?: number[];
        reportId?: number;
        reportTypeName?: string;
        systemDate?: Date;
        updateSystemDate?: Date;
        workGroupName?: string;
    }
    interface ReportRequestBase extends BOA.Common.Types.RequestBase {
    }
    interface MessagingRequest extends BOA.Common.Types.RequestBase {
        messagingGroupName: string;
        messagingPropertyName: string;
    }
    interface RequestBase extends BOA.Common.Types.BOAMessageBase {
        actionId?: number;
        customerId?: number;
        languageId?: number;
        mainAccountNumber?: number;
        mainSuffix?: number;
        methodName?: string;
        resourceCode?: string;
        resourceId?: number;
        transactionCode?: string;
        windowInstanceId?: any;
    }
    interface RequestCopyHelper {
    }
    interface RequiredObjectList {
        hiddenResourceTypeList?: number[];
        resourceActionList?: BOA.Common.Types.ResourceActionContract[];
        resourceActionListDictionary?: any;
        resourceList?: BOA.Common.Types.ResourceContract[];
        resourcePropList?: BOA.Common.Types.ResourcePropContract[];
        workflowActionReasonList?: BOA.Common.Types.WorkflowActionReasonContract[];
        workflowDataOfResourceList?: BOA.Common.Types.WorkflowDataOfResourceContract[];
    }
    interface ResourceActionContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionType?: number;
        commandName?: string;
        description?: string;
        groupName?: string;
        hasAccounting?: boolean;
        hasAuthorization?: boolean;
        hasCommission?: boolean;
        hasFutureDated?: boolean;
        hasRevokableTransaction?: boolean;
        hasSlip?: boolean;
        hasTellerTransaction?: boolean;
        hasWorkflow?: boolean;
        hostIP?: string;
        hostName?: string;
        iconPath?: string;
        isAssignable?: boolean;
        isVirtual?: boolean;
        name?: string;
        resourceId?: number;
        sortId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ResourceActionShortcutsContract extends BOA.Common.Types.ContractBase {
        actionName?: string;
        shortcutName?: string;
        sortId?: number;
    }
    interface ResourceActionStandardsContract extends BOA.Common.Types.ContractBase {
        actionName?: string;
        correctActionName?: string;
        correctIconPath?: string;
        iconPath?: string;
        warningStatus?: BOA.Common.Types.ActionStandardsWarningStatus;
    }
    interface ResourceContract {
        businessOwnerWorkgroupId?: number;
        channelId?: number;
        description?: string;
        fullPath?: string;
        hasAccounting?: boolean;
        hostIP?: string;
        hostName?: string;
        iconPath?: string;
        isActive?: boolean;
        isNew?: boolean;
        isRevokable?: boolean;
        isWorkflow?: boolean;
        iTOwnerWorkgroupId?: number;
        moduleCode?: string;
        name?: string;
        parentId?: number;
        resourceCode?: string;
        resourceId?: number;
        sortId?: number;
        systemDate?: Date;
        typeId?: number;
        uIType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ResourceNode extends BOA.Common.Types.GenericTreeNode<BOA.Common.Types.ResourceNode> {
        assemblyName?: string;
        businessOwnerWorkgroupName?: string;
        channelId?: number;
        className?: string;
        clickedMenu?: BOA.Common.Types.ResourceClickedMenu;
        description?: string;
        fullPath?: string;
        helpURL?: string;
        iconPath?: string;
        id?: number;
        isActive?: boolean;
        isHidden?: boolean;
        isLeaf?: boolean;
        isNew?: boolean;
        isPersonalResource?: boolean;
        isRevokable?: boolean;
        isWorkflow?: boolean;
        lastAccessTime?: Date;
        moduleCode?: string;
        name?: string;
        openedBy?: BOA.Common.Types.ResourceOpenSource;
        openState?: BOA.Common.Types.ResourceOpenState;
        resourceActionList?: BOA.Common.Types.ResourceActionContract[];
        resourceCode?: string;
        ribbonToolSizingMode?: BOA.Common.Types.RibbonSizingMode;
        searchTag?: string;
        sortId?: number;
        systemDate?: Date;
        toolTipImagePath?: string;
        typeId?: number;
        uIType?: BOA.Common.Types.UIType;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workflowData?: BOA.Common.Types.ResourceNodeWorkflowData;
    }
    interface ResourceNodeWorkflowData {
        firsActionInfos?: BOA.Common.Types.WorkflowFirstActionInfoContract[];
        flowMap?: BOA.Common.Types.ResourceNodeWorkflowMapData[];
        flowVersionData?: any;
        startStateActions?: BOA.Common.Types.WorkFlowResourceActionContract[];
        workflowActionReasons?: BOA.Common.Types.WorkflowActionReasonContract[];
        workflowActiveStateId?: number;
        workflowActiveVersionId?: number;
    }
    interface ResourceNodeWorkflowMapData {
        actionId?: number;
        activeVersionId?: number;
        flowId?: number;
    }
    interface ResourceNodeWorkflowVersionData {
        flowVersionId?: number;
        isActiveVersion?: boolean;
        startStateId?: number;
        stateActionList?: any;
    }
    interface ResourcePropContract {
        assemblyName?: string;
        className?: string;
        description?: string;
        helpURL?: string;
        hostIP?: string;
        hostName?: string;
        isRevokable?: boolean;
        isWorkflow?: boolean;
        moduleCode?: string;
        resourceCode?: string;
        resourceId?: number;
        ribbonSizingMode?: BOA.Common.Types.RibbonSizingMode;
        searchTag?: string;
        systemDate?: Date;
        toolTipImagePath?: string;
        uIType?: BOA.Common.Types.UIType;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ResourceRelationContract extends BOA.Common.Types.ContractBase {
        relatedResourceId?: number;
        relatedResourceName?: string;
        resourceId?: number;
    }
    interface ResourceReportContract {
        businessOwnerWorkgroupName?: string;
        channelId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        iconPath?: string;
        isActive?: boolean;
        isNew?: boolean;
        isUserAuthorized?: boolean;
        moduleCode?: string;
        name?: string;
        parentId?: number;
        pathName?: string;
        reportType?: number;
        resourceCode?: string;
        resourceId?: number;
        sortId?: number;
        systemDate?: Date;
        typeId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ResourceSubChannelContract {
        resourceId?: number;
        subChannelId?: BOA.Common.Types.SubChannelContract;
    }
    interface ResourceTransactionChannelContract {
        channel?: BOA.Common.Types.ChannelContract;
        resourceCode?: string;
        transactionCode?: string;
        transactionName?: string;
    }
    interface ResponseBase extends BOA.Common.Types.BOAMessageBase {
        endTime?: Date;
        gottenFromCache?: boolean;
        isInitializedByBOA?: boolean;
        key?: string;
        maxSeverityLevel?: BOA.Common.Types.Severity;
        results?: BOA.Common.Types.Result[];
        startTime?: Date;
        success?: boolean;
    }
    interface GenericResponse<T> extends BOA.Common.Types.ResponseBase {
        value: T;
    }
    interface ResponseBaseExtensions {
    }
    interface Result {
        applicationSide?: BOA.Common.Types.ApplicationSide;
        errorCode?: string;
        errorMessage?: string;
        exception?: string;
        isFriendly?: boolean;
        params?: string[];
        severity?: BOA.Common.Types.Severity;
    }
    interface ReverseAccountControllerContract extends BOA.Common.Types.ContractBase {
        errorNumber?: number;
        hasInternalMoneyTransfer?: boolean;
        param1?: string;
        param2?: string;
        reverseInternalMoneyTransferBusinessKey?: number;
        reversePunishmentBusinessKey?: number;
    }
    interface ReverseAccountControlRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDetails?: BOA.Common.Types.AccountingDetailContract[];
        operation?: BOA.Common.Types.ReverseOperation;
        reverseBusinessKey?: number;
    }
    interface ReverseAccountControlResponse extends BOA.Common.Types.ResponseBase {
    }
    interface RevokableRequestData extends BOA.Common.Types.ContractBase {
        businessKeyToRevoke?: number;
        operation?: BOA.Common.Types.RevokableTransactionOperation;
        revokeDescription?: string;
    }
    interface RoleContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        isAuto?: boolean;
        name?: string;
        roleId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RoundTripInfo {
        isFromCache?: boolean;
        requestName?: string;
    }
    interface SafeDefinitionContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        iP?: string;
        isActive?: boolean;
        key?: string;
        model?: string;
        safeId?: number;
        safeName?: string;
        safeType?: number;
    }
    interface SecureDataKeyObject {
        encryptionKey?: string;
        secureDataCertificate?: BOA.Common.Types.SecureDataCertificates;
    }
    interface SecureDataKeyRequest extends BOA.Common.Types.RequestBase {
    }
    interface ServerItemContract extends BOA.Common.Types.ContractBase {
        fullPath?: string;
        iconPath?: string;
        itemType?: BOA.Common.Types.ServerItemType;
        name?: string;
    }
    interface ServerItemNode extends BOA.Common.Types.GenericTreeNode<BOA.Common.Types.ServerItemNode> {
        serverItem?: BOA.Common.Types.ServerItemContract;
    }
    interface ServiceUserContract {
        algorithm?: BOA.Common.Types.Algorithm;
        certificateName?: string;
        iPAddressList?: string[];
        password?: string;
        userName?: string;
    }
    interface SessionExpiredCallbackContract {
    }
    interface ShortcutsActionContract extends BOA.Common.Types.ContractBase {
    }
    interface SlipContract extends BOA.Common.Types.ContractBase {
        slipAmount?: string;
        slipBody?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipDefinition?: BOA.Common.Types.SlipDefinitionContract;
        slipFEC?: string;
        slipLeftHeader?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipPrintCount?: number;
        slipRightHeader?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipTitle?: string;
    }
    interface SlipDataContract extends BOA.Common.Types.ContractBase {
        slipDefinitionDetailContractList?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipDefinitionId?: number;
    }
    interface SlipDataInformationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        businessKey?: number;
        fec?: number;
        fromAccountNumber?: number;
        languageId?: number;
        printCount?: number;
        resourceReference?: number;
        slipDescription?: string;
        slipReferenceUserName?: string;
        tranDate?: Date;
    }
    interface SlipDefinitionContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        assemblyName?: string;
        condition?: string;
        description?: string;
        id?: number;
        key?: string;
        languageId?: number;
        registryId?: number;
        resourceId?: number;
        slipType?: BOA.Common.Types.SlipType;
    }
    interface SlipDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        fieldName?: string;
        fieldValue?: string;
        id?: number;
        isEnabled?: boolean;
        region?: string;
        runOrder?: number;
        slipDefinitionId?: number;
    }
    interface SlipErrors {
    }
    interface SMSSendData {
        body?: string;
        to?: string;
    }
    interface SpDynamicKey {
        databaseName?: string;
        spName?: string;
    }
    interface SpDynamicRequestDefinition extends BOA.Common.Types.DynamicRequestDefinition {
        database?: BOA.Common.Types.Databases;
        spName?: string;
    }
    interface StaffBirthDayItem {
        birthDate?: string;
        fullName?: string;
        org?: string;
    }
    interface StaffBirthDayListResponseContract {
        list?: BOA.Common.Types.StaffBirthDayItem[];
    }
    interface StaffServiceContracts {
    }
    interface StaffServiceItem {
        author?: string;
        description?: string;
        guid?: string;
        link?: string;
        pubDate?: string;
        title?: string;
    }
    interface StaffServiceListResponseContract {
        description?: string;
        generator?: string;
        language?: string;
        lastBuildDate?: string;
        link?: string;
        list?: BOA.Common.Types.StaffServiceItem[];
        title?: string;
        tTL?: string;
    }
    interface StateSaveStateFlatContract extends BOA.Common.Types.ContractBase {
        actionList?: number[];
        averageDuration?: string;
        saveStateName?: string;
        stateName?: string;
        workgroupName?: string;
    }
    interface StatusMessagesContract extends BOA.Common.Types.ContractBase {
        dialogType?: number;
        message?: string;
        resourceName?: string;
        systemDate?: Date;
    }
    interface SubChannelContext {
        subChannelId?: BOA.Common.Types.SubChannelContract;
        subChannelName?: string;
    }
    interface SurveyAccessContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        surveyId?: number;
    }
    interface SurveyChoiceContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        choiceId?: number;
        count?: number;
        hostName?: string;
        sortId?: number;
        surveyId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyContract extends BOA.Common.Types.ContractBase {
        accessList?: BOA.Common.Types.SurveyAccessContract[];
        beginDate?: Date;
        choices?: BOA.Common.Types.SurveyChoiceContract[];
        description?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        isActiveSurvey?: boolean;
        isAnswered?: boolean;
        isMultiSelectionEnabled?: boolean;
        isPublicRead?: number;
        isVotedAny?: boolean;
        maxMultiAnswerCount?: number;
        question?: string;
        surveyId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface Task {
        branchId?: number;
        className?: string;
        eodNamespace?: string;
        eodResourceCode?: string;
        eodResourceId?: number;
        failed?: boolean;
        methodName?: string;
        orchestrationName?: string;
        spTimeout?: number;
        taskName?: string;
        taskType?: BOA.Common.Types.EODTaskType;
    }
    interface TaskCompositeContract extends BOA.Common.Types.ContractBase {
        dataContract?: BOA.Common.Types.TaskContract;
        scheduleInfo?: BOA.Common.Types.TaskScheduleContract;
        taskInformedList?: BOA.Common.Types.AuthorizedAccessPointContract[];
        taskResponsibleList?: BOA.Common.Types.AuthorizedAccessPointContract[];
        userAuthentication?: BOA.Common.Types.TaskUserAuthentication;
    }
    interface TaskContract extends BOA.Common.Types.ContractBase {
        description?: string;
        divitDescription?: string;
        divitId?: string;
        divitInstanceId?: string;
        hasRelation?: boolean;
        hasStartedPart?: boolean;
        hostName?: string;
        informedParameter?: number;
        informedPeriod?: number;
        instanceId?: number;
        isFullTask?: boolean;
        isOneTimeTask?: boolean;
        isSingularTask?: boolean;
        name?: string;
        relationData?: BOA.Common.Types.RelationInfo;
        responsibleParameter?: number;
        responsiblePeriod?: number;
        systemDate?: Date;
        taskId?: number;
        taskState?: BOA.Common.Types.TaskState;
        taskStateDescription?: string;
        taskType?: number;
        taskTypeDescription?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userAccessPoint?: number;
        userName?: string;
        warnInformedOnComplete?: boolean;
        warnResponsibleOnTime?: boolean;
        warnStarterUserOnComplete?: boolean;
    }
    interface TaskListContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        description?: string;
        divitDescription?: string;
        divitId?: string;
        divitInstanceId?: string;
        endDate?: Date;
        hasStartedPart?: boolean;
        hostName?: string;
        informedParameter?: number;
        informedPeriod?: number;
        instanceId?: number;
        isFullTask?: boolean;
        isOneTimeTask?: boolean;
        isSingularTask?: boolean;
        name?: string;
        percentage?: number;
        relationData?: BOA.Common.Types.RelationInfo;
        responsibleParameter?: number;
        responsiblePeriod?: number;
        systemDate?: Date;
        taskId?: number;
        taskRowId?: number;
        taskState?: BOA.Common.Types.TaskState;
        taskStateDescription?: string;
        taskType?: number;
        taskTypeDescription?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userAuthentication?: BOA.Common.Types.TaskUserAuthentication;
        userCode?: string;
        userName?: string;
        userRoleName?: string;
        warnInformedOnComplete?: boolean;
        warnResponsibleOnTime?: boolean;
        warnStarterUserOnComplete?: boolean;
    }
    interface TaskOpenInfo {
        beginDate?: Date;
        description?: string;
        divitDescription?: string;
        divitId?: string;
        divitInstanceId?: string;
        endDate?: Date;
        name?: string;
        openState?: BOA.Common.Types.TaskOpenState;
        rowId?: number;
        taskId?: number;
    }
    interface TaskScheduleContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        dateList?: Date[];
        endDate?: Date;
        parameter1?: number;
        parameter2?: number;
        parameter3?: number;
        parameter4?: string;
        period?: number;
        periodDetail?: number;
        taskId?: number;
    }
    interface TaskSummaryContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        createDate?: Date;
        description?: string;
        endDate?: Date;
        name?: string;
        responsibleAccessPointIdList?: number[];
        taskId?: number;
        taskRowId?: number;
        taskState?: BOA.Common.Types.TaskState;
        taskStateDescription?: string;
        userName?: string;
    }
    interface TaskTrackContract extends BOA.Common.Types.ContractBase {
        description?: string;
        isSingularTask?: boolean;
        name?: string;
        percentage?: number;
        processDate?: Date;
        state?: BOA.Common.Types.TaskState;
        stateDescription?: string;
        taskId?: number;
        taskInformedList?: number[];
        taskRowId?: number;
        userAccessPoint?: number;
        userCode?: string;
        warnInformedOnComplete?: boolean;
        warnStarterUserOnComplete?: boolean;
    }
    interface TaskUserAuthentication {
        isInformedUser?: boolean;
        isManagerUser?: boolean;
        isResponsibleUser?: boolean;
    }
    interface TellerContext {
        aTSSafeId?: number;
        aTSTellerContract?: BOA.Common.Types.TellerSafeContract;
        manuelSafeId?: number;
        tellerContractList?: BOA.Common.Types.TellerSafeContract[];
        tellerProcessTypeInfo?: BOA.Common.Types.TellerProcessType;
    }
    interface TellerContract extends BOA.Common.Types.ContractBase {
        accountingSafeNumber?: number;
        branchName?: string;
        isBranchSafeManager?: boolean;
        isDirty?: boolean;
        name?: string;
        tellerProcessType?: number;
        userName?: string;
    }
    interface TellerSafeContract {
        accountingSafeNumber?: number;
        iP?: string;
        key?: string;
        safeId?: number;
        safeType?: number;
        tellerProcessTypeInfo?: BOA.Common.Types.TellerProcessType;
        userName?: string;
        userSide?: string;
    }
    interface TellerTransactionContract extends BOA.Common.Types.ContractBase {
        banknoteName?: string;
        businessKey?: number;
        depositCount?: number;
        depositeAmount?: number;
        description?: string;
        fec?: number;
        fecFractionName?: string;
        fecName?: string;
        isOffline?: number;
        resourceId?: number;
        safeId?: number;
        transactionId?: number;
        transactionType?: number;
        unitPrice?: number;
        userName?: string;
        withdrawalAmount?: number;
        withDrawCount?: number;
    }
    interface TestInformationEngineResultContract extends BOA.Common.Types.ContractBase {
        attachmentPath?: string;
        bCC?: string;
        body?: string;
        cC?: string;
        from?: string;
        informationCode?: string;
        subject?: string;
        to?: string;
    }
    interface TimeoutOriginalRequestContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        hasReverse?: number;
        hostName?: string;
        resultMessage?: string;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        transactionGUID?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TimeoutOriginalRequestRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Common.Types.TimeoutOriginalRequestContract;
    }
    interface TimeoutOriginalRequestStates {
        success?: number;
        unSuccess?: number;
    }
    interface TimeoutReverseData {
        businessKeyToReverse?: number;
        operationType?: BOA.Common.Types.TimeoutReverseOperationType;
        reverseReason?: BOA.Common.Types.ReverseReason;
        transactionGuid?: string;
        transactionGuidToReverse?: string;
    }
    interface TimeoutReverseErrorCodes {
        originalRequestIsNotFound?: string;
        originalRequestIsNotSuccessfull?: string;
        transactionGuidCanNotBeEmpty?: string;
        transactionGuidToReverseCanNotBeEmpty?: string;
    }
    interface TimeoutReverseRequestBinaryContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        reverseRequestBinary?: number[];
        tranDate?: Date;
        transactionGUID?: string;
    }
    interface TimeoutReverseRequestBinaryRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Common.Types.TimeoutReverseRequestBinaryContract;
    }
    interface TimeoutReverseRequestContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        businessKeyToReverse?: number;
        channelId?: number;
        hostName?: string;
        lastBusinessKey?: number;
        relatedBinaryContract?: BOA.Common.Types.TimeoutReverseRequestBinaryContract;
        reverseReason?: number;
        reverseResultMessage?: string;
        reverseStatus?: number;
        systemDate?: Date;
        tranDate?: Date;
        transactionGUIDToReverse?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TimeoutReverseRequestRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Common.Types.TimeoutReverseRequestContract;
    }
    interface TimeoutReverseState {
        failed?: number;
        manuallyStopped?: number;
        successful?: number;
        waitingForReverse?: number;
    }
    interface TransactionConstraintContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        endTime?: Date;
        hostIP?: string;
        hostName?: string;
        startTime?: Date;
        status?: number;
        systemDate?: Date;
        transactionCode?: string;
        userName?: string;
    }
    interface TransactionDefinitionContract extends BOA.Common.Types.ContractBase {
        accountNeed?: number;
        activeFrom?: Date;
        activeTo?: Date;
        amountNeed?: number;
        branchIdNeed?: number;
        cardNumberNeed?: number;
        depositWithdrawal?: number;
        fecNeed?: number;
        ferNeed?: number;
        hostIp?: string;
        hostName?: string;
        iBANNeed?: number;
        personIdNeed?: number;
        redirectedTranGroup?: string;
        suffixNeed?: number;
        systemDate?: Date;
        taxNumberNeed?: number;
        toAccountNeed?: number;
        toAmountNeed?: number;
        toBankNeed?: number;
        toBranchIdNeed?: number;
        toFECNeed?: number;
        toPersonIdNeed?: number;
        toSuffixNeed?: number;
        toTaxNumberNeed?: number;
        transactionCode?: string;
        transactionDetail?: number;
        transactionGroup?: number;
        transactionName?: string;
        transactionType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userIdNeed?: number;
        userName?: string;
    }
    interface TransactionDetailDefinitionContract extends BOA.Common.Types.ContractBase {
        name?: string;
        transactionDetailId?: number;
        transactionGroupId?: number;
    }
    interface TransactionFraudLogContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        cardNumber?: string;
        channelId?: number;
        cityName?: string;
        customerPersonId?: number;
        fec?: number;
        fer?: number;
        hostName?: string;
        iBAN?: string;
        isFraud?: boolean;
        loginType?: string;
        methodName?: string;
        personId?: number;
        receiverAccountNumber?: string;
        receiverName?: string;
        regionName?: string;
        requestName?: string;
        resourceCode?: string;
        systemDate?: Date;
        taxNumber?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toAmount?: number;
        toBank?: number;
        toBranchId?: number;
        toFec?: number;
        toPersonId?: number;
        toTaxNumber?: string;
        tranBranchId?: number;
        tranDate?: Date;
        transactionCode?: string;
        transactionKey?: string;
        userId?: number;
        userName?: string;
        webBrowser?: string;
        webCountry?: string;
        webDailySum?: number;
        webIP?: string;
        webPlatform?: string;
    }
    interface TransactionFraudLogExtraContract extends BOA.Common.Types.TransactionFraudLogContract {
        branchName?: string;
        channelName?: string;
        fecCode?: string;
        personName?: string;
        resourceName?: string;
        toBankName?: string;
        toBranchName?: string;
        toFecCode?: string;
        tranBranchName?: string;
        transactionName?: string;
        userCode?: string;
    }
    interface TransactionFraudTrackerRuleAndInformationEngineRequest extends BOA.Common.Types.TransactionRequestBase {
        fromAccount?: BOA.Common.Types.TransactionTrackerAccountInfoContract;
        toAccount?: BOA.Common.Types.TransactionTrackerAccountInfoContract;
        transactionLog?: BOA.Common.Types.TransactionFraudLogExtraContract;
    }
    interface TransactionGroupDefinitionContract extends BOA.Common.Types.ContractBase {
        name?: string;
        transactionGroupId?: number;
    }
    interface TransactionLogContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        cardNumber?: string;
        channelId?: number;
        fec?: number;
        fer?: number;
        hostName?: string;
        iBAN?: string;
        methodName?: string;
        personId?: number;
        requestName?: string;
        resourceCode?: string;
        systemDate?: Date;
        taxNumber?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toAmount?: number;
        toBank?: number;
        toBranchId?: number;
        toFec?: number;
        toPersonId?: number;
        toTaxNumber?: string;
        tranBranchId?: number;
        tranDate?: Date;
        transactionCode?: string;
        transactionKey?: string;
        unitId?: number;
        userId?: number;
        userName?: string;
    }
    interface TransactionLogDefinitionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        accountSuffix?: string;
        amount?: string;
        branchId?: string;
        cardNumber?: string;
        condition?: string;
        fec?: string;
        fer?: string;
        hostIp?: string;
        hostName?: string;
        iBAN?: string;
        logDefinitionId?: number;
        personId?: string;
        registryAssemblyName?: string;
        registryId?: number;
        registryTypeName?: string;
        reverseBusinessKey?: string;
        reverseCondition?: string;
        reverseStatus?: string;
        systemDate?: Date;
        taxNumber?: string;
        toAccountNumber?: string;
        toAccountSuffix?: string;
        toAmount?: string;
        toBank?: string;
        toBranchId?: string;
        toFec?: string;
        toPersonId?: string;
        toTaxNumber?: string;
        transactionCode?: string;
        transactionDefinition?: BOA.Common.Types.TransactionDefinitionContract;
        transactionKey?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userId?: string;
        userName?: string;
    }
    interface TransactionLogExtraContract extends BOA.Common.Types.TransactionLogContract {
        branchName?: string;
        channelName?: string;
        fecCode?: string;
        personName?: string;
        resourceName?: string;
        toBankName?: string;
        toBranchName?: string;
        toFecCode?: string;
        tranBranchName?: string;
        transactionName?: string;
        userCode?: string;
        userFriendlyTransactionName?: string;
    }
    interface TransactionNode extends BOA.Common.Types.GenericTreeNode<BOA.Common.Types.TransactionNode> {
        transactionDefinition?: BOA.Common.Types.TransactionDefinitionContract;
        transactionDetailDefinition?: BOA.Common.Types.TransactionDetailDefinitionContract;
        transactionGroupDefinition?: BOA.Common.Types.TransactionGroupDefinitionContract;
    }
    interface TransactionRedirectionContext {
        transactionList?: any[];
    }
    interface TransactionRequestBase extends BOA.Common.Types.RequestBase {
        branchId?: number;
        customerName?: string;
        description?: string;
        fec?: number;
        hasAccounting?: boolean;
        hasAuthorization?: boolean;
        hasCommission?: boolean;
        hasFutureDated?: boolean;
        hasRevokableTransaction?: boolean;
        hasSlip?: boolean;
        hasTellerTransaction?: boolean;
        hasWorkflow?: boolean;
        mainAmount?: number;
        toAccountNumber?: number;
        toBranchId?: number;
        toSuffix?: number;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
        tranUnitId?: number;
    }
    interface TransactionResponseBase extends BOA.Common.Types.ResponseBase {
        branch?: number;
        processDate?: Date;
        referenceNumber?: string;
    }
    interface TransactionTrackerAccountInfoContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountClass?: string;
        accountGroupType?: number;
        authorizationType?: number;
        birthDate?: Date;
        birthPlace?: string;
        branchid?: number;
        branchName?: string;
        citizenship?: number;
        customerid?: number;
        customerName?: string;
        defaultEMail?: string;
        defaultGSM?: string;
        emailNotExists?: boolean;
        establishmentDate?: Date;
        establishmentPlace?: string;
        gender?: number;
        gSMNotExists?: boolean;
        individualStatus?: string;
        isEmployee?: number;
        isInLegitimateProceeding?: number;
        personid?: number;
        personType?: number;
        portfolioClass?: string;
        portfolioOwner?: string;
        portfolioOwnerEmail?: string;
        portfolioOwnerMobilePhone?: string;
        profession?: string;
        professionCode?: number;
        recordingBranchid?: number;
        reginalOffice?: number;
        sharedCustomerType?: number;
        taxExemption?: boolean;
        taxNumber?: string;
        totalAvailableDebitAsTL?: number;
        totalDebitAsTL?: number;
    }
    interface TransactionTrackerContract extends BOA.Common.Types.ContractBase {
        branchFilter?: string;
        description?: string;
        fromBranchFilter?: string;
        hostIP?: string;
        hostName?: string;
        informationCodes?: string;
        ruleCodes?: string;
        surveyCode?: string;
        systemDate?: Date;
        toBranchFilter?: string;
        trackerCode?: string;
        trackerId?: number;
        trackerType?: number;
        trackerTypeText?: string;
        transactionCodes?: string;
        transactionFilter?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TransactionTrackerRuleAndInformationEngineRequest extends BOA.Common.Types.TransactionRequestBase {
        fromAccount?: BOA.Common.Types.TransactionTrackerAccountInfoContract;
        toAccount?: BOA.Common.Types.TransactionTrackerAccountInfoContract;
        transactionLog?: BOA.Common.Types.TransactionLogExtraContract;
    }
    interface TransportationContext {
        applicationEnvironment?: BOA.Common.Types.ApplicationEnvironment;
        applicationName?: BOA.Common.Types.ChannelApplication;
        authenticationKey?: string;
        authenticationToken?: string;
        channel?: BOA.Common.Types.ChannelContract;
        iPAddress?: string;
        isServiceUser?: boolean;
        machineName?: string;
        password?: string;
        sessionTime?: Date;
        terminalId?: number;
        ticketNumber?: number;
        token?: number;
        userName?: string;
    }
    interface Transporter {
        communicationKey?: string;
        headerContext?: BOA.Common.Types.HeaderContextBase;
        request?: BOA.Common.Types.RequestBase;
        transportationContext?: BOA.Common.Types.TransportationContext;
    }
    interface TreeNodeExtensions {
    }
    interface UserContract {
        assignment?: string;
        branch?: BOA.Common.Types.BranchContract;
        branchId?: number;
        branchName?: string;
        countryCode?: string;
        customerid?: number;
        defaultChannel?: BOA.Common.Types.ChannelContract;
        defaultWorkGroup?: BOA.Common.Types.WorkgroupContract;
        description?: string;
        email?: string;
        employeeCase?: string;
        employeeSign?: number;
        initials?: string;
        iPAddress?: string;
        isTemporaryUser?: boolean;
        languageId?: number;
        loginFailCount?: number;
        machineName?: string;
        name?: string;
        printType?: string;
        registerId?: number;
        roleId?: number;
        roleName?: string;
        status?: number;
        unitId?: number;
        useDefaultCertificate?: boolean;
        userGroupid?: number;
        userid?: number;
        userName?: string;
        voip?: string;
        workGroupBranchList?: BOA.Common.Types.WorkGroupBranchContract[];
        workGroupId?: number;
    }
    interface UserManager extends BOA.Common.Types.ContractBase {
        directorEmail?: string;
        directorName?: string;
        directorUserId?: number;
        directorUserName?: string;
        managerEmail?: string;
        managerName?: string;
        managerUserId?: number;
        managerUserNAme?: string;
        workGroupID?: number;
        workGroupName?: string;
    }
    interface UserRequestContract extends BOA.Common.Types.ContractBase {
        canPublicRead?: boolean;
        details?: string;
        header?: string;
        hostName?: string;
        iD?: number;
        isPublic?: boolean;
        reply?: string;
        replyDate?: Date;
        requestType?: string;
        responsibleUserName?: string;
        responsibleWorkgroupId?: number;
        responsibleWorkgroupName?: string;
        responsibleWorkgroupUserCode?: string;
        responsibleWorkGroupUserName?: string;
        status?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface UserStatusContract extends BOA.Common.Types.ContractBase {
        description?: string;
        endDate?: Date;
        isChanged?: boolean;
        isCustomDescriptionRequired?: string;
        reasonId?: number;
        reasonText?: string;
        selectedItem?: boolean;
        startDate?: Date;
        status?: number;
        statusChangedBy?: BOA.Common.Types.UserStatusChangedBy;
        statusText?: string;
        systemDate?: Date;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userCodeName?: string;
        userId?: number;
        userName?: string;
    }
    interface WarmUpRequest extends BOA.Common.Types.RequestBase {
    }
    interface WarmUpResponse extends BOA.Common.Types.ResponseBase {
    }
    interface WhereAmI {
        branchId?: number[];
    }
    interface WindowsServiceContext extends BOA.Common.Types.HeaderContextBase {
        assemblyPath?: string;
        assemblyVersion?: string;
        current?: BOA.Common.Types.WindowsServiceContext;
        description?: string;
        displayName?: string;
        is64Bit?: boolean;
        machineName?: string;
        mainActionId?: number;
        mainResourceCode?: string;
        mainResourceId?: number;
        serviceCommand?: string;
        serviceName?: string;
        userName?: string;
    }
    interface WorkflowActionReasonContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        activeVersion?: boolean;
        description?: string;
        firstActionId?: number;
        flowVerisonId?: number;
        reasonCode?: string;
        reasonName?: string;
        resouceId?: number;
        stateId?: number;
    }
    interface WorkflowAfterExecuteResponse extends BOA.Common.Types.ResponseBase {
        commitType?: BOA.Common.Types.WorkflowCommitType;
        isProcessExecuted?: boolean;
    }
    interface WorkflowAlertContract {
        alertType?: BOA.Common.Types.WorkflowAlertType;
        instanceId?: number;
        instanceStateId?: number;
        operatingUser?: string;
        sendToOnlyOwnedUser?: boolean;
        slipBusinessKey?: number;
    }
    interface WorkflowBaseResponse extends BOA.Common.Types.ResponseBase {
        afterExecuteSuccess?: boolean;
        flowName?: string;
        flowVerisonId?: number;
        instanceId?: number;
        isCompleted?: boolean;
        isFollowOnCurrentUser?: boolean;
        isNewWorkFlow?: boolean;
        isSimulated?: boolean;
        saveStateVisible?: boolean;
        sendStateList?: BOA.Common.Types.WorkflowResultStateInfo[];
        setUserStatusChangeTimer?: boolean;
        workflowResult?: BOA.Common.Types.WorkflowResult;
    }
    interface WorkflowChangeWorkStateContract extends BOA.Common.Types.ContractBase {
        description?: string;
        instanceId?: number;
        instanceStateId?: number;
        instanceUserId?: number;
        setWorkingStatesPaused?: boolean;
        startDate?: Date;
        stateDetailId?: number;
        userCode?: string;
        workStateId?: number;
    }
    interface WorkflowCurrentStatesContract extends BOA.Common.Types.ContractBase {
        instanceStateId?: number;
        stateId?: number;
        stateName?: string;
        stateType?: number;
        subdInstanceId?: number;
        userCode?: string;
    }
    interface WorkflowDataOfResourceContract {
        actionId?: number;
        activeVersion?: boolean;
        flowId?: number;
        flowVersionId?: number;
        hasAccounting?: boolean;
        hasAuthorization?: boolean;
        hasCommission?: boolean;
        hasFutureDated?: boolean;
        hasRevokableTransaction?: boolean;
        hasSlip?: boolean;
        hasTellerTransaction?: boolean;
        isDelegateAction?: boolean;
        itemType?: number;
        resourceId?: number;
        startActionId?: number;
        stateId?: number;
    }
    interface WorkflowErrors {
    }
    interface WorkflowFirstActionInfoContract {
        actionId?: number;
        hasAccounting?: boolean;
        hasAuthorization?: boolean;
        hasCommission?: boolean;
        hasFutureDated?: boolean;
        hasRevokableTransaction?: boolean;
        hasSlip?: boolean;
        hasTellerTransaction?: boolean;
    }
    interface WorkflowInfoForPromoteFromOutsideContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        instanceUserId?: number;
        request?: BOA.Common.Types.IWorkFlow;
    }
    interface WorkFlowInstanceContract extends BOA.Common.Types.ContractBase {
        approverCount?: number;
        checkOwnerWorkGroup?: boolean;
        checkTransactionWorkGroup?: boolean;
        concurrentOwnerCount?: number;
        flowId?: number;
        flowName?: string;
        flowVersionId?: number;
        instanceId?: number;
        instanceRunId?: number;
        instanceStateId?: number;
        instanceUserId?: number;
        isEditable?: boolean;
        itemNumber?: number;
        ownerWorkGroupId?: number;
        resourceFlowId?: number;
        resourceId?: number;
        resourceName?: string;
        stateId?: number;
        stateType?: number;
        workGroupId?: number;
    }
    interface WorkflowInstanceStateContract extends BOA.Common.Types.ContractBase {
        activeUserCount?: number;
        canApproveThisState?: boolean;
        canAutomaticAssign?: boolean;
        checkHierarchy?: boolean;
        checkOwnerWorkGroup?: boolean;
        checkTransactionWorkGroup?: boolean;
        concurrentOwnerCount?: number;
        errorExists?: boolean;
        flowId?: number;
        instanceId?: number;
        instanceRunId?: number;
        instanceStateId?: number;
        instanceUserId?: number;
        isShowActionReason?: boolean;
        isThereAnyOtherWorkingState?: boolean;
        isUserApprovedBefore?: boolean;
        itemNumber?: number;
        ownerWorkGroupId?: number;
        resultMessage?: string;
        stateName?: string;
        stateType?: number;
        workGroupId?: number;
        workState?: number;
        workStateDetail?: number;
        workStateDetailName?: string;
        workStateName?: string;
    }
    interface WorkflowJournalContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        corporationName?: string;
        counter?: string;
        description?: string;
        divitId?: string;
        divitInstanceId?: string;
        fec?: number;
        fecCode?: string;
        finishingType?: number;
        finishingTypeName?: string;
        flowName?: string;
        forwardDate?: Date;
        hostIP?: string;
        hostName?: string;
        instanceId?: number;
        instanceScore?: number;
        instanceStartDate?: Date;
        isBoutique?: boolean;
        mainAccountNumber?: number;
        mainAmount?: number;
        mainBranchId?: number;
        mainBranchName?: string;
        mainCustomerName?: string;
        mainSuffix?: number;
        moneyTransferType?: number;
        operationLocation?: number;
        packageId?: number;
        productCode?: string;
        queryToken?: string;
        reference?: string;
        resourceId?: number;
        resourceName?: string;
        starterUser?: string;
        starterUserDescription?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        toAccountNumber?: number;
        toBranchId?: number;
        toSuffix?: number;
        transactionDate?: Date;
        transactionRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        urgency?: boolean;
        userName?: string;
        valorDate?: Date;
        workPriority?: boolean;
    }
    interface WorkflowMobileDefinitionContract extends BOA.Common.Types.ContractBase {
        canAddDivit?: boolean;
        description?: string;
        divitFlowId?: string;
        divitInstanceId?: string;
        flowId?: number;
        flowName?: string;
        footer?: string;
        header?: string;
        hostIp?: string;
        hostName?: string;
        mobileDefinitionId?: number;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface WorkflowMobileDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        fieldName?: string;
        fieldValue?: string;
        flowId?: number;
        isEnabled?: boolean;
        mobileDefinitionDetailId?: number;
        mobileDefinitionId?: number;
        runOrder?: number;
        stateId?: number;
    }
    interface WorkflowMobileDefinitionOutputContract extends BOA.Common.Types.ContractBase {
        canAddDivit?: boolean;
        detailList?: any;
        divitInstanceId?: string;
        flowId?: string;
        footer?: string;
        header?: string;
    }
    interface WorkflowOpenFormResponseContract extends BOA.Common.Types.ContractBase {
        binaryData?: number[];
        flowVersionId?: number;
        instanceId?: number;
        instanceUserId?: number;
        isEditable?: boolean;
        saveStates?: BOA.Common.Types.WorkflowOpenFormResponseSaveStateContract[];
        stateId?: number;
        stateType?: number;
    }
    interface WorkflowOpenFormResponseSaveStateContract extends BOA.Common.Types.ContractBase {
        instanceId?: number;
        routeNumber?: number;
        saveStateDescription?: string;
        startRunId?: number;
    }
    interface WorkflowParameters {
        dontAddOtherOptionToActionReasnList?: boolean;
        dontShowActionReasonSelectionDialog?: boolean;
        dontShowWorkflowDescription?: boolean;
        dontShowWorkflowMessages?: boolean;
        isActionReasonSelectionOptional?: boolean;
        showWorkflowUrgency?: boolean;
    }
    interface WorkflowPoolItemContract extends BOA.Common.Types.ContractBase {
        approverCount?: number;
        checkOwnerWorkGroup?: boolean;
        checkTransactionWorkGroup?: boolean;
        concurrentOwnerCount?: number;
        displayDescription?: string;
        fec?: number;
        fecCode?: string;
        flowId?: number;
        flowName?: string;
        flowVersionId?: number;
        instanceId?: number;
        instanceStartDate?: Date;
        instanceStateId?: number;
        isEditable?: boolean;
        itemNumber?: number;
        mainAccountNumber?: number;
        mainAmount?: number;
        mainBranchId?: number;
        mainBranchName?: string;
        mainCustomerName?: string;
        mainSuffix?: number;
        ownerWorkGroupId?: number;
        queryToken?: string;
        resourceFlowId?: number;
        resourceId?: number;
        resourceName?: string;
        runId?: number;
        starterUser?: string;
        starterUserDescription?: string;
        stateId?: number;
        stateName?: string;
        stateStartDate?: Date;
        stateType?: BOA.Common.Types.WorkflowStateType;
        workGroupId?: number;
    }
    interface WorkflowRelationalInstanceContract extends BOA.Common.Types.ContractBase {
        flowName?: string;
        instanceId?: number;
        status?: number;
    }
    interface WorkFlowRequestData {
        allowExecutionByMainInstance?: boolean;
        allowExecutionByMainInstanceCommandName?: string;
        approverUsers?: string[];
        checkMainInstanceOnCurrentUser?: boolean;
        competencyList?: string[];
        corporationName?: string;
        counter?: string;
        displayDescription?: string;
        divitId?: string;
        divitInstanceId?: string;
        executeRelationalFlowMethods?: boolean;
        forwardDate?: Date;
        isFlowWaitForRelationalFlow?: boolean;
        isSetOwnerUser?: boolean;
        isStateWaitForRelationalFlow?: boolean;
        openNextAvailableInstance?: boolean;
        operationLocation?: number;
        ownerWorkGroupId?: number;
        packageId?: number;
        productCode?: string;
        queryToken?: string;
        reference?: string;
        relationalMainInstanceId?: number;
        relationalMainStateId?: number;
        resumeMainFlowOnError?: boolean;
        updateWorkflowJournal?: boolean;
        valorDate?: Date;
        waitingStateIdForRelationalFlow?: number;
    }
    interface WorkFlowRequestInternalData {
        actionReasons?: BOA.Common.Types.WorkflowActionReasonContract[];
        attachedFileInformation?: any;
        checkQueryToken?: boolean;
        componentPropertyDictionary?: any;
        firstActionId?: number;
        instanceId?: number;
        instanceUserId?: number;
        isBoutique?: boolean;
        lastChanceApproved?: boolean;
        mainInstanceId?: number;
        moneyTransferType?: number;
        previousApproverUserList?: string;
        promoteMainInstance?: boolean;
        promoteOutSideUserName?: string;
        saveStates?: any[];
        snapshot?: string;
        subInstanceId?: number;
        subInstanceIdList?: number[];
        subWorkFlowResult?: BOA.Common.Types.WorkflowResult;
        transactionWorkGroupId?: number;
        userDescription?: string;
        workFlowUrgency?: boolean;
        workPriority?: boolean;
    }
    interface WorkFlowResourceActionContract {
        isDelegateAction?: boolean;
        resourceAction?: BOA.Common.Types.ResourceActionContract;
    }
    interface WorkflowResultStateInfo {
        actionList?: number[];
        avgDuration?: number;
        saveStates?: string[];
        stateName?: string;
        workgroupName?: string;
    }
    interface WorkGroupBranchContract {
        branchId?: number;
        hRBranchId?: number;
    }
    interface WorkgroupContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        addressText?: string;
        branchId?: number;
        directorUserId?: number;
        email?: string;
        faxNumber?: string;
        hostIP?: string;
        hostName?: string;
        iconPath?: string;
        isAuto?: boolean;
        latitude?: string;
        longitude?: string;
        managerUserId?: number;
        name?: string;
        parentId?: number;
        phoneNumber?: string;
        regionId?: number;
        systemDate?: Date;
        type?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workgroupId?: number;
    }
    interface WorkgroupNode extends BOA.Common.Types.GenericTreeNode<BOA.Common.Types.WorkgroupNode> {
        fullPath?: string;
        workgroup?: BOA.Common.Types.WorkgroupContract;
    }
    interface WorkingOnAndNotAllowedUserListContract extends BOA.Common.Types.ContractBase {
        isAutoAssingState?: boolean;
        showActionReasons?: boolean;
        usersNotAllowedToApproveList?: string[];
        workingOnList?: BOA.Common.Types.WorkingOnListContract[];
    }
    interface WorkingOnListContract extends BOA.Common.Types.ContractBase {
        instanceId?: number;
        instanceStateId?: number;
        instanceUserId?: number;
    }
    interface XtmAgentExchangeContract extends BOA.Common.Types.ContractBase {
        cashInBanknoteList?: BOA.Common.Types.TellerTransactionContract[];
        customerAddress?: string;
        customerName?: string;
        customerPhone?: string;
        denominatedAmount?: number;
        denominatedBanknoteList?: BOA.Common.Types.TellerTransactionContract[];
        description?: string;
        effectiveAmount1?: number;
        effectiveAmount2?: number;
        effectiveAmountBanknote2?: number;
        effectiveAmountCoin2?: number;
        effectiveBidBusinessKey?: number;
        fecIdFilterList1?: number[];
        fecIdFilterList2?: number[];
        isCustomerApprove?: boolean;
        isEffectiveBidCompleted?: boolean;
        isSafeToSafeActive?: boolean;
        isTransactionStart?: boolean;
        selectedFECId1?: number;
        selectedFECId2?: number;
        taxNumber?: string;
        unpaidAmount?: number;
    }
}
declare namespace BOA.Types.Business.Kernel.Customer {
    interface Customer360PanoramaRequest extends BOA.Common.Types.RequestBase {
    }
}
declare namespace BOA.Types.Commission.CommissionTransactions {
    interface CommissionRediscountCoreContract extends BOA.Common.Types.ContractBase {
        accrualAmount?: number;
        accrualDate?: Date;
        commissionBalanceLc?: number;
        commissionInstallmentId?: number;
        commissionJournalId?: number;
        hostName?: string;
        isAccrual?: number;
        oldRecord?: number;
        paidCommissionBalanceLc?: number;
        rediscountAmount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CommissionRediscountDetailContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        businessKey?: number;
        commissionBalanceLc?: number;
        commissionInstallmentId?: number;
        commissionJournalId?: number;
        commissionRediscountDetailId?: number;
        dailyRaise?: number;
        hostName?: string;
        isAccrual?: number;
        oldRecord?: number;
        paidCommissionBalanceLc?: number;
        rediscountAmount?: number;
        reverseBusinessKey?: number;
        reverseTranDate?: Date;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.CoreBanking.SalaryPayment {
    export const enum SalaryPaymentStatus {
        Payable = 1,
        UnPaid = 2,
        Paid = 3,
        Canceled = 4
    }
    export const enum WithholdingStatus {
        WithOutWithholding = 1,
        WithWithholding = 2,
        WereWithholding = 3,
        CouldNotGetWithholding = 4
    }
}
declare namespace BOA.Types.Correspondence.Kep {
    interface AddressBookRightsContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        addressBookId?: number;
        hostIP?: string;
        hostName?: string;
        roleName?: string;
        systemDate?: Date;
        userFullName?: string;
        userName?: string;
        workgroupName?: string;
    }
    interface MailTransactionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        mailId?: number;
        systemDate?: Date;
        transactionId?: number;
        transactionType?: number;
        transactionTypeDescription?: string;
        userFullName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Foreign.Forward {
    interface ForwardControlRateContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        callRate?: number;
        closingRate?: number;
        guaranteeRate?: number;
        hostIP?: string;
        hostName?: string;
        maturityBegin?: number;
        maturityEnd?: number;
        riskCommission?: number;
        riskRate?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ForwardControlRateParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        regionId?: number;
    }
    interface ForwardLimitRiskContract extends BOA.Common.Types.ContractBase {
        isConditionsFailed?: number;
        isNewAllotment?: number;
        limit?: number;
    }
    interface ForwardRiskContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        businessKey?: number;
        hostIP?: string;
        hostName?: string;
        productCode?: number;
        reverseBusinessKey?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
    }
}
declare namespace BOA.Types.Insurance.Agent {
    interface PolicyCollateralRelationContract extends BOA.Common.Types.ContractBase {
        area?: number;
        block?: string;
        buildingNo?: string;
        chassisNo?: string;
        city?: string;
        cityName?: string;
        collateralId?: number;
        creditAccountNumber?: number;
        district?: string;
        districtName?: string;
        flatNo?: string;
        hasRelation?: boolean;
        independentSection?: number;
        insurancePolicyId?: number;
        insurancePolicyNumber?: string;
        insuredName?: string;
        motorNo?: string;
        parcel?: string;
        plate?: string;
        plateNo?: string;
        policyEndDate?: Date;
        productId?: string;
        productName?: string;
        uAVTNumber?: number;
    }
}
declare namespace BOA.Types.Integration.KEP {
    interface CreatingSendContract extends BOA.Common.Types.ContractBase {
        creatingSendId?: number;
        description?: string;
        textArr?: number[];
    }
}
declare namespace BOA.Types.KAS {
    export const enum IncomingEFTStates {
        ProcessWaiting = 0,
        Open = 1,
        ApproveWaiting = 2,
        Paid = 3,
        RequestedReturn = 4,
        PaidAndRequestedReturn = 5,
        Returned = 6,
        BranchUpdating = 7,
        Deleted = 8,
        OnQueue = 9
    }
    export const enum IncomingEFTTranType {
        Received = 1,
        SendApprove = 2,
        Approved = 3,
        Rejected = 4,
        BranchUpdate = 5,
        CancelPayment = 6,
        CancelReturn = 7
    }
    export const enum PaymentAccountType {
        None = 0,
        Account = 1,
        GeneralLedger = 2,
        Cahce = 3
    }
    export const enum PaymentTypes {
        ToAccount = 1,
        ToName = 2,
        ToPublic = 3,
        ToHouseRent = 4,
        ToOfficeRent = 5,
        ToOtherRent = 6,
        ToSalary = 7,
        ToCreditCart = 8,
        ToReturn = 9,
        IncreaseBalance = 10,
        DecreaseBalance = 11,
        BalanceCrediting = 12
    }
    interface AdditionalProcessInfoContract extends BOA.Common.Types.ContractBase {
        processInfo?: string;
        subCorporationCustomerInfo?: BOA.Types.KAS.SubCorporationCustomerInfo;
    }
    interface ErrorContract extends BOA.Common.Types.ContractBase {
        description?: string;
        errorCode?: string;
    }
    interface ErrorMesaageContract extends BOA.Types.KAS.MessegeHeaderContract {
        amount?: number;
        description?: string;
        errorCode?: string;
    }
    interface IEFTContract {
    }
    interface MessageGeneralPurposeInfoContract extends BOA.Types.KAS.MessegeHeaderContract {
        auctionNumber?: string;
        auctionType?: string;
        endDate?: Date;
        generalInformationId?: number;
        information?: string;
        messageRoute?: number;
        receiverBranch?: string;
        receiverParticipant?: string;
        senderBranch?: string;
        senderParticipant?: string;
        startDate?: Date;
        state?: number;
        stateText?: string;
    }
    interface MessegeHeaderContract extends BOA.Common.Types.ContractBase {
        kASProcessDate?: Date;
        kASReceiveDate?: Date;
        messageSendDate?: Date;
        priority?: number;
        processType?: string;
        queryToken?: number;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        senderBranchCode?: number;
        senderParticipantCode?: number;
    }
    interface PaymentDetailContract extends BOA.Common.Types.ContractBase {
        address?: string;
        birthDate?: Date;
        birthPlace?: string;
        customerId?: string;
        passportNumber?: string;
    }
    interface PaymentHeaderContract extends BOA.Types.KAS.MessegeHeaderContract {
        additionalProcessInfo?: BOA.Types.KAS.AdditionalProcessInfoContract;
        amount?: number;
        behalfOfCustomerIdentityNumber?: string;
        behalfOfCustomerName?: string;
        behalfOfCustomerPhoneNumber?: string;
        description?: string;
        paymentDetail?: BOA.Types.KAS.PaymentDetailContract;
        paymentSource?: string;
        receiverAccountNumber?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        senderAccountNumber?: string;
        senderIdentityNumber?: string;
        senderName?: string;
    }
    interface ResultContract extends BOA.Common.Types.ContractBase {
        description?: string;
        resultCode?: string;
    }
    interface SubCorporationCustomerInfo extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        identityNumber?: string;
        name?: string;
    }
}
declare namespace BOA.Types.Kernel.Account {
    export const enum WithholdingClass {
        Yok = 0,
        Tutara = 1,
        Hesaba = 2
    }
    interface AccountActiveStates {
    }
    interface AccountActivitiesContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        businessKey?: number;
        comment?: string;
        credit?: number;
        currentBalance?: number;
        debit?: number;
        fec?: number;
        fecCode?: string;
        journalLogActive?: boolean;
        mainBusinessKey?: number;
        systemDate?: Date;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
    }
    interface AccountAdvantageContract extends BOA.Common.Types.ContractBase {
        packageAdvantageId?: number;
        packageName?: string;
        remainingAmount?: number;
        value?: string;
    }
    interface AccountBalanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        availableBalance?: number;
        availableBalanceDisplay?: number;
        availableBalanceWithoutKMH?: number;
        availableBalanceWithoutKMHDisplay?: number;
        balance?: number;
        balanceDisplay?: number;
        fec?: number;
        hasBalanceDisplayConstraint?: boolean;
        productCode?: string;
        withholdingAmount?: number;
        withholdingAmountDisplay?: number;
    }
    interface AccountBalanceMiniContract extends BOA.Common.Types.ContractBase {
        availableBalance?: number;
        balance?: number;
        withholdingAmount?: number;
    }
    interface AccountClassificationContract extends BOA.Common.Types.ContractBase {
        accountClass?: string;
        accountGroupType?: number;
        personType?: number;
        portfolioClass?: string;
    }
    interface AccountComponentAccountsContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        availableBalance?: number;
        availableBalanceDisplay?: number;
        availableBalanceWithoutKMH?: number;
        availableBalanceWithoutKMHDisplay?: number;
        availableQuantityBalanceDisplay?: number;
        availableQuantityBalanceDisplayCombo?: string;
        balance?: number;
        balanceDisplay?: number;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        fec?: number;
        fecDesc?: string;
        hasBalanceDisplayConstraint?: boolean;
        iBAN?: string;
        internalPeriodEnd?: Date;
        isInFreeZone?: number;
        lastNetProfit?: number;
        lastRenewedDate?: Date;
        ledgerId?: number;
        maturityBegin?: Date;
        maturityEnd?: Date;
        maturityTerm?: number;
        openDate?: Date;
        productCode?: string;
        productGroup?: number;
        productName?: string;
        productType?: number;
        profitShareRatio?: number;
        resourceId?: number;
        segmentCode?: string;
        segmentName?: string;
        unitId?: number;
        unitMultiplier?: number;
        visibleBranchName?: string;
        withHoldingAmount?: number;
        withHoldingAmountDisplay?: number;
        withholdingClass?: number;
        workGroupId?: number;
    }
    interface AccountComponentAccountsContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        availableBalance?: number;
        availableBalanceDisplay?: number;
        availableBalanceWithoutKMH?: number;
        availableBalanceWithoutKMHDisplay?: number;
        availableQuantityBalanceDisplay?: number;
        availableQuantityBalanceDisplayCombo?: string;
        balance?: number;
        balanceDisplay?: number;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        fec?: number;
        fecDesc?: string;
        hasBalanceDisplayConstraint?: boolean;
        iBAN?: string;
        internalPeriodEnd?: Date;
        isInFreeZone?: number;
        lastNetProfit?: number;
        lastRenewedDate?: Date;
        ledgerId?: number;
        maturityBegin?: Date;
        maturityEnd?: Date;
        maturityTerm?: number;
        openDate?: Date;
        productCode?: string;
        productGroup?: number;
        productName?: string;
        productType?: number;
        profitShareRatio?: number;
        resourceId?: number;
        segmentCode?: string;
        segmentName?: string;
        unitId?: number;
        unitMultiplier?: number;
        visibleBranchName?: string;
        withHoldingAmount?: number;
        withHoldingAmountDisplay?: number;
        withholdingClass?: number;
        workGroupId?: number;
    }
    interface AccountConst {
    }
    interface AccountConstraintContract extends BOA.Common.Types.ContractBase {
        accessPointList?: number[];
        accessPointSelectionType?: number;
        accountConstraintId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        alertText?: string;
        beginDate?: Date;
        constraintType?: number;
        description?: string;
        endDate?: Date;
        hostName?: string;
        resourceCodeList?: string[];
        resourceSelectionType?: number;
        userBranchId?: number;
        userName?: string;
    }
    interface AccountConstraintEnums {
    }
    interface AccountConstraintInfoContract extends BOA.Common.Types.ContractBase {
        accountConstraintId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        alertText?: string;
        availableBalance?: number;
        constraintType?: BOA.Types.Kernel.Account.AccountConstraintEnums.ConstraintType;
        description?: string;
    }
    interface AccountCorrespondentContract extends BOA.Common.Types.ContractBase {
        accountDetailGroup?: number;
        accountNumber?: number;
        accountNumberPlusAccountSuffix?: number;
        accountSuffix?: number;
        branchId?: number;
        correspondentName?: string;
        fec?: number;
        fecCode?: string;
        isDefault?: boolean;
        isExchange?: boolean;
        isFXNetSettlementAccount?: boolean;
        isInSSIList?: boolean;
        isKTAccountNumberWrittenToMT200?: boolean;
        isNetting?: boolean;
        isPlasman?: boolean;
        isSettlement?: boolean;
        isTemporaryAccount?: boolean;
        kTAccountNumber?: string;
        ledgerId?: number;
        swiftCode?: string;
    }
    interface AccountCreditCardContract extends BOA.Types.Kernel.Account.AccountSaveContract {
        newCardEntranceDate?: string;
        newCardNo?: string;
    }
    interface AccountDepositContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountValue?: number;
        branchId?: number;
        businessKey?: number;
        firstMaturityBegin?: Date;
        hasOrder?: number;
        incomeSuffix?: number;
        incomeTaxRate?: number;
        internalPeriod?: number;
        internalPeriodBegin?: Date;
        internalPeriodEnd?: Date;
        isDocumentable?: number;
        lastBankStatementDate?: Date;
        lastNetProfit?: number;
        lastRenewedDate?: Date;
        maturityBegin?: Date;
        maturityEnd?: Date;
        maturityTerm?: number;
        profitShareRatio?: number;
        unitValue?: number;
    }
    interface AccountDivisionContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountNumber?: number;
        accountRole?: number;
        accountType?: string;
        citizenShip?: string;
        corporationDetailType?: number;
        corporationType?: number;
        publicOrPrivate?: number;
    }
    interface AccountInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        customerName?: string;
        fec?: number;
        iBAN?: string;
        isActive?: number;
    }
    interface AccountMaturityConstraint {
    }
    interface AccountOpenContract extends BOA.Common.Types.ContractBase {
        accountCode?: number;
        accountName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        flexibleMaturity?: number;
        ledgerId?: number;
        maturityDate?: Date;
    }
    interface AccountProductivityContract extends BOA.Common.Types.ContractBase {
        expectedProductivity?: number;
        expense?: number;
        income?: number;
        profit?: number;
        year?: number;
    }
    interface AccountReminderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountReminderId?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        hostName?: string;
        reminderNote?: string;
        systemDate?: Date;
        userId?: number;
        userName?: string;
    }
    interface AccountSaveContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountValue?: number;
        addressNo?: number;
        approveDate?: Date;
        approverUser?: string;
        balance?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cashFlowPeriod?: string;
        channelId?: number;
        closeDate?: Date;
        closeReason?: number;
        closeReasonExtra?: string;
        closeUser?: string;
        combineSuffix?: number;
        divitId?: any;
        divitInstanceId?: string;
        dowryAccMaturityYear?: number;
        emailFormat?: string;
        emailPersonId?: number;
        fec?: number;
        fecLongName?: string;
        fecName?: string;
        fecType?: number;
        fundPoolName?: string;
        hasConstraint?: boolean;
        hasException?: number;
        hasKMH?: boolean;
        hasOrder?: number;
        hasWithHolding?: number;
        hitCount?: number;
        hostName?: string;
        iBAN?: string;
        identityNumber?: string;
        incomeSuffix?: number;
        internalPeriod?: number;
        internalPeriodBegin?: Date;
        internalPeriodEnd?: Date;
        isActive?: number;
        isMortgage?: number;
        isRevise?: number;
        isSeller?: number;
        isSendSms?: boolean;
        lastBankStatementDate?: Date;
        ledgerId?: number;
        maturityBegin?: Date;
        maturityEnd?: Date;
        maturityTerm?: number;
        openBranchId?: number;
        openBranchName?: string;
        openDate?: Date;
        operationLocation?: number;
        orderAccountSuffix?: number;
        orderAmount?: number;
        orderCreditCardNo?: string;
        orderDueType?: number;
        pool?: number;
        productCode?: string;
        productName?: string;
        productType?: number;
        profitShareRatio?: number;
        projectId?: number;
        reminder?: string;
        resourceId?: number;
        segmentCode?: string;
        segmentName?: string;
        statementPeriod?: string;
        unitId?: number;
        unitValue?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDayIncrement?: number;
        withHoldingAmount?: number;
    }
    interface AccountSimpleContract extends BOA.Common.Types.ContractBase {
        branch?: string;
        currencyType?: string;
        definition?: string;
        suffix?: number;
    }
    interface AccountStateInfoContract {
        accountNumber?: number;
        currentState?: number;
        previousState?: number;
    }
    interface AccountStatementEmailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        emailFormat?: string;
        statementPeriod?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface AccountStatementListContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        balanceQuantity?: number;
        businessKey?: number;
        channelId?: number;
        comment?: string;
        credit?: number;
        creditQuantity?: number;
        currentBalance?: number;
        debit?: number;
        debitQuantity?: number;
        description?: string;
        fec?: number;
        isSlipExists?: boolean;
        resourceId?: number;
        segmentName?: string;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        userName?: string;
    }
    interface AccountStatementParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        content?: number[];
        endDate?: Date;
        fileFormat?: string;
        isSlipDataNeeded?: boolean;
        language?: string;
        languageId?: number;
        startDate?: Date;
    }
    interface AccountStatementReportContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        customerName?: string;
        endDate?: Date;
        fec?: string;
        fecName?: string;
        iBAN?: string;
        startDate?: Date;
        takeoverBalance?: number;
    }
    interface AccountTestContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        customerId?: number;
    }
    interface AccountTestSearchContract {
        amountMax?: number;
        amountMin?: number;
    }
    interface AccountWithHoldingContract extends BOA.Common.Types.ContractBase {
        accountName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        definitionDescription?: string;
        ownerAccountNumber?: number;
        ownerType?: number;
        userName?: string;
        withholdingClass?: number;
        withHoldingDate?: Date;
        withholdingId?: number;
        withHoldingType?: number;
        withHoldingTypeDescription?: string;
    }
    interface BalanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        branchId?: number;
        fec?: number;
        productType?: number;
    }
    interface BalanceViewListContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        accountTypeDesc?: string;
        availableBalance?: number;
        availableQuantity?: string;
        balance?: number;
        branchName?: string;
        closeDate?: Date;
        fec?: number;
        fecName?: string;
        iBAN?: string;
        isActive?: number;
        isShowPrivateBankingCustomerAccount?: boolean;
        ledgerId?: number;
        maturityEnd?: Date;
        openDate?: Date;
        productName?: string;
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
        unitMultiplier?: number;
        withHoldingAmount?: number;
        withHoldingAmountDescription?: string;
    }
    interface BalanceViewParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balanceDate?: Date;
        branchId?: number;
        content?: number[];
        creditCardNumber?: string;
        fileFormat?: string;
        isIncludedOnlyDepositAccounts?: boolean;
        isIncludedPassiveAccounts?: boolean;
        isIncludedZeroBalances?: boolean;
        isPermitted?: boolean;
        isShowPrivateBankingCustomerAccount?: boolean;
        languageId?: number;
        userName?: string;
    }
    interface CombineAccountDepositContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        combineAccountDepositId?: number;
        description?: string;
        divitId?: any;
        fromAccountSuffix?: number;
        hostName?: string;
        resourceCode?: string;
        systemDate?: Date;
        toAccountSuffix?: number;
        tranBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CombineAccountDepositDetailContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        combineAccountDepositDetailId?: number;
        combineAccountDepositId?: number;
        errorMessage?: string;
        fromAccountSuffix?: number;
        hostName?: string;
        newAccountSuffix?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CombineAccountDepositFilterParameter extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        fec?: number;
        state?: number;
        status?: number;
        tranDateBegin?: Date;
        tranDateEnd?: Date;
    }
    interface CombineAccountDepositListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountSuffixType?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        combineAccountDepositDetailId?: number;
        combineAccountDepositId?: number;
        customerName?: string;
        description?: string;
        divitId?: any;
        fec?: number;
        fecCode?: string;
        firstMaturityEnd?: Date;
        fromAccountSuffix?: number;
        matchDate?: Date;
        matchDayCount?: number;
        maturityEnd?: Date;
        resourceCode?: string;
        secondMaturityEnd?: Date;
        status?: number;
        statusName?: string;
        toAccountSuffix?: number;
        toFirstMaturityBegin?: Date;
        toMaturityBegin?: Date;
        toMaturityEnd?: Date;
        toMaturityTerm?: number;
        toProductCode?: string;
        tranDate?: Date;
        userName?: string;
    }
    interface CombineAccountDepositReportContract extends BOA.Common.Types.ContractBase {
        branchName?: string;
        customerName?: string;
        reportBody?: string;
        tranDate?: string;
    }
    interface ConstraintListOpenContract {
        accountNumber?: number;
    }
    interface CumulativeAccountOrderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        divitInstanceId?: string;
        fecCode?: string;
        hostName?: string;
        orderAccountSuffix?: number;
        orderCreditCardNumber?: string;
        orderDueType?: number;
        orderDueTypeDesc?: string;
        orderId?: number;
        productName?: string;
        status?: boolean;
        systemDate?: Date;
        totalAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CumulativeAccountOrderDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        businessKey?: number;
        description?: string;
        fec?: number;
        gSMNumber?: string;
        hostName?: string;
        isSendSms?: boolean;
        isSMSSuccess?: boolean;
        orderAccountSuffix?: number;
        orderAmount?: number;
        orderCreditCardNumber?: string;
        orderDate?: Date;
        orderDetailId?: number;
        orderDueType?: number;
        orderDueTypeDesc?: string;
        orderId?: number;
        orderNumber?: number;
        orderSourceDesc?: string;
        orderStatus?: number;
        orderStatusDesc?: string;
        paidAmount?: number;
        productCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CumulativeAccountResource {
    }
    interface DailyBalanceViewListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        balance?: number;
        balanceDate?: Date;
        dailyCredit?: number;
        dailyDebit?: number;
    }
    interface DailyBalanceViewParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        endDate?: Date;
        startDate?: Date;
    }
    interface FromAccountSuffixListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        fec?: number;
        fecCode?: string;
        matchDate?: Date;
        matchDayCount?: number;
        maturityDate?: Date;
        productName?: string;
        segmentName?: string;
    }
    interface IBANAccountInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        isAccountActive?: boolean;
        isBranchActive?: boolean;
        validationMessage?: string;
    }
    interface IndividualStatus {
    }
    interface KMHDefinitionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        iD?: number;
        isCalcInflation?: boolean;
        kMHProductCode?: number;
        limit?: number;
        maturityDateDay?: number;
        maturityDatePeriod?: number;
        packageType?: number;
        plusDay?: number;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface KMHTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        channelId?: number;
        cOE_PackageId?: number;
        definitionId?: number;
        loanAmount?: number;
        resourceCode?: string;
        tranDate?: Date;
        userName?: string;
    }
    interface MaturityContract extends BOA.Common.Types.ContractBase {
        internalPeriodBegin?: Date;
        internalPeriodEnd?: Date;
        maturityEnd?: Date;
    }
    interface MaturityTermIntervalContract extends BOA.Common.Types.ContractBase {
        fec?: number;
        maxTerm?: number;
        minTerm?: number;
        productCode?: string;
    }
    interface MoneyTransactionLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        businessKey?: number;
        hostName?: string;
        moneyTransactionLimitId?: number;
        personId?: number;
        receiverAccountNumber?: number;
        resourceCode?: string;
        systemDate?: Date;
        taxNumber?: string;
        transactionAmount?: number;
        transactionDate?: Date;
        transactionFecId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MoneyTransactionLimitRequest extends BOA.Common.Types.TransactionRequestBase {
    }
    interface NearMaturityDepositAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        fec?: number;
        fecCode?: string;
        matchDate?: Date;
        matchDayCount?: number;
        maturityBegin?: Date;
        maturityDate?: Date;
        maturityDifference?: number;
        productName?: string;
        segmentName?: string;
    }
    interface NonSharedAccountsSharedAccountsContract extends BOA.Common.Types.ContractBase {
        customerid?: number;
        customerName?: string;
        personid?: number;
        share?: number;
        sharedCustomerType?: number;
    }
    interface OverdraftAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        balance?: number;
        branchId?: number;
        businessKey?: number;
        creditAccountSuffix?: number;
        currentState?: number;
        definitionId?: number;
        inflationAmount?: number;
        limitUsed?: number;
        maturityAmount?: number;
        maturityDate?: Date;
        openDate?: Date;
        plusDay?: number;
        referenceNumber?: string;
        tranDate?: Date;
        withHoldingAmount?: number;
    }
    interface PersonelAccountsDisplayContract extends BOA.Common.Types.ContractBase {
        directorEmail?: string;
        directorName?: string;
        directorUserId?: number;
        directorUserName?: string;
        managerEmail?: string;
        managerName?: string;
        managerUserId?: number;
        managerUserNAme?: string;
        workGroupID?: number;
        workGroupName?: string;
    }
    interface RareMetalTimeDepositParityContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        averageParity?: number;
        fec?: number;
        parity?: number;
        processDate?: Date;
        processType?: number;
        userName?: string;
    }
    interface SegmentContract extends BOA.Common.Types.ContractBase {
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
    }
    interface SharedAccountListContract extends BOA.Common.Types.ContractBase {
        mainCustomerId?: number;
        mainCustomerName?: string;
        personid?: number;
        sharedCustomerName?: string;
        sharedCustomerType?: number;
    }
    interface TellerConstants {
    }
    interface TotalBalanceViewListContract extends BOA.Common.Types.ContractBase {
        accountDescription?: string;
        accountNumber?: number;
        accountNumberString?: string;
        accountRole?: number;
        accountSuffix?: number;
        customerName?: string;
        eUROAmount?: number;
        fecCode?: number;
        isEmployee?: boolean;
        isShowPrivateBankingCustomerAccount?: boolean;
        otherAmount?: number;
        productType?: number;
        tLAmount?: number;
        totalEUROAmount?: number;
        totalEUROSegmentDefinition?: string;
        totalTLAmount?: number;
        totalTLSegmentDefinition?: string;
        totalUSDAmount?: number;
        totalUSDSegmentDefinition?: string;
        uSDAmount?: number;
    }
    interface TransactionListOpenContract {
        accountNumber?: number;
    }
    interface Withholding {
    }
    interface WithholdingCalendarContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        calendarId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        releasedAmount?: number;
        releaseDate?: Date;
        releaseType?: number;
        releaseTypeDescription?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withholdingId?: number;
    }
    interface WithholdingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        description?: string;
        distressNumber?: string;
        fec?: number;
        fecDes?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isReserved?: number;
        ledgerId?: number;
        originalId?: number;
        ownerAccountNumber?: number;
        ownerType?: number;
        parentId?: number;
        publicInstitutionCode?: string;
        publicInstitutionName?: string;
        releasedAmount?: number;
        sourceId?: string;
        sourceType?: number;
        systemDate?: Date;
        taxOfficeCode?: string;
        taxOfficeName?: string;
        transactionDescription?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withholdingCode?: string;
        withholdingDate?: Date;
        withholdingId?: number;
        workGroupId?: number;
    }
    interface WithholdingDefinitionContract extends BOA.Common.Types.ContractBase {
        approveUnit?: string;
        approveUnitDescription?: string;
        collateralControl?: number;
        collateralControlDescription?: string;
        description?: string;
        hasAccounting?: number;
        hasAccountingDescription?: string;
        hasCalendar?: number;
        hasCalendarDescription?: string;
        hasReserve?: number;
        hasReserveDescription?: string;
        hasTransfer?: number;
        hasTransferDescription?: string;
        inUse?: number;
        inUseDescription?: string;
        isCollateral?: number;
        isCollateralDescription?: string;
        isDeposit?: number;
        isDepositDescription?: string;
        ledgerId?: number;
        ledgerIdStr?: string;
        secondApproveUnit?: number;
        secondApproveUnitDescription?: string;
        withholdingClass?: number;
        withholdingClassDescription?: string;
        withholdingCode?: string;
        withholdingGroup?: number;
        withholdingGroupDescription?: string;
        withholdingName?: string;
        withholdingType?: number;
        withholdingTypeDescription?: string;
    }
    interface WithholdingEnums {
    }
    interface WithholdingListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        approveDate?: Date;
        approverUser?: string;
        batchInstanceId?: string;
        channelId?: number;
        channelName?: string;
        customerName?: string;
        description?: string;
        distressNumber?: string;
        fec?: number;
        isActive?: number;
        isActiveDescripiton?: string;
        isCollateral?: number;
        isReserved?: number;
        isReservedDescription?: string;
        originalId?: number;
        ownerAccountNumber?: number;
        ownerType?: number;
        ownerTypeDescription?: string;
        parentId?: number;
        publicInstitutionCode?: string;
        publicInstitutionName?: string;
        releaseDate?: Date;
        releaseUser?: string;
        sourceId?: string;
        sourceType?: number;
        systemDate?: Date;
        taxOfficeCode?: string;
        taxOfficeName?: string;
        userName?: string;
        withholdingClass?: number;
        withholdingClassDescription?: string;
        withholdingCode?: string;
        withholdingDate?: Date;
        withholdingDefinitionDescription?: string;
        withholdingDefinitionWithholdingName?: string;
        withholdingId?: number;
        withholdingType?: number;
        withholdingTypeDescription?: string;
    }
    interface WithholdingTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        transactionId?: number;
        transactionType?: number;
        transactionTypeDescription?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFinstanceId?: number;
        withholdingId?: number;
        withholdingRemainingAmount?: number;
    }
    interface WithholdingTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        transferAmount?: number;
    }
}
declare namespace BOA.Types.Kernel.Account.AccountConstraintEnums {
    export const enum ConstraintType {
        ParaGirisiEngellensin = 1,
        ParaCikisiEngellensin = 2,
        HesapGoruntulenmesin = 3,
        BakiyeGoruntulenmesin = 4
    }
    export const enum SelectionType {
        Hepsi = 1,
        Secilenler = 2,
        Secilmeyenler = 3
    }
}
declare namespace BOA.Types.Kernel.Account.CombineAccountDepositContract {
    interface NearMaturityDepositAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        maturityBegin?: Date;
        maturityDate?: string;
        maturityDifference?: number;
        productName?: string;
    }
}
declare namespace BOA.Types.Kernel.Account.CumulativeAccountResource {
    export const enum AccountingTransferType {
        CustomerAccountToBKHAccount = 1,
        TempAccountToBKHAccount = 2
    }
    export const enum OrderDueType {
        ONE_MONTH_CUMULATIVE = 1,
        THREE_MONTHS_CUMULATIVE = 3
    }
    export const enum OrderStatus {
        Paid = 1,
        Partial_Paid = 2,
        UnPaid = 3,
        Error = 4
    }
    export const enum OrderType {
        TransferFromCurrentAccount = 1,
        TransferFromCreditCard = 2
    }
    export const enum SmsSendStatus {
        Sent = 1,
        UnSent = 0
    }
}
declare namespace BOA.Types.Kernel.Account.Deposit {
    export const enum MaturityDateTypeInfo {
        OpenDate = 0,
        MaturityBegin = 1,
        MaturityEnd = 2,
        InternalPeriodBegin = 3,
        InternalPeriodEnd = 4
    }
    interface AccountSegmentMaturityInfo extends BOA.Common.Types.ContractBase {
        internalPeriodBegin?: Date;
        internalPeriodEnd?: Date;
        isMaturityEndWorkday?: boolean;
        maturityBegin?: Date;
        maturityEnd?: Date;
        openDate?: Date;
        physicalMaturityTerm?: number;
        productCode?: string;
        productName?: string;
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
    }
    interface CreateNewAccountContract extends BOA.Common.Types.ContractBase {
        accountName?: string;
        accountNumber?: number;
        amount?: number;
        branchId?: number;
        businessKeyForInternalMoneyTransfer?: number;
        channelId?: BOA.Common.Types.ChannelContract;
        fecId?: number;
        maturityTerm?: number;
        productCode?: string;
        resourceCode?: string;
        segmentCode?: string;
        sourceAccountNumber?: number;
        sourceAccountSuffix?: number;
        unitId?: number;
    }
    interface MaturityInteractionInfoContract extends BOA.Common.Types.ContractBase {
        date?: Date;
        dateMax?: Date;
        dateMin?: Date;
        dayIncrement?: number;
        isWorkDay?: boolean;
        maturityDateType?: BOA.Types.Kernel.Account.Deposit.MaturityDateTypeInfo;
    }
}
declare namespace BOA.Types.Kernel.Account.Request {
    interface PunishmentContract extends BOA.Common.Types.ContractBase {
        accountBalance?: number;
        accountBranch?: number;
        accountNumber?: number;
        accountSuffix?: number;
        businessKey?: number;
        channelId?: number;
        currentState?: number;
        depositWithdrawalAmount?: number;
        description?: string;
        fec?: number;
        gSMNumber?: string;
        hostIP?: string;
        hostName?: string;
        ledgerId?: number;
        mainBusinessKey?: number;
        productCode?: string;
        punishmentAmount?: number;
        resourceCode?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        systemDate?: Date;
        tranBranch?: number;
        tranDate?: Date;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PunishmentRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        mainBusinessKey?: number;
        punishmentContract?: BOA.Types.Kernel.Account.Request.PunishmentContract;
    }
    interface WithholdingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.Account.WithholdingContract;
        transactionType?: BOA.Types.Kernel.Account.WithholdingEnums.TransactionType;
        withholdingDefinitionContract?: BOA.Types.Kernel.Account.WithholdingDefinitionContract;
    }
}
declare namespace BOA.Types.Kernel.Account.Response {
    interface AccountSaveResponse extends BOA.Common.Types.ResponseBase {
        accountCreditCardContract?: BOA.Types.Kernel.Account.AccountCreditCardContract;
        accountDepositContract?: BOA.Types.Kernel.Account.AccountDepositContract;
        accountSaveContract?: BOA.Types.Kernel.Account.AccountSaveContract;
    }
}
declare namespace BOA.Types.Kernel.Account.Withholding {
    interface WithholdingCodes {
    }
}
declare namespace BOA.Types.Kernel.Account.WithholdingEnums {
    export const enum HasReserve {
        RezervYok = 1,
        Sinirsiz = 2,
        BakiyeKadar = 3,
        BakiyeKadar_Maas = 4
    }
    export const enum InUse {
        Kullanimdisi = 0,
        Kullanimda = 1
    }
    export const enum IsActive {
        Pasif = 0,
        Aktif = 1
    }
    export const enum IsReserved {
        Asil = 1,
        Rezerv = 2
    }
    export const enum OwnerType {
        Kendisi = 1,
        BireyselSektor = 2,
        KurumsalSektor = 3,
        DiğerMusteri = 4
    }
    export const enum ReleaseStatus {
        Bekliyor = 1,
        KismiKaldirma = 2,
        Tamamlandi = 3
    }
    export const enum ReleaseType {
        YekiyeBagli_OtoKalVar = 1,
        Herkes = 2,
        YekiyeBagli_OtoKalYok = 3
    }
    export const enum RightType {
        Ekleme = 1,
        Kaldirma = 2,
        Bolme = 3,
        CozumTakvimiEkleme = 4,
        CozumTakvimiSilmeVeDegistirme = 5
    }
    export const enum TransactionType {
        Ekleme = 1,
        KismiKaldırma = 2,
        Bolme = 3,
        TumunuKaldirma = 4,
        YenidenKoyma = 5,
        BolEkle = 6,
        RezervDuzenleme = 7
    }
    export const enum WithholdingClass {
        Tutara = 1,
        Hesaba = 2
    }
    export const enum WithholdingType {
        KamuKurumuBlokeleri = 1,
        eHaciz = 2,
        FonKullandirim = 3,
        BankacilikBlokeleri = 4
    }
}
declare namespace BOA.Types.Kernel.Accounting {
    interface BalanceGroupItemContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        branchId?: number;
        creditOrDebit?: string;
        fec?: number;
    }
    interface BalanceItemContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        credit?: number;
        debit?: number;
        fec?: number;
    }
    interface ChartOfAccountDetailContract extends BOA.Common.Types.ContractBase {
        accountGroup?: string;
        accountGroup1?: string;
        accountGroup2?: string;
        accountType?: string;
        accountUsers?: string;
        active?: number;
        balanceIncome?: number;
        bSMVAccount?: number;
        bSMVApplied?: number;
        closingDate?: Date;
        commissionSlip?: number;
        correspondent?: number;
        customerType1?: string;
        customerType2?: string;
        customerType3?: string;
        customerType4?: string;
        customerType5?: string;
        dailyBalance?: boolean;
        deductionAccount?: number;
        deductionType?: string;
        detailGroup?: string;
        endSuffix?: number;
        fec?: number;
        fxTL?: number;
        fXType?: number;
        ledgerId?: number;
        ledgerType?: number;
        mainGroup?: string;
        monetary?: number;
        monthlyBalance?: number;
        obligatory?: number;
        participationInvestment?: boolean;
        reconcileType?: boolean;
        risk?: number;
        riskGroupCode?: number;
        riskGroupRate?: number;
        securitiesType?: string;
        sharedPipe?: number;
        startSuffix?: number;
        subjectToAccrual?: boolean;
        systemDate?: Date;
        user?: string;
        validityEndDate?: Date;
        validityStartDate?: Date;
    }
    interface LedgerContract extends BOA.Common.Types.ContractBase {
        ledgerId?: number;
        startSuffix?: number;
    }
}
declare namespace BOA.Types.Kernel.Accrual {
    export const enum AccrualStatusType {
        AccrualFailed = 0,
        PartialAccrual = 1,
        AccrualSucceed = 2,
        AccrualCanceled = 3
    }
    export const enum TransactionSourceType {
        UnKnown = 0,
        AccrualScreen = 1,
        ProjectCollectionScreen = 2,
        AccrualEOD = 3
    }
    export const enum TransactionType {
        TL = 0,
        YP = 1,
        DEK = 2,
        TLtoDEK = 3
    }
    interface LeasingTransferAmountContract extends BOA.Common.Types.ContractBase {
        leasingInvestmentDiscountAmount?: number;
        leasingInvestmentDiscountBaseAmount?: number;
        traceAmount?: number;
    }
    interface PayBackPlanInstallmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accrualFER?: number;
        amount?: number;
        bITTAmount?: number;
        bITTRate?: number;
        branchId?: number;
        businessKey?: number;
        collectionStatus?: number;
        debtFEC?: number;
        debtFECType?: number;
        debtFER?: number;
        excDiffPrincipalBsmvAmount?: number;
        excDiffPrincipalDeficitReverse?: number;
        excDiffPrincipalKkdfAmount?: number;
        exchangeDifferenceAmount?: number;
        exchangeDifferenceBSMVAmount?: number;
        exchangeDifferenceKKDFAmount?: number;
        exchangeDifferencePrincipalAmount?: number;
        exchangeDifferenceProfitAmount?: number;
        exchangeDifferenceVATAmount?: number;
        formerAccrualFER?: number;
        formerExcDiffPrincipalBSMVAmount?: number;
        formerExcDiffPrincipalKKDFAmount?: number;
        fundPool?: number;
        installmentType?: number;
        isAdditionalAccrual?: boolean;
        isLeasing?: boolean;
        maturityDate?: Date;
        orderNumber?: number;
        principalAmount?: number;
        principalExcDiffSpecialAmountForRUSF?: number;
        principalExcDiffSpecialFERForRUSF?: number;
        profitAmount?: number;
        projectCollectionId?: number;
        projectPayBackPlanInstallmentId?: number;
        rUSFAmount?: number;
        rUSFRate?: number;
        vATAmount?: number;
        vATRate?: number;
    }
}
declare namespace BOA.Types.Kernel.Antivirus {
    export const enum FileTypeCategory {
        Unknown = 1,
        Executable = 2,
        Document = 4,
        Archive = 8,
        Graphic = 16,
        Media = 32,
        Mail = 64,
        Text = 128,
        PDF = 256
    }
    export const enum ScanResultType {
        Clean = 0,
        Infected = 1,
        Suspicious = 2,
        FailedToScan = 3
    }
    interface IScanProvider {
    }
    interface IScanRequest {
        fileContent?: any;
        fileName?: string;
    }
    interface IScanResult {
        fileTypeCategory?: BOA.Types.Kernel.Antivirus.FileTypeCategory;
        fileTypeDescription?: string;
        scanResultType?: BOA.Types.Kernel.Antivirus.ScanResultType;
    }
}
declare namespace BOA.Types.Kernel.Archive {
    interface ArchiveMasterContract extends BOA.Common.Types.ContractBase {
        archiveMasterId?: number;
        fileContractList?: BOA.Types.Kernel.Archive.FileContract[];
        hostIP?: string;
        hostName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        workgroupId?: number;
        workgroupName?: string;
    }
    interface Enums {
    }
    interface FileContract extends BOA.Common.Types.ContractBase {
        archiveMasterId?: number;
        blockId?: number;
        blockNumber?: string;
        boxId?: number;
        boxNumber?: number;
        branchBoxNumber?: number;
        customerName?: string;
        customerNumber?: number;
        description?: string;
        fileDestructionId?: number;
        fileId?: number;
        fileNumber?: string;
        fileTypeId?: number;
        fileTypeName?: string;
        firstDate?: Date;
        hostIP?: string;
        hostName?: string;
        lastDate?: Date;
        parentWorkgroupId?: number;
        parentWorkgroupName?: string;
        preservationTime?: number;
        projectNumber?: number;
        seriesId?: number;
        seriesName?: string;
        shelfId?: number;
        shelfNumber?: string;
        sourceDivitId?: string;
        sourceDivitInstanceId?: string;
        sourceId?: number;
        sourceStateDescription?: string;
        sourceStatus?: number;
        sourceTypeId?: number;
        status?: number;
        statusName?: string;
        storageId?: number;
        storageName?: string;
        subSeriesId?: number;
        subSeriesName?: string;
        subWorkgroupId?: number;
        subWorkgroupName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        workgroupId?: number;
        workgroupName?: string;
        year?: string;
    }
}
declare namespace BOA.Types.Kernel.Archive.Enums {
    export const enum ArchiveMasterStatus {
        Saved = 1,
        InventorySent = 2,
        InventoryApproved = 3,
        InventoryReject = 4,
        CargoApproved = 5,
        CargoReject = 6,
        Completed = 7
    }
    export const enum BoxStatus {
        Active = 1,
        Destructed = 2
    }
    export const enum BoxTransactionStatus {
        Created = 1,
        Transferred = 2,
        Destructed = 3
    }
    export const enum FileDemandStatus {
        DemandStarted = 1,
        DemandRejected = 2,
        DemandTransferred = 3,
        DemandGMYRejected = 4,
        DemandCompleted = 5
    }
    export const enum FileDestructionStatus {
        DestructionStarted = 1,
        SendDestruction = 2,
        BranchApproved = 3,
        SendGMYApprovement = 4,
        GMYRejected = 5,
        Completed = 6
    }
    export const enum FileReturnStatus {
        ReturnStarted = 6,
        ReturnApproved = 7,
        ReturnRejected = 8
    }
    export const enum FileStatus {
        Active = 1,
        Custody = 2,
        Destructed = 3
    }
    export const enum FileTransactionStatus {
        Archived = 1,
        Custody = 2,
        Returned = 3,
        Destructed = 4,
        Updated = 5
    }
    export const enum PackageStatus {
    }
    export const enum ResponseType {
        Cancel = 1,
        Ok = 2,
        Update = 3
    }
}
declare namespace BOA.Types.Kernel.Atm {
    export const enum CaseType {
        Banknote = 0,
        Cashin = 1,
        Coin = 2,
        Recycle = 3
    }
    export const enum DeviceTransactionType {
        Retract = 1,
        Deposit = 2,
        Withdraw = 3
    }
    export const enum MobileTransactionCode {
        QRWithdrawal = 10
    }
    export const enum MobileTransactionStatus {
        unstarted = 0,
        processing = 1,
        successful = 2,
        unsuccessful = 3,
        cancelled = 4,
        retracted = 5,
        reversed = 6,
        timeOut = 7
    }
    interface CaseInformationContract extends BOA.Common.Types.ContractBase {
        banknoteType?: number;
        businessKey?: number;
        caseBranch?: number;
        caseInformationID?: number;
        cassetteID?: string;
        cassetteType?: string;
        depositedAmount?: number;
        depositedAmountAcceptanceCasette?: number;
        deviceCaseTotalBalance?: number;
        deviceID?: string;
        deviceSide?: string;
        fecCode?: string;
        loadedAmount?: number;
        ownBranch?: number;
        paidAmount?: number;
        processType?: string;
        remainingAmount?: number;
        updatedDate?: Date;
        xfsCounterTotalBalance?: number;
    }
    interface Constant {
        maxFxDifference?: number;
        minFxDifference?: number;
        preciousMetalMaxDifferenceRate?: number;
        preciousMetalMinDifferenceRate?: number;
    }
    interface CounterBalanceContract extends BOA.Common.Types.ContractBase {
        banknote?: number;
        caseType?: number;
        caseTypeString?: string;
        counter?: number;
        deviceCode?: string;
        fec?: number;
        fecCode?: string;
        id?: number;
        systemDate?: Date;
        totalAmount?: number;
        updateSystemDate?: Date;
    }
    interface CutContract {
        count?: number;
        packageName?: string;
        price?: number;
    }
    interface DepositWithdrawalContract {
        accountBranchId?: number;
        accountInfo?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        accountingDescription?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountTL?: number;
        cardNumber?: string;
        channelId?: number;
        customerInfo?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        description?: string;
        expireDate?: string;
        fec?: number;
        iBAN?: string;
        isActive?: number;
        isWithdrawal?: boolean;
        relativePersonId?: number;
        thirdPersonId?: number;
        tranBranchId?: number;
        tranDate?: Date;
    }
    interface FinancialContract {
        amount?: number;
        description?: string;
        fec?: number;
        fecCode?: string;
        fromAccountName?: string;
        fromAccountNumber?: string;
        peopleAndPlacesBusinessKey?: number;
        runtimePeriod?: number;
        toAccountNumber?: string;
        toAddress?: string;
        toBankId?: number;
        toBankName?: string;
        toBirthDate?: Date;
        toBranchId?: number;
        toBranchName?: string;
        toCardNo?: string;
        toCityId?: number;
        toCityName?: string;
        toCountryCode?: string;
        toCountryId?: number;
        toCountryName?: string;
        toFatherName?: string;
        toIBAN?: string;
        toIntraAccountNumber?: number;
        toIntraAccountSuffix?: number;
        toName?: string;
        toPhoneNumber?: string;
        toSwiftCode?: string;
        transactionCode?: string;
        transactionPerformTime?: Date;
        userId?: number;
    }
    interface InquiryContract {
        cutContractList?: BOA.Types.Kernel.Atm.CutContract[];
        provisionId?: string;
        reference_infokysContract?: BOA.Types.Kernel.Atm.Reference_infokys;
        reload_infoContract?: BOA.Types.Kernel.Atm.Reload_info;
    }
    interface MobileTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        atmCode?: string;
        businessKey?: number;
        fecId?: number;
        languageId?: number;
        mobileBusinessKey?: number;
        mobileTransactionCode?: number;
        mobileTransactionId?: number;
        qRCodeKey?: string;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
    }
    interface MobileTransactionLimitContract extends BOA.Common.Types.ContractBase {
        code?: string;
        description?: string;
        result?: string;
        withdrawalLimit?: number;
        withdrawalRemainingLimit?: number;
    }
    interface PhysicalPreciousMetalAskContract extends BOA.Common.Types.ContractBase {
        bidAskInfo?: BOA.Types.Kernel.Treasury.BidAskContract;
        businessKey?: number;
        coinSerialList?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalCoinSerialContract[];
        fxCompContract?: BOA.Types.Kernel.FX.FXComponentContract;
        ledgerId?: number;
        pPMCoin?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalProductCoin;
        product?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalProduct;
        recipientAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
    }
    interface PrePaidEnums {
    }
    interface Reference_infokys {
        authorization_code?: string;
        bank?: string;
        bill_no?: string;
        date?: string;
        seller?: string;
        stan?: string;
    }
    interface Reload_info {
        reload_cost?: number;
        tHR_order?: string;
    }
}
declare namespace BOA.Types.Kernel.Atm.PrePaidEnums {
    export const enum GsmCorporates {
        Turkcell = 1,
        Avea = 2,
        Vodafone = 3
    }
    export const enum PrepaidPaymentType {
        Account = 1,
        CreditCard = 2
    }
}
declare namespace BOA.Types.Kernel.Authorization {
    interface BoaUserADContract extends BOA.Common.Types.ContractBase {
        managerMailAddress?: string;
        mobilePhone?: string;
        userId?: number;
    }
    interface BoaUserADResultContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorException?: string;
        errorMessage?: string;
        password?: string;
        success?: boolean;
    }
}
declare namespace BOA.Types.Kernel.BES.Agent {
    interface ConstParameter {
    }
    interface OutgoingServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorCode?: string;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        policyNumber?: number;
        requestDate?: Date;
        requestXml?: string;
        responseDate?: Date;
        responseXml?: string;
        serviceCallId?: number;
        serviceConfigurationContract?: BOA.Types.Kernel.BES.Agent.ServiceConfigurationContract;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface ServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        servicePassword?: string;
        serviceTimeout?: number;
        serviceUrl?: string;
        serviceUserName?: string;
    }
    interface UpdateContributionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        newAmount?: number;
        policyNumber?: number;
    }
}
declare namespace BOA.Types.Kernel.BES.Agent.ConstParameter {
    interface LifeMyFamily {
    }
    interface PensionContribution {
    }
    interface PnscntWs {
    }
}
declare namespace BOA.Types.Kernel.BES.Agent.Contracts {
    interface PolicyInfoContract extends BOA.Common.Types.ContractBase {
        customerCode?: number;
        insuredPays?: string;
        offerNumber?: number;
        offerStatus?: string;
        policyNumber?: number;
        policyType?: string;
        statusCode?: string;
    }
}
declare namespace BOA.Types.Kernel.BES.Agent.Request {
    export const enum statusType {
        ARAVERME = 0,
        AKTIF = 1
    }
    interface PolicyQueryRequest extends BOA.Common.Types.RequestBase {
        identificationNumber?: string;
    }
    interface SuspensionOfContributionQueryRequest extends BOA.Common.Types.RequestBase {
        policyNo?: number;
        status?: BOA.Types.Kernel.BES.Agent.Request.statusType;
    }
}
declare namespace BOA.Types.Kernel.Budget.Management {
    interface BudgetHelper {
    }
    interface EntryContract extends BOA.Common.Types.ContractBase {
        description?: string;
        entryId?: number;
        scenarioId?: number;
        scenarioName?: string;
        statusText?: string;
        wFInstanceId?: number;
        wFStatus?: number;
        workGroupCode?: string;
        workgroupId?: number;
        workGroupName?: string;
    }
    interface EntryDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        channelId?: number;
        channelName?: string;
        costCenterId?: number;
        costCenterName?: string;
        customerClassCode?: string;
        customerClassId?: number;
        description?: string;
        entryDetailId?: number;
        entryId?: number;
        fec?: number;
        fecCode?: string;
        itemCode?: string;
        itemName?: string;
        periodContractList?: BOA.Types.Kernel.Budget.Management.EntryDetailPeriodContract[];
        productCode?: string;
        status?: number;
        statusText?: string;
        workGroupId?: number;
        year?: number;
    }
    interface EntryDetailPeriodContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        description?: string;
        entryDetailId?: number;
        period?: number;
    }
    interface ItemAccountContract extends BOA.Common.Types.ContractBase {
        addRemove?: number;
        addRemoveText?: string;
        beginDate?: Date;
        endDate?: Date;
        hostName?: string;
        itemCode?: string;
        ledgerCode?: string;
        ledgerName?: string;
        relatedItemCode?: string;
        relatedReportId?: number;
        relatedReportName?: string;
        reportId?: number;
        shareRatio?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ItemContract extends BOA.Common.Types.ContractBase {
        accountList?: BOA.Types.Kernel.Budget.Management.ItemAccountContract[];
        ancestorItemCodes?: string[];
        beginDate?: Date;
        depth?: number;
        description?: string;
        detailContract?: BOA.Types.Kernel.Budget.Management.ItemDetailContract;
        detailGroup?: string;
        endDate?: Date;
        fullName?: string;
        hostName?: string;
        isLeafLevel?: number;
        itemCode?: string;
        languageId?: number;
        lastDigits?: number;
        ledgerList?: BOA.Types.Kernel.Budget.Management.ItemLedgerContract[];
        mainGroup?: string;
        name?: string;
        nameAR?: string;
        nameDE?: string;
        nameEN?: string;
        nameTR?: string;
        parentItemCode?: string;
        recordStatus?: number;
        reportId?: number;
        sortId?: number;
        subGroup?: string;
        systemDate?: Date;
        tagList?: BOA.Types.Kernel.Budget.Management.ItemTagContract[];
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        wFStatus?: number;
    }
    interface ItemDetailContract extends BOA.Common.Types.ContractBase {
        calculationType?: number;
        distributionType?: number;
        isCore?: number;
        isFixed?: number;
        isQuantity?: number;
        itemCode?: string;
        recurrence?: number;
        regressionType?: number;
        reportId?: number;
    }
    interface ItemLedgerContract extends BOA.Common.Types.ContractBase {
        fecBehavior?: number;
        hostName?: string;
        itemCode?: string;
        ledgerId?: number;
        ledgerName?: string;
        shareRatio?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ItemTagContract extends BOA.Common.Types.ContractBase {
        itemCode?: string;
        reportId?: number;
        tag?: string;
    }
    interface ItemTreeNodeContract extends BOA.Common.Types.ContractBase {
        children?: BOA.Types.Kernel.Budget.Management.ItemTreeNodeContract[];
        dataContract?: BOA.Types.Kernel.Budget.Management.ItemContract;
        isExpanded?: boolean;
    }
    interface ReportContract extends BOA.Common.Types.ContractBase {
        beginPeriod?: number;
        branchPerspectiveItemId?: number;
        channelPerspectiveItemId?: number;
        costCenterPerspectiveItemId?: number;
        customerClassPerspectiveItemId?: number;
        description?: string;
        endPeriod?: number;
        fecPerspectiveItemId?: number;
        hostName?: string;
        languageId?: number;
        name?: string;
        perspectiveBranchName?: string;
        perspectiveChannelName?: string;
        perspectiveCostCenterName?: string;
        perspectiveCustomerClassName?: string;
        perspectiveFECName?: string;
        perspectiveProductName?: string;
        productPerspectiveItemId?: number;
        reportId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ScenarioContract extends BOA.Common.Types.ContractBase {
        authorizationStatus?: number;
        authorizationStatusDescription?: string;
        description?: string;
        isDefault?: number;
        languageId?: number;
        name?: string;
        planningBeginPeriod?: number;
        planningEndPeriod?: number;
        scenarioDetailList?: BOA.Types.Kernel.Budget.Management.ScenarioDetailContract[];
        scenarioId?: number;
        stagingBeginPeriod?: number;
        stagingEndPeriod?: number;
        status?: number;
        statusDescription?: string;
        year?: number;
    }
    interface ScenarioDetailContract extends BOA.Common.Types.ContractBase {
        description?: string;
        languageId?: number;
        name?: string;
        scenarioId?: number;
    }
}
declare namespace BOA.Types.Kernel.Budget.Management.BudgetHelper {
    export const enum ItemLanguage {
        TR = 1,
        EN = 2,
        DE = 3,
        AR = 5
    }
    export const enum ItemRecordStatus {
        Added = 1,
        Deleted = 2,
        Updated = 3,
        None = 0
    }
}
declare namespace BOA.Types.Kernel.BusinessHelper {
    export const enum BarcodeFormatType {
        AZTEC = 1,
        CODABAR = 2,
        CODE_39 = 4,
        CODE_93 = 8,
        CODE_128 = 16,
        DATA_MATRIX = 32,
        EAN_8 = 64,
        EAN_13 = 128,
        ITF = 256,
        MAXICODE = 512,
        PDF_417 = 1024,
        QR_CODE = 2048,
        RSS_14 = 4096,
        RSS_EXPANDED = 8192,
        UPC_A = 16384,
        UPC_E = 32768,
        UPC_EAN_EXTENSION = 65536,
        MSI = 131072,
        PLESSEY = 262144,
        All_1D = 192990
    }
    interface AccessPointTextRequest extends BOA.Common.Types.RequestBase {
        accessPointId?: number;
    }
    interface AccessPointUserRequest extends BOA.Common.Types.RequestBase {
        userCode?: string;
        userId?: number;
    }
    interface AccountComponentCustomerInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        checkCustomerDeathStatus?: boolean;
        isBlackListInfoNeeded?: boolean;
        isValueSegmentNeeded?: boolean;
        stateNoList?: number[];
        status?: number;
        useDefaultPersonOnMernisControl?: boolean;
        useDefaultPersonOnTaxNumberControl?: boolean;
    }
    interface AccountConstraintInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        accountSuffix?: number;
        date?: Date;
        resourceCode?: string;
        userId?: number;
    }
    interface AccountConstraintRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.Account.AccountConstraintContract;
    }
    interface AccountCorrespondentRequest extends BOA.Common.Types.RequestBase {
        accountDetailGroupFilterList?: number[];
        accountNumber?: number;
        accountSuffix?: number;
        fec?: number;
        isExchange?: boolean;
        isGroupCorrespondent?: boolean;
        isInSSIList?: boolean;
        isNetting?: boolean;
        isPlasman?: boolean;
        isSettlement?: boolean;
    }
    interface AccountingInfoByRefRequest extends BOA.Common.Types.RequestBase {
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface AccountingInfoRequest extends BOA.Common.Types.RequestBase {
        accountingDate?: Date;
        accountNumber?: number;
        branchCode?: number;
        businessKey?: number;
        fec?: number;
        ledgerId?: number;
        numberOfReferences?: number;
        term?: number;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface AccountNoteRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.Customer.AccountNoteContract;
    }
    interface AccountOpenRequest extends BOA.Common.Types.TransactionRequestBase {
        accountOpenContract?: BOA.Types.Kernel.Account.AccountOpenContract;
    }
    interface AccountProductivityRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        date?: Date;
    }
    interface AccountReminderRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        accountSuffix?: number;
    }
    interface AccountReminderSaveRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.Account.AccountReminderContract;
    }
    interface AgreementRequest extends BOA.Common.Types.RequestBase {
        agreementId?: number;
        code?: string;
    }
    interface ApplicationRightRequest extends BOA.Common.Types.RequestBase {
        applicationName?: string;
    }
    interface AuthorizationModuleRequest extends BOA.Common.Types.RequestBase {
    }
    interface AuthorizationRoleListOfWorkgroupRequest extends BOA.Common.Types.RequestBase {
        workgroupId?: number;
    }
    interface AuthorizationRoleListRequest extends BOA.Common.Types.RequestBase {
    }
    interface AuthorizationUserListRequest extends BOA.Common.Types.RequestBase {
    }
    interface AuthorizationWorkgroupTreeRequest extends BOA.Common.Types.RequestBase {
    }
    interface BalanceRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
    }
    interface BankCorrespondentRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        correspondentId?: number;
        correspondentName?: string;
        fec?: number;
        isNetting?: boolean;
        isPlasman?: boolean;
        isSettlement?: boolean;
        swiftCode?: string;
    }
    interface BanknoteRequest extends BOA.Common.Types.RequestBase {
        doNotUseCache?: boolean;
        fec?: number;
    }
    interface BankRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        bankContract?: BOA.Types.Kernel.General.BankContract;
        bankId?: number;
        bankType?: number;
        branchId?: number;
        cityId?: number;
        customerIdFilter?: number;
        isClosedBanksInclude?: boolean;
        isClosedBranchesInclude?: boolean;
        sortBySortId?: boolean;
    }
    interface BanksoftATMRequest extends BOA.Common.Types.TransactionRequestBase {
        accountNumber?: number;
        cardNumber?: string;
        description?: string;
        iPAddress?: string;
        sourceCode?: BOA.Types.Kernel.CreditCard.BanksoftResourceCode;
        updateCardAccount?: BOA.Types.Kernel.CreditCard.AddCardAccount[];
    }
    interface BankSoftCCRequest extends BOA.Common.Types.TransactionRequestBase {
        accountNumber?: number;
        isJustMainCard?: boolean;
        isWithLimit?: boolean;
        productTypeList?: string[];
    }
    interface BarcodeRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.General.BarcodeContract;
    }
    interface BlackListRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        birthDate?: Date;
        corporateName?: string;
        fatherName?: string;
        motherName?: string;
        name?: string;
        searchType?: number;
        surname?: string;
        taxNumber?: string;
    }
    interface BoaUserListRequest extends BOA.Common.Types.RequestBase {
        accessPointId?: number;
        accessPointIdList?: number[];
        doNotUseCache?: boolean;
        isServiceUserEnabled?: boolean;
        userIdList?: number[];
    }
    interface BoaUserRequest extends BOA.Common.Types.RequestBase {
        searchValue?: string;
        userCode?: string;
        userId?: number;
    }
    interface BranchPersonInfoRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.General.BranchPersonInfoContract;
    }
    interface BranchRequest extends BOA.Common.Types.RequestBase {
        branchCode?: number;
        branchContract?: BOA.Types.Kernel.General.BankBranchContract;
        branchType?: string;
        cityCode?: number;
        doNotUseCache?: boolean;
        isInFreeZone?: number;
        regionCode?: number;
    }
    interface BranchUnitRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Common.Types.BranchUnitContract;
    }
    interface CacheableParameterRequest extends BOA.Common.Types.RequestBase {
        paramTypeList?: string[];
    }
    interface CalendarRequest extends BOA.Common.Types.RequestBase {
        countryCode?: string;
        date?: Date;
        dateList?: Date[];
        dayCount?: number;
        doNotUseCache?: boolean;
        endDate?: Date;
        fecId?: number;
        isForSaveProcess?: boolean;
        startDate?: Date;
    }
    interface ChannelRequest extends BOA.Common.Types.RequestBase {
        channelContract?: BOA.Common.Types.ChannelContract;
        doNotUseCache?: boolean;
        userId?: number;
    }
    interface CityRequest extends BOA.Common.Types.RequestBase {
        countryId?: number;
        customerIdFilter?: number;
        doNotUseCache?: boolean;
    }
    interface CommissionInstantRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        branchId?: number;
    }
    interface CommissionJournalRequest extends BOA.Common.Types.RequestBase {
        commissionJournalId?: number;
    }
    interface CommissionReverseRequest extends BOA.Common.Types.RequestBase {
        paymentTranBranchId?: number;
        paymentTranDate?: Date;
        safeOrAccount?: number;
    }
    interface CommissionSerializeRequest extends BOA.Common.Types.RequestBase {
        commissionInfo?: BOA.Common.Types.CommissionContract;
        serializeId?: number;
    }
    interface CommunicationNumberGeneratorRequest extends BOA.Common.Types.TransactionRequestBase {
        barcodeNo?: string;
        hostName?: string;
        inorout?: number;
        instanceId?: any;
        receiverId?: number;
        resourceCode?: string;
        subject?: string;
        userCode?: string;
    }
    interface CommunicationPaneRequest extends BOA.Common.Types.TransactionRequestBase {
        userCode?: string;
    }
    interface ComponentLabelStandardsRequest extends BOA.Common.Types.RequestBase {
        component?: string;
        label?: string;
        property?: string;
        requestList?: BOA.Types.Kernel.BusinessHelper.ComponentLabelStandardsRequest[];
    }
    interface CorporatePersonRequest extends BOA.Common.Types.TransactionRequestBase {
        personInfo?: BOA.Types.Kernel.Customer.CorporatePersonInfoContract;
    }
    interface CorporationRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        corporationName?: string;
        swiftCode?: string;
    }
    interface CountryRequest extends BOA.Common.Types.RequestBase {
        doNotUseCache?: boolean;
        isCountry?: boolean;
    }
    interface CountyRequest extends BOA.Common.Types.RequestBase {
        cityId?: number;
        doNotUseCache?: boolean;
    }
    interface CreditCardListRequest extends BOA.Common.Types.TransactionRequestBase {
        accountNumber?: number;
        cardFilterType?: number;
        isJustMainCard?: boolean;
        isWithLimit?: boolean;
        productTypeList?: string[];
    }
    interface CrossMarketingRequest extends BOA.Common.Types.RequestBase {
        accessPoints?: number[];
        accountNumber?: number;
        birthDate?: Date;
        branch?: number;
        crossMarketingCodeList?: string[];
        crossMarketingDefinitionIDList?: number[];
        crossMarketingList?: BOA.Types.Kernel.CrossMarketing.CrossMarketingContract[];
        dataContract?: BOA.Types.Kernel.CrossMarketing.CrossMarketingContract;
    }
    interface Customer360CommunicationInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        personType?: number;
    }
    interface Customer360CorporateInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
    }
    interface Customer360IndividualInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
    }
    interface Customer360InstantPDFRequest extends BOA.Common.Types.RequestBase {
        customer360InstantId?: number;
    }
    interface CustomerAddressRequest extends BOA.Common.Types.RequestBase {
        addressType?: number;
        customerId?: number;
        isDefault?: boolean;
        roleId?: number;
    }
    interface CustomerConfidentialInfoRequest extends BOA.Common.Types.RequestBase {
        customerId?: number;
        identiyNumber?: string;
        personId?: number;
    }
    interface CustomerDocumentInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
    }
    interface CustomerExceptionCheckRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        channelId?: number;
    }
    interface CustomerInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        chequeBookState?: number;
        date?: string;
        fec?: number;
        iBAN?: string;
        isActive?: boolean;
        isCollection?: boolean;
        isSharedAccountsIncluded?: boolean;
        isSharedAccountsIncludedWithSingleSignature?: boolean;
        maturityGroup?: number;
        productCode?: string;
        startDate?: Date;
        term?: number;
        today?: Date;
        totalBalance?: number;
        withholdingClass?: number;
        withHoldingType?: number;
    }
    interface CustomerListByRoleRequest extends BOA.Common.Types.RequestBase {
        roleId?: number;
    }
    interface CustomerParameterRequest extends BOA.Common.Types.RequestBase {
        groupName?: string;
        itemName?: string;
        itemValue?: string;
    }
    interface CustomerRelationsRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
    }
    interface CustomerRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        isDefault?: number;
    }
    interface CustomerSearchRequest extends BOA.Common.Types.RequestBase {
        customerEntry?: string;
        personId?: number;
    }
    interface DivitCompareDocumentContract extends BOA.Common.Types.ContractBase {
        docId?: number;
        flowId?: string;
        instanceId?: string;
    }
    interface DivitDocumentsRequest extends BOA.Common.Types.RequestBase {
        divitId?: string;
        flowId?: string;
        flowStepId?: string;
        instanceId?: string;
        profileId?: string;
    }
    interface DivitMailRequest extends BOA.Common.Types.TransactionRequestBase {
        divitMailContent?: string;
        divitMailDefinitionCode?: string;
        divitMailTo?: string;
        requestedDocumentList?: BOA.Types.Kernel.DMS.DivitMail.DivitMailDefinitionDocumentContract[];
        transactionRequest?: BOA.Common.Types.RequestBase;
    }
    interface DivitParametersContract extends BOA.Common.Types.ContractBase {
        applicationName?: string;
        customerId?: number;
        divisor?: number;
        divitId?: string;
        editorMode?: number;
        flowId?: string;
        flowName?: string;
        flowStepId?: string;
        instanceId?: string;
        isXtmActionsEnabled?: boolean;
        isYourCornerDocument?: boolean;
        loadCustomerFiles?: boolean;
        notificationMsg?: string;
        objectStoreName?: string;
        otherDocsSwiftMsgQueryIdList?: string[];
        pageHeader?: string;
        personId?: number;
        personMailListToNotify?: string;
        personUserIdListToNotify?: number[];
        profileId?: string;
        relationalDivitList?: BOA.Types.Kernel.BusinessHelper.DivitParametersContract[];
        workflowParameterContract?: BOA.Types.Kernel.BusinessHelper.WorkFlowContract;
    }
    interface DivitServiceChangeFlowWithPrmRequest extends BOA.Common.Types.RequestBase {
        flowId?: string;
        instanceId?: string;
        newFlowId?: string;
        newInstanceId?: string;
    }
    interface DivitServiceDocumentListRequest extends BOA.Common.Types.RequestBase {
        documentName?: string;
        documentType?: number;
        flowId?: any;
        flowStepId?: any;
        instanceId?: string;
        profileId?: any;
    }
    interface DMSDocumentFlowMapRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DMS.DocumentFlowMapContract;
    }
    interface DMSFlowRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DMS.FlowContract;
    }
    interface DMSInfoRequest extends BOA.Common.Types.RequestBase {
        divitId?: string;
        divitSearchDataContract?: BOA.Types.Kernel.DMS.DivitSearchContract;
        docId?: string;
        flowId?: string;
        instanceId?: string;
    }
    interface DMSRequest extends BOA.Common.Types.RequestBase {
        applicationName?: string;
        documentName?: string;
        documentPath?: string;
        flowId?: string;
        flowStepId?: string;
        instanceId?: number;
        profileId?: string;
    }
    interface DocumentCopyRequest extends BOA.Common.Types.TransactionRequestBase {
        docId?: number;
        flowId?: any;
        instanceId?: string;
        newDocId?: number;
        newFlowId?: any;
        newInstanceId?: string;
    }
    interface DocumentGetRequest extends BOA.Common.Types.RequestBase {
        fileServerObjectId?: any;
        flowId?: any;
        instanceId?: string;
        relationalId?: string;
    }
    interface DocumentSaveRequest extends BOA.Common.Types.TransactionRequestBase {
        divisor?: number;
        divitId?: string;
        documentContent?: number[];
        documentContentIsColored?: number[];
        documentContentIsDivided?: number[];
        documentDescription?: string;
        documentExtension?: string;
        documentMimeType?: string;
        documentName?: string;
        documentPath?: string;
        documentState?: number;
        documentType?: number;
        fileServerObjectId?: any;
        flowId?: any;
        flowIdString?: string;
        flowInstanceFolderDescription?: string;
        folderDescription?: string;
        instanceId?: string;
        isWorkingParallel?: boolean;
        manuelUserName?: string;
        newFileServerObjectId?: any;
        newVersionNumber?: number;
        orderNumber?: number;
        personNumber?: number;
        readFromPath?: boolean;
        relationalId?: string;
        stringInstance?: string;
        validityBeginDate?: Date;
        validityEndDate?: Date;
        workflowParameterContract?: BOA.Types.Kernel.BusinessHelper.WorkFlowContract;
    }
    interface EmailRequest extends BOA.Common.Types.TransactionRequestBase {
        emailContractList?: BOA.Types.Kernel.General.EmailContract[];
    }
    interface FavoriteResourceRequest extends BOA.Common.Types.RequestBase {
        isMenu?: number;
        resourceId?: number;
        roleId?: number;
        sortOrder?: number;
        targetOrder?: number;
        userName?: string;
    }
    interface FecReceiptInfoRequest extends BOA.Common.Types.RequestBase {
        branchId?: number;
        fecReceiptSerial?: BOA.Types.Kernel.General.FECReceiptSerial;
        seqNum?: number;
        tranDate?: Date;
    }
    interface FECReceiptRequest extends BOA.Common.Types.RequestBase {
        businessKey?: number;
        fec?: number;
        fecReceiptSerial?: BOA.Types.Kernel.General.FECReceiptSerial;
    }
    interface FECRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.General.FECContract;
        doNotUseCache?: boolean;
        fecCode?: string;
        fecId?: number;
    }
    interface FilenetInfoRequest extends BOA.Common.Types.RequestBase {
        bOAApplicationName?: string;
        bOAApplicationStepId?: string;
        divitId?: string;
        instanceId?: string;
        relationInfoList?: BOA.Types.Kernel.DMS.FilenetInfoRelationContract[];
    }
    interface FilenetRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
    }
    interface FilenetUserInfoRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DMS.FilenetUserInfoContract;
        tCNo?: number;
    }
    interface FlatFileSystemRequest extends BOA.Common.Types.RequestBase {
        fileDefinition?: any;
    }
    interface FlexValueRequest extends BOA.Common.Types.RequestBase {
        code?: string;
        dataContract?: BOA.Types.Kernel.HR.FlexValues;
        endDate?: Date;
        flexValId?: number;
        flexValSetId?: number;
        flexValue?: string;
        flexValue1?: string;
        flexValue10?: string;
        flexValue2?: string;
        flexValue3?: string;
        flexValue4?: string;
        flexValue5?: string;
        flexValue6?: string;
        flexValue7?: string;
        flexValue8?: string;
        flexValue9?: string;
        hostIP?: string;
        hostName?: string;
        parentFlexValue?: string;
        sortOrder?: number;
        startDate?: Date;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ForwardRequest extends BOA.Common.Types.RequestBase {
        proposalPayBackPlanInstallmentId?: number;
    }
    interface FXDepositRequest extends BOA.Common.Types.RequestBase {
        fec?: number;
        indexType?: number;
        term?: number;
        tranDate?: Date;
    }
    interface FXEngineRequest extends BOA.Common.Types.RequestBase {
        accountClass?: number;
        accountNumber?: number;
        businessKey?: number;
        channel?: number;
        fec?: number;
        fec1?: number;
        fec1TranAmount?: number;
        fec2?: number;
        fec2TranAmount?: number;
        fecGroup?: number;
        fXId?: number;
        fXJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        fXKey?: number;
        fXReference?: BOA.Types.Kernel.FX.FXReferenceContract;
        indexType?: number;
        isEffectiveTransaction?: boolean;
        isForward?: boolean;
        isForwardMaturityDateShifting?: boolean;
        isFXRateNoMargineEnabled?: boolean;
        isReverseTransaction?: boolean;
        journalBusinessKey?: number;
        maturityDate?: Date;
        reference?: string;
        referenceBusinessKey?: number;
        tranAmount?: number;
        tranDate?: Date;
        tranFXRate?: number;
        tranType?: number;
        userId?: number;
        userName?: string;
    }
    interface FXJournalRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.FX.FXJournalContract;
    }
    interface FXParityBaseRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.FX.FXParityBaseContract;
    }
    interface FXRateInfoRequest extends BOA.Common.Types.RequestBase {
        beginDate?: Date;
        endDate?: Date;
        fec?: number;
        fecList?: number[];
        indexType?: number;
        inUse?: number;
        timeInterval?: number;
        tranDate?: Date;
        tranDateAndTime?: Date;
    }
    interface FXRateRequest extends BOA.Common.Types.RequestBase {
        fXRateInfo?: BOA.Types.Kernel.FX.FXRateContract;
    }
    interface FXVolatilityRequest extends BOA.Common.Types.RequestBase {
        fecPair?: number;
        term?: number;
        tranDate?: Date;
    }
    interface GetAccountByProductInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        productCode?: string;
    }
    interface GetAccountInfoRequest extends BOA.Common.Types.RequestBase {
        accountingSafeNumber?: number;
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        channelId?: number;
        constraintType?: number;
        creditCardNumber?: string;
        date?: Date;
        fec?: number;
        ledgerId?: number;
        productGroup?: number;
        productSegment?: number;
        resourceCode?: string;
        tranDate?: Date;
    }
    interface GetAllowedAccessPointRequest extends BOA.Common.Types.RequestBase {
        bitmask?: number;
        resourceId?: number;
        roleId?: number;
        workgroupId?: number;
    }
    interface GoldOrderByCredirtCardRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.FX.GoldOrderContract;
    }
    interface HardCodedTextRequest extends BOA.Common.Types.RequestBase {
        existingMessages?: BOA.Common.Types.MessageContract[];
        fileFilter?: string;
        groupName?: string;
        groups?: BOA.Types.Kernel.Messaging.MessagingGroupContract[];
        sourceFolder?: string;
    }
    interface HumanResourceRequest extends BOA.Common.Types.RequestBase {
        employeeNumber?: number;
    }
    interface IBANAccountInfoRequest extends BOA.Common.Types.RequestBase {
        iBAN?: string;
    }
    interface IndividualPersonRequest extends BOA.Common.Types.TransactionRequestBase {
        personInfo?: BOA.Types.Kernel.Customer.IndividualPersonInfoContract;
    }
    interface InvoiceRequest extends BOA.Common.Types.RequestBase {
        accountingContract?: BOA.Types.Kernel.ErpInvoice.InvoiceAccountingContract;
        accountingDate?: Date;
        accountingNumber?: number;
        approvelStatu?: number;
        branchID?: number;
        budgetId?: number;
        costCenterID?: number;
        dataContract?: BOA.Types.Kernel.ErpInvoice.InvoiceContract;
        description?: string;
        divitInstanceId?: number;
        fecID?: number;
        hostIP?: string;
        hostName?: string;
        invoiceChannel?: number;
        invoiceDate?: Date;
        invoiceId?: number;
        invoiceNumber?: string;
        invoiceStatu?: number;
        invoiceType?: number;
        invPaymentContract?: BOA.Types.Kernel.ErpInvoice.InvoicePaymentContract;
        ledgerID?: number;
        paymentAmount?: number;
        paymentCondition?: number;
        paymentContract?: BOA.Types.Kernel.ErpInvoice.ExpensePaymentsContract;
        paymentDate?: Date;
        paymentGroup?: number;
        pEBeginDate?: Date;
        pEEndDate?: Date;
        prePaidExpense?: number;
        rate?: number;
        rateDate?: Date;
        rateTypeId?: number;
        stopajAmount?: number;
        stopajType?: number;
        systemDate?: Date;
        taxTotalAmount?: number;
        totalAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorBankId?: number;
        vendorId?: number;
    }
    interface KernelMethodBrowserRequest extends BOA.Common.Types.RequestBase {
    }
    interface LookupDataRequest extends BOA.Common.Types.RequestBase {
        id?: number;
        id2?: number;
    }
    interface MernisAddressRequest extends BOA.Common.Types.RequestBase {
        forceOnline?: boolean;
        identityNumber?: string;
    }
    interface MernisCheckRequest extends BOA.Common.Types.RequestBase {
        identityNumber?: string;
    }
    interface MernisForCorporateRequest extends BOA.Common.Types.RequestBase {
        establishmentPlaceCode?: string;
        establishmentYear?: number;
        firmName?: string;
        taxNumber?: string;
    }
    interface MernisRequest extends BOA.Common.Types.RequestBase {
        forceOnline?: boolean;
        identityNumber?: string;
        parameterContract?: BOA.Types.Kernel.Customer.MernisParameterContract;
    }
    interface MessageRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Common.Types.MessageContract;
    }
    interface OnlineAgreementBrowseRequest extends BOA.Common.Types.RequestBase {
        agreementGroupCode?: string;
        doNotUseCache?: boolean;
    }
    interface OnlineAgreementRequest extends BOA.Common.Types.TransactionRequestBase {
        agreementGroupCode?: string;
        divitInstanceId?: string;
        docId?: number;
        documentLanguageId?: number;
        flowId?: string;
    }
    interface ParameterDefaultRequest extends BOA.Common.Types.RequestBase {
        parameterDefaultContract?: BOA.Types.Kernel.General.ParameterDefaultContract;
    }
    interface ParameterExtendedRequest extends BOA.Common.Types.RequestBase {
        parameterExtendedContract?: BOA.Types.Kernel.General.ParameterExtendedContract;
    }
    interface ParameterRateInfoRequest extends BOA.Common.Types.RequestBase {
        amount?: number;
        parameterRateContract?: BOA.Types.Kernel.General.ParameterRateContract;
        tranDate?: string;
    }
    interface ParameterRequest extends BOA.Common.Types.RequestBase {
        doNotUseCache?: boolean;
        forcedLanguageId?: number;
        parameterContract?: BOA.Types.Kernel.General.ParameterContract;
        parameterContractList?: BOA.Types.Kernel.General.ParameterContract[];
        paramTypeList?: string[];
    }
    interface PersonImageRequest extends BOA.Common.Types.RequestBase {
        personId?: number;
    }
    interface PersonInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        birthPlace?: string;
        isDefault?: boolean;
        personId?: number;
        relationshipTypeid?: number;
        taxNumber?: string;
    }
    interface PersonRelationsRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        relationshipTypeid?: number;
    }
    interface PersonSearchRequest extends BOA.Common.Types.RequestBase {
        finishDate?: Date;
        personId?: number;
        personName?: string;
        personType?: number;
        selectedBranchId?: number;
        startDate?: Date;
        taxNo?: string;
        taxNumberIsNull?: boolean;
    }
    interface PhysicalPreciousMetalRequest extends BOA.Common.Types.RequestBase {
        branchId?: number;
        fec?: number;
        pPMDlValue?: string;
        productId?: number;
        resourceCode?: string;
        serialNumber?: string;
        serialNumbers?: string[];
        tranType?: number;
    }
    interface ProductInfoRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        accountSuffix?: number;
        channelId?: number;
        customerType?: string;
        fec?: number;
        maturityTerm?: number;
        productCode?: string;
        productSegmentContract?: BOA.Types.Kernel.Product.ProductSegmentContract;
    }
    interface ProductRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        channelId?: number;
        customerClass?: number;
        customerType?: string;
        doNotUseCache?: boolean;
        fec?: number;
        ignoreBeginAndEndDates?: boolean;
        ignoreProductSegmentBeginAndEndDates?: boolean;
        level?: number;
        parentProductCode?: string;
        parentProductCodeList?: string[];
        personType?: number;
        portfolioClass?: number;
        productGroup?: number[];
        productType?: number;
        productTypeList?: number[];
    }
    interface ProductTreasuryRequest extends BOA.Common.Types.RequestBase {
        productCode?: string;
        productSubType?: string;
    }
    interface ProfitShareInfoRequest extends BOA.Common.Types.RequestBase {
        fec?: number;
        ledgerCode?: number;
        processDate?: Date;
        productCode?: string;
        segmentCode?: string;
        term?: number;
        unitValueDate?: Date;
    }
    interface QDMFileRequest extends BOA.Common.Types.RequestBase {
        currentFileIdentity?: string;
        dataContract?: BOA.Types.Kernel.QDM.FileContract;
        qrCodeList?: string[];
        totalPageCount?: number;
    }
    interface QrCodedDivitParametersContract {
        customerId?: number;
        divitId?: string;
        docId?: number;
        fileIdentity?: string;
        instanceId?: string;
    }
    interface ReceiptRequest extends BOA.Common.Types.RequestBase {
        businessKey?: number;
        mainBusinessKey?: number;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface ReportFieldStandardsRequest extends BOA.Common.Types.RequestBase {
        reportField?: string;
        requestList?: BOA.Types.Kernel.BusinessHelper.ReportFieldStandardsRequest[];
    }
    interface ReportingRequest extends BOA.Common.Types.RequestBase {
        reportDataSetList?: BOA.Types.Kernel.General.ReportDataSetContract[];
    }
    interface ResourceActionAuthorizedUserForWorkflowRequest extends BOA.Common.Types.RequestBase {
        instanceStateId?: number;
        ownerWorkgroupId?: number;
        stateName?: string;
        transactionWorkgroupId?: number;
        workflowResourceId?: number;
    }
    interface ResourceActionAuthorizedUserRequest extends BOA.Common.Types.RequestBase {
        actionList?: number[];
        selectedResourceId?: number;
    }
    interface ResourceActionStandardsRequest extends BOA.Common.Types.RequestBase {
        actionName?: string;
        iconPath?: string;
        requestList?: BOA.Types.Kernel.BusinessHelper.ResourceActionStandardsRequest[];
        resourceCode?: string;
    }
    interface ResourceRequest extends BOA.Common.Types.RequestBase {
        channelId?: number;
        name?: string;
        parentId?: number;
        resourceId?: number;
        typeId?: number;
    }
    interface ResourceTreeRequest extends BOA.Common.Types.RequestBase {
        doNotUseCache?: boolean;
        hasAccounting?: boolean;
        isRevokable?: boolean;
        isWorkflow?: boolean;
    }
    interface ReverceAccountControllerRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        channelId?: number;
        operation?: BOA.Common.Types.ReverseOperation;
        reverseBusinessKey?: number;
    }
    interface RoleListRequest extends BOA.Common.Types.RequestBase {
    }
    interface SearchAccessPointsRequest extends BOA.Common.Types.RequestBase {
        canUserSelectOwnWorkGroupRoot?: boolean;
        root?: number;
        searchText?: string;
    }
    interface SlipAttribute {
    }
    interface SlipRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.BusinessHelper.SlipViewerContract;
        slipType?: BOA.Common.Types.SlipType;
    }
    interface SlipViewerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        fromAccountNumber?: number;
        isFromAccountPersonnel?: boolean;
        isOldOrUndefinedSlip?: boolean;
        isToAccountPersonnel?: boolean;
        languageId?: number;
        printCount?: number;
        resourceReference?: number;
        resourceReferenceResourceCode?: string;
        slipAmount?: number;
        slipAmountList?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipBodyDescription?: string;
        slipBodyList?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipData?: number[];
        slipDefinitionId?: number;
        slipFEC?: number;
        slipFECFractionName?: string;
        slipFECName?: string;
        slipFooterList?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipLeftHeaderList?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipList?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipReference?: number;
        slipReferenceUserCode?: string;
        slipRightHeaderList?: BOA.Common.Types.SlipDefinitionDetailContract[];
        slipTitle?: string;
        slipType?: BOA.Common.Types.SlipType;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        tranDate?: Date;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface SMSRequest extends BOA.Common.Types.RequestBase {
        sMSContractList?: BOA.Types.Kernel.General.SMSContract[];
    }
    interface StoredProcedureRequest extends BOA.Common.Types.TransactionRequestBase {
        databaseName?: string;
        schemaName?: string;
        spName?: string;
    }
    interface SurveyManagementRequest extends BOA.Common.Types.TransactionRequestBase {
        data?: string;
        dataContract?: BOA.Types.Kernel.General.SurveyContract;
    }
    interface TaskPaneRequest extends BOA.Common.Types.TransactionRequestBase {
    }
    interface TaskPayerRequest extends BOA.Common.Types.RequestBase {
        taxNumber?: string;
    }
    interface TaxPayerInquiryRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.Inquiry.TaxPayerInquiryContract;
    }
    interface TellerInfoRequest extends BOA.Common.Types.RequestBase {
        accountingSafeNumber?: number;
        branchId?: number;
        fec?: number;
        tranDate?: Date;
        userId?: number;
    }
    interface TellerRequest extends BOA.Common.Types.RequestBase {
        branchId?: number;
        getUsersOnHoliday?: boolean;
        userName?: string;
    }
    interface ThirdPartyWithRelationPersonsSerializeRequest extends BOA.Common.Types.RequestBase {
        serializeId?: number;
        thirdPartyWithRelationPersonsSerializeInfo?: BOA.Types.Kernel.General.ThirdPartyWithRelationPersonsSerializeContract;
    }
    interface TimeScheduleRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.General.TimeScheduleContract;
    }
    interface WhiteListRequest extends BOA.Common.Types.RequestBase {
        templateCode?: string;
    }
    interface WorkFlowContract extends BOA.Common.Types.ContractBase {
        instanceId?: number;
        instanceUserIdList?: string[];
    }
    interface WorkflowHelperRequest extends BOA.Common.Types.TransactionRequestBase {
        actionId?: number;
        calledFromThirdParty?: number;
        changeStatus?: boolean;
        commandName?: string;
        firstActionId?: number;
        flowVersionId?: number;
        inQueue?: boolean;
        instanceId?: number;
        instanceRunId?: number;
        instanceStateId?: number;
        instanceUserId?: number;
        instanceUserWorkState?: BOA.Common.Types.InstanceUserWorkState;
        isRead?: boolean;
        isReverse?: boolean;
        itemNumber?: number;
        listWorkStateContract?: BOA.Common.Types.WorkflowChangeWorkStateContract[];
        openDataForApproveRequestPack?: BOA.Common.Types.OpenDataForApproveRequestPackContract;
        queryToken?: string;
        requestSource?: BOA.Common.Types.PackageRequestSource;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        status?: BOA.Common.Types.UserStatus;
        userCode?: string;
        userStatus?: BOA.Common.Types.UserStatusContract;
        workGroupId?: number;
        workStateContract?: BOA.Common.Types.WorkflowChangeWorkStateContract;
    }
    interface WorkflowPromoteFromOutsideShadowRequest extends BOA.Common.Types.TransactionRequestBase {
        approverNote?: string;
        commandName?: string;
        flowVersionId?: number;
        instanceId?: number;
        instanceRunId?: number;
        instanceStateId?: number;
        itemNumber?: number;
        stateId?: number;
        userCode?: string;
    }
    interface WorkgroupRequest extends BOA.Common.Types.RequestBase {
        doNotUseCache?: boolean;
        userId?: number;
        workgroupId?: number;
        workgroupList?: number[];
        workgroupTypeList?: string[];
    }
    interface WorkgroupTreeRequest extends BOA.Common.Types.RequestBase {
    }
    interface XtmRequest extends BOA.Common.Types.RequestBase {
        commandId?: number;
        deviceId?: number;
        xtmName?: string;
    }
}
declare namespace BOA.Types.Kernel.BusinessHelper.DocumentSaveRequest {
    export const enum AtalasoftCompressionMode {
        None = 0,
        PackBits = 1,
        Group3 = 4,
        Group4 = 5,
        Jpeg = 6,
        Lzw = 7,
        Jbig = 8,
        Png = 9,
        Rle4 = 10,
        Rle8 = 11,
        BitFields = 12
    }
}
declare namespace BOA.Types.Kernel.CallCenter {
    export const enum SecurityConfirmationPattern {
        BirthDate = 0,
        SMS = 1,
        MothersMaidenSurname = 2
    }
    interface CallHistoryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        authorizedAccountNumber?: number;
        authorizedPersonId?: number;
        callId?: string;
        callNumber?: string;
        cardBinNumber?: number;
        dIDNumber?: string;
        externalCallId?: string;
        journalId?: number;
        languageId?: number;
        personId?: number;
        taxNumber?: string;
    }
    interface CallHistoryRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CallCenter.CallHistoryContract;
    }
    interface CampaignRecordContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        campaignId?: number;
        customerName?: string;
        homeNumber?: string;
        isFinished?: boolean;
        isSuccessFinished?: boolean;
        isValid?: boolean;
        mobileNumber?: string;
        recordDetail?: any;
        recordId?: number;
        recordImportDate?: Date;
        surveyGuid?: string;
        surveyId?: number;
        workNumber?: string;
    }
    interface CampaignRecordRequest extends BOA.Common.Types.RequestBase {
        campaignId?: number;
        campaignName?: string;
        importEndDate?: Date;
        importStartDate?: Date;
        recordId?: number;
    }
    interface FraudRecordResultContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        callCount?: number;
        callResult?: string;
        callTime?: Date;
        campaignId?: number;
        chooseOption?: string;
        phoneNumber?: string;
        recordId?: number;
    }
    interface GetCampaignRecordListForFraudContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: string;
        branchId?: number;
        callResult?: string;
        callTime?: Date;
        campaignId?: number;
        channelName?: string;
        customerName?: string;
        fecName?: string;
        homeNumber?: string;
        isFinished?: boolean;
        isSuccessFinished?: boolean;
        isValid?: boolean;
        mobileNumber?: string;
        recordId?: number;
        recordImportDate?: Date;
        surveyGuid?: string;
        surveyId?: number;
        workNumber?: string;
    }
    interface GetCampaignRecordListForFraudRequest extends BOA.Common.Types.RequestBase {
        campaingId?: number;
        importEndDate?: Date;
        importStartDate?: Date;
        recordId?: number;
    }
    interface InsertDataRequest extends BOA.Common.Types.TransactionRequestBase {
        accountNumber?: string;
        campaignBranchId?: number;
        campaignId?: number;
        guid?: string;
        homeNumber?: string;
        mobileNumber?: string;
        name?: string;
        recordDetail?: string;
        sdRecordId?: number;
        surveyId?: number;
        workNumber?: string;
    }
    interface LoadCampaignDataContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        campaignId?: number;
        customerName?: string;
        homeNumber?: string;
        mobileNumber?: string;
        optionalProperties?: BOA.Types.Kernel.CallCenter.XmlProperty[];
        surveyGuid?: string;
        surveyId?: number;
        workNumber?: string;
    }
    interface LoadDataRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.CallCenter.LoadCampaignDataContract;
    }
    interface NotConnectedCallAttemptContract extends BOA.Common.Types.ContractBase {
        callCount?: number;
        recordId?: number;
    }
    interface NotConnectedCallAttemptRequest extends BOA.Common.Types.RequestBase {
        callDate?: Date;
        campaignId?: number;
        recordId?: number;
    }
    interface SdCampaignTableColumnContract extends BOA.Common.Types.ContractBase {
        columnName?: string;
        dataType?: string;
        maxLength?: number;
    }
    interface SdCampaignTableColumnRequest extends BOA.Common.Types.RequestBase {
        sdCampaignId?: number;
    }
    interface SdCampaignWithIdContract extends BOA.Common.Types.ContractBase {
        busyCallCountLimit?: number;
        callCountLimit?: number;
        callPeriod_Busy?: number;
        callPeriod_NoAnswer?: number;
        callPeriod_NotReached?: number;
        callPeriod_SystemFailure?: number;
        campaignDataTable?: string;
        campaignId?: number;
        campaignName?: string;
        campaignPage?: string;
        campaignText?: string;
        campaignType?: string;
        campaignTypeId?: number;
        groupId?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isAgentless?: boolean;
        isDisplayedNumber?: boolean;
        isDisplayedResult?: boolean;
        isNps?: boolean;
        isSurveyCampaign?: boolean;
        isSurveyCampaignParametric?: boolean;
        isWithCustomerNo?: boolean;
        lMD?: Date;
        lMM?: string;
        lMU?: string;
        npsViewName?: string;
        resourceCode?: string;
        sendOperationalReport?: boolean;
        sendTechnicalReport?: boolean;
        status?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SdCampaignWithIdRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CallCenter.SdCampaignWithIdContract;
    }
    interface SearchContract extends BOA.Common.Types.ContractBase {
        age?: number;
        authorizedType?: string;
        birthPlace?: string;
        birthYear?: string;
        branchId?: number;
        bringingProductId?: number;
        customerId?: number;
        customerName?: string;
        customerState?: number;
        customerType?: string;
        fathersName?: string;
        gender?: number;
        gsmNumber?: string;
        idNo?: string;
        idSerial?: string;
        idType?: string;
        isDead?: boolean;
        isEmployee?: boolean;
        isPersonDisabled?: boolean;
        isSharedAccount?: number;
        jobGroup?: string;
        languageId?: number;
        maritalStatus?: string;
        mothersMaidenSurname?: string;
        mothersName?: string;
        personID?: number;
        personName?: string;
        personType?: string;
        relationshipTypeName?: string;
        searchResultCount?: number;
        taxNumber?: string;
    }
    interface SecurityConfirmation extends BOA.Common.Types.ContractBase {
        bitMask?: number;
        confirmationList?: boolean[];
    }
    interface SetCampaignRecordInvalidRequest extends BOA.Common.Types.TransactionRequestBase {
        campaignId?: number;
        recordId?: number;
    }
    interface StateInformationContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        customerId?: number;
        passwordRetryCount?: number;
        personId?: number;
        pinRetryCount?: number;
        retailUserHasOTP?: number;
        roleId?: number;
        secretWordRetryCount?: number;
        userId?: number;
        userName?: string;
        userPersonId?: number;
        userStateTypeId?: number;
    }
    interface SurveyCallsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        branchId?: number;
        guid?: string;
        name?: string;
        phoneNumber?: string;
        surveyId?: number;
    }
    interface TableDefaultColumn {
    }
    interface TransferPropContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agentName?: string;
        authorizedAccountNumber?: number;
        authorizedPersonId?: number;
        callId?: any;
        callNumber?: string;
        cardNumber?: string;
        cardType?: string;
        confirmationBitMask?: number;
        customerType?: string;
        dIDNumber?: string;
        errorMessage?: string;
        externalCallId?: string;
        hostIP?: string;
        hostName?: string;
        isBranchCall?: number;
        isConfirmed?: number;
        isCreditCardLogin?: number;
        isDebitCardLogin?: number;
        isPasswordSetCall?: number;
        isPhoneBankingLogin?: number;
        isSecurityCheck?: number;
        isTransferToIVR?: number;
        isYourBank?: number;
        iVRHostDate?: Date;
        iVRHostIP?: string;
        iVRHostName?: string;
        languageId?: number;
        menuName?: string;
        passwordOperationType?: number;
        personId?: number;
        phoneBankingSessionKey?: string;
        priority?: number;
        queueName?: string;
        resourceId?: number;
        searchParam?: string;
        systemDate?: Date;
        taxNumber?: string;
        tranDate?: Date;
        useOfflineId?: number;
        userName?: string;
        webUserCode?: string;
        webUserId?: number;
        webUserName?: string;
    }
    interface TransferPropRequest extends BOA.Common.Types.RequestBase {
        callId?: any;
        dataContract?: BOA.Types.Kernel.CallCenter.TransferPropContract;
    }
    interface XmlProperty {
        xmlPropertName?: string;
        xmlPropertyValue?: string;
    }
}
declare namespace BOA.Types.Kernel.CampaignManagement {
    interface CampaignCommonStatics {
    }
    interface CampaignContributionAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        collectionContract?: BOA.Types.Kernel.CampaignManagement.CampaignContributionCollectionContract;
    }
    interface CampaignContributionCollectionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        bITTAmount?: number;
        bITTRate?: number;
        businessKey?: number;
        campaignContributionCollectionId?: number;
        campaignDetailId?: number;
        campaignListContract?: BOA.Types.Kernel.FundUtilization.CampaignListContract;
        contributionAmount?: number;
        contributionFER?: number;
        fec?: number;
        fecCode?: string;
        fer?: number;
        fXAskJournalContract?: BOA.Types.Kernel.FX.FXJournalContract;
        fXBusinessKey?: number;
        fXContributionBusinessKey?: number;
        fXContributionJournalContract?: BOA.Types.Kernel.FX.FXJournalContract;
        fXDebtJournalContract?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalContract?: BOA.Types.Kernel.FX.FXJournalContract;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isLeasing?: number;
        isSlipPrinted?: number;
        loanAccountNumber?: number;
        loanAccountSuffix?: number;
        loanBranchId?: number;
        loanCustomerTitle?: string;
        processFEC?: number;
        processId?: number;
        processType?: number;
        receiptOrderNumber?: number;
        receiptSerialNumber?: string;
        rUSFAmount?: number;
        rUSFRate?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUsername?: string;
        userName?: string;
        vATAmount?: number;
        vATRate?: number;
        vendorAccountNumber?: number;
        vendorAccountSuffix?: number;
        vendorBranchId?: number;
        vendorEmail?: string;
        vendorMobilePhoneNumber?: string;
        vendorTitle?: string;
    }
    interface CampaignContributionCollectionFilterContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        campaignId?: number;
        endDate?: Date;
        loanAccountNumber?: number;
        loanBranchId?: number;
        processId?: number;
        processType?: number;
        vendorAccountNumber?: number;
        vendorBranchId?: number;
    }
    interface CampaignContributionCollectionListContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        bITTAmount?: number;
        businessKey?: number;
        campaignContributionCollectionId?: number;
        campaignDetailId?: number;
        campaignName?: string;
        contributionAmount?: number;
        contributionFER?: number;
        customerTitle?: string;
        fec?: number;
        fecCode?: string;
        fer?: number;
        hostName?: string;
        isActive?: number;
        isActiveDescription?: string;
        isLeasing?: number;
        isSlipPrinted?: number;
        isSlipPrintedDescription?: string;
        loanAccountNumber?: number;
        loanAccountSuffix?: number;
        loanBranchId?: number;
        loanBranchName?: string;
        processId?: number;
        processType?: number;
        processTypeDescription?: string;
        receiptOrderNumber?: number;
        receiptSerialNumber?: string;
        rUSFAmount?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUsername?: string;
        userName?: string;
        vATAmount?: number;
        vendorAccountNumber?: number;
        vendorAccountSuffix?: number;
        vendorBranchId?: number;
        vendorBranchName?: string;
        vendorTitle?: string;
    }
    interface CampaignContributionCollectionSlipContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bITTAmount?: number;
        branchName?: string;
        contributionAmount?: number;
        customerAddress?: string;
        customerName?: string;
        descriptionAmountInfo?: string;
        descriptionProjectInfo?: string;
        fecCode?: string;
        invoiceDate?: Date;
        invoiceNo?: string;
        invoiceOrderNo?: string;
        invoiceSerialNo?: string;
        isVisibleBITTAmount?: boolean;
        isVisibleRUSFAmount?: boolean;
        isVisibleVATAmount?: boolean;
        rUSFAmount?: number;
        taxNumber?: string;
        taxOffice?: string;
        totalAmount?: number;
        vATAmount?: number;
    }
    interface CampaignContributionRediscountAccountingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        aggreementType?: number;
        branchId?: number;
        businessKey?: number;
        campaignContributionRediscountDetailId?: number;
        fec?: number;
        fecType?: number;
        fundPool?: number;
        ledgerId?: number;
        rediscountAmount?: number;
        rediscountLedgerId?: number;
        rediscountStatus?: number;
    }
    interface CampaignContributionRediscountAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.CampaignManagement.CampaignContributionRediscountAccountingContract;
    }
    interface CampaignContributionRediscountContract extends BOA.Common.Types.ContractBase {
        accrualAmount?: number;
        accrualDate?: Date;
        campaignContributionCollectionId?: number;
        hostIP?: string;
        hostName?: string;
        isAccrual?: number;
        ledgerBalance?: number;
        rediscountExceptionType?: number;
        rediscountStatus?: number;
        rediscountStatusDescription?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUsername?: string;
        userName?: string;
    }
    interface CampaignContributionRediscountDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        businessKey?: number;
        campaignContributionCollectionId?: number;
        campaignContributionRediscountDetailId?: number;
        dailyRaise?: number;
        hostIP?: string;
        hostName?: string;
        isAccrual?: number;
        ledgerBalance?: number;
        rediscountAmount?: number;
        reverseBusinessKey?: number;
        reverseTranDate?: Date;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUsername?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.CampaignManagement.CampaignCommonStatics {
    export const enum ContributionProcessType {
        Corporate = 1
    }
}
declare namespace BOA.Types.Kernel.CardGeneral {
    interface CardChangePinRequest extends BOA.Common.Types.RequestBase {
        cardNewPin?: string;
        cardNumber?: string;
        cardOldPin?: string;
    }
    interface CardCheckCVVRequest extends BOA.Common.Types.RequestBase {
        cardExpireDate?: string;
        cardNumber?: string;
    }
    interface CardLoginRequest extends BOA.Common.Types.RequestBase {
        cardNumber?: string;
        cardPin?: string;
    }
    interface CardSetPinRequest extends BOA.Common.Types.RequestBase {
        cardNumber?: string;
        cardPin?: string;
    }
}
declare namespace BOA.Types.Kernel.CashManagement {
    export const enum OrderDetailResult {
        NotProcessed = 0,
        PaymentDone = 1,
        PaymentFailed = 2,
        GuaranteeDone = 3,
        GuaranteeFailed = 4,
        InvoiceCanceled = 5,
        InvoiceUpdated = 6,
        InvoiceArrived = 7,
        FileErrorOccurred = 8,
        InvoiceUpdateFailed = 9,
        InvoiceDuplicate = 10,
        InvoiceArrivedCustomer = 11,
        InvoiceUpdatedCustomer = 12,
        InvoiceCanceledCustomer = 13
    }
    export const enum OrderDetailStatus {
        WaitingForWorkflow = 0,
        PendingApprove = 1,
        NotProcessed = 2,
        Processed = 3,
        Responsed = 4,
        ReadyForDBS = 5,
        DBSProcessed = 6,
        Passive = 7,
        FileError = 8,
        DuplicateInvoice = 9
    }
    interface CashManagementLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allMaturityDate?: Date;
        approvedInvoiceAmount?: number;
        approvedInvoiceCount?: number;
        approvedLimit?: number;
        availableLimit?: number;
        customerName?: string;
        limit?: number;
        mainInternalMemberCode?: string;
        memberAccountNumber?: number;
        memberId?: number;
        notApprovedInvoiceAmount?: number;
        notApprovedInvoiceCount?: number;
        orderFileTypeId?: number;
        pendingInvoiceAmount?: number;
        pendingInvoiceCount?: number;
        risk?: number;
        rootLimit?: number;
        subInternalMemberCode?: string;
        subMemberId?: number;
    }
    interface CashManagementMemberContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        customerName?: string;
        email?: string;
        eurSuffix?: number;
        ftpFolder?: string;
        id?: number;
        internalMemberCode?: string;
        orderCompanyId?: number;
        orderCompanyName?: string;
        orderFileTypeName?: string;
        productId?: number;
        productName?: string;
        systemDate?: Date;
        trandate?: Date;
        usdSuffix?: number;
        vendorId?: number;
        xauSuffix?: number;
    }
    interface CashManagementMemberParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        blockedDayNumber?: number;
        blockedSuffix?: number;
        branchDesc?: string;
        branchId?: number;
        contributionRatio?: number;
        email?: string;
        ensuranceComm?: number;
        eurSuffix?: number;
        filePattern?: number;
        ftpFolder?: string;
        gSM?: string;
        hostName?: string;
        iBAN?: string;
        id?: number;
        instalmentNumber?: number;
        isDefault?: boolean;
        limitSetComm?: number;
        loanProfitRatio?: number;
        loanUsageComm?: number;
        lSCRatioOfMember?: number;
        memberId?: number;
        memberName?: string;
        paymentTime?: any;
        productId?: number;
        sendEmail?: boolean;
        sendSMS?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usdSuffix?: number;
        useBlockedDayNumber?: boolean;
        useContributionRatio?: boolean;
        userName?: string;
        xauSuffix?: number;
    }
    interface CashManagementOrderDetailsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        businessKey?: number;
        cashAmount?: number;
        creditAmount?: number;
        creditId?: string;
        debtAmount?: number;
        debtFER?: number;
        description?: string;
        detailType?: number;
        errorCode?: string;
        errorDescription?: string;
        errorLogMesage?: string;
        fec?: string;
        fileName?: string;
        followId?: string;
        fromAccountNumber?: string;
        fromAccountSuffix?: string;
        fromBankCode?: number;
        fromBranchCode?: number;
        fromBranchName?: string;
        fromIBAN?: string;
        fromTitle?: string;
        ftpFolder?: string;
        hasGuarantee?: number;
        id?: number;
        instalmentNumber?: number;
        internalMemberCode?: string;
        invoicedState?: number;
        invoiceDueDate?: Date;
        invoiceNo?: string;
        limitSetComm?: number;
        loanProfitRatio?: number;
        loanUsageComm?: number;
        mainInternalMemberCode?: string;
        memberCustomerName?: string;
        memberEmail?: string;
        memberId?: number;
        orderFileId?: number;
        orderFileTypeId?: number;
        orderPaymentTypeId?: number;
        paylessMonthCount?: number;
        portfolioClass?: number;
        processType?: string;
        productId?: number;
        referanceCode?: number;
        result?: string;
        resultDescription?: string;
        statusId?: number;
        subMemberCustomerName?: string;
        subMemberId?: number;
        toAccountNumber?: string;
        toAccountSuffix?: string;
        toBankCode?: number;
        toBranchCode?: number;
        toBranchName?: string;
        toEmail?: string;
        toIBAN?: string;
        toTitle?: string;
        tranDate?: Date;
        transactionType?: number;
    }
    interface CashManagementSubMemberContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        customerName?: string;
        eurSuffix?: number;
        id?: number;
        internalMemberCode?: string;
        isUseAllSuffix?: boolean;
        memberAccountNumber?: number;
        memberId?: number;
        systemDate?: Date;
        trandate?: Date;
        usdSuffix?: number;
        xauSuffix?: number;
    }
    interface CashManagementSubMemberParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        approvedInvoiceAmount?: number;
        approvedLimit?: number;
        availableLimit?: number;
        availableLimitCalc?: number;
        blockageLimit?: number;
        branchDesc?: string;
        branchId?: number;
        email?: string;
        eurSuffix?: number;
        groupCustomerUsageRatio?: number;
        gSM?: string;
        hostName?: string;
        id?: number;
        instalmentNumber?: number;
        internalMemberCode?: string;
        isUseAllSuffix?: boolean;
        lastCreditDate?: Date;
        limit?: number;
        limitSetComm?: number;
        loanProfitRatio?: number;
        loanUsageComm?: number;
        mainAccountNumber?: number;
        mainAccountSuffix?: number;
        memberId?: number;
        memberName?: string;
        memberUsageRatio?: number;
        nonProfitRisk?: number;
        notApprovedInvoiceAmount?: number;
        payByLoan?: boolean;
        payInCash?: boolean;
        paylessMonthCount?: number;
        paymentTime?: any;
        payPriority?: number;
        productLimit?: number;
        profitRisk?: number;
        risk?: number;
        rootLimit?: number;
        sendEmail?: boolean;
        sendSMS?: boolean;
        subMemberId?: number;
        subMemberName?: string;
        systemDate?: Date;
        totalAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usdSuffix?: number;
        userName?: string;
        xauSuffix?: number;
    }
    interface InvoicedStateContract extends BOA.Common.Types.ContractBase {
        code?: number;
        name?: string;
    }
    interface OnlineApplicationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        applicationId?: number;
        description?: string;
        dueDate?: Date;
        installmentNumber?: number;
        memberId?: number;
        paymentAmount?: number;
        paymentFec?: string;
        paymentId?: number;
        paymentInstallmentNumber?: number;
    }
    interface WebApplicationContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        memberCustomerId?: number;
        proposalId?: number;
    }
}
declare namespace BOA.Types.Kernel.Cheque {
    interface BillContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        arrangeDate?: Date;
        billOrder?: number;
        billPackageId?: number;
        branchId?: number;
        branchName?: string;
        correspondentBankId?: number;
        correspondentBranchId?: number;
        currentState?: string;
        debtorName?: string;
        fec?: string;
        guarantorNumber?: number;
        maturityDate?: Date;
        sentBranchId?: number;
    }
    interface CheckOrderEnquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        chequeBookStatus?: string;
        chequeBookType?: number;
        chequeBookTypeDef?: string;
        fec?: number;
        fecCode?: string;
        leafCount?: number;
        leafNumberBegin?: number;
        leafNumberEnd?: number;
        requestDate?: Date;
    }
    interface ChequeBookContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        chequeBookStatus?: string;
        chequeBookType?: number;
        chequeBookTypeDef?: string;
        fec?: number;
        fecCode?: string;
        leafCount?: number;
        leafNumberBegin?: number;
        leafNumberEnd?: number;
    }
    interface ChequeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        chequeNo?: number;
        chequeStatusDescription?: string;
        chequeType?: string;
        clearanceDate?: Date;
        clearingBank?: number;
        clearingBankBranch?: number;
        clearingBankBranchName?: string;
        clearingBankName?: string;
        fec?: number;
        fecCode?: string;
        systemDate?: Date;
    }
}
declare namespace BOA.Types.Kernel.ChequeBook {
    interface ChequeBookContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        allState?: number;
        availableBalance?: number;
        branchId?: number;
        branchName?: string;
        chequeBookId?: number;
        chequeBookType?: number;
        chequeBookTypeDesc?: string;
        chequeType?: number;
        chequeTypeDesc?: string;
        controlId?: number;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        customerName?: string;
        delayStatus?: boolean;
        deliveryDate?: Date;
        divitInstanceId?: string;
        expenseAccountSuffix?: number;
        hostIP?: string;
        hostName?: string;
        isApproveRequired?: boolean;
        isBranchAccount?: boolean;
        isDeletedRequired?: boolean;
        isIndividualPerson?: boolean;
        isMatrixCheque?: number;
        leafCount?: number;
        leafNumberBegin?: number;
        leafNumberEnd?: number;
        portfolioClass?: number;
        printedDate?: Date;
        requestDate?: Date;
        status?: number;
        statusDetail?: number;
        systemDate?: Date;
        taxAmount?: number;
        taxNumber?: string;
        tempChequeBookId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wfInstanceId?: number;
    }
    interface ChequeBookFromInternetBranchContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        chequeBookId?: number;
        chequeBookType?: number;
        chequeType?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        leafCount?: number;
        systemDate?: Date;
        userName?: string;
        wfInstanceId?: number;
    }
    interface ChequeBookLastLeafNumberContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        leafNumber?: number;
    }
    interface ChequeBookListAccountingContract extends BOA.Common.Types.ContractBase {
        accountBranch?: number;
        accountNumber?: number;
        accountSuffix?: number;
        credit?: number;
        debit?: number;
        description?: string;
        expenseAccountSuffix?: number;
        fec?: number;
        hasSlip?: boolean;
        taxAmount?: number;
    }
    interface ChequeBookListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        barcodeId?: number;
        branchId?: number;
        branchName?: string;
        branchPhoneNumber?: string;
        channelId?: number;
        channelName?: string;
        chequeBookId?: number;
        chequeBookType?: number;
        chequeBookTypeDesc?: string;
        chequeType?: number;
        chequeTypeDesc?: string;
        customerName?: string;
        deliveryDate?: Date;
        divitInstanceId?: string;
        expenseAccountSuffix?: number;
        fec?: number;
        fecDesc?: string;
        iban?: string;
        isMatrixCheque?: number;
        leafCount?: number;
        leafNumberBegin?: number;
        leafNumberEnd?: number;
        matrixChequeDesc?: string;
        mersisNumber?: string;
        reportingType?: number;
        requestDate?: Date;
        status?: number;
        statusDesc?: string;
        statusDetail?: number;
        statusDetailDesc?: string;
        taxNumber?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeBookReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        chequeBookId?: number;
        chequeBookType?: number;
        chequeBookTypeDesc?: string;
        chequeType?: number;
        chequeTypeDesc?: string;
        chequeTypeDescForHistory?: string;
        chequeTypeForHistory?: number;
        customerName?: string;
        fec?: number;
        fecDesc?: string;
        leafCount?: number;
        leafNumberBegin?: number;
        leafNumberEnd?: number;
        name?: string;
        reportingType?: number;
        reportingTypeDesc?: string;
        requestDate?: Date;
        requestDateBegin?: Date;
        requestDateEnd?: Date;
        status?: number;
        statusDesc?: string;
        statusDescForHistory?: string;
        statusDetail?: number;
        statusDetailDesc?: string;
        statusDetailDescForHistory?: string;
        statusDetailForHistory?: number;
        statusForHistory?: number;
        systemDate?: Date;
        transactionDate?: Date;
        transactionDateBegin?: Date;
        transactionDateEnd?: Date;
        transactionStatus?: number;
        transactionStatusDetail?: number;
        tranStatus?: number;
        tranStatusDesc?: string;
        tranStatusDetail?: number;
        tranStatusDetailDesc?: string;
        tranUserName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeBookTaxLoanContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        businessKey?: number;
        chequeBookId?: number;
        chequeBookTransactionId?: number;
        credit?: number;
        debit?: number;
        leafCount?: number;
        taxLoanId?: number;
        transactionDate?: Date;
    }
    interface ChequeBookTaxLoanListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        availableBalance?: number;
        availableBalanceDisplay?: number;
        branchId?: number;
        chequeBookId?: number;
        credit?: number;
        customerName?: string;
        debit?: number;
        expenseAccountSuffix?: number;
        leafNumberBegin?: number;
        leafNumberEnd?: number;
        taxLoanId?: number;
        transactionDate?: Date;
    }
    interface ChequeBookTransactionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        chequeBookId?: number;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        hostName?: string;
        leafNumberBegin?: number;
        leafNumberEnd?: number;
        status?: number;
        statusDesc?: string;
        statusDetail?: number;
        statusDetailDesc?: string;
        transactionDate?: Date;
        transactionId?: number;
        userName?: string;
    }
    interface ChequeLeafCountsContract extends BOA.Common.Types.ContractBase {
        chequeStatus?: number;
        chequeStatusExp?: string;
        chequeType?: number;
        chequeTypeExp?: string;
        leafCount?: number;
    }
    interface ChequeTypeContract extends BOA.Common.Types.ContractBase {
        paramCode?: string;
        paramDescription?: string;
    }
    interface Constants {
    }
    interface ControlInfoContract extends BOA.Common.Types.ContractBase {
        kurumId?: number;
        uyeId?: number;
        uyeMi?: boolean;
    }
    interface Enums {
    }
    interface FindeksConsentCancelContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        bankCode?: string;
        chequeBrancId?: string;
        consentId?: string;
        leafNumberBegin?: string;
        leafNumberEnd?: string;
        memberId?: string;
        personType?: number;
        tranBranchId?: string;
    }
    interface FindeksConsentControlContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        bankCode?: string;
        chequeBrancId?: string;
        leafNumberBegin?: string;
        leafNumberEnd?: string;
        memberId?: string;
        personType?: number;
    }
    interface FindeksConsentDefinitionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        bankCode?: string;
        chequeBrancId?: string;
        chequeSerialNumber?: string;
        leafNumberBegin?: string;
        leafNumberEnd?: string;
        memberId?: string;
        personType?: number;
        tranBranchId?: string;
    }
    interface FindeksCorporateMembershipContract extends BOA.Common.Types.ContractBase {
        accountManagerEMail?: string;
        accountManagerGSM?: string;
        accountManagerTaxNumber?: string;
        branchId?: number;
        branchName?: string;
        channel?: string;
        firmAddress?: string;
        firmAddressCityCode?: string;
        firmAddressCountyCode?: string;
        firmCompanyType?: string;
        firmFoundationYear?: string;
        firmNumberOfEmployeesCode?: string;
        firmPhoneNumber?: string;
        firmSectorCode?: string;
        firmSmsTitle?: string;
        firmTaxOfficeCityCode?: number;
        firmTaxOfficeCode?: string;
        firmTitle?: string;
        firmVKN?: string;
        signatureAuthorities?: BOA.Types.Kernel.ChequeBook.FindeksSignatureAuthoritiesContract[];
        user?: string;
    }
    interface FindeksIndividualMembershipContract extends BOA.Common.Types.ContractBase {
        bankCode?: string;
        branchId?: number;
        branchName?: string;
        channel?: string;
        educationalStatus?: string;
        eMail?: string;
        gSM?: string;
        taxNumber?: string;
        user?: string;
        workingType?: string;
    }
    interface FindeksMembershipAgreementContract extends BOA.Common.Types.ContractBase {
        address?: string;
        channel?: string;
        eMail?: string;
        phoneNumber?: string;
        taxNumber?: string;
        title?: string;
    }
    interface FindeksMembershipControlContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchName?: string;
        channel?: string;
        personType?: number;
        taxNumber?: string;
    }
    interface FindeksSignatureAuthoritiesContract extends BOA.Common.Types.ContractBase {
        email?: string;
        phoneNumber?: string;
        tckn?: string;
    }
}
declare namespace BOA.Types.Kernel.ChequeBook.Enums {
    export const enum ChequeBookStatus {
        Kaydedildi = 0,
        Red = 1,
        YonetmenOnayiBekliyor = 2,
        MudurOnayiBekliyor = 3,
        BasilmayiBekliyor = 4,
        Basildi = 5,
        SubeyeGonderildi = 6,
        SubeceAlindi = 7,
        TeslimEdildi = 8,
        KismiTeslimEdildi = 9,
        KismiIptalEdildi = 10,
        IptalEdildi = 11,
        GenelKontrolOnayiBekliyor = 12,
        IptalKullanılmadan = 13
    }
    export const enum ChequeBookStatusDetail {
        KarsiliksizCek = 1,
        MahkemeYasagi = 2,
        EksikEvrak = 3,
        VergiBorcu = 4,
        YonetmenReddetti = 5,
        MudurReddetti = 6,
        SubeHesabi = 7,
        ProtestoluSenet = 8,
        GenelKontrolRed = 9,
        BireyselIsletmeTahsisRed = 10,
        KurumsalTicariTahsisRed = 11,
        KurumsalTicariPazarlamaRed = 12,
        BireyselIsletmePazarlamaRed = 13,
        MudurRedGenelKontrolMaddeleri = 14,
        KrediRiskRed = 15,
        KrediRiskİzlemeRed = 16,
        KurumsalKredilerRiskTakipRed = 17,
        BireyselKredilerRiskTakipRed = 18
    }
    export const enum ChequeBookType {
        Normal = 1,
        Surekli = 2
    }
    export const enum ChequeType {
        Tacir = 1,
        TacirHamiline = 2,
        TacirOlmayan = 3,
        TacirOlmayanHamiline = 4
    }
    export const enum CorrespondenceType {
        Yes = 1,
        No = 2
    }
    export const enum DocStatu {
        Referred = 1,
        ReceivedByCorrespondence = 2,
        ReferredByCorrespondence = 3,
        Received = 4,
        Deleted = 5,
        Disappeared = 6
    }
    export const enum DocTypeGroup {
        BankacilikOperasyonlari = 11
    }
    export const enum DocTypeInEnvelope {
        Evrak = 73,
        CekKarnesi = 70
    }
    export const enum ReportingType {
        TarihçeBasılmasın = 1,
        TarihçeBasılsın = 2,
        UyanTarihçeler = 3
    }
    export const enum SendingToPlace {
        Internal = 1,
        External = 2,
        All = 3
    }
    export const enum SendingTypeInfo {
        AcilKurye = 1,
        EldenTeslimGönderici = 2,
        EldenTeslimHaberlesme = 3,
        Kargo = 4,
        Motokurye = 5,
        PostaAPS = 6,
        PostaIadeliTaahhutlu = 7,
        PostaNormal = 8
    }
}
declare namespace BOA.Types.Kernel.ChequeClearance {
    export const enum CheckStatusId {
        Acik = 0,
        Tahsil = 5,
        Bloke = 6
    }
    export const enum ChequeWorkStates {
        Tamamlandı = 1,
        Talep = 2,
        Reddedildi = 3,
        MailGonderildi = 4
    }
    export const enum ChequeWorkTypes {
        IslemsizIadeTalebiCevaplama = 1,
        IslemsizIadeTalebiYapma = 2,
        CekGoruntusuTalebiYapma = 3,
        CekGoruntusuTalebiCevaplama = 4,
        CekBilgiTalebiCevaplama = 5,
        YabancıParaDigerBankaCekiIadeTalebi = 6,
        YabancıParaSubeIadeTalebi = 7,
        YPDBISLIA_TALEBI = 8
    }
    export const enum DrawDateDays {
        SameCity = 10,
        DifferentCity = 30,
        DifferentCityMonth = 1
    }
    export const enum FileTypes {
        GonderilenTakasDosyasi = 1,
        IadeTakasDosyasi = 2,
        GelenTakasDosyasi = 3,
        GelenTakasIadeDosyasi = 4
    }
    interface CheckLeafStatus {
    }
    interface CheckStates {
    }
    interface CheckStatus {
    }
    interface ChequeTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        bank?: number;
        chequeId?: number;
        fec?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
    }
    interface ChequeWorkDemandContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        approverSystemDate?: Date;
        approverUserName?: string;
        bank?: number;
        bankBranch?: number;
        bankBranchName?: string;
        bankName?: string;
        chequeBranchId?: number;
        chequeBranchName?: string;
        chequeId?: number;
        chequeNo?: number;
        chequeStatus?: string;
        chequeStatusDesc?: string;
        clearanceDate?: Date;
        clearanceKey?: string;
        clearingBank?: number;
        correspondentSwiftCode?: string;
        description?: string;
        drawDate?: Date;
        fec?: number;
        fecName?: string;
        hostName?: string;
        id?: number;
        isKT?: number;
        kTCorrespondentSwiftCode?: string;
        kTSwiftCode?: string;
        listId?: number;
        orderNo?: number;
        state?: number;
        stateDescription?: string;
        swiftCode?: string;
        systemDate?: Date;
        systemDateBegin?: Date;
        systemDateEnd?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userBranchId?: number;
        userName?: string;
        willSwiftMessageSend?: boolean;
        workType?: number;
        workTypeDescription?: string;
    }
    interface ChequeWorkDemandRequest extends BOA.Common.Types.RequestBase {
        cCMailAddress?: string;
        dataContract?: BOA.Types.Kernel.ChequeClearance.ChequeWorkDemandContract;
        instance?: string;
        messageContent?: string;
        toMailAddress?: string;
    }
    interface DefaultValueOfUI {
    }
    interface DivitConstants {
    }
    interface InformationCodePrefixForChequeMail {
    }
    interface PaymentStatusConstant {
    }
}
declare namespace BOA.Types.Kernel.ChequeCollateral {
    interface ChequeCollateralCustomerControlContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        delayedAmount?: number;
        delayedDayCount?: number;
        groupNumber?: number;
        status?: number;
    }
    interface ChequeCollateralInquiryContract extends BOA.Common.Types.ContractBase {
        allItemsValid?: boolean;
        contractList?: BOA.Types.Kernel.ChequeCollateral.MakeCollateralDemandContract[];
    }
    interface ChequeCollateralInquirySimulationContract extends BOA.Common.Types.ContractBase {
        allItemsValid?: boolean;
        contractList?: BOA.Types.Kernel.ChequeCollateral.MakeCollateralDemandSimulationContract[];
    }
    interface ChequeCollateralPeriodicRejectContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        beneficiaryAccountNumber?: number;
        beneficiaryAccountSuffix?: number;
        branchId?: number;
        chequeCollateralId?: number;
        chequeCollateralPeriodicRejectId?: number;
        chequeInquiryId?: number;
        customerName?: string;
        drawerTaxNumber?: string;
        fec?: number;
        isWorkflowStarted?: number;
        statusBeforeReject?: number;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface ChequeCollateralProjectContract extends BOA.Common.Types.ContractBase {
        chequeId?: number;
        chequeType?: number;
        isAvailableForRelease?: boolean;
        orderNumber?: number;
        paidAmount?: number;
        projectId?: number;
    }
    interface ChequeConstants {
    }
    interface ChequeCriteriaContract extends BOA.Common.Types.ContractBase {
        approverUserName?: string;
        committeeCode?: string;
        committeeName?: string;
        controlState?: number;
        criteriaCode?: string;
        criteriaId?: number;
        criteriaType?: string;
        demandStatus?: string;
        description?: string;
        description2?: string;
        description3?: string;
        hostName?: string;
        isActive?: boolean;
        isActiveDesc?: string;
        isUserAcceptanceAllowed?: boolean;
        isUserAcceptanceAllowedDesc?: string;
        parametricValue?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeExceptionScope extends BOA.Common.Types.ContractBase {
        customerId?: number;
        drawerAmountSum?: number;
        drawerLimit?: number;
        exceptionScope?: number;
        exceptionStatus?: number;
    }
    interface ChequeGroupListContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        groupId?: number;
    }
    interface ChequeInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        bouncedChequeCountLastOneYear?: number;
        chequeCollateralCount?: number;
        chequeCollateralId?: number;
        chequeId?: number;
        chequeInquiryDailyId?: number;
        chequeInquiryId?: number;
        collateralDemandDateAndDueDateDifferenceInMonth?: number;
        controlState?: number;
        corporateDrawerCustomerChequeAmount?: number;
        corporateDrawerCustomerChequeRate?: number;
        corporateDrawerKTChequeAmount?: number;
        courtBannedBouncedChequeEndDateCorp?: Date;
        courtBannedBouncedChequeEndDateIndividual?: Date;
        criteriaCode?: string;
        criteriaId?: number;
        customerChequeAmountGeneralLimitRate?: number;
        drawerAccountNumber?: number;
        drawerExceptionStatus?: number;
        drawerGrayListCount?: number;
        drawerGroupToCustomerGroupChequeAmount?: number;
        drawerGroupToCustomerGroupChequeRate?: number;
        drawerInterestAccrualAmount?: number;
        drawerKKBOneTimeChequePayment?: number;
        drawerLimitDisabled?: number;
        drawerLimitRejected?: number;
        drawerLimitUnrevised?: number;
        drawerName?: string;
        drawerOtherBankLoanProblemRiskAmount?: number;
        drawerTaxNumber?: string;
        fec?: number;
        firstChequeInquiryId?: number;
        hasCustomerLawyerFundTracking?: number;
        hasDrawerBouncedChequeInClearance?: number;
        hasDrawerCreditInstalmentArrearageLastThreeMonths?: number;
        hasDrawerLawyerFundTracking?: number;
        hasDrawerLevyRegistery?: number;
        hasDrawerNameIncludeDivestmentOrBankrupt?: number;
        hasDrawerOtherBankLoanRisk?: number;
        hasGroupRelationshipCustomerAndDrawer?: number;
        hasGuarantorRelationshipCustomerAndDrawer?: number;
        hasUYAPCourtBannedBouncedCheque?: number;
        hostIP?: string;
        hostName?: string;
        individualDrawerCustomerChequeAmount?: number;
        individualDrawerCustomerChequeRate?: number;
        individualDrawerKTChequeAmount?: number;
        isCancellationRisk?: number;
        isCrossCheckResult?: number;
        isCustomerInExceptionList?: boolean;
        isDrawerFoesOfTender?: number;
        isDrawerInCustomerVendorList?: number;
        isDrawerInExceptionList?: boolean;
        isLedgerRisk?: number;
        isLostOrStolen?: number;
        isOverDueDate?: number;
        isPeriodic?: number;
        notPaidBouncedChequeCountLastTwoYears?: number;
        paidBouncedChequeCountLastOneYear?: number;
        rateOfReturnedChequeCount?: number;
        rateOfReturnedChequeCountInClearance?: number;
        returnedChequeCountInClearance?: number;
        systemDate?: Date;
        taxNumber?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeInquiryRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        chequeCollateralId?: number;
        chequeInquiryId?: number;
        dataContract?: BOA.Types.Kernel.ChequeCollateral.ChequeInquiryContract;
        drawerAccountNumber?: number;
        drawerName?: string;
        drawerTaxNumber?: string;
        hasGroupRelationshipCustomerAndDrawer?: number;
        hasGuarantorRelationshipCustomerAndDrawer?: number;
        hostIP?: string;
        hostName?: string;
        isCalledForSimulation?: boolean;
        isCrossCheckResult?: number;
        systemDate?: Date;
        taxNumber?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeInquiryResultContract extends BOA.Common.Types.ContractBase {
        chequeId?: number;
        chequeInquiryId?: number;
        controlState?: number;
        criteriaCode?: string;
        criteriaId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeInquiryResultSimulationContract extends BOA.Common.Types.ContractBase {
        chequeCollateralSimulationId?: number;
        chequeInquirySimulationId?: number;
        controlState?: number;
        criteriaCode?: string;
        criteriaId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeInquirySimulationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        bouncedChequeCountLastOneYear?: number;
        chequeCollateralSimulationId?: number;
        chequeInquiryDailySimulationId?: number;
        chequeInquirySimulationId?: number;
        collateralDemandDateAndDueDateDifferenceInMonth?: number;
        controlState?: number;
        corporateDrawerCustomerChequeAmount?: number;
        corporateDrawerCustomerChequeRate?: number;
        corporateDrawerKTChequeAmount?: number;
        courtBannedBouncedChequeEndDateCorp?: Date;
        courtBannedBouncedChequeEndDateIndividual?: Date;
        criteriaCode?: string;
        criteriaId?: number;
        customerChequeAmountGeneralLimitRate?: number;
        drawerAccountNumber?: number;
        drawerExceptionStatus?: number;
        drawerGrayListCount?: number;
        drawerGroupToCustomerGroupChequeAmount?: number;
        drawerGroupToCustomerGroupChequeRate?: number;
        drawerInterestAccrualAmount?: number;
        drawerKKBOneTimeChequePayment?: number;
        drawerLimitDisabled?: number;
        drawerLimitRejected?: number;
        drawerLimitUnrevised?: number;
        drawerName?: string;
        drawerOtherBankLoanProblemRiskAmount?: number;
        drawerTaxNumber?: string;
        fec?: number;
        firstChequeInquirySimulationId?: number;
        hasCustomerLawyerFundTracking?: number;
        hasDrawerBouncedChequeInClearance?: number;
        hasDrawerCreditInstalmentArrearageLastThreeMonths?: number;
        hasDrawerLawyerFundTracking?: number;
        hasDrawerLevyRegistery?: number;
        hasDrawerNameIncludeDivestmentOrBankrupt?: number;
        hasDrawerOtherBankLoanRisk?: number;
        hasGroupRelationshipCustomerAndDrawer?: number;
        hasGuarantorRelationshipCustomerAndDrawer?: number;
        hasUYAPCourtBannedBouncedCheque?: number;
        hostIP?: string;
        hostName?: string;
        individualDrawerCustomerChequeAmount?: number;
        individualDrawerCustomerChequeRate?: number;
        individualDrawerKTChequeAmount?: number;
        isCancellationRisk?: number;
        isCrossCheckResult?: number;
        isCustomerInExceptionList?: boolean;
        isDrawerFoesOfTender?: number;
        isDrawerInCustomerVendorList?: number;
        isDrawerInExceptionList?: boolean;
        isLedgerRisk?: number;
        isLostOrStolen?: number;
        isPeriodic?: number;
        notPaidBouncedChequeCountLastTwoYears?: number;
        paidBouncedChequeCountLastOneYear?: number;
        rateOfReturnedChequeCount?: number;
        rateOfReturnedChequeCountInClearance?: number;
        returnedChequeCountInClearance?: number;
        systemDate?: Date;
        taxNumber?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeProcessContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountPledgeStatusForBeneficiary?: number;
        accountPledgeStatusForCustomer?: number;
        accountSuffix?: number;
        amount?: number;
        bank?: number;
        bankBranch?: number;
        bankBranchName?: string;
        bankName?: string;
        beneficiaryAccountNumber?: number;
        beneficiaryName?: string;
        beneficiaryTaxNumber?: string;
        branchId?: number;
        branchName?: string;
        chequeCollateralId?: number;
        chequeId?: number;
        chequeNo?: number;
        chequeType?: number;
        cityId?: number;
        clearanceDate?: Date;
        cleranceKey?: string;
        collateralDate?: Date;
        collateralStatus?: number;
        collateralStatusName?: string;
        customerName?: string;
        drawDate?: Date;
        drawerAccountNumber?: number;
        drawerAcoountNo?: string;
        drawerName?: string;
        drawerTaxNumber?: string;
        drawPlace?: string;
        dueDate?: Date;
        exData?: number;
        expenseAccountSuffix?: number;
        fec?: number;
        fecCode?: string;
        isActive?: boolean;
        isControlled?: number;
        isCountry?: number;
        lastTranDate?: Date;
        lastTranType?: number;
        listId?: number;
        orderNo?: number;
        printedDate?: Date;
        returnCode?: number;
        returnCodeStr?: string;
        state?: string;
        stateStr?: string;
        status?: string;
        statusStr?: string;
        systemDate?: Date;
        userAcceptanceStatus?: number;
        userAcceptanceStatusName?: string;
        userName?: string;
        userNameLong?: string;
    }
    interface ChequeProcessSimulationContract extends BOA.Common.Types.ContractBase {
        acceptanceState?: number;
        acceptanceStateName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        bank?: number;
        bankBranch?: number;
        bankBranchName?: string;
        bankName?: string;
        branchId?: number;
        branchName?: string;
        chequeCollateralSimulationId?: number;
        chequeNo?: number;
        drawDate?: Date;
        drawerAccountNumber?: number;
        drawerAcoountNo?: string;
        drawerName?: string;
        drawerTaxNumber?: string;
        dueDate?: Date;
        fec?: number;
        name?: string;
        systemDate?: Date;
        taxNumber?: string;
        userName?: string;
    }
    interface ChequeReleaseWithholdingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        chequeId?: number;
        collateralBlankValueUSD?: number;
        withHoldingAmount?: number;
        withHoldingId?: number;
    }
    interface ChequeReleaseWithHoldingRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.ChequeCollateral.ChequeReleaseWithholdingContract;
    }
    interface ChequeTriageDataContract extends BOA.Common.Types.ContractBase {
        drawerGroupTriage?: number;
        fromDrawerGroupTotalAmount?: number;
        fromDrawerTotalAmount?: number;
        groupTotalAmount?: number;
        isDrawerGroupCustomer?: number;
        ownTotalAmount?: number;
        triage?: number;
    }
    interface ChequeWithholdingContract extends BOA.Common.Types.ContractBase {
        accountFec?: number;
        accountNumber?: number;
        isReserved?: number;
        withHoldingAmount?: number;
        withholdingAmountTL?: number;
        withHoldingId?: number;
    }
    interface ChequeWithholdingReleaseProposalKernelContract extends BOA.Common.Types.ContractBase {
        acceptedAmount?: number;
        accountNumber?: number;
        accountSuffix?: number;
        approveStatus?: number;
        approveUserName?: string;
        availableCollateralAmount?: number;
        chequeWithholdingRelaseProposalId?: number;
        customerStatus?: number;
        fec?: number;
        hostIp?: string;
        hostName?: string;
        overCollateral?: number;
        proposalAmount?: number;
        proposalLegend?: string;
        proposalReason?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withholdingAmount?: number;
    }
    interface Common {
    }
    interface MakeCollateralDemandContract extends BOA.Common.Types.ContractBase {
        beneficiaryAccountNumber?: number;
        beneficiaryAccountSuffix?: number;
        businessKey?: number;
        chequeCollateralId?: number;
        chequeId?: number;
        chequeType?: number;
        collateralDate?: Date;
        customerClassCode?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userAcceptanceStatus?: number;
        userAcceptanceStatusName?: string;
        userName?: string;
    }
    interface MakeCollateralDemandSimulationContract extends BOA.Common.Types.ContractBase {
        acceptanceState?: number;
        acceptanceStateName?: string;
        accountNumber?: number;
        chequeCollateralSimulationId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.ChequeCollateral.ChequeConstants {
    interface Divit {
    }
}
declare namespace BOA.Types.Kernel.ChequeCollateral.Common {
    export const enum ChequeCollateralCancellationReason {
        ChequeReturned = 0,
        ChequeCollected = 1,
        ChequeBounced = 2
    }
    export const enum ChequeCollateralState {
        StandBy = 1,
        SystemAccept = 2,
        SystemReject = 3,
        UserAccept = 4,
        UserReject = 5,
        CollateralReject = 6,
        Cancellation = 9
    }
    export const enum ChequeTypes {
        NormalCheque = 1,
        NotReturnableCheque = 2,
        StarCheque = 3
    }
    export const enum DrawerExceptionStatus {
        Reject = 1,
        Accept = 2,
        Limit = 3
    }
}
declare namespace BOA.Types.Kernel.ChequeLeaf {
    interface ChequeLeafTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        beneficiaryTaxNumber?: string;
        businessKey?: number;
        businessKeyToString?: string;
        chequeAmount?: number;
        chequeBranchId?: number;
        chequeLeafId?: number;
        chequeType?: number;
        chequeTypeName?: string;
        collectorAccountNumber?: number;
        collectorAccountSuffix?: number;
        collectorPhone?: string;
        compensationAmount?: number;
        currentAvailableBalance?: number;
        delegateTaxNumber?: string;
        description?: string;
        drawDate?: Date;
        drawPlace?: number;
        drawPlaceName?: string;
        fec?: number;
        fecDesc?: string;
        hostIP?: string;
        hostName?: string;
        leafNumber?: number;
        partialPaymentAmount?: number;
        paymentType?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranBranch?: string;
        tranBranchId?: number;
        transactionDate?: Date;
        transactionId?: number;
        transactionType?: BOA.Types.Kernel.ChequeLeaf.Helper.ChequeLeafTransactionType;
        transactionTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ChequeLeafTransactionRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.ChequeLeaf.ChequeLeafTransactionContract;
    }
    interface Helper {
    }
}
declare namespace BOA.Types.Kernel.ChequeLeaf.Helper {
    export const enum ChequeLeafTransactionType {
        Collected = 1,
        CollectCanceled = 2,
        BlockedCheque = 3,
        BlockedChequeCanceled = 4,
        PartialPaymentAndCompensation = 5,
        PartialPayment = 6,
        PartialPaymentCancel = 7,
        Compensation = 8,
        Bounced = 9,
        BouncedCanceled = 10,
        ChequeLeafUpdate = 11,
        ReleaseWithholdingForBlockedCheque = 12,
        OrderedPayment = 13,
        ChequeTransactionFromOldSystem = 14,
        BOAChequeClearance = 15,
        CompensationCanceled = 16
    }
}
declare namespace BOA.Types.Kernel.Cloud {
    export const enum CloudEntity {
        CustomFolder = 0,
        HeadOfficeFolder = 1,
        GroupFolder = 2,
        DepartmentFolder = 3,
        UnitFolder = 4,
        ServiceFolder = 5,
        EmployeeFolder = 6,
        RegionFolder = 8,
        RegionalOfficeFolder = 9,
        BranchFolder = 10,
        OtherFolder = 11,
        File = 100,
        FileVersion = 200
    }
    export const enum SearchType {
        Regular = 0,
        Trash = 1,
        Favorite = 2,
        PermissionTaken = 3,
        PermissionGiven = 4
    }
    interface AccessPointContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        accessPointId?: number;
        accessPointName?: string;
        accessPointType?: number;
        parentId?: number;
    }
    interface AccessRightContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        accessPointId?: number;
        accessPointName?: string;
        beginDate?: Date;
        creator?: string;
        dateCreated?: Date;
        dateLastModified?: Date;
        delete?: boolean;
        endDate?: Date;
        fullControl?: boolean;
        isDefault?: boolean;
        isDeny?: boolean;
        isInherited?: boolean;
        lastModifier?: string;
        permission?: number;
        read?: boolean;
        write?: boolean;
    }
    interface BatchContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        fileList?: BOA.Types.Kernel.Cloud.FileContract[];
        folderList?: BOA.Types.Kernel.Cloud.FolderContract[];
        parentId?: number;
    }
    interface BatchRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.BatchContract;
    }
    interface CloudContractBase {
        channelId?: number;
        hostIP?: string;
        hostName?: string;
        sessionKey?: string;
        userName?: string;
    }
    interface CloudRequestBase extends BOA.Common.Types.TransactionRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        endTime?: Date;
        startTime?: Date;
    }
    interface DownloadRequest extends BOA.Types.Kernel.Cloud.StreamRequestBase {
        fileVersionId?: number;
    }
    interface DownloadResponse extends BOA.Types.Kernel.Cloud.StreamResponseBase {
        fileVersionContent?: any;
    }
    interface Error {
        errorCode?: string;
        errorMessage?: string;
    }
    interface FileContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        checkedOutBy?: string;
        creator?: string;
        currentVersion?: BOA.Types.Kernel.Cloud.FileVersionContract;
        dateCreated?: Date;
        dateLastModified?: Date;
        dependencyId?: number;
        entityType?: BOA.Types.Kernel.Cloud.CloudEntity;
        extension?: string;
        fileId?: number;
        fileName?: string;
        id?: number;
        isDeleted?: boolean;
        isEditable?: boolean;
        isFavorite?: boolean;
        key?: string;
        lastModifier?: string;
        name?: string;
        parentId?: number;
        size?: number;
    }
    interface FileData {
        contentHash?: string;
        dateCreated?: Date;
        dateLastModified?: Date;
        id?: number;
        isDirectory?: boolean;
        name?: string;
        relativePath?: string;
        versionId?: number;
    }
    interface FileInfoContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        accessRightList?: BOA.Types.Kernel.Cloud.AccessRightContract[];
        file?: BOA.Types.Kernel.Cloud.FileContract;
        fileVersionList?: BOA.Types.Kernel.Cloud.FileVersionContract[];
        location?: string;
    }
    interface FileInfoRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.FileInfoContract;
    }
    interface FileRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.FileContract;
    }
    interface FileStreamContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        fileVersionContent?: number[];
        fileVersionId?: number;
    }
    interface FileStreamRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.FileStreamContract;
    }
    interface FileVersionContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        checkedOutBy?: string;
        comment?: string;
        contentHash?: string;
        contentId?: number;
        contentSize?: number;
        creator?: string;
        dateCreated?: Date;
        dateLastModified?: Date;
        dependencyId?: number;
        entityType?: BOA.Types.Kernel.Cloud.CloudEntity;
        fileId?: number;
        fileVersionId?: number;
        id?: number;
        isCurrent?: boolean;
        isDeleted?: boolean;
        isEditable?: boolean;
        isFavorite?: boolean;
        key?: string;
        lastModifier?: string;
        name?: string;
        size?: number;
        versionNumber?: string;
    }
    interface FileVersionRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.FileVersionContract;
    }
    interface FolderContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        checkedOutBy?: string;
        creator?: string;
        dateCreated?: Date;
        dateLastModified?: Date;
        dependencyId?: number;
        entityType?: BOA.Types.Kernel.Cloud.CloudEntity;
        folderId?: number;
        folderName?: string;
        folderType?: number;
        id?: number;
        isDeleted?: boolean;
        isEditable?: boolean;
        isFavorite?: boolean;
        key?: string;
        lastModifier?: string;
        name?: string;
        parentId?: number;
        size?: number;
    }
    interface FolderInfoContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        accessRightList?: BOA.Types.Kernel.Cloud.AccessRightContract[];
        fileCount?: number;
        folder?: BOA.Types.Kernel.Cloud.FolderContract;
        folderCount?: number;
        folderSize?: number;
        location?: string;
    }
    interface FolderInfoRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.FolderInfoContract;
    }
    interface FolderRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.FolderContract;
    }
    interface IBrowsable {
        checkedOutBy?: string;
        creator?: string;
        dateCreated?: Date;
        dateLastModified?: Date;
        isEditable?: boolean;
        isFavorite?: boolean;
        key?: string;
        lastModifier?: string;
        size?: number;
    }
    interface ICloudIntegrationService {
    }
    interface ICloudIntegrationStreamService {
    }
    interface ICloudService {
    }
    interface ICloudStreamService {
    }
    interface IEntity {
        dependencyId?: number;
        entityType?: BOA.Types.Kernel.Cloud.CloudEntity;
        id?: number;
        name?: string;
    }
    interface IntegrationBase {
        encryptedValue?: string;
    }
    interface IntegrationDownloadRequest extends BOA.Types.Kernel.Cloud.IntegrationStreamRequestBase {
        fileVersionId?: number;
        useBase64?: boolean;
    }
    interface IntegrationDownloadResponse extends BOA.Types.Kernel.Cloud.IntegrationStreamResponseBase {
        fileVersionContent?: number[];
        fileVersionContentBase64?: string;
    }
    interface IntegrationStreamRequestBase extends BOA.Types.Kernel.Cloud.IntegrationBase {
        channelId?: number;
        endTime?: Date;
        hostIP?: string;
        hostName?: string;
        sessionKey?: string;
        startTime?: Date;
        userName?: string;
    }
    interface IntegrationStreamResponseBase extends BOA.Types.Kernel.Cloud.IntegrationBase {
        endTime?: Date;
        results?: BOA.Types.Kernel.Cloud.Error[];
        startTime?: Date;
        success?: boolean;
    }
    interface IntegrationUploadRequest extends BOA.Types.Kernel.Cloud.IntegrationStreamRequestBase {
        fileVersionContent?: number[];
        fileVersionContentBase64?: string;
        fileVersionId?: number;
        useBase64?: boolean;
    }
    interface IntegrationUploadResponse extends BOA.Types.Kernel.Cloud.IntegrationStreamResponseBase {
        contentId?: number;
    }
    interface LoginContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        customerId?: string;
        otp?: string;
        password?: string;
    }
    interface LoginRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.LoginContract;
    }
    interface Permission {
    }
    interface QuotaInfoContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        fileSizeLimit?: number;
        fileTypeLimit?: number;
        folderId?: number;
        folderQuota?: number;
        folderSize?: number;
        quotaAttainment?: number;
    }
    interface SearchContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        fileList?: BOA.Types.Kernel.Cloud.FileContract[];
        folderList?: BOA.Types.Kernel.Cloud.FolderContract[];
        parentId?: number;
        searchText?: string;
        searchType?: number;
    }
    interface SearchRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.SearchContract;
    }
    interface StreamRequestBase {
        channelId?: number;
        endTime?: Date;
        hostIP?: string;
        hostName?: string;
        startTime?: Date;
        userName?: string;
    }
    interface StreamResponseBase {
        endTime?: Date;
        results?: BOA.Types.Kernel.Cloud.Error[];
        startTime?: Date;
        success?: boolean;
    }
    interface TransactionHistoryContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        accessPointName?: string;
        duration?: number;
        objectName?: string;
        transactionDate?: Date;
        transactionType?: string;
    }
    interface TransactionInfoContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        dependencyId?: number;
        directTransactions?: BOA.Types.Kernel.Cloud.TransactionHistoryContract[];
        entityType?: BOA.Types.Kernel.Cloud.CloudEntity;
        id?: number;
        inDirectTransactions?: BOA.Types.Kernel.Cloud.TransactionHistoryContract[];
    }
    interface TransactionInfoRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.TransactionInfoContract;
    }
    interface UploadRequest extends BOA.Types.Kernel.Cloud.StreamRequestBase {
        fileVersionContent?: any;
        fileVersionId?: number;
    }
    interface UploadResponse extends BOA.Types.Kernel.Cloud.StreamResponseBase {
        contentId?: number;
    }
    interface UserInfoContract extends BOA.Types.Kernel.Cloud.CloudContractBase {
        accessPointType?: number;
        customerId?: number;
        dependencyId?: number;
        entityType?: BOA.Types.Kernel.Cloud.CloudEntity;
        folderId?: number;
        id?: number;
        includeInitialFolders?: boolean;
        initialFolderChildList?: BOA.Types.Kernel.Cloud.SearchContract;
        initialFolderParentList?: BOA.Types.Kernel.Cloud.FolderContract[];
        name?: string;
        parentId?: number;
        position?: string;
        quotaInfo?: BOA.Types.Kernel.Cloud.QuotaInfoContract;
        userId?: number;
        workgroup?: string;
    }
    interface UserInfoRequest extends BOA.Types.Kernel.Cloud.CloudRequestBase {
        cloudContract?: BOA.Types.Kernel.Cloud.CloudContractBase;
        dataContract?: BOA.Types.Kernel.Cloud.UserInfoContract;
    }
    interface Utilities {
    }
}
declare namespace BOA.Types.Kernel.Collateral {
    interface CashWithholdingKernelContract extends BOA.Common.Types.ContractBase {
        beneficiaryList?: BOA.Types.Kernel.Collateral.CollateralBeneficiaryKernelContract[];
        collateralInfo?: BOA.Types.Kernel.Collateral.CollateralKernelContract;
        generalFEC?: number;
        hasAdditionalBeneficiary?: boolean;
        hostIP?: string;
        hostName?: string;
        isFromGeneralAccount?: boolean;
        limitAmount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        whgOwnerAccountNumber?: number;
        whgOwnerName?: string;
    }
    interface CollateralBeneficiaryKernelContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        collateralId?: number;
        customerName?: string;
        number?: number;
    }
    interface CollateralKernelContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        collateralAmount?: number;
        collateralAmountOld?: number;
        collateralDate?: Date;
        collateralDefinitionId?: number;
        collateralId?: number;
        collateralName?: string;
        collectionAmount?: number;
        customerName?: string;
        customerStatus?: number;
        description?: string;
        divitFlowId?: string;
        divitId?: string;
        divitInstanceId?: string;
        expiryDate?: Date;
        fec?: number;
        fecCode?: string;
        fecCodeOld?: string;
        fecOld?: number;
        groupId?: number;
        hasOPMApproval?: boolean;
        hostIP?: string;
        hostName?: string;
        initialCollateralAmount?: number;
        initialFEC?: number;
        initialFECCode?: string;
        invoiceDate?: Date;
        isCollateralDataToBeShown?: boolean;
        isEndorsement?: boolean;
        isFromBranch?: boolean;
        personId?: number;
        portfolioClass?: number;
        releaseDate?: Date;
        state?: number;
        stateName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableAmountUSD?: number;
        usageInCustomerControl?: number;
        usageInCustomerControlName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface CollateralParameters {
    }
    interface CollateralTransactionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        businessKeyToString?: string;
        collateralId?: number;
        collateralTransactionId?: number;
        description?: string;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        state?: number;
        stateName?: string;
        systemDate?: Date;
        transactionAmount?: number;
        transactionDate?: Date;
        transactionType?: number;
        transactionTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface CollateralTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        collateralAmount?: number;
        collateralAmountOld?: number;
        collateralDate?: Date;
        collateralDefinitionId?: number;
        collateralId?: number;
        collateralName?: string;
        counterLedgerIdFC?: number;
        counterLedgerIdLC?: number;
        customerName?: string;
        description?: string;
        divitId?: string;
        divitInstanceId?: string;
        expiryDate?: Date;
        fec?: number;
        fecCode?: string;
        fecCodeOld?: string;
        fecOld?: number;
        hostIP?: string;
        hostName?: string;
        initialCollateralAmount?: number;
        initialFEC?: number;
        initialFECCode?: string;
        isFromBranch?: boolean;
        ledgerIdFC?: number;
        ledgerIdLC?: number;
        newAccountSuffix?: number;
        newBranchId?: number;
        newUnitId?: number;
        portfolioClass?: number;
        releaseDate?: Date;
        state?: number;
        stateName?: string;
        systemDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableAmountUSD?: number;
        userName?: string;
    }
    interface CollateralTransferRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.Collateral.CollateralTransferContract;
    }
    interface Common {
    }
    interface LGFContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beneficiaryType?: number;
        beneficiaryTypeName?: string;
        collateralAmount?: number;
        collateralDate?: Date;
        collateralDefinitionId?: number;
        collateralDefinitionName?: string;
        collateralId?: number;
        commissionRate?: number;
        fec?: number;
        fecCode?: string;
        fundingAmount?: number;
        guaranteeDate?: Date;
        guaranteeEndDate?: Date;
        guaranteeNumber?: string;
        guaranteeRate?: number;
        guaranteeValidityPeriod?: number;
        projectTermMonthCount?: number;
        systemDate?: Date;
    }
}
declare namespace BOA.Types.Kernel.Collateral.CollateralParameters {
    export const enum AccountPledgeStatus {
        Canceled = 0,
        Active = 1
    }
    export const enum ChequeCollateralState {
        StandBy = 1,
        SystemAccept = 2,
        SystemReject = 3,
        UserAccept = 4,
        UserReject = 5,
        CollateralReject = 6
    }
    export const enum ChequeCollateralTransactionStatus {
        AcceptRequestSendToApprove = 1,
        AcceptRequestApproved = 2,
        AcceptRequestRejected = 3,
        AcceptRequestCanceled = 4,
        UserRejectCanceled = 5
    }
    export const enum CollateralActionId {
        Save = 3
    }
    export const enum CollateralDefinition {
        CollateralBond = 1,
        RealEstateMortgage = 3,
        CashWithholding = 5,
        VehiclePledge = 6,
        DebtEndorsement = 8,
        EnterprisePledge = 10,
        GeneralLoanContract = 16,
        BenefitDebtPledge = 18,
        CollateralLoanContract = 28,
        LicensePlatePledge = 29,
        IndustrialVehiclePledge = 30,
        AccountPledge = 31,
        LGFEquity = 46,
        LGFTreasure = 47
    }
    export const enum CollateralGroup {
        LoanContract = 0,
        Mortgage = 1,
        VehiclePledge = 2,
        LGF = 3
    }
    export const enum CollateralOwnerType {
        Kt = 0,
        Other = 1
    }
    export const enum CollateralState {
        Active = 1,
        InProcess = 2,
        PassiveByUser = 3,
        PassiveBySystem = 4,
        Release = 5,
        ActiveRelease = 6,
        PassiveRelease = 7
    }
    export const enum CollateralTransactionType {
        Save = 1,
        Update = 2,
        ReleaseInitialization = 3,
        ReleaseByProceedingExecutionInitialization = 4,
        Release = 5,
        ReleaseByProceedingExecution = 6,
        CollateralTransfer = 7
    }
    export const enum CollateralUISourceType {
        Sp = 0,
        Parameter = 1
    }
    export const enum CollateralUIType {
        NumericEditor = 0,
        TextBox = 1,
        ComboBox = 2,
        DateTimeEditor = 3
    }
    export const enum CollateralValueType {
        Int = 0,
        Decimal = 1,
        String = 2,
        DateTime = 3
    }
    export const enum DebtEndorsementState {
        Accrued = 1,
        NotAccrued = 2
    }
    export const enum EPledgeType {
        EPledge = 0,
        BeforeEPledge = 1
    }
    export const enum IndustrialVehicleType {
        Other = 19
    }
    export const enum ResultType {
        NoProducts = 0,
        SuccessfulTransfer = 1,
        UnSuccessfulTransfer = 2
    }
    export const enum VehicleConsentStatus {
        Removed = 0,
        Active = 1,
        Completed = 2
    }
    export const enum VehicleConsentType {
        LicensePlateChange = 1,
        OwnerChange = 2,
        NameChange = 3,
        VehicleChange = 5
    }
    export const enum VehicleInquiryType {
        NoInquiry = 0,
        Inquiry = 1
    }
    export const enum VehiclePrePledgeStatus {
        Removed = 0,
        Active = 1,
        Pledge = 2
    }
    export const enum WithholdingSourceType {
        CashWithholding = 9,
        CollateralRelease = 10
    }
    interface CollateralCommandName {
    }
    interface CollateralReleaseCommissionKey {
    }
    interface CollateralResourceCode {
    }
    interface CollateralWorkflowState {
    }
    interface ReleaseAgreementCode {
    }
}
declare namespace BOA.Types.Kernel.CollectionSystem {
    export const enum AccountProductType {
        CurrentAccount = 1,
        ParticipationAccount = 2
    }
    export const enum AccrualStates {
        NotAccrual = 0,
        PartialAccrual = 1,
        CompleteAccrual = 2
    }
    export const enum ApproveProcessTypes {
        DoCollection = 1,
        Cancel = 2,
        Delete = 3
    }
    export const enum ApproveResult {
        DEKBeforeTLOnSameMaturity = 1,
        DiscountApprove = 2,
        EarlyPaymentCommWaive = 3,
        CollectionFromDiffAccount = 4,
        DelayPenaltyDiscount = 5,
        CollectionFromGeneralLedger = 6,
        CollectionWithCollateral = 7
    }
    export const enum AuthorizationGroupCode {
        CollectionTypeAuthorization = 1,
        CollectionPlaceAuthorization = 2,
        InstallmentTypeAuthorization = 3,
        DelayPenaltyAuthorization = 4,
        OtherAuthorization = 5,
        CollectionMethodAuthorization = 6
    }
    export const enum CllAuthorizationMainType {
        CollectionType = 1,
        CollectionSourceType = 2,
        InstallmentType = 3,
        DelayPenalty = 4,
        Others = 5,
        CollectionMethods = 6,
        CollectionFromDiffFecWhenSpreadClose = 7,
        FxRateForUse = 8,
        CollectionFromDiffFecWhenSpreadOpen = 9
    }
    export const enum CllAuthorizationMethodType {
        BeforeMaturity = 19,
        AtMaturity = 20,
        AfterMaturity = 21
    }
    export const enum CllCustomerRelationType {
        IsGroupCustomer = 9,
        IsRelationalCustomer = 10
    }
    export const enum CllDifferentFECType {
        DEKfromTL = 1,
        YPfromTL = 2,
        TLfromDifferentFEC = 3,
        DEKfromDifferentFEC = 4,
        YPfromDifferentFEC = 5
    }
    export const enum CllFxSpreadType {
        IsFxSpreadClosed = 33,
        IsFxSpreadOpen = 34
    }
    export const enum CollectionRunType {
        Manuel = 1,
        Automatic = 2,
        Instant = 3,
        Internet = 4
    }
    export const enum CollectionSources {
        fromCurrentAccount = 1,
        fromSafe = 2,
        fromGeneralLedger = 3,
        fromParticipationAccount = 4,
        fromGeneralLedgerTawarruk = 5
    }
    export const enum CollectionTypes {
        NormalCollection = 1,
        EarlyClosure = 2,
        InterimCollection = 41
    }
    export const enum DebtFECType {
        TL = 0,
        ForeignExchangeLinked = 1,
        ForeignExchange = 2,
        TLTOForeignExchangeLinked = 3
    }
    export const enum DelayPenaltyDecisions {
        CollectNow = 1,
        CollectLater = 2,
        DontCollect = 3
    }
    export const enum DiscountDecisions {
        DoDiscount = 1,
        DontDoDiscount = 2
    }
    export const enum EarlyPaymentDecisions {
        ApplyEarlyPaymentCommission = 1,
        DontApplyEarlyPaymentCommission = 2
    }
    export const enum OtherAuthorizations {
        CanChangeCollectionMethods = 1,
        CanChangeDiscountAmount = 2,
        CanChangeEarlyPaymentPenaltyAmount = 3,
        CanChangeDelayPenaltyAmount = 4,
        CanDoDiscountCorparate = 5,
        CanSkipCollectionOrder = 6,
        CanCollectFromForeingCurrencyForDelayedDEK = 7,
        CanSkipCollectionOrderInSameSuffix = 8,
        CanDoDiscountSmallBusiness = 11
    }
    export const enum PortfolioClass {
        Corporate = 1,
        Retail = 2,
        SmallBusiness = 3
    }
    export const enum RuleDefinitionType {
        BeforeMaturity = 1,
        AtMaturity = 2,
        AfterMaturity = 3
    }
    interface AccountFecBalanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        isPersonnel?: boolean;
        projectFec?: number;
        projectFecBalance?: number;
        projectFecMaxBalance?: number;
        totalBalance?: number;
    }
    interface AuthorizationDefinitionDataContract extends BOA.Common.Types.ContractBase {
        accessPointList?: number[];
        accessPointNameList?: any;
        accessPointText?: string;
        authorizationDefinitionId?: number;
        authorizationGridParameter?: any;
        calenderDetail?: any;
        description?: string;
        detail?: any;
        detailFX?: any;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        methodList?: any;
        orderDetail?: any;
        orderTitles?: any;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AuthorizationDefinitionDetailDataContract extends BOA.Common.Types.ContractBase {
        categoryCode?: number;
        customerStatus?: number;
        delayDayCount?: number;
        detailCode?: number;
        isInUse?: boolean;
    }
    interface AuthorizationDefinitionGridDataContract extends BOA.Common.Types.ContractBase {
        definitionData?: any[];
        header?: string;
        headerCode?: number;
    }
    interface AuthorizationDefinitionGridRowDefinition {
        autoCollectionGridType?: number;
        header?: string;
        headerCode?: number;
        isGridParameter?: boolean;
        titles?: any;
    }
    interface AuthorizationDefinitionGridSturctureDataContract extends BOA.Common.Types.ContractBase {
        columnList?: any;
        rowList?: any;
    }
    interface AuthorizationDefinitionMethodInfo extends BOA.Common.Types.ContractBase {
        methodId?: number;
        methodName?: string;
        order?: number;
        seperator?: string;
    }
    interface AuthorizationDefinitionMethodListInfo extends BOA.Common.Types.ContractBase {
        customerStatus?: number;
        detail?: string;
        detailCode?: number;
        header?: string;
        headerCode?: number;
        methodList?: any;
    }
    interface AutoCollectAuthCalenderDefinition extends BOA.Common.Types.ContractBase {
        authorizationDefinitionCalenderId?: number;
        authorizationDefinitionId?: number;
        customerStateCancelled?: boolean;
        customerStateNormal?: boolean;
        customerStateODR?: boolean;
        dayCount?: number;
        dayType?: number;
        runTimeHour?: number;
        runTimeMinute?: number;
    }
    interface AutoCollectAuthFxRateDefinition {
        definitionData?: any;
        header?: string;
        headerCode?: number;
    }
    interface AutoCollectAuthFxRateDefinitionDetail {
        detail?: string;
        detailCode?: number;
        indexType?: number;
        margin?: number;
        type?: number;
    }
    interface AutoCollectAuthOrderDefinition extends BOA.Common.Types.ContractBase {
        authorizationDefinitionId?: number;
        authorizationDefinitionOrderId?: number;
        description?: string;
        detailData?: any;
        maxDayCount?: number;
        minDayCount?: number;
    }
    interface AutoCollectAuthOrderDefinitionDetail extends BOA.Common.Types.ContractBase {
        authorizationDefinitionOrderId?: number;
        categoryCode?: number;
        detailCode?: number;
        detailCodeName?: string;
        isAutoCollect?: boolean;
        isInstantCollect?: boolean;
        orderNumberAmong?: number;
        orderNumberWithin?: number;
    }
    interface AutoCollectAuthPriorityDefinition {
        description?: string;
        maxDayCount?: number;
        minDayCount?: number;
        priorityDetail?: any;
    }
    interface AutoCollectAuthPriorityDefinitionDetail {
        header?: string;
        headerCode?: number;
        inSameMaturity?: number;
        installmentCode?: number;
        interIntallment?: number;
        priority?: number;
    }
    interface AutoCollectionBalanceContract extends BOA.Common.Types.ContractBase {
        accountFEC?: number;
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        branchId?: number;
        currencyAskFer?: number;
        currencyBidFer?: number;
        fecGroup?: number;
        isGroupCustomer?: boolean;
        isRelationalCustomer?: boolean;
        productType?: number;
        suffixOrder?: number;
    }
    interface AutoCollectionContract extends BOA.Common.Types.ContractBase {
        collectionList?: any;
        definitionData?: any;
    }
    interface AutoCollectionResultContract extends BOA.Common.Types.ContractBase {
        isCompleteCollect?: boolean;
        remainingBalance?: number;
    }
    interface BalanceWitholdingResult extends BOA.Common.Types.ContractBase {
        useWithHolding?: boolean;
        withHoldingAmount?: number;
    }
    interface CollectionAccountingLegContract extends BOA.Common.Types.ContractBase {
        bITT?: any;
        bITTExcDiff?: any;
        bITTExcDiffBITT?: any;
        delayPenalty?: any;
        earlyPaymentPenalty?: any;
        principal?: any;
        principalAccruedExcDiffBITT?: any;
        principalAccruedExcDiffRUSF?: any;
        principalExcDiff?: any;
        principalExcDiffBITT?: any;
        principalExcDiffRUSF?: any;
        principalExcDiffVAT?: any;
        profit?: any;
        profitExcDiff?: any;
        profitExcDiffBITT?: any;
        profitExcDiffVAT?: any;
        rUSF?: any;
        rUSFExcDiff?: any;
        rUSFExcDiffBITT?: any;
        vAT?: any;
        vATExcDiff?: any;
        vATExcDiffVAT?: any;
    }
    interface CollectionAutorizationContract extends BOA.Common.Types.TransactionRequestBase {
        detailCode?: number;
        detailName?: string;
        groupCode?: number;
        groupName?: string;
    }
    interface CollectionDetailType {
        bITT?: any;
        bITTExcDiff?: any;
        bITTExcDiffBITT?: any;
        delayPenalty?: any;
        earlyPaymentPenalty?: any;
        principal?: any;
        principalAccruedExcDiffBITT?: any;
        principalAccruedExcDiffRUSF?: any;
        principalExcDiff?: any;
        principalExcDiffBITT?: any;
        principalExcDiffRUSF?: any;
        principalExcDiffVAT?: any;
        profit?: any;
        profitExcDiff?: any;
        profitExcDiffBITT?: any;
        profitExcDiffVAT?: any;
        rUSF?: any;
        rUSFExcDiff?: any;
        rUSFExcDiffBITT?: any;
        vAT?: any;
        vATExcDiff?: any;
        vATExcDiffVAT?: any;
    }
    interface CollectionDetailTypeContract {
        code?: string;
        name?: string;
    }
    interface CollectionHelper {
        afterMethod?: any;
        atMethod?: any;
        beforeMethod?: any;
        calculationFailMessage?: string;
        collectionDetailTypeList?: BOA.Types.Kernel.General.ParameterContract[];
        delayPenaltyAmountFromUser?: number;
        fromDelayPenaltyAmount?: boolean;
        leasingMethod?: any;
        remainingAmount?: number;
        validationErrorMessage?: string;
    }
    interface CollectionListContract extends BOA.Common.Types.ContractBase {
        accruedExcDiffBITTAmount?: number;
        accruedExcDiffRUSFAmount?: number;
        amount?: number;
        balanceColorCode?: number;
        balanceDescription?: string;
        bITT?: number;
        bITTAmount?: number;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        collectedAccruedExcDiffBITTAmount?: number;
        collectedAccruedExcDiffRUSFAmount?: number;
        collectedAmount?: number;
        collectedAmountEUR?: number;
        collectedAmountTL?: number;
        collectedAmountUSD?: number;
        collectedBITTAmount?: number;
        collectedPrincipalAmount?: number;
        collectedProfitAmount?: number;
        collectedRUSFAmount?: number;
        collectedVATAmount?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAskFER?: number;
        collectionBidFER?: number;
        collectionFEC?: number;
        collectionFecCode?: string;
        collectionId?: number;
        collectionOrderAtSameMaturity?: number;
        collectionRuleId?: number;
        collectionSource?: number;
        collectionSourceName?: string;
        collectionStatus?: number;
        collectionStatusName?: string;
        collectionType?: number;
        collectionTypeName?: string;
        commonLedgerId?: number;
        creditCardNumber?: string;
        customerClassId?: number;
        customerClassName?: string;
        customerStatus?: number;
        customerStatusList?: number[];
        customerStatusName?: string;
        debtFECType?: number;
        delayedDayCount?: number;
        delayStatusCode?: number;
        delayStatusName?: string;
        discountAmount?: number;
        forward?: string;
        groupName?: string;
        groupNo?: number;
        hostIP?: string;
        hostName?: string;
        installAmount?: number;
        installAmountALT?: number;
        installAmountEUR?: number;
        installAmountUSD?: number;
        installmentDetailTypeName?: string;
        installmentFER?: number;
        installmentType?: number;
        isActive?: boolean;
        isAutoCollection?: boolean;
        isContinueAutoCollection?: boolean;
        isPersonnel?: boolean;
        lawyerDate?: Date;
        lawyerName?: string;
        maturityDate?: Date;
        maxTranDate?: Date;
        minTranDate?: Date;
        orderNumber?: number;
        orderNumberAmong?: number;
        orderNumberWithin?: number;
        personTypeId?: number;
        personTypeName?: string;
        portfolioClass?: number;
        portfolioClassName?: string;
        portfolioOwner?: string;
        principalAmount?: number;
        processId?: number;
        profitAmount?: number;
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        projectBranchId?: number;
        projectCustomerName?: string;
        projectFEC?: number;
        projectFecBalance?: number;
        projectFecCode?: string;
        projectFecMaxBalance?: number;
        projectRegionalOfficeId?: number;
        projectRegionalOfficeName?: string;
        receiptBusinessKey?: number;
        remainingAmount?: number;
        rUSF?: number;
        rUSFAmount?: number;
        slipBusinessKey?: number;
        source?: number;
        sourceName?: string;
        surplusProfitAmount?: number;
        systemDate?: Date;
        totalBalance?: number;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        tranRefDescription?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vATAmount?: number;
    }
    interface CollectionListOpenContract {
        accountNumber?: number;
        resourceCode?: string;
    }
    interface CollectionMainContract extends BOA.Common.Types.ContractBase {
        accruadProfitAmount?: number;
        accrualFER?: number;
        accrualStatus?: number;
        askProfitLossIncluded?: boolean;
        bITTRate?: number;
        bidProfitLossIncluded?: boolean;
        businessKey?: number;
        collectedAmount?: number;
        collectionAmount?: number;
        collectionAmountExchange?: number;
        collectionAmountTL?: number;
        collectionAskFER?: number;
        collectionBidFER?: number;
        collectionBidFERView?: number;
        collectionExchangeFec?: number;
        collectionExchangeFecName?: string;
        collectionFecGroup?: number;
        collectionFER?: string;
        collectionOrderAtSameMaturity?: number;
        collectionOrderNumber?: number;
        collectionSelectedAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        collectionSource?: number;
        collectionType?: number;
        commissionInstallmentId?: number;
        creditCardNumber?: string;
        currentAccountBranchId?: number;
        currentAccountGoldDigitDifferenceTL?: number;
        currentAccountLedgerId?: number;
        currentAccountNumber?: number;
        currentAccountSuffix?: number;
        currentCollectionAskFer?: number;
        customerMainState?: number;
        customerType?: number;
        dayCount?: number;
        debtFEC?: number;
        debtFecGroup?: number;
        debtFECName?: string;
        debtFECType?: number;
        debtFECTypeName?: string;
        delayedDayCount?: number;
        delayPenaltyAmount?: number;
        delayPenaltyDecision?: number;
        delayPenaltyRate?: number;
        delayPenaltyStatus?: boolean;
        discountAmount?: number;
        discountAmountExchange?: number;
        discountAmountTL?: number;
        discountDecision?: boolean;
        discountStatus?: number;
        discountStatusName?: string;
        earlyCloserPenaltyRate?: number;
        earlyPaymentCommAmount?: number;
        earlyPaymentDecision?: boolean;
        earlyPaymentPenaltyCommissionKey?: string;
        earlyPaymentPenaltyRate?: number;
        earlyPaymentStatus?: number;
        earlyPaymentStatusName?: string;
        fundPool?: number;
        fXSpecialFerAskBusinessKey?: number;
        fXSpecialFerBidBusinessKey?: number;
        hasCalculatedDiscountAmount?: boolean;
        hiddenAccrualFER?: number;
        installmentAmount?: number;
        installmentDetailTypeName?: string;
        installmentOrderNumber?: number;
        installmentType?: number;
        installmentTypeName?: string;
        isForward?: boolean;
        isInsurance?: boolean;
        isLeasing?: boolean;
        isPartial?: boolean;
        isPartialForDiscount?: boolean;
        isTakeOffEarlyPaymentCommFromDiscount?: boolean;
        maturityDate?: Date;
        maturityDateForCostDelayPenalty?: Date;
        maxTranDate?: Date;
        monthlyProfitRate?: number;
        orderNumberAmong?: number;
        orderNumberWithin?: number;
        personType?: number;
        portfolioClass?: number;
        previousRemainingPrincipalAmount?: number;
        previousSurplusProfitAmount?: number;
        principalDiscountStatus?: boolean;
        principalExcDiffSpecialAmountTLForRUSF?: number;
        principalExcDiffSpecialFERForRUSF?: number;
        processId?: number;
        productCode?: string;
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        projectBranchId?: number;
        projectCollectionDetail?: any;
        projectCollectionId?: number;
        projectCollectionRuleId?: number;
        projectDate?: Date;
        projectFER?: number;
        projectInstallmentKind?: number;
        remainingPrincipalAmount?: number;
        rUSFRate?: number;
        surplusProfitAmount?: number;
        tempDelayPenaltyAmount?: number;
        tempDelayPenaltyAmountTL?: number;
        tempDiscountAmount?: number;
        tempEarlyPaymentAmount?: number;
        tempEarlyPaymentPenaltyRate?: number;
        tempEarlyPaymentStatus?: number;
        tranBranchId?: number;
        vATRate?: number;
    }
    interface CollectionRuleDefinitionContract extends BOA.Common.Types.ContractBase {
        active?: string;
        allDelegationId?: string;
        collectionRuleDefinitionId?: number;
        description?: string;
        detailContract?: any;
        hostName?: string;
        isActive?: number;
        isCancel?: boolean;
        name?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CollectionRuleDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        collectionRuleDefinitionDetailId?: number;
        collectionRuleDefinitionId?: number;
        collectionTypeCode?: string;
        descriptionTypeCode?: string;
        orderNumber?: number;
    }
    interface CollectionTypeContract {
        code?: number;
        name?: string;
    }
    interface CommissionDelayContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        commissionAmount?: number;
        commissionAmountFEC?: number;
        debtFEC?: number;
        minAmount?: number;
        portfolioClass?: number;
        projectPayBackPlanInstallmentId?: number;
    }
    interface CommonCollection {
    }
    interface CustomerMainStatus {
        cancelledStatu6?: any;
        normalStatu1?: any;
        normalStatu2?: any;
        overdueStatu3?: any;
        overdueStatu4?: any;
        overdueStatu5?: any;
    }
    interface CustomerStatusContract {
        code?: number;
        color?: string;
        name?: string;
    }
    interface DiscountStatus {
        mandatory?: any;
        noDiscount?: any;
        optional?: any;
    }
    interface EarlyPaymentStatus {
        mandatory?: any;
        none?: any;
        optional?: any;
    }
    interface InstallmentInfoChangeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        description?: string;
        hostName?: string;
        installmentId?: number;
        installmentInfoExchangeId?: number;
        installmentType?: number;
        orderNumber?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InstallmentListFilterContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        collectionStatusList?: number[];
        customerClassList?: number[];
        delayStatusList?: number[];
        groupNo?: number;
        installmentTypeList?: number[];
        isBalanceControlRun?: boolean;
        isUnblockedBalanceRetrieved?: boolean;
        lawyerStatusList?: number[];
        maxTranDate?: Date;
        minTranDate?: Date;
        personTypeList?: number[];
        portfolioOwnerList?: number[];
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        regionalOfficeId?: number;
    }
    interface InstallmentListOpenContract {
        accountNumber?: number;
        resourceCode?: string;
    }
    interface InstallmentTaxChangeAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: any;
        installmentContract?: BOA.Types.Kernel.Accrual.PayBackPlanInstallmentContract;
        mailCode?: string;
        payBackPlanRecalculationType?: number;
        projectContract?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface InstallmentTaxChangeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        bITTAmount?: number;
        bITTRate?: number;
        bITTState?: number;
        branchId?: number;
        businessKey?: number;
        changeState?: number;
        deletedBITTAmount?: number;
        deletedRUSFAmount?: number;
        description?: string;
        fec?: number;
        fer?: number;
        hostName?: string;
        installmentTaxChangeId?: number;
        newBittRate?: number;
        newRusfRate?: number;
        orderNumber?: number;
        rUSFAmount?: number;
        rUSFRate?: number;
        rUSFState?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InstallmentTypes {
        commissionCollection?: any;
        costCollection?: any;
        creditCardCollection?: any;
        delayPenaltyCollection?: any;
        projectCollection?: any;
    }
    interface InterimCollectionDataContract extends BOA.Common.Types.ContractBase {
        collectionSourceAccountAvailableBalance?: number;
        collectionSourceAccountNumber?: number;
        collectionSourceAccountSuffix?: number;
        customerMainState?: number;
        earlyPaymentCompensationAmount?: number;
        earlyPaymentCompensationAmountFEC?: number;
        interimCollectionAmount?: number;
        interimCollectionAmountFEC?: number;
        personId?: number;
        projectContract?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        totalBITTDifferenceAmount?: number;
        totalProfitDifferenceAmount?: number;
        totalRUSFDifferenceAmount?: number;
    }
    interface ManageCollectableAccountsOpenContract {
        accountNumber?: number;
        resourceCode?: string;
    }
    interface ODRCollectionBalanceVirementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balanceAfter?: number;
        balanceBefore?: number;
        branchId?: number;
        comment?: string;
        counterLedgerId?: number;
        debitCreditType?: number;
        fec?: number;
        id?: number;
        ledgerFECType?: string;
        ledgerId?: number;
        ledgerShareType?: string;
        runODRBalanceVirement?: number;
        tranAmount?: number;
    }
    interface ODRCollectionBalanceVirementRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        contractList?: any;
    }
    interface ODRLedgerContract extends BOA.Common.Types.ContractBase {
        lossShareRatio?: number;
        mainODRLedgerId?: number;
        mainODRLedgerIdProfit?: number;
        profitShareRatio?: number;
        targetLedgerIdFXProfit?: number;
        targetLedgerIdTLProfit?: number;
        targetODRLedgerIdFX?: number;
        targetODRLedgerIdTL?: number;
    }
    interface ProfitDifferenceCollectionRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: any;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface ProjectCollectionAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        collectionAccountingLeg?: any;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        customerMainState?: number;
        dataContract?: any;
        isActive?: boolean;
        isLeasing?: boolean;
        status?: number;
        subStatus?: number;
    }
    interface ProjectCollectionContract extends BOA.Common.Types.ContractBase {
        accountBranchId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        accrualFER?: number;
        accrualStatus?: number;
        amount?: number;
        approveReason?: string;
        askProfitLossIncluded?: boolean;
        bITTDifferenceSum?: number;
        bITTRate?: number;
        bidProfitLossIncluded?: boolean;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        collectedAmount?: number;
        collectionAmount?: number;
        collectionAmountExchange?: number;
        collectionAmountTL?: number;
        collectionAskFER?: number;
        collectionBidFER?: number;
        collectionExchangeFec?: number;
        collectionExchangeFecName?: string;
        collectionFecGroup?: number;
        collectionOrderAtSameMaturity?: number;
        collectionOrderNumber?: number;
        collectionSource?: number;
        collectionSourceName?: string;
        collectionType?: number;
        collectionTypeName?: string;
        commonLedgerId?: number;
        currentAccountBranchId?: number;
        currentAccountGoldDigitDifferenceTL?: number;
        currentAccountLedgerId?: number;
        currentAccountNumber?: number;
        currentAccountSuffix?: number;
        currentCollectionAskFer?: number;
        customerMainState?: number;
        customerName?: string;
        customerStatus?: number;
        customerStatusName?: string;
        dayCount?: number;
        debtFEC?: number;
        debtFecGroup?: number;
        debtFECName?: string;
        debtFECType?: number;
        debtFECTypeName?: string;
        delayPenaltyAmount?: number;
        delayPenaltyDecision?: number;
        delayPenaltyRate?: number;
        delayPenaltyStatus?: boolean;
        discountAmount?: number;
        discountAmountExchange?: number;
        discountAmountTL?: number;
        discountDecision?: boolean;
        discountStatus?: number;
        earlyCloserPenaltyRate?: number;
        earlyPaymentCommAmount?: number;
        earlyPaymentDecision?: boolean;
        earlyPaymentPenaltyCommissionKey?: string;
        earlyPaymentPenaltyRate?: number;
        earlyPaymentStatus?: number;
        fundPool?: number;
        fXAskBusinessKey?: number;
        fXAskJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        fXBidBusinessKey?: number;
        fXBidJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        fXSpecialFerAskBusinessKey?: number;
        fXSpecialFerBidBusinessKey?: number;
        hasCalculatedDiscountAmount?: boolean;
        hiddenAccrualFER?: number;
        hostIP?: string;
        hostName?: string;
        installmentAmount?: number;
        installmentDetailTypeName?: string;
        installmentOrderNumber?: number;
        installmentType?: number;
        isActive?: boolean;
        isForward?: boolean;
        isLeasing?: boolean;
        isPartial?: boolean;
        isPartialForDiscount?: boolean;
        isTakeOffEarlyPaymentCommFromDiscount?: boolean;
        lossShareRatio?: number;
        mainODRLedgerId?: number;
        mainODRLedgerIdProfit?: number;
        maturityDate?: Date;
        maxTranDate?: Date;
        monthlyProfitRate?: number;
        orderNumber?: number;
        personType?: number;
        portfolioClass?: number;
        previousRemainingPrincipalAmount?: number;
        previousSurplusProfitAmount?: number;
        principalDiscountStatus?: boolean;
        principalExcDiffSpecialAmountTLForRUSF?: number;
        principalExcDiffSpecialFERForRUSF?: number;
        processId?: number;
        productCode?: string;
        profitDifferenceSum?: number;
        profitShareRatio?: number;
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        projectBranchId?: number;
        projectCollectionDetailList?: any;
        projectCollectionId?: number;
        projectCollectionRuleId?: number;
        projectDate?: Date;
        projectFER?: number;
        projectInstallmentKind?: number;
        remainingPrincipalAmount?: number;
        rUSFDifferenceSum?: number;
        rUSFRate?: number;
        surplusProfitAmount?: number;
        systemDate?: Date;
        targetLedgerIdFXProfit?: number;
        targetLedgerIdTLProfit?: number;
        targetODRLedgerIdFX?: number;
        targetODRLedgerIdTL?: number;
        tempDelayPenaltyAmount?: number;
        tempDelayPenaltyAmountTL?: number;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vATRate?: number;
    }
    interface ProjectCollectionDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        amountTL?: number;
        calculatedDiscountAmount?: number;
        collectedAmount?: number;
        collectedAmountTL?: number;
        collectionAmount?: number;
        collectionAmountExchange?: number;
        collectionAmountTL?: number;
        detailType?: string;
        detailTypeName?: string;
        discountAmount?: number;
        discountAmountExchange?: number;
        discountAmountTL?: number;
        isDefault?: boolean;
        isTL?: boolean;
        isTotalInclude?: boolean;
        projectCollectionDetailId?: number;
        projectCollectionId?: number;
    }
    interface WithHoldingBalanceForCollectionContract extends BOA.Common.Types.ContractBase {
        actualHoldAmount?: number;
        balance?: number;
        collateralAmount?: number;
        holdAmount?: number;
        isCollateral?: boolean;
        isLoanHold?: boolean;
        ownerAccountNumber?: number;
    }
    interface WitholdingListToReleaseContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        isReserved?: number;
        withHoldingAmount?: number;
        withHoldingClass?: number;
        withHoldingCode?: string;
        withHoldingId?: number;
    }
}
declare namespace BOA.Types.Kernel.CommissionRediscount {
    interface CommissionRediscountControlContract extends BOA.Common.Types.ContractBase {
        commissionInstallmentId?: number;
        commissionJournalId?: number;
        endDate?: Date;
        exceptionType?: number;
        hostName?: string;
        profitLedgerId?: number;
        rediscountStatus?: number;
        rediscountStatusDesc?: string;
        rediscountType?: number;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CommissionRediscountControlRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CommissionRediscount.CommissionRediscountControlContract;
    }
}
declare namespace BOA.Types.Kernel.CommissionTransactions {
    interface CommissionInfoFilterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountNumberList?: any;
        accountSuffix?: number;
        beginDate?: Date;
        branchId?: number;
        collectionStatus?: number;
        collectionStatusList?: number[];
        commissionId?: number;
        commissionKey?: string;
        commissionKeyList?: string[];
        commissionStatus?: number;
        customerClass?: number;
        customerClassList?: number[];
        endDate?: Date;
        isRediscount?: number;
        processPlace?: number;
        processPlaceList?: number[];
        recordSource?: number;
        regionId?: number;
        resourceCode?: string;
        tranRef?: string;
        userCode?: string;
    }
    interface CommissionInfoListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accrualAmount?: number;
        autoPriceAmount?: number;
        balance?: number;
        baseAmount?: number;
        baseCommissionAmountForRediscount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        collectionStatus?: number;
        collectionStatusDesc?: string;
        commissionBaseAmount?: number;
        commissionDesc?: string;
        commissionInstallmentId?: number;
        commissionJournalId?: number;
        commissionRate?: number;
        customerClassCode?: string;
        customerClassName?: string;
        customerName?: string;
        errorExists?: boolean;
        fecCommission?: number;
        fecCommissionCode?: string;
        fecMainTransaction?: number;
        fecMainTransactionCode?: string;
        information?: string;
        installmentAmount?: number;
        installmentDate?: Date;
        installmentOrder?: number;
        isActive?: number;
        paidAmount?: number;
        paymentDate?: Date;
        paymentUser?: string;
        processPlaceDescription?: string;
        rediscountAmount?: number;
        rediscountDate?: Date;
        rediscountEndDate?: Date;
        rediscountStartDate?: Date;
        rediscountStatus?: string;
        resourceId?: number;
        resourceName?: string;
        resultIconPath?: string;
        resultMessage?: string;
        tranDate?: Date;
        transactionAmount?: number;
        transactionReference?: string;
    }
    interface CommissionListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        bsmvAmount?: number;
        bSMVIncluded?: boolean;
        businessKey?: number;
        businessKeyPayment?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionStatusName?: string;
        commissionAmount?: number;
        commissionCount?: number;
        commissionId?: number;
        commissionInstalmentId?: number;
        commissionJournalId?: number;
        commissionPaymentId?: number;
        commissionType?: string;
        commissionTypeDescription?: string;
        currentFERCommission?: number;
        customerName?: string;
        description?: string;
        fecAmount?: number;
        fecCommission?: number;
        fecCommissionName?: string;
        ferMainTransaction?: number;
        generalLedgerId?: number;
        hasBSMV?: boolean;
        hostName?: string;
        information?: string;
        installmentOrder?: number;
        isCommissionHasInstallment?: boolean;
        maturityDate?: Date;
        paidBSMVAmount?: number;
        paidCommissionAmount?: number;
        processPlace?: string;
        processPlaceDescription?: string;
        processType?: string;
        processTypeDescription?: string;
        profitLedgerId?: number;
        systemDate?: Date;
        tranBranchName?: string;
        tranDate?: Date;
        transactionAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CommonStatics {
    }
}
declare namespace BOA.Types.Kernel.CommissionTransactions.CommonStatics {
    export const enum CollectionStatus {
        Waiting = 0,
        PartialCollection = 1,
        FullCollection = 2,
        Payable = 3,
        HasPayment = 4,
        All = 5
    }
}
declare namespace BOA.Types.Kernel.CoreBanking.ChequeDataEntry {
    interface ChequeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        bank?: number;
        bankBranch?: number;
        bankBranchName?: string;
        bankName?: string;
        branchId?: number;
        branchName?: string;
        chequeId?: number;
        chequeNo?: number;
        cityId?: number;
        clearanceDate?: Date;
        cleranceKey?: string;
        customerName?: string;
        drawDate?: Date;
        drawerAcoountNo?: string;
        drawerFEC?: number;
        drawerName?: string;
        drawerTaxNumber?: string;
        drawPlace?: string;
        dueDate?: Date;
        expenseAccountSuffix?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isAllCheques?: boolean;
        isControlled?: number;
        isControlledStr?: string;
        isCountry?: number;
        isGibNotificationRequired?: boolean;
        isWitholding?: boolean;
        lastTranDate?: Date;
        lastTranType?: number;
        listId?: number;
        maxAmount?: number;
        maxDrawDate?: Date;
        maxDueDate?: Date;
        maxSystemDate?: Date;
        minAmount?: number;
        minDrawDate?: Date;
        minDueDate?: Date;
        minSystemDate?: Date;
        orderNo?: number;
        packageDate?: Date;
        personType?: number;
        printedDate?: Date;
        recordType?: number;
        reportStatus?: number;
        reportType?: number;
        returnCode?: number;
        returnCodeStr?: string;
        rowVer?: number[];
        state?: string;
        stateStr?: string;
        status?: string;
        statusStr?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userNameLong?: string;
        userNameSaver?: string;
    }
    interface ChequePackageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        approvedChequeCount?: number;
        bankCode?: string;
        bankName?: string;
        beginDate?: Date;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cancelReason?: string;
        cancelReasonDescription?: string;
        chequeCount?: number;
        chqCancelSubInstanceId?: number;
        clearanceDate?: Date;
        currentState?: number;
        currentStateStr?: string;
        description?: string;
        endDate?: Date;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        id?: number;
        isActive?: number;
        isActiveStr?: string;
        isApproved?: boolean;
        packageType?: number;
        realAmount?: number;
        rejectedChequeCount?: number;
        relativePersonId?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        totalAmountKT?: number;
        totalAmountOtherBank?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userNameLong?: string;
        wfInstanceId?: number;
    }
    interface ChequeRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        chequeInfo?: BOA.Types.Kernel.CoreBanking.ChequeDataEntry.ChequeContract;
        chequePackageInfo?: BOA.Types.Kernel.CoreBanking.ChequeDataEntry.ChequePackageContract;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        isCancelled?: boolean;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface Helper {
    }
}
declare namespace BOA.Types.Kernel.CoreBanking.ChequeDataEntry.Helper {
    interface Constant {
    }
}
declare namespace BOA.Types.Kernel.Corebanking.Commission {
    interface ProjectCommissionReviseRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        newAccountNumber?: number;
        newAccountSuffix?: number;
        newBranchId?: number;
        newLedgerId?: number;
        parentAccountNumber?: number;
        parentAccountSuffix?: number;
        parentBranchId?: number;
        parentLedgerId?: number;
        transferAmount?: number;
        transferAmountFEC?: number;
    }
}
declare namespace BOA.Types.Kernel.CoreBanking.Commission {
    interface CommissionAccrualInfoContract extends BOA.Common.Types.ContractBase {
        accAccrualType?: number;
        accNewAccrualAmount?: number;
        accNewAccrualRef?: string;
        accNewCommissionInstallmetnId?: number;
        accNewCommissionJournalId?: number;
        accNewProjectId?: number;
        accOldAccrualAmount?: number;
        accOldCommissionInstallmetnId?: number;
        accOldCommissionJournalId?: number;
        accReverseAccrualRef?: string;
        accrualAmount?: number;
        commissionAmount?: number;
        commisssionFer?: number;
        isAccrual?: boolean;
        paidCommissionAmount?: number;
    }
    interface ProjectCommissionAccrualRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        accountNumber?: number;
        accountSuffix?: number;
        accrualAmount?: number;
        accrualFec?: number;
        accrualType?: number;
        commissionLedgerId?: number;
        suspenseAccount?: number;
    }
    interface ProjectCommissionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        businesskey?: number;
        commissionLedgerId?: number;
        projectId?: number;
    }
}
declare namespace BOA.Types.Kernel.CoreBanking.Teller {
    export const enum InternalMoneyTransferState {
        Active = 1,
        Deleted = 2,
        Reversed = 3
    }
    export const enum InternalMoneyTransferType {
        Manual = 0,
        Auto = 1
    }
    export const enum PaymentAccountType {
        None = 0,
        Account = 1,
        GeneralLedger = 2,
        Cahce = 3
    }
    export const enum POSOutGoingStates {
        QueueWaiting = 1,
        Sent = 2,
        HasError = 3,
        Deleted = 4,
        DateWaiting = 5,
        MoneyWaiting = 6,
        CallBack = 7,
        CallBackReturn = 8,
        AccountingMisMatch = 9,
        OnQueue = 10
    }
    export const enum POSTranType {
        Accounting = 1,
        Process = 2,
        Update = 3,
        Delete = 4,
        Coex = 5,
        ADUP = 6,
        Send = 7
    }
    interface AccountStateInfoContract {
        accountNumber?: number;
        currentState?: number;
        previousState?: number;
    }
    interface DeleteDepositProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
    }
    interface DeleteWithdrawalProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
    }
    interface DepositProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.CoreBanking.Teller.DepositWithdrawalProcessContract;
        senderTaxNumber?: string;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
    }
    interface DepositWithdrawalNotificationCode {
    }
    interface DepositWithdrawalProcessContract extends BOA.Common.Types.ContractBase {
        accessPoint?: string;
        accessPointId?: number;
        accountCloseReason?: number;
        accountCloseReasonExtra?: string;
        accountInfo?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountTL?: number;
        aTMLedgerId?: number;
        authorizedIdentityOnBehalfOfFirm?: string;
        authorizedNameOnBehalfOfFirm?: string;
        authorizedPhoneOnBehalfOfFirm?: string;
        blackListVerificationType?: number;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        customerInfo?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        dateTimeString?: string;
        defaultEMail?: string;
        defaultGSM?: string;
        depositWithdrawalId?: number;
        description?: string;
        divitId?: any;
        fec?: number;
        fecName?: string;
        firmIdentityOnBehalfOfCustomer?: string;
        firmTitleOnBehalfOfCustomer?: string;
        fromBranch?: BOA.Common.Types.BranchContract;
        fromBranchName?: string;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        isDefinedCustomer?: boolean;
        isWithdrawal?: boolean;
        isXTM?: boolean;
        mail1?: number;
        mail2?: number;
        productType?: number;
        relativePersonId?: number;
        resourceId?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        toBranch?: BOA.Common.Types.BranchContract;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        warningMessage?: string;
        xTMMail?: string;
    }
    interface InternalMoneyTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        authorizedPersonId?: number;
        businessKey?: number;
        channelId?: number;
        currentState?: number;
        description?: string;
        divitId?: any;
        fromAccountBranch?: number;
        fromAccountSuffix?: number;
        fromFEC?: number;
        hostIP?: string;
        hostName?: string;
        isOrdered?: boolean;
        mainBusinessKey?: number;
        moneyTransferType?: number;
        processType?: number;
        productType?: number;
        resourceCode?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        systemDate?: Date;
        toAccountBranch?: number;
        toAccountSuffix?: number;
        toFEC?: number;
        tranBranch?: number;
        tranDate?: Date;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        warningMessage?: string;
    }
    interface InternalMoneyTransferProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        internalMoneyTransferContract?: BOA.Types.Kernel.CoreBanking.Teller.InternalMoneyTransferContract;
        mainBusinessKey?: number;
    }
    interface IntrabankMoneyTransferContract extends BOA.Common.Types.ContractBase {
        accountingDescription?: string;
        appliedFer?: number;
        authorizedIdentityOnBehalfOfCustomer?: string;
        authorizedIdentityOnBehalfOfReceiver?: string;
        authorizedNameOnBehalfOfCustomer?: string;
        authorizedNameOnBehalfOfReceiver?: string;
        authorizedPersonId?: number;
        authorizedPhoneOnBehalfOfCustomer?: string;
        authorizedPhoneOnBehalfOfReceiver?: string;
        blackListVerificationType?: number;
        channelId?: number;
        channelName?: string;
        defaultAddress?: string;
        divitId?: any;
        gIBTransferType?: number;
        hasSlip?: boolean;
        hostIp?: string;
        isActive?: number;
        isCommissionTotalAmount?: boolean;
        isEnterprisePayment?: boolean;
        isFromMultipleTransaction?: boolean;
        isOrdered?: boolean;
        isPaymentReceiverAccountInFreeZone?: number;
        isReceiverAccountInFreeZone?: number;
        isReceiverEmployee?: boolean;
        ledgerId?: number;
        moneyTransferAmount?: number;
        moneyTransferBusinessDate?: Date;
        moneyTransferBusinessKey?: number;
        moneyTransferDate?: Date;
        moneyTransferDescription?: string;
        moneyTransferFec?: number;
        moneyTransferFormatedDate?: string;
        moneyTransferHostName?: string;
        moneyTransferId?: number;
        moneyTransferReceivedBranchId?: number;
        moneyTransferResourceId?: number;
        moneyTransferSentBranchId?: number;
        moneyTransferState?: number;
        moneyTransferUserName?: string;
        paymentAmount?: number;
        paymentBusinessDate?: Date;
        paymentBusinessKey?: number;
        paymentDate?: Date;
        paymentReceiverAccountAddress?: string;
        paymentReceiverAccountBranchId?: number;
        paymentReceiverAccountIBAN?: string;
        paymentReceiverAccountTaxNumber?: string;
        paymentReceiverAccountTaxOffice?: string;
        paymentReceiverAcountNumber?: number;
        paymentReceiverAcountSuffix?: number;
        paymentReceiverAddress?: string;
        paymentReceiverBirthDate?: Date;
        paymentReceiverFatherName?: string;
        paymentReceiverName?: string;
        paymentReceiverPhone?: string;
        paymentResourceId?: number;
        paymentType?: number;
        paymentUserName?: string;
        productType?: number;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverAddress?: string;
        receiverBirthDate?: Date;
        receiverBranchId?: number;
        receiverFatherName?: string;
        receiverIBAN?: string;
        receiverMoneyTransferType?: number;
        receiverName?: string;
        receiverPersonid?: number;
        receiverPersonType?: number;
        receiverPhone?: string;
        receiverTaxNumber?: string;
        refundSufffix?: number;
        refundToBranchBusinessDate?: Date;
        refundToBranchBusinessKey?: number;
        refundToBranchDate?: Date;
        refundToBranchDescription?: string;
        refundToBranchId?: number;
        refundToBranchResourceId?: number;
        refundToBranchUserName?: string;
        refundToSenderAcountSuffix?: number;
        refundToSenderBranchId?: number;
        refundToSenderBusinessDate?: Date;
        refundToSenderBusinessKey?: number;
        refundToSenderDate?: Date;
        refundToSenderDescription?: string;
        refundToSenderIBAN?: string;
        refundToSenderResourceId?: number;
        refundToSenderUserName?: string;
        resourceCode?: string;
        resourceId?: number;
        reverseMoneyTransferBusinessKey?: number;
        senderAccountNumber?: number;
        senderAccountSuffix?: number;
        senderAddress?: string;
        senderBranchId?: number;
        senderIBAN?: string;
        senderMoneyTransferType?: number;
        senderName?: string;
        senderPersonid?: number;
        senderPersonType?: number;
        senderPhone?: string;
        senderTaxNumber?: string;
        senderTaxOffice?: string;
        systemDate?: Date;
        tLAmount?: number;
        totalAmount?: number;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        warningMessage?: string;
    }
    interface IntrabankMoneyTransferNotificationCode {
    }
    interface IntrabankMoneyTransferProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.CoreBanking.Teller.IntrabankMoneyTransferContract;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface KASConstants {
    }
    interface MasakCandidate {
        matchedIdField?: number;
        matchedListIdField?: string;
        matchedNameField?: string;
        matchedScoreField?: number;
    }
    interface MASAKSafeListContract extends BOA.Common.Types.ContractBase {
        dateOfBirth?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        isActive?: number;
        isActiveDisplay?: boolean;
        name?: string;
        placeOfBirth?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MASAKServiceInfoContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        isActive?: number;
        password?: string;
        serviceURL?: string;
        systemDate?: Date;
        userCode?: string;
        userName?: string;
    }
    interface POSOutGoingContract extends BOA.Common.Types.ContractBase {
        accountingTranRef?: string;
        amount?: number;
        authorizedPersonID?: number;
        birthDate?: Date;
        birthPlace?: string;
        blackListVerificationType?: number;
        channelId?: number;
        creditCardNumber?: string;
        customerId?: string;
        description?: string;
        divitId?: string;
        errorCode?: string;
        errorMessage?: string;
        hostName?: string;
        ibanNotDeclared?: boolean;
        isAuthorized?: boolean;
        isOrder?: boolean;
        isRent?: boolean;
        isTotalAmountInfoChecked?: boolean;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        lastQueryResult?: string;
        messageSendDate?: Date;
        nationality?: string;
        outGoingId?: number;
        outGoingTran?: BOA.Types.Kernel.CoreBanking.Teller.POSOutGoingTranContract;
        passportNumber?: string;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: BOA.Types.Kernel.CoreBanking.Teller.PaymentAccountType;
        paymentBranchId?: number;
        paymentSource?: string;
        paymentType?: string;
        pPMLimit?: number;
        priority?: number;
        processInfo?: string;
        processType?: string;
        queryToken?: number;
        receiptDescription?: string;
        receiverAccountNumber?: string;
        receiverAddress?: string;
        receiverBranchCode?: number;
        receiverCityCode?: string;
        receiverFatherName?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        receiverParticipantCode?: number;
        receiverPhoneNumber?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderAccountNumber?: string;
        senderAddress?: string;
        senderBranchCode?: number;
        senderCityCode?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        senderParticipantCode?: number;
        senderPersonType?: number;
        senderPhoneNumber?: string;
        senderTaxOffice?: string;
        state?: number;
        statusReason?: number;
        systemDate?: Date;
        totalAmount?: number;
        transactionBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
        withoutLimit?: number;
        workFlowInstanceId?: number;
    }
    interface POSOutGoingTranContract extends BOA.Common.Types.ContractBase {
        approveUserName?: string;
        businessKey?: number;
        errorCode?: string;
        hostName?: string;
        outGoingId?: number;
        reverseBusinessKey?: number;
        state?: number;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface SendPOSAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.CoreBanking.Teller.POSOutGoingContract;
        outGoingId?: number;
    }
    interface WithdrawalProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        branchList?: BOA.Types.Kernel.CoreBanking.Teller.DepositWithdrawalProcessContract[];
        dataContract?: BOA.Types.Kernel.CoreBanking.Teller.DepositWithdrawalProcessContract;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
    }
}
declare namespace BOA.Types.Kernel.CoreBanking.Withholding {
    interface WithholdingListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        approveDate?: Date;
        approverUser?: string;
        customerName?: string;
        description?: string;
        distressNumber?: string;
        fec?: number;
        isActive?: number;
        isActiveDescripiton?: string;
        isCollateral?: number;
        isReserved?: number;
        isReservedDescription?: string;
        originalId?: number;
        ownerAccountNumber?: number;
        ownerType?: number;
        ownerTypeDescription?: string;
        parentId?: number;
        publicInstitutionCode?: string;
        publicInstitutionName?: string;
        releaseDate?: Date;
        releaseUser?: string;
        sourceId?: string;
        sourceType?: number;
        systemDate?: Date;
        taxOfficeCode?: string;
        taxOfficeName?: string;
        userName?: string;
        withholdingClass?: number;
        withholdingClassDescription?: string;
        withholdingCode?: string;
        withholdingDate?: Date;
        withholdingDefinitionDescription?: string;
        withholdingDefinitionWithholdingName?: string;
        withholdingId?: number;
        withholdingType?: number;
        withholdingTypeDescription?: string;
    }
    interface WithholdingListRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        accountSuffix?: number;
        amountBegin?: number;
        amountEnd?: number;
        branchId?: number;
        isActive?: number;
        isReserved?: number;
        originalId?: number;
        ownerAccountNumber?: number;
        ownerType?: number;
        withholdingCode?: string;
        withholdingDateBegin?: Date;
        withholdingDateEnd?: Date;
        withholdingType?: number;
    }
}
declare namespace BOA.Types.Kernel.Correspondence {
    export const enum CorrespondenceType {
        Yes = 1,
        No = 2
    }
    export const enum DocStatu {
        Referred = 1,
        ReceivedByCorrespondence = 2,
        ReferredByCorrespondence = 3,
        Received = 4,
        Deleted = 5,
        Disappeared = 6
    }
    export const enum RecordStatuInfo {
        TeslimAlinacaklar = 1,
        Uzerimdekiler = 2,
        Gonderilenler = 3
    }
    export const enum SendingToPlace {
        Internal = 1,
        External = 2,
        All = 3
    }
    export const enum SendingTypeInfo {
        AcilKurye = 1,
        EldenTeslimGönderici = 2,
        EldenTeslimHaberlesme = 3,
        Kargo = 4,
        Motokurye = 5,
        PostaAPS = 6,
        PostaIadeliTaahhutlu = 7,
        PostaNormal = 8
    }
    interface DocumentsContract extends BOA.Common.Types.ContractBase {
        arrivalDate?: Date;
        barcodeNo?: string;
        beginDate?: Date;
        corName?: string;
        correspondenceType?: number;
        description?: string;
        docGroup?: number;
        docGroupName?: string;
        docTypeInEnvelope?: number;
        docTypeName?: string;
        documentID?: number;
        endDate?: Date;
        followNo?: string;
        hostName?: string;
        info?: string;
        inOrOut?: number;
        isCorrespondence?: number;
        isReturn?: number;
        isShipped?: number;
        receiverUnit?: string;
        receiverUser?: string;
        receiverUserId?: number;
        receiverUserName?: string;
        receiverWorkGroupId?: number;
        returnDate?: Date;
        sendingName?: string;
        sendingTo?: number;
        sendingType?: number;
        shippedStatu?: string;
        statu?: number;
        statuName?: string;
        systemDate?: Date;
        systemDateString?: string;
        totalDocument?: number;
        transporterCompany?: number;
        transporterCompanyName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateSystemDateString?: string;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
        userUnit?: string;
    }
}
declare namespace BOA.Types.Kernel.Correspondence.Kep {
    export const enum AddressBookType {
        Internal = 1,
        External = 2
    }
    export const enum CorporationStatus {
        Active = 1,
        Passive = 2
    }
    export const enum KepMailStatus {
        UnRead = 0,
        Read = 1,
        UnSent = 2,
        Sent = 3
    }
    export const enum MailAddressType {
        From = 1,
        To = 2,
        Cc = 3,
        OriginalFrom = 4,
        OriginalTo = 5,
        OriginalCc = 6,
        ValidSentAddresses = 7,
        ValidUnSentAddresses = 8,
        InvalidAddresses = 9
    }
    export const enum MailTransactionStatus {
        Unknow = 0,
        MailIsExist = 1,
        MailInserted = 2
    }
    export const enum MailTransactionType {
        Insert = 1,
        Index = 2,
        SetStatusRead = 3,
        SetStatusUnRead = 4,
        Sent = 5,
        InsertEvidence = 6
    }
    export const enum RuleOperations {
        Equal = 1,
        In = 2
    }
    interface AddressBookContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressBookId?: number;
        addressTypeDescription?: string;
        addressTypeId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        nameWithAddress?: string;
        personalName?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface AuthenticationContact extends BOA.Common.Types.ContractBase {
        sessionEndDate?: Date;
        sessionEndDateSpecified?: boolean;
        sessionPassword?: string;
        sessionStartDate?: Date;
        sessionStartDateSpecified?: boolean;
        sessionToken?: string;
    }
    interface CorporationConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configProdValue?: string;
        configTestValue?: string;
        corporationConfigId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationContract extends BOA.Common.Types.ContractBase {
        configList?: BOA.Types.Kernel.Correspondence.Kep.CorporationConfigContract[];
        corporationId?: number;
        corporationKey?: string;
        hostIP?: string;
        hostName?: string;
        name?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KepConstants {
    }
    interface MailAddressContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressType?: string;
        corporationId?: number;
        mailField?: number;
        mailId?: number;
        nameWithAddress?: string;
        personalName?: string;
    }
    interface MailAttachmentContract extends BOA.Common.Types.ContractBase {
        fileContent?: number[];
        fileDescription?: string;
        fileName?: string;
    }
    interface MailContract extends BOA.Common.Types.ContractBase {
        allSuccess?: boolean;
        attachmentList?: BOA.Types.Kernel.Correspondence.Kep.MailAttachmentContract[];
        bodyText?: string;
        ccAddressList?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract[];
        ccAddressListOfOriginalMessage?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract[];
        corporation?: BOA.Types.Kernel.Correspondence.Kep.CorporationContract;
        corporationId?: number;
        corporationName?: string;
        divitInstanceId?: any;
        eventCode?: string;
        evidenceInfo?: BOA.Types.Kernel.Correspondence.Kep.MailEvidenceContract;
        evidenceList?: BOA.Types.Kernel.Correspondence.Kep.MailEvidenceContract[];
        folderName?: string;
        fromAddress?: string;
        fromAddressId?: number;
        fromAddressOfOriginalMessage?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract;
        fromPersonalName?: string;
        hostIp?: string;
        hostName?: string;
        isEvidence?: boolean;
        isEvidenceDescription?: string;
        kepMessageId?: string;
        mailId?: number;
        message?: number[];
        messageIdByRemmd?: string;
        messageUId?: number;
        parentMailId?: number;
        poolCode?: string;
        poolName?: string;
        relatedKepMessageId?: string;
        seen?: boolean;
        sentDate?: Date;
        simplifiedEventCode?: string;
        size?: number;
        sizeKiloByte?: number;
        status?: number;
        statusDescription?: string;
        subject?: string;
        subjectOfOriginalMessage?: string;
        systemDate?: Date;
        toAddressList?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract[];
        toAddressListOfOriginalMessage?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract[];
        uaMessageId?: string;
        userFullName?: string;
        userName?: string;
        workGroupId?: number;
        xtrRemIletiId?: string;
        xTrRemIletiTip?: string;
    }
    interface MailEvidenceContract extends BOA.Common.Types.ContractBase {
        content?: number[];
        creationTime?: Date;
        details?: string;
        evidenceAccounts?: string;
        evidenceGuid?: string;
        evidenceType?: string;
        evidenceTypeDescription?: string;
        mailId?: number;
        source?: string;
    }
    interface MailReceiveResultContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        mailId?: number;
        messageId?: string;
        messageUId?: number;
        poolCode?: string;
        status?: BOA.Types.Kernel.Correspondence.Kep.MailTransactionStatus;
        subject?: string;
    }
    interface MailSendResultContract extends BOA.Common.Types.ContractBase {
        allSuccess?: boolean;
        invalidAddresses?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract[];
        mailId?: number;
        messageId?: string;
        validSentAddresses?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract[];
        validUnsentAddresses?: BOA.Types.Kernel.Correspondence.Kep.MailAddressContract[];
    }
    interface PoolDefinitionContract extends BOA.Common.Types.ContractBase {
        poolCode?: string;
        poolName?: string;
    }
    interface PoolRightContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        hostIP?: string;
        hostName?: string;
        poolCode?: string;
        poolName?: string;
        roleName?: string;
        systemDate?: Date;
        userCode?: string;
        userName?: string;
        userNameSurname?: string;
        workgroupName?: string;
    }
    interface PoolRuleContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        isValid?: boolean;
        poolCode?: string;
        poolName?: string;
        poolRuleDetailList?: BOA.Types.Kernel.Correspondence.Kep.PoolRuleDetailContract[];
        ruleId?: number;
        ruleName?: string;
        ruleOrder?: number;
        systemDate?: Date;
        userFullName?: string;
        userName?: string;
    }
    interface PoolRuleDetailContract extends BOA.Common.Types.ContractBase {
        detailId?: number;
        detailOrder?: number;
        field?: string;
        fieldDescription?: string;
        filterValue?: string;
        operation?: number;
        operationDescription?: string;
        ruleId?: number;
    }
}
declare namespace BOA.Types.Kernel.Correspondence.Kep.KepConstants {
    interface DefaultValues {
    }
    interface Divit {
    }
    interface ParameterTypes {
    }
    interface RuleFields {
    }
}
declare namespace BOA.Types.Kernel.Cost {
    interface CommonStatics {
    }
    interface CostCollectionContract extends BOA.Common.Types.ContractBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        branchid?: number;
        businessKey?: number;
        channelId?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAmount?: number;
        collectionAmountTL?: number;
        collectionFEC?: number;
        collectionFER?: number;
        collectionGeneralAccount?: number;
        collectionType?: number;
        costAmount?: number;
        costAmountFER?: number;
        costCollectionId?: number;
        costId?: number;
        costPaymentContract?: BOA.Types.Kernel.Cost.CostPaymentContract;
        creditDelayed?: number;
        description?: string;
        exchangeDifference?: number;
        exchangeDifferenceBSMV?: number;
        fineBusinessKey?: number;
        fineIsActive?: boolean;
        fXAskBusinessKey?: number;
        fXAskJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        fXBidBusinessKey?: number;
        fXBidJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        hasAccounting?: boolean;
        hostName?: string;
        indexAmount?: number;
        indexFER?: number;
        isActive?: boolean;
        isAutoCollection?: boolean;
        isLateCharge?: boolean;
        isReturn?: boolean;
        isSpreadOpen?: boolean;
        isWriteOff?: boolean;
        lateFine?: number;
        ledgerIdContract?: BOA.Types.Kernel.Cost.LedgerIdContract;
        mainAccountNumber?: number;
        resourceCode?: string;
        revisedAccountSuffix?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CostCollectionDetailListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchid?: number;
        branchName?: string;
        businessKey?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAmount?: number;
        collectionGeneralAccount?: number;
        collectionStatus?: string;
        collectionType?: number;
        collectionTypeName?: string;
        collectionTypeNameDesc?: string;
        costAmount?: number;
        costAmountFER?: number;
        costCollectionId?: number;
        costCollectionUserName?: string;
        costDefinitionId?: number;
        costId?: number;
        costName?: string;
        costTypeName?: string;
        description?: string;
        fec?: string;
        fecId?: number;
        indexAmount?: number;
        indexFER?: number;
        isActive?: boolean;
        lateFine?: number;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface CostCollectionSearchListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        beginDate?: Date;
        branchid?: number;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAmount?: number;
        collectionBeginDate?: Date;
        collectionCustomerName?: string;
        collectionEndDate?: Date;
        collectionGeneralAccount?: number;
        collectionStatus?: string;
        collectionType?: number;
        collectionTypeName?: string;
        collectionTypeNameDesc?: string;
        costAmount?: number;
        costAmountFER?: number;
        costBranchid?: number;
        costBranchName?: string;
        costCollectionId?: number;
        costCollectionUserName?: string;
        costDefinitionId?: number;
        costId?: number;
        costName?: string;
        costStatus?: string;
        costStatusId?: number;
        costType?: number;
        costTypeName?: string;
        customerName?: string;
        description?: string;
        dueDate?: Date;
        endDate?: Date;
        fec?: string;
        fecId?: number;
        getOnlyWaiting?: boolean;
        indexAmount?: number;
        indexFER?: number;
        insuranceNo?: number;
        isActive?: boolean;
        lateFine?: number;
        portfolioClass?: number;
        portfolioClassDesc?: string;
        s_BusinessKey?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface CostDefinitionContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        canSaveInsurancePayment?: boolean;
        costName?: string;
        costType?: number;
        costTypeName?: string;
        costViewAuthority?: number;
        creditAccount?: number;
        creditAccountForeignMoney?: number;
        debitAccount?: number;
        debitAccountForeignMoney?: number;
        description?: string;
        editMode?: boolean;
        endDate?: Date;
        hasBSMV?: boolean;
        id?: number;
        isAutomaticCollection?: number;
        maxAmountOfCost?: number;
        minAmountOfCost?: number;
        systemDate?: Date;
        username?: string;
    }
    interface CostDefinitionListContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        costIdOld?: number;
        costName?: string;
        costType?: number;
        costTypeName?: string;
        creditAccount?: number;
        creditAccountForeignMoney?: number;
        debitAccount?: number;
        debitAccountForeignMoney?: number;
        description?: string;
        endDate?: Date;
        hasBSMV?: boolean;
        id?: number;
        isActive?: boolean;
        isAutoCollection?: boolean;
        isAutomaticCollection?: number;
        maxAmountOfCost?: number;
        minAmountOfCost?: number;
        systemDate?: Date;
        username?: string;
        viewAuthority?: number;
        viewAuthorityName?: string;
    }
    interface CostPaymentContract extends BOA.Common.Types.ContractBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        accountNumber?: number;
        accountNumberDesc?: string;
        accountSuffix?: number;
        amount?: number;
        branchid?: number;
        businessKey?: number;
        collectionDate?: Date;
        commGroup?: number;
        commissionAmount?: number;
        commissionBusinessKey?: number;
        commissionFER?: number;
        commissionInstalmentId?: number;
        commissionJournalId?: number;
        cost?: number;
        costAmount?: number;
        costBSMVAmount?: number;
        costDefinitionContract?: BOA.Types.Kernel.Cost.CostDefinitionContract;
        costDesc?: string;
        costId?: number;
        costStatus?: number;
        costType?: number;
        costTypeDesc?: string;
        creditDelayed?: number;
        customerBranchId?: number;
        customerDelayed?: number;
        debtFECType?: number;
        description?: string;
        dueDate?: Date;
        editMode?: boolean;
        fec?: number;
        fecDesc?: string;
        fer?: number;
        generalAccount?: number;
        hasAccounting?: boolean;
        hostName?: string;
        indexAmount?: number;
        indexCollectedAmount?: number;
        indexDate?: Date;
        indexFEC?: number;
        indexFECDesc?: string;
        indexFER?: number;
        insuranceNo?: number;
        isActive?: boolean;
        isRevised?: boolean;
        isWriteOff?: boolean;
        ledgerIdContract?: BOA.Types.Kernel.Cost.LedgerIdContract;
        paidAmount?: number;
        parentCostId?: number;
        payType?: number;
        payTypeDesc?: string;
        portfolioClass?: string;
        receiverBranchid?: number;
        recieverAccountNumber?: number;
        recieverAccountNumberDesc?: string;
        recieverAccountSuffix?: number;
        recordStatus?: string;
        resourceCode?: string;
        selectedCost?: BOA.Types.Kernel.Cost.CostDefinitionContract;
        systemDate?: Date;
        tranDate?: Date;
        transactionReference?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CostPaymentCustomerTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        branchId?: number;
        fec?: number;
        ledgerId?: number;
    }
    interface CostPaymentListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        beginDate?: Date;
        bITTRate?: number;
        branchId?: number;
        branchid?: number;
        branchName?: string;
        businessKey?: number;
        collectionAskFER?: number;
        collectionBeginDate?: Date;
        collectionDate?: Date;
        collectionEndDate?: Date;
        cost?: string;
        costDefId?: number;
        costId?: number;
        costIsActive?: boolean;
        costStatus?: string;
        costStatusId?: number;
        costType?: number;
        costTypeName?: string;
        costTypeNameDesc?: string;
        currentFECGroup?: number;
        currentFER?: number;
        customerDelayed?: number;
        customerName?: string;
        delayPenaltyRate?: number;
        delayPenaltyStatus?: boolean;
        description?: string;
        dueDate?: Date;
        endDate?: Date;
        fec?: string;
        fecId?: number;
        fer?: number;
        generalAccount?: number;
        getOnlyWaiting?: boolean;
        indexAmount?: number;
        indexCollectedAmount?: number;
        indexDate?: Date;
        indexFEC?: number;
        indexFECName?: string;
        indexFER?: number;
        insuranceNo?: string;
        isActive?: boolean;
        paidAmount?: number;
        payType?: number;
        payTypeName?: string;
        payTypeNameDesc?: string;
        personType?: number;
        portfolioClass?: number;
        portfolioClassDesc?: string;
        receiverBranchid?: number;
        recieverAccountNumber?: number;
        recieverAccountSuffix?: number;
        recordStatus?: string;
        s_BusinessKey?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
        userNameDesc?: string;
    }
    interface CostPaymentRevizedContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        branchId?: number;
        fec?: number;
        ledgerId?: number;
    }
    interface CostReturnContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        businessKey?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAmount?: number;
        collectionAmountTL?: number;
        collectionBranchId?: number;
        collectionFEC?: number;
        collectionFER?: number;
        collectionGeneralAccount?: number;
        collectionType?: number;
        cost?: number;
        costAccountNumber?: number;
        costAccountSuffix?: number;
        costAmountTL?: number;
        costId?: number;
        costReturnId?: number;
        costType?: number;
        fec?: number;
        fer?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        hasBSMV?: boolean;
        hostName?: string;
        ledgerIdFrom?: number;
        mainBusinessKey?: number;
        resourceCode?: string;
        returnAmount?: number;
        returnAmountTL?: number;
        returnFEC?: number;
        returnFER?: number;
        returnType?: number;
        systemDate?: Date;
        transferOrReturn?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LedgerIdContract extends BOA.Common.Types.ContractBase {
        collectionSuspenseAccount?: number;
        costFXDifference?: number;
        costIndexContraledgerId?: number;
        costIndexLedgerId?: number;
        costODRLedgerId?: number;
        fxPositionLedgerCostFEC?: number;
        fxPositionLedgerCostLC?: number;
        fxPositionLedgerFEC?: number;
        fxPositionLedgerLC?: number;
        fXType?: number;
        ledgerType?: number;
        mainCostLedgerId?: number;
        mainLedgerId?: number;
    }
}
declare namespace BOA.Types.Kernel.Cost.CommonStatics {
    export const enum CostCollectionType {
        CashBox = 1,
        Account = 2,
        GeneralAccount = 3
    }
    export const enum CostStatus {
        Waiting = 0,
        PartialCollection = 1,
        FullCollection = 2,
        Revised = 8
    }
    export const enum DebtFECType {
        TL = 0,
        ForeignExchangeLinked = 1,
        ForeignExchange = 2,
        TLTOForeignExchangeLinked = 3
    }
    export const enum e_PayTypes {
        CashBox = 1,
        Account = 2,
        GeneralAccount = 3
    }
    export const enum e_SelectedCostType {
        Fonkullandirim = 1,
        Diger = 2
    }
}
declare namespace BOA.Types.Kernel.CreditCard {
    export const enum AccountType {
        MainAccount = 0,
        VirementAccount = 1
    }
    export const enum ApplicationCardType {
        MainCard = 1,
        SupplementaryCard = 2
    }
    export const enum ApplicationState {
        Draft = 1,
        Evaluation = 2,
        SendToArchieve = 3,
        Taken = 4,
        FromArchieve = 5
    }
    export const enum BanksoftResourceCode {
        Branch = 2,
        CreditCardCenter = 7,
        Host = 8,
        IVR = 9,
        Internet = 10,
        CallCenter = 11,
        Undefined = 99,
        XTM = 16
    }
    export const enum CardType {
        CreditCard = 0,
        DebitCard = 1
    }
    export const enum CreditCardAccountCurrencyType {
        TRY = 0,
        USD = 1,
        EUR = 19
    }
    export const enum CreditCardGender {
        K = 1,
        E = 0
    }
    export const enum CreditCardIdType {
        NC = 1,
        EH = 2,
        PS = 3
    }
    export const enum CreditCardMailOrderType {
        Domestic = 0,
        International = 1
    }
    export const enum CreditCardMaritalStatus {
        BE = 1,
        BO = 3,
        DU = 4,
        EV = 0,
        D = 2
    }
    export const enum CreditCardProductCodes {
        ClessMBPLS = 1,
        KDP = 2,
        MBS = 3,
        TOHUM = 4,
        ESNAF = 5,
        KOBI = 6,
        KOBIY = 7
    }
    export const enum CreditCardShopConstraintTransactionType {
        I = 0,
        D = 1
    }
    export const enum CreditCardStatementAddress {
        E = 0,
        I = 1
    }
    export const enum CreditCardStatementTransactionTypeEnum {
        Borrow = 0,
        Loan = 1,
        Point = 2
    }
    export const enum CreditCardTransactionCode {
        SA = 0,
        NA = 1
    }
    export const enum CreditCardTransactionSubCode {
        MO = 0
    }
    export const enum CreditCardTransactionType {
        YI = 0,
        YD = 1
    }
    export const enum CreditCardUsedTypeForAccounts {
        V = 0,
        A = 1,
        K = -1
    }
    export const enum CreditCardYesOrNo {
        N = 0,
        Y = 1
    }
    export const enum ExpenceType {
        YI = 0,
        YD = 1
    }
    export const enum MarketTypes {
        CustomerVisit = 1,
        Branch = 2
    }
    interface AccountCreditCardContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        cardNumber?: string;
        systemDate?: Date;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AddCardAccount {
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: BOA.Types.Kernel.CreditCard.AccountType;
        branchCode?: number;
        cardNumber?: string;
        cardType?: BOA.Types.Kernel.CreditCard.CardType;
        currencyType?: BOA.Types.Kernel.CreditCard.CreditCardAccountCurrencyType;
        customerNameSurname?: string;
        description?: string;
        iPAddress?: string;
        sourceCode?: BOA.Types.Kernel.CreditCard.BanksoftResourceCode;
        usedType?: BOA.Types.Kernel.CreditCard.CreditCardUsedTypeForAccounts;
        userCode?: string;
    }
    interface ApplicationPersonInfoContract extends BOA.Common.Types.ContractBase {
        applicationDate?: Date;
        applicationNo?: string;
        birthDate?: Date;
        birthPlace?: string;
        bSApplicationNo?: number;
        bSOrderNumber?: number;
        citizenship?: string;
        city?: string;
        district?: string;
        educationLevel?: string;
        employerAddress?: string;
        employerName?: string;
        employerPhone?: string;
        employerSectorName?: string;
        employerTaxNumber?: string;
        employerTypeName?: string;
        fathersName?: string;
        faxNumber?: string;
        gender?: string;
        gSMNumber?: string;
        guarantorAddress?: string;
        guarantorBirthDate?: Date;
        guarantorEmailAddress?: string;
        guarantorEmployerName?: string;
        guarantorEmploymentTypeName?: string;
        guarantorGsmNumber?: string;
        guarantorJobTitle?: string;
        guarantorLastName?: string;
        guarantorName?: string;
        guarantorPhoneNumber?: string;
        guarantorProfession?: string;
        guarantorTaxNumber?: string;
        homeAddress?: string;
        hostName?: string;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idExpirationDate?: Date;
        idNo?: string;
        idSerial?: string;
        idType?: string;
        jobTitle?: string;
        lastName?: string;
        maidenhoodSurname?: string;
        maritalStatus?: string;
        motherMaidenLastName?: string;
        mothersName?: string;
        name?: string;
        personId?: number;
        phoneNumber?: string;
        profession?: string;
        supplementaryBirthDate?: Date;
        supplementaryCitizenShip?: string;
        supplementaryFatherName?: string;
        supplementaryLastname?: string;
        supplementaryLimitRatio?: number;
        supplementaryName?: string;
        supplementaryTaxNumber?: string;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AutomaticPaymentAccount {
        accountSuffix?: number;
        customerNumber?: number;
        fullAccountNumber?: string;
    }
    interface AutoPaymentCustomerDetailsContract extends BOA.Common.Types.ContractBase {
        autoPayAccountNo?: string;
        autoPayAccountSuffix?: number;
        brandOwner?: string;
        creditCardNo?: string;
        customerNo?: number;
        fec?: string;
        paymentAmount?: number;
        paymentDate?: Date;
        sequenceNo?: number;
        unitCode?: string;
    }
    interface BatchComingFileContract extends BOA.Common.Types.ContractBase {
        batchFileType?: string;
        errorCount?: number;
        fileId?: number;
        fileName?: string;
        fileRef?: string;
        fileTime?: string;
        hostIP?: string;
        hostName?: string;
        recordCount?: number;
        state?: number;
        systemDate?: Date;
        totalAmount?: number;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BatchComingFileRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.CreditCard.BatchComingFileContract;
    }
    interface BatchFileErrorContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountSuffix2?: number;
        amount?: number;
        cardNumber?: string;
        description?: string;
        endDate?: Date;
        exceptionText?: string;
        fileId?: number;
        fileName?: string;
        hostIP?: string;
        hostName?: string;
        id?: number;
        lineNumber?: number;
        merchantNumber?: string;
        messageCode?: string;
        recordCount?: number;
        recordId?: number;
        startDate?: Date;
        state?: number;
        status?: number;
        systemDate?: Date;
        text?: string;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BatchFileErrorRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CreditCard.BatchFileErrorContract;
    }
    interface BatchTransactionParamContract extends BOA.Common.Types.ContractBase {
        tranDescription?: string;
        tranType?: number;
    }
    interface BatchTransactionParamRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.CreditCard.BatchTransactionParamContract;
    }
    interface BillInformation {
        billDate?: Date;
        billNumber?: string;
        branch?: string;
    }
    interface BranchSummaryReportContract extends BOA.Common.Types.ContractBase {
        approvedLimit?: number;
        branchId?: string;
        branchName?: string;
        confirmedApplicationCount?: number;
        rejectedApplicationCount?: number;
        requestedLimit?: number;
    }
    interface BSConstant {
    }
    interface BSFis {
        fisDate?: Date;
        fisNumber?: string;
        fisSube?: number;
    }
    interface BSMessageTemplate {
    }
    interface BSRequestHeader extends BOA.Types.Kernel.CreditCard.TransactionBase {
        branchCode?: string;
        creditCardNumber?: string;
        financialTransactionFlag?: string;
        messageCode?: string;
        referenceNumber?: string;
        termId?: string;
        termType?: string;
        transactionDate?: string;
        transactionSource?: string;
        transactionTime?: string;
        transactionType?: string;
        userCode?: string;
        workFlowType?: any;
    }
    interface BSResponseContract {
        accountingBusinessKey?: number;
        amount?: string;
        cardOwner?: BOA.Types.Kernel.CreditCard.CardOwner;
        cardPaymentInsertId?: number;
        code?: string;
        customerID?: string;
        description?: string;
        emvData?: string;
        provisionCode?: string;
        referenceNumber?: string;
        result?: string;
        success?: boolean;
        transactionType?: string;
        withholdingContractList?: BOA.Types.Kernel.Account.WithholdingContract[];
    }
    interface BSResponseTraceContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        amount?: string;
        cardOwner?: BOA.Types.Kernel.CreditCard.CardOwner;
        cardPaymentInsertId?: number;
        code?: string;
        customerID?: string;
        description?: string;
        emvData?: string;
        errorMessage?: string;
        provisionCode?: string;
        referenceNumber?: string;
        result?: string;
        success?: boolean;
        transactionType?: string;
        withholdingContractList?: BOA.Types.Kernel.Account.WithholdingContract[];
    }
    interface BSTraceContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        accountNumber?: string;
        accountSuffix?: string;
        amount?: string;
        batchId?: string;
        branchCode?: string;
        bSMVAmount?: number;
        bSTraceId?: number;
        canceledAmount?: string;
        canceledCount?: string;
        cardExpiredDate?: string;
        cardNumber?: string;
        cAVV?: string;
        commisionAmount?: number;
        count?: string;
        creditCardDueDate?: string;
        creditCardLegalFlow?: string;
        creditCardNumber?: string;
        currencyCode?: string;
        customerId?: string;
        cVV2?: string;
        dummy?: string;
        eCI?: string;
        eftId?: number;
        eMVData?: string;
        errorMessage?: string;
        expireDate?: string;
        fecAmount?: string;
        financialTransactionFlag?: string;
        hostName?: string;
        installmentCount?: string;
        isCancel?: number;
        isCVVRequired?: string;
        isRecurringEnabled?: string;
        kKDFAmount?: number;
        lMKEncryptedZPK?: string;
        localTransactionAmount?: number;
        mailOrTelephoneOrder?: string;
        mainBusinessKey?: number;
        managedTransactionType?: string;
        merchantCode?: string;
        merchantOrderId?: string;
        messageCode?: string;
        newPINBlock?: string;
        orderId?: string;
        orderPosTxnId?: string;
        originalMerchantOrderId?: string;
        originalRRN?: string;
        originalStan?: string;
        pINBlockKeyType?: string;
        pinBlock?: string;
        posMerchantId?: string;
        primaryCardNumber?: string;
        processCurrency?: string;
        provisionNumber?: string;
        receiptBranch?: number;
        receiptDate?: Date;
        receiptNumber?: string;
        referenceNumber?: string;
        responseAmount?: string;
        responseCardPaymentInsertId?: number;
        responseCode?: string;
        responseCustomerId?: string;
        responseDescription?: string;
        responseEmvData?: string;
        responseProvisionCode?: string;
        responseReferenceNumber?: string;
        responseResult?: string;
        responseTransactionType?: string;
        settlementNumber?: string;
        sGKPeriod?: string;
        surchargeAmount?: string;
        systemDate?: Date;
        termId?: string;
        terminalID?: string;
        termLocation?: string;
        termType?: string;
        totalAmount?: string;
        totalCount?: string;
        track2?: string;
        transactionDate?: string;
        transactionDescription?: string;
        transactionId?: string;
        transactionSource?: string;
        transactionTime?: string;
        transactionType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
        wageAmount?: number;
        zPKEncryptedPINBlock?: string;
        zPKUnderLMK?: string;
    }
    interface BusinessCardLimitContract {
        cardNumber?: string;
        creditCardProductCode?: BOA.Types.Kernel.CreditCard.CreditCardProductCodes;
        customerNumber?: number;
        newLimit?: number;
    }
    interface CampaignParticipation extends BOA.Common.Types.ContractBase {
        creditCardNumber?: string;
        crmCampaignCode?: string;
        crmCampaignDescription?: string;
        crmCampaignName?: string;
        status?: number;
    }
    interface CanCustomerCloseForCreditCardContract extends BOA.Common.Types.ContractBase {
        isClose?: boolean;
        result?: string;
    }
    interface CanCustomerCloseForPosContract extends BOA.Common.Types.ContractBase {
        isClose?: boolean;
        result?: string;
    }
    interface CardCommonUtils {
    }
    interface CardCustomerStatus {
    }
    interface CardOwner {
        birthDate?: Date;
        birthPlace?: string;
        citizenshipNumber?: string;
        customerTypeDescription?: string;
        emergencyCall?: string;
        employeeTitle?: string;
        fatherName?: string;
        firstName?: string;
        identityCardNumber?: string;
        identityCardSeries?: string;
        lastName?: string;
        motherMaidenName?: string;
        motherName?: string;
        name?: string;
        referanceName?: string;
        referanceSurname?: string;
        secondName?: string;
        taxNumber?: string;
    }
    interface CashAdvance {
        isDomesticCashAdvance?: boolean;
        isInternationalCashAdvance?: boolean;
    }
    interface ChequePaymentProcessContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        businessKey?: number;
        cardExpiredDate?: string;
        creditCardBranchID?: number;
        creditCardNo?: string;
        cVV2?: string;
        description?: string;
        resourceCode?: string;
        toAccountNumber?: number;
        toBranchId?: number;
        toLedgerId?: number;
        toSuffix?: number;
    }
    interface ChequePaymentProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        creditCardBranchId?: number;
        creditCardNo?: string;
        isPaymentWithAccount?: boolean;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
        toLedgerId?: number;
    }
    interface Constants {
    }
    interface CreditCard {
        accountNumber?: number;
        accountSuffix?: number;
        approvalDate?: string;
        branchId?: number;
        branchName?: string;
        cardExpireDate?: Date;
        cardHolderName?: string;
        cardOwner?: BOA.Types.Kernel.CreditCard.CardOwner;
        cashAdvancePermission?: BOA.Types.Kernel.CreditCard.CashAdvance;
        changeStatementDateCount?: number;
        closeDate?: string;
        creditCardAccount?: string;
        creditCardEkstreState?: string;
        creditCardLimit?: BOA.Types.Kernel.CreditCard.CreditCardLimit;
        creditCardNo?: string;
        creditCardState?: string;
        creditCardSubState?: string;
        customerId?: string;
        cVV2?: string;
        encryptedCardNo?: string;
        encryptedPrimaryCardNo?: string;
        expireDate?: string;
        immediateCardType?: string;
        individualCreditFlag?: string;
        installmentCount?: number;
        isApproval?: boolean;
        isCorporate?: boolean;
        isIndividualLoanCard?: boolean;
        isInstallmentEnabled?: boolean;
        isSizCardUSD?: boolean;
        isSizCardYTL?: boolean;
        isValid?: boolean;
        isVirtualCard?: boolean;
        lastDueDate?: Date;
        mailOrderPermission?: BOA.Types.Kernel.CreditCard.MailOrder;
        mainOrSupplementary?: boolean;
        maxAllowedInstallmentCount?: number;
        pINAltStatu2?: string;
        pINAltStatu3?: string;
        pINStatu?: string;
        postponingInstallmentCount?: number;
        previousLimit?: number;
        primaryCardNo?: string;
        productType?: string;
        productTypeName?: string;
        productValue?: string;
        secondaryCustId?: string;
        securedCardNo?: string;
        statementDate?: Date;
        statementInfo?: BOA.Types.Kernel.CreditCard.CreditCardStatement;
        statementPeriod?: string;
        totalDept?: number;
    }
    interface CreditCardAccountInfo {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        creditCardNumber?: string;
    }
    interface CreditCardApplicationCommonContract extends BOA.Common.Types.ContractBase {
        availebleLimit?: number;
        batchProductCode?: string;
        cardType?: string;
        cardTypeValue?: string;
        controlId?: number;
        individualProductCode?: string;
        productName?: string;
    }
    interface CreditCardApplicationCommonRequest extends BOA.Common.Types.RequestBase {
        allocationStateContract?: BOA.Types.Kernel.Customer.AllocationContract[];
        controlContract?: BOA.Types.Kernel.CustomerControl.ControlContract;
        dataContract?: BOA.Types.Kernel.CreditCard.CreditCardApplicationCommonContract;
    }
    interface CreditCardBankInfo {
        bankingCode?: string;
        bankName?: string;
        prefixCode?: string;
    }
    interface CreditCardCashAdvanceBSRequest extends BOA.Types.Kernel.CreditCard.BSRequestHeader {
        amount?: number;
        bSMVAmount?: number;
        commisionAmount?: number;
        creditCardDueDate?: string;
        cVV2?: string;
        fis?: BOA.Types.Kernel.CreditCard.BSFis;
        kKDFAmount?: number;
        settlementNo?: string;
        transactionExp?: string;
    }
    interface CreditCardChequePaymentRequest extends BOA.Types.Kernel.CreditCard.BSRequestHeader {
        bSMVAmount?: number;
        cardExpiredDate?: string;
        cVV2?: string;
        fis?: BOA.Types.Kernel.CreditCard.BSFis;
        kKDFAmount?: number;
        localTranAmount?: number;
        settlementNo?: string;
        tranDescription?: string;
        wageAmount?: number;
    }
    interface CreditCardCommunication {
        gSM?: string;
        homeEmail?: string;
        homeFax?: string;
        homePhone?: string;
        isEmailHome?: boolean;
        isEmailOnly?: boolean;
        isEmailWork?: boolean;
        isFaxHome?: boolean;
        isFaxWork?: boolean;
        officeFax?: string;
        officePhone?: string;
        workEmail?: string;
    }
    interface CreditCardConfigurationContract {
        bSServiceURL?: string;
        bSTCPService_AutoReverse?: boolean;
        bSTCPService_ServerIP?: string;
        bSTCPService_ServerPort?: number;
        instantAllDebitServiceUrl?: string;
        instantDebitServiceUrl?: string;
        isBSTraceEnabled?: boolean;
    }
    interface CreditCardCustomerDebitCard {
        cardBranchCode?: number;
        cardNameSurname?: string;
        cardNumber?: string;
        cardPrintingDate?: Date;
        cardRecordingDate?: Date;
        cardSendingLocation?: string;
        cardSendType?: string;
        customerBranchCode?: number;
        customerNumber?: number;
        expireDate?: string;
        isPrinted?: string;
        nameSurname?: string;
        pINStatu?: number;
        status?: string;
    }
    interface CreditCardDebt {
        debt?: number;
        domesticCurrentTermReceivableA?: number;
        domesticCurrentTermReceivableB?: number;
        lastDueDate?: string;
        lastPaymetDate?: Date;
        minDebt?: number;
        statementDate?: Date;
        sumOfDebt?: number;
        totalDebt?: number;
        waitingInstallment?: number;
    }
    interface CreditCardDebtPaymentRequest extends BOA.Types.Kernel.CreditCard.BSRequestHeader {
        amount?: number;
        creditCardLegalFlow?: string;
        currencyCode?: string;
        eftid?: number;
        fis?: BOA.Types.Kernel.CreditCard.BSFis;
        isCancel?: boolean;
        primaryCardNo?: string;
        settlementNo?: string;
        transactionExp?: string;
    }
    interface CreditCardDetail {
        creditCard?: BOA.Types.Kernel.CreditCard.CreditCard;
        creditCardCommunication?: BOA.Types.Kernel.CreditCard.CreditCardCommunication;
        expireDate?: string;
        mailOrder?: BOA.Types.Kernel.CreditCard.MailOrder;
        nextDueDate?: Date;
        statementDate?: Date;
    }
    interface CreditCardEarlyClosing {
        cardNumber?: string;
        customerNumber?: number;
        provisionNumber?: string;
        remainingInstallmentCount?: number;
        remainingTotalDebt?: number;
        remainingTotalMainAmount?: number;
        remainingTotalMaturityAmount?: number;
        remainingTotalTax?: number;
        summaryNumber?: number;
        totalDebt?: number;
        totalInstallmentCount?: number;
        totalMainAmount?: number;
        totalMaturityAmount?: number;
        totalPosponingInstallmentCount?: number;
        totalTax?: number;
        transactionDate?: Date;
    }
    interface CreditCardEarlyClosingResult {
        canceledMaturityAndTaxesAmount?: number;
        collectedChargeAmount?: number;
        collectedMaturityAndTaxesAmount?: number;
        profitAmount?: number;
        remaingTotalClosingDebt?: number;
        remaingTotalDebt?: number;
    }
    interface CreditCardEgysMessage {
        code?: string;
        comp_Code?: string;
        id?: number;
        message?: string;
    }
    interface CreditCardEnquiryContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        cachBlocked?: number;
        cheque?: number;
        companyPersonelSalaryAvg6Month?: number;
        eDistraintLast12Month?: number;
        eDistraintLast12MonthCount?: number;
        eDistraintLast24Month?: number;
        eDistraintLast24MonthCount?: number;
        eDistraintLast6Month?: number;
        eDistraintLast6MonthCount?: number;
        isCompanyPersonelSalary?: number;
        pos?: number;
        privateBankingCustomer?: number;
        rejectedApplication6Month?: number;
        salaryCustomer?: number;
        usedFund?: number;
    }
    interface CreditCardExtractUtility {
    }
    interface CreditCardFinancialAdvisorTransaction {
        amount?: number;
        amountOrg?: number;
        amountYD?: number;
        cardNumber?: string;
        currecyCode?: string;
        customerNumber?: number;
        description?: string;
        installmentCount?: number;
        iptalFlag?: string;
        mCC?: string;
        postponingInstallmentCount?: number;
        provisionCode?: string;
        sourceCode?: string;
        tranDate?: Date;
        transactionCode?: string;
        transactionSubCode?: string;
        tranType?: string;
    }
    interface CreditCardInfoContract extends BOA.Common.Types.ContractBase {
        actionLogSendAddress?: string;
        additionalCashLimitMultiplier?: number;
        additionalInstLimitMultiplier?: number;
        additionalLimitMultiplier?: number;
        additionalOwnerLastName?: string;
        additionalOwnerName?: string;
        additionalOwnerSeconderName?: string;
        addMedia?: number;
        addSendExtract?: string;
        addSendExtractAddress?: string;
        addSendExtractType?: string;
        afterPrintingCardDispatchType?: string;
        beforeLimitReplacementDate?: Date;
        bKMNotificationDate?: Date;
        bKMStatus?: string;
        bonusGrupCode?: string;
        bWCloseFlag?: string;
        callCenterPIN?: string;
        campaignCode?: string;
        cardCancelRequestDate?: Date;
        cardChangeDate?: Date;
        cardClosingDate?: Date;
        cardCoverHout?: string;
        cardDispatchAdrress?: string;
        cardDispatchBranch?: string;
        cardDispatchType?: string;
        cardEntryDate?: Date;
        cardExpiryDate?: Date;
        cardFirstUseDate?: Date;
        cardPrintingDate?: Date;
        cardPrintingFlag?: string;
        cardPrintingReason?: string;
        cardPrintingStatu?: string;
        cardStatChangeDate?: Date;
        cardStatus?: string;
        cardStyle?: string;
        cardSubStatu?: string;
        cardSubStatusCancelUser?: string;
        cardSubStatusReplacementDate?: Date;
        cardType?: string;
        chipFlag?: string;
        chipNo?: number;
        collectorCode?: string;
        collMemo?: string;
        collStat?: string;
        convPVV?: string;
        creditCardNo?: string;
        customerId?: number;
        cVV?: string;
        cVV2?: string;
        cVVKeyIndex?: number;
        duesBranchMalEtFlag?: string;
        eksChecksNumber?: number;
        emailOnlyFlag?: string;
        eMailOnlyFlagChangeDate?: Date;
        emailOnlyFlagYDate?: Date;
        embos?: string;
        embosStr?: string;
        embosTitle?: string;
        extractCode?: string;
        extractCodeChangeDate?: Date;
        extractCodeChangeNumber?: number;
        extractGonFlag?: string;
        extractNormalFlag?: string;
        extractStatu?: string;
        extractStatuNumber?: number;
        extractType?: string;
        grossLimit?: number;
        grossLimitReplacementDate?: Date;
        groupCode?: string;
        installLimit?: number;
        installLimitReplacementDate?: Date;
        installmentCount?: number;
        intArdPasswordError?: number;
        intPAssowrdDate?: Date;
        inUsePIN?: string;
        kKBStatu?: string;
        kKBStatuhangeDate?: Date;
        lastDelayDate?: Date;
        lastExtremeState?: string;
        lastRefreshScenarioCode?: string;
        lastUnblockedOffPINDate?: Date;
        lastUpdateDate?: Date;
        lastUpdateOffPINDate?: Date;
        lastUpdateUserId?: string;
        limit?: number;
        limitOverStatu?: string;
        limitReplacementDate?: Date;
        limitSMSNotificationDate?: Date;
        limitYD?: number;
        membershipBranchMalEtFlag?: string;
        membershipFeeFlag?: string;
        motionLogSend?: string;
        newCardChargeDate?: Date;
        newExtractCode?: string;
        newOfflinePIN?: string;
        newOfflinePINLMK?: string;
        newPorductCode?: string;
        newPricingCode?: string;
        newProductBINSequenceNo?: number;
        nFCFlag?: string;
        noRefundReasonCode?: string;
        numberCallsAfterExtract?: number;
        offlinePIN?: string;
        offlinePINBlockedFlag?: string;
        offlinePINLMK?: string;
        oldCardNo?: string;
        oldPIN?: string;
        otoBeforeLimitReplacementDate?: Date;
        otoLimitReplacementDate?: Date;
        pAsswordChangeDate?: Date;
        passwordCloseDate?: Date;
        passwordDispatchAdrress?: string;
        passwordDispatchType?: string;
        passwordErrorCount?: number;
        photoRequest?: string;
        pIN?: string;
        pINOfset?: string;
        pINRefNo?: number;
        pINStatu?: string;
        pINSubStatu2?: string;
        pINSubStatu3?: string;
        pinBlockedDate?: Date;
        porductCode?: string;
        postCardIssuingAddress?: string;
        postponingInstallmentCount?: number;
        previousLimit?: number;
        pricingCode?: string;
        primaryCardNo?: string;
        printingPriority?: number;
        productBINSequenceNo?: number;
        pVV?: string;
        pVVKeyIndex?: number;
        recordIsValid?: string;
        refreshSeansNo?: string;
        renewalDate?: Date;
        renewCard?: string;
        renewCardDescription?: string;
        riskCode?: string;
        savingUserId?: string;
        secondaryCustomerId?: number;
        sendPINRefNo?: number;
        statuChangeDate?: Date;
        transCutomerNo?: number;
        unitCode?: string;
        vIPBKMCode?: string;
        vIPBKMNotificationDate?: Date;
        vIPEuroCode?: string;
        vIPEuroNotificationDate?: Date;
        vIPFlag?: string;
        vIPVISANotificationDate?: Date;
        vIPVisaCode?: string;
        vISAPhoneSta?: string;
        virtualLimResetDate?: Date;
        workingStat?: string;
        workingStatDate?: Date;
        workingStatNumber?: number;
        workingStatuChangeDate?: Date;
    }
    interface CreditCardInfoRequest extends BOA.Common.Types.TransactionRequestBase {
    }
    interface CreditCardKKBAdditionalContract extends BOA.Common.Types.ContractBase {
        ageOfTheMostOldestAccount?: number;
        averageOfLastSixMonthsPropertyUSD?: number;
        averageOfLastThreeMonthsFXCurrentAccountUSD?: number;
        lastSixMonthsApprovedCredit?: number;
        lastSixMonthsRejectedCreditCards?: number;
        maxDurationInOpenLoans?: number;
        maxLimitAmountInClosedCreditCards?: number;
        maxLoanMonthlyPaymentAmountEver?: number;
        maxMonthlyPaymentAmountInOpenCards?: number;
        numOfAccountInBureau?: number;
        numOfAccountWhichOpenedInLast3Months?: number;
        numOfAccountWhichOpenedInLast4_12Months?: number;
        numOfAccountWhosePaymentCategoryIs0InLast12Months?: number;
        numOfOpenAccountWhosePaymentCategoryIs0InLast6Months?: number;
        numOfOpenConsumerAccount?: number;
        sumDebtAmountInOpenCreditCards?: number;
        sumMonthlyPaymentAmountInClosedLoans?: number;
        timeFromFirstBeingCategory2?: number;
        timeFromLastBeingCategory1?: number;
        timeFromLastBeingCategory2?: number;
        worstCategoryEver?: string;
    }
    interface CreditCardLimit {
        additionalCreditCardLimitRate?: number;
        availableCashAdvanceLimit?: number;
        availableLimit?: number;
        internationalCashPermission?: boolean;
        nationalCashPermission?: boolean;
        totalCashAdvanceLimit?: number;
        totalLimit?: number;
    }
    interface CreditCardMemo {
        cardNumber?: string;
        customerNumber?: number;
        memo?: string;
        memoStatus?: string;
        recordDate?: string;
        recordTime?: string;
        rowNumber?: string;
        sourceCode?: BOA.Types.Kernel.CreditCard.BanksoftResourceCode;
        topicCode?: string;
        userCode?: string;
    }
    interface CreditCardNumberByAccountContract {
        cardNumber?: string;
        cardType?: string;
        mainAccountNumber?: number;
        mainCardNumber?: string;
        secondaryAccountNumber?: number;
    }
    interface CreditCardPayment {
        bill?: BOA.Types.Kernel.CreditCard.BillInformation;
        businessKey?: number;
        provisionNumber?: string;
        referenceNumber?: string;
    }
    interface CreditCardPaymentProcessContract extends BOA.Common.Types.ContractBase {
        accountBranchId?: number;
        accountingDescription?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountTL?: number;
        businessKey?: number;
        channelId?: number;
        creditCardBranchID?: number;
        creditCardNo?: string;
        creditCardNumber?: string;
        customerMaskedName?: string;
        description?: string;
        fec?: number;
        fecRate?: number;
        hostIP?: string;
        hostName?: string;
        internationalCode?: number;
        isAutoPayment?: boolean;
        isCreditCardEft?: boolean;
        isPaymentWithAccount?: boolean;
        otherAccountNumber?: number;
        otherAccountSuffix?: number;
        paymentAmount?: number;
        paymentType?: number;
        phone?: string;
        provisionNumber?: number;
        referenceNumber?: string;
        removeBlocking?: boolean;
        resourceCode?: string;
        reverseBusinessKey?: number;
        status?: number;
        taxNumber?: string;
        taxNumberValue?: string;
        tcIdentityNumber?: string;
        tranBranchId?: number;
        tranDate?: Date;
        transactionSource?: string;
        transactionType?: string;
        userName?: string;
    }
    interface CreditCardPaymentProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amountTL?: number;
        creditCardBranchId?: number;
        creditCardNo?: string;
        customerMaskedName?: string;
        fecRate?: number;
        isAutoPayment?: boolean;
        isCreditCardEft?: boolean;
        isPaymentWithAccount?: boolean;
        profitOrLossValue?: number;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
        taxNumber?: string;
    }
    interface CreditCardProductManageMainContract extends BOA.Common.Types.ContractBase {
        afterMaturtyConfirmDayCount?: number;
        agreementCodeMain?: string;
        agreementCodeSuffix?: string;
        applicationTypeId?: number;
        applicationTypeName?: string;
        archievePath?: string;
        centralProductType?: string;
        commissionKey?: string;
        creditCardProductManageMainId?: number;
        creditCommissionKey?: string;
        creditProductType?: string;
        cyberGroupCode?: string;
        cyberMainGroupCode?: string;
        cyberProductCode?: string;
        defaultCommissionAmount?: number;
        extensionType?: string;
        extractDateCode?: string;
        goodsOrServiceType?: number;
        hasBSMV?: boolean;
        hasCommission?: boolean;
        hasCreditAccounting?: boolean;
        hasDefaultCommission?: boolean;
        hasExtractMonth?: boolean;
        hasExtractPeriod?: boolean;
        hasInstallmentControl?: boolean;
        hasKKDF?: boolean;
        hasLimitControl?: boolean;
        hasSecondAdditionalCard?: boolean;
        hasStatementDay?: boolean;
        hostIp?: string;
        hostName?: string;
        immediateProductType?: string;
        isActive?: boolean;
        isImmediate?: boolean;
        lastPathExtensionType?: string;
        maturityDifferenceRate?: number;
        maximumInstallmentCount?: number;
        maximumLimit?: number;
        minimumInstallmentCount?: number;
        minimumLimit?: number;
        productName?: string;
        productType?: string;
        productTypeId?: number;
        sourcePath?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditCardProductManageMainRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CreditCard.CreditCardProductManageMainContract;
    }
    interface CreditCardRelatedAccount {
        accountNumber?: number;
        accountSuffix?: number;
        cardNumber?: string;
        cardType?: string;
        nameSurname?: string;
        useType?: string;
    }
    interface CreditCardStatement {
        amount?: number;
        date?: Date;
        emailHome?: boolean;
        emailOnlyFlag?: boolean;
        emailWork?: boolean;
        faxHome?: boolean;
        faxWork?: boolean;
        minAmount?: number;
        statementAddress?: string;
        statementCode?: string;
        status?: string;
    }
    interface CreditCardStatementDetail {
        header?: BOA.Types.Kernel.CreditCard.StatementHeader;
        statedCreditCardTransactionList?: BOA.Types.Kernel.CreditCard.CreditCardTransaction[];
    }
    interface CreditCardTransaction {
        amount?: number;
        amountForeign?: number;
        cardNo?: string;
        creditCardStatementTransactionType?: BOA.Types.Kernel.CreditCard.CreditCardStatementTransactionTypeEnum;
        fecCode?: string;
        goldPoint?: number;
        harCardNo?: string;
        installmentDate?: Date;
        installmentNumber?: number;
        internationalFecCode?: string;
        mCCCode?: string;
        mCCDescription?: string;
        message?: string;
        reference?: string;
        totalInstallmentCount?: number;
        transactionCode?: string;
        transactionDate?: Date;
    }
    interface CreditCardTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        bsmvAmount?: number;
        businessKey?: number;
        chargeAmount?: number;
        creditCardDueDate?: string;
        creditCardNumber?: string;
        description?: string;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        kkdfAmount?: number;
        reference?: string;
        reverseBusinessKey?: number;
        systemDate?: Date;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
        transactionSource?: string;
        transactionType?: string;
        userName?: string;
    }
    interface CreditCardType {
    }
    interface CreditCardUnstated {
        lastStatementMinPayment?: number;
        statedCreditCardTransactionList?: BOA.Types.Kernel.CreditCard.CreditCardTransaction[];
    }
    interface CreditCardWaitingInstallmentHeader {
        description?: string;
        extreDate?: Date;
        remainingInstallmentAmount?: number;
        remainingInstallmentCount?: number;
        rowNumber?: number;
        totalInstallmentAmount?: number;
        totalInstallmentCount?: number;
    }
    interface DebitCardInfoContract extends BOA.Common.Types.ContractBase {
        branchCode?: string;
        cardIssuingDate?: Date;
        cardNumber?: string;
        cardStatus?: string;
        cardStyle?: string;
        cardUpdateDate?: Date;
        closedDate?: Date;
        customerNo?: number;
        entryDate?: Date;
        expireDate?: string;
        groupKodu?: string;
        insertUser?: string;
        insertUserIP?: string;
        oldCardNumber?: string;
        passwordIssuingDate?: Date;
        updateStatusDate?: Date;
        updateUser?: string;
        updateUserIP?: string;
    }
    interface DebitCardStatus {
    }
    interface DebitCardWSInstantCustomerAddressContract extends BOA.Common.Types.ContractBase {
        cepTelAlanKodu?: string;
        cepTelNo?: string;
        cepTelUlkeKodu?: string;
        evAdres1?: string;
        evAdres2?: string;
        evAdres3?: string;
        evEmail?: string;
        evFaxAlanKodu?: string;
        evFaxNo?: string;
        evFaxUlkeKodu?: string;
        evPostaKodu?: string;
        evSehir?: string;
        evSehirKodu?: string;
        evSemt?: string;
        evTelAlanKodu?: string;
        evTelNo?: string;
        evTelUlkeKodu?: string;
        evUlke?: string;
        evUlkeKodu?: string;
        isAdres1?: string;
        isAdres2?: string;
        isAdres3?: string;
        isEmail?: string;
        isExtension?: string;
        isFaxAlanKodu?: string;
        isFaxNo?: string;
        isFaxUlkeKodu?: string;
        isPostaKodu?: string;
        isSehir?: string;
        isSehirKodu?: string;
        isSemt?: string;
        isTelAlanKodu?: string;
        isTelNo?: string;
        isTelUlkeKodu?: string;
        isUlke?: string;
        isUlkeKodu?: string;
        musteriNo?: number;
    }
    interface DebitCardWSInstantCustomerAddressContractResponse extends BOA.Common.Types.ResponseBase {
        insUpd?: string;
        rC?: number;
    }
    interface DebitCardWSInstantCustomerInfoContract extends BOA.Common.Types.ContractBase {
        acilKisi?: string;
        ad?: string;
        altGrupKodu?: string;
        anneAdi?: string;
        anneKizlikSoyad?: string;
        babaAdi?: string;
        birimKodu?: string;
        cinsiyet?: string;
        dogumTarihi?: string;
        dogumYeri?: string;
        embossadi?: string;
        firmaAdi?: string;
        firmaEmbossAdi?: string;
        firmaFlag?: string;
        firmaNo?: number;
        grupKOdu?: string;
        ikinciAd?: string;
        isGorev?: string;
        isyeriAdi?: string;
        kartGonderimAdres?: string;
        kartGonderimSube?: string;
        kartGonderimTipi?: string;
        kayitTarihi?: string;
        kimlikNo?: string;
        kimlikSeriNo?: string;
        kimlikTipi?: string;
        kizlikSoyad?: string;
        medeniDurumu?: string;
        musteriTipi?: string;
        mustNo?: number;
        sifreYolaSube?: string;
        sifreYollaAdres?: string;
        sifreYollamaTipi?: string;
        soyad?: string;
        sozlesmeFlag?: string;
        tabiyeti?: string;
        tabiyetiAciklama?: string;
        ticaretSicilNo?: string;
        tuzelUnvan?: string;
        unvan?: string;
        vergiDairesi?: string;
        vergiNo?: string;
    }
    interface DebitCardWSInstantCustomerInfoContractResponse extends BOA.Common.Types.ResponseBase {
        insUpd?: string;
        rC?: number;
    }
    interface DebitCardWSInstantGetCardNoContract extends BOA.Common.Types.ContractBase {
        anaHesapNo?: string;
        anaSubeKodu?: string;
        anindaBasim?: string;
        basimOnceligi?: number;
        birimKodu?: string;
        embossAdi?: string;
        embossUnvan?: string;
        firmaEmbossAdi?: string;
        grupKodu?: string;
        hkAdSoyad?: string;
        hkAdSoyad2?: string;
        hkAdSoyad3?: string;
        hkAdSoyad4?: string;
        hkAdSoyad5?: string;
        hkAdSoyad6?: string;
        hkAdSoyad7?: string;
        hkAdSoyad8?: string;
        hkDovizCinsi?: string;
        hkDovizCinsi2?: string;
        hkDovizCinsi3?: string;
        hkDovizCinsi4?: string;
        hkDovizCinsi5?: string;
        hkDovizCinsi6?: string;
        hkDovizCinsi7?: string;
        hkDovizCinsi8?: string;
        hkHesapNo?: string;
        hkHesapNo2?: string;
        hkHesapNo3?: string;
        hkHesapNo4?: string;
        hkHesapNo5?: string;
        hkHesapNo6?: string;
        hkHesapNo7?: string;
        hkHesapNo8?: string;
        hkHesapTuru?: string;
        hkHesapTuru2?: string;
        hkHesapTuru3?: string;
        hkHesapTuru4?: string;
        hkHesapTuru5?: string;
        hkHesapTuru6?: string;
        hkHesapTuru7?: string;
        hkHesapTuru8?: string;
        hkKullanimTuru?: string;
        hkKullanimTuru2?: string;
        hkKullanimTuru3?: string;
        hkKullanimTuru4?: string;
        hkKullanimTuru5?: string;
        hkKullanimTuru6?: string;
        hkKullanimTuru7?: string;
        hkKullanimTuru8?: string;
        hkMusteriNo?: number;
        hkMusteriNo2?: number;
        hkMusteriNo3?: number;
        hkMusteriNo4?: number;
        hkMusteriNo5?: number;
        hkMusteriNo6?: number;
        hkMusteriNo7?: number;
        hkMusteriNo8?: number;
        hkRumuz?: string;
        hkRumuz2?: string;
        hkRumuz3?: string;
        hkRumuz4?: string;
        hkRumuz5?: string;
        hkRumuz6?: string;
        hkRumuz7?: string;
        hkRumuz8?: string;
        hkSubeKodu?: string;
        hkSubeKodu2?: string;
        hkSubeKodu3?: string;
        hkSubeKodu4?: string;
        hkSubeKodu5?: string;
        hkSubeKodu6?: string;
        hkSubeKodu7?: string;
        hkSubeKodu8?: string;
        kartStili?: string;
        kartYollamaAdresi?: string;
        kartYollamaTipi?: string;
        kartYollaSube?: string;
        kayitTerm?: string;
        kayitTerminal?: string;
        kayitUser?: string;
        musteriNo?: number;
        rumuz?: string;
        sifreYollamaAdresi?: string;
        sifreYollamaTipi?: string;
        sifreYollaSube?: string;
    }
    interface DebitCardWSInstantGetCardNoContractResponse extends BOA.Common.Types.ResponseBase {
        kartNo?: string;
        rC?: number;
        rCDesc?: string;
    }
    interface EgysIdContract extends BOA.Common.Types.ContractBase {
        lowerAdLogoId?: string;
        lowerAdLogoObjectId?: string;
        lowerBannerId?: string;
        lowerBannerObjectId?: string;
        upTitleLogoId?: string;
        upTitleLogoObjectId?: string;
    }
    interface EmvTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        banksoftReferanseNumber?: string;
        cardNumber?: string;
        eMVData?: string;
        expireDate?: string;
        merchantCode?: string;
        newPINBlock?: string;
        track2?: string;
        xtmBranchId?: number;
        xtmId?: number;
        xtmUserCode?: string;
        zPKEncryptedPINBlock?: string;
    }
    interface ErrorCodes {
        balanceInsufficient?: string;
        cardInfoNotFound?: string;
    }
    interface ExpressCardContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        customerId?: number;
        cVV2?: string;
        expireDate?: string;
        rC?: string;
        rCDesc?: string;
        rcStatus?: number;
    }
    interface IncomeExpenditureAccInfoContract extends BOA.Common.Types.ContractBase {
        accountancyDate?: Date;
        branchId?: number;
        branchIncomeExpenditureCut?: number;
        branchUnitAmount?: number;
        businessKey?: number;
        customerNo?: number;
        id?: number;
        reportType?: number;
        reverseBusinessKey?: number;
        status?: number;
        totalUnitAmount?: number;
        txnType?: number;
    }
    interface IncomeExpenditureAccInfoRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.CreditCard.IncomeExpenditureAccInfoContract;
    }
    interface IndividualCardCreditLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        availableLimit?: number;
        cardNumber?: string;
        customerType?: number;
        kaLimitYd?: number;
        limit?: number;
        newLimit?: number;
        productCode?: string;
        sourceCode?: string;
        userCode?: string;
    }
    interface InstantAllDebitContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        collectedAmount?: number;
        fileId?: number;
        totalDebt?: number;
    }
    interface InstantDebitContract extends BOA.Common.Types.ContractBase {
        adres?: string;
        adSoyad?: string;
        alacakBakiye?: number;
        anaPara?: number;
        avukatAdiSoyadi?: string;
        avukatAdres?: string;
        avukatTelefon?: string;
        birim?: string;
        cepTelefon?: string;
        durumu?: string;
        evTelefon?: string;
        faizVeVergi?: number;
        fazlaTahsilat?: number;
        guncelleme?: Date;
        ktvuVeVergi?: number;
        masraf?: number;
        muhatapSayisi?: number;
        musteriNotu?: string;
        odemePlani?: string;
        odemePlaniNot?: string;
        rC?: string;
    }
    interface IReadOnlyCreditCardConfiguration {
        bSServiceURL?: string;
        bSTCPService_AutoReverse?: boolean;
        bSTCPService_ServerIP?: string;
        bSTCPService_ServerPort?: number;
        instantAllDebitServiceUrl?: string;
        instantDebitServiceUrl?: string;
        isBSTraceEnabled?: boolean;
    }
    interface MailOrder {
        isDomesticMailOrder?: boolean;
        isInternationalMailOrder?: boolean;
    }
    interface MainCardContract extends BOA.Common.Types.ContractBase {
        acceptedIncome?: number;
        accountBalance?: number;
        advicedLimit?: number;
        allocationLimit?: number;
        applicationBranch?: BOA.Common.Types.BranchContract;
        applicationBranchId?: number;
        applicationBranchName?: string;
        applicationDate?: Date;
        applicationNo?: string;
        applicationUserCode?: string;
        applicationUserId?: number;
        approveRejectDate?: Date;
        approveRejectExplanation?: string;
        approveRejectPersonName?: string;
        availablePrincipalAmount?: number;
        billingAddress?: string;
        billingAddressId?: number;
        billingEmailAddress?: string;
        billingEmailAddressId?: number;
        birthDate?: Date;
        branchOpinion?: number;
        bSApplicationNo?: number;
        bSOrderNumber?: number;
        businessKey?: number;
        calculatedIncome?: number;
        cardSendingAddress?: string;
        cardSendingAddressId?: number;
        cardSendingType?: string;
        cardType?: string;
        cardTypeValue?: number;
        channelId?: number;
        companyName?: string;
        confirmedNetInCome?: number;
        creditCardNumber?: string;
        crmCampaignCode?: string;
        customerId?: number;
        customerType?: number;
        divitInstanceId?: number;
        documentaryIncome?: number;
        employeeCount?: number;
        employerSector?: number;
        formerCompanyName?: string;
        formerJobStartingMonth?: number;
        formerJobStartingYear?: number;
        guaranteePersonContract?: BOA.Types.Kernel.Customer.PersonContract;
        guaranteePersonId?: number;
        guaranteePersonInfoContract?: BOA.Types.Kernel.Customer.IndividualPersonInfoContract;
        guaranteeTaxNumber?: string;
        hostName?: string;
        houseOwner?: number;
        houseOwningMonth?: number;
        houseOwningYear?: number;
        id?: number;
        identityNumber?: string;
        immediateBranchId?: number;
        immediateCard?: boolean;
        installmentCount?: number;
        instantPersoBranchId?: number;
        isCalledFromList?: boolean;
        jobStartingMonth?: number;
        jobStartingYear?: number;
        kKBLogId?: number;
        limitRatio?: number;
        lKSAllocationInputId?: number;
        lKSInputId?: number;
        lKSLimit?: number;
        lKSMilestoneLimit?: number;
        lKSYear?: number;
        markettingType?: BOA.Types.Kernel.CreditCard.MarketTypes;
        markettingTypeId?: number;
        maxLimit?: number;
        monthlyNetIncome?: number;
        nonCertifiedIncomeAmount?: number;
        numberOfChildren?: number;
        partnerIdentityNumber?: string;
        partnerPersonContract?: BOA.Types.Kernel.Customer.PersonContract;
        partnerPersonId?: number;
        partnerPersonInfoContract?: BOA.Types.Kernel.Customer.IndividualPersonInfoContract;
        partnerTaxNumber?: string;
        personContract?: BOA.Types.Kernel.Customer.PersonContract;
        personId?: number;
        personName?: string;
        personTaxNumber?: string;
        phoneDescription?: string;
        phoneText?: string;
        preferredLimit?: number;
        processType?: number;
        processTypeDay?: number;
        processTypeIsDefault?: number;
        processTypeRate?: number;
        productCode?: string;
        productName?: string;
        referanceLastName?: string;
        referanceName?: string;
        referancePhone?: string;
        referancePhoneAreaCode?: string;
        referancePhoneInternationalCode?: string;
        rejectCount?: number;
        resourceCode?: string;
        reversedApplicationNo?: string;
        segmentDetail?: string;
        selectedCampaignParticipationTypeList?: BOA.Types.Kernel.CreditCard.CampaignParticipation[];
        sGKPremiumDayCount?: number;
        sGKTurnoverCountWithinLastTwoYear?: number;
        sourceCode?: string;
        stateId?: number;
        statementDate?: string;
        supplementaryPersonContract?: BOA.Types.Kernel.Customer.PersonContract;
        supplementaryPersonId?: number;
        supplementaryTaxNumber?: string;
        supplPersonName?: string;
        systemDate?: Date;
        taxnumber?: string;
        taxNumber?: string;
        taxOffice?: string;
        totalCertifiedIncomeAmount?: number;
        unitId?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        usageReason?: number;
        wFPreviousStatus?: number;
        wFStatus?: number;
        wFStatusName?: string;
        withHoldingAmount?: number;
        workFlowId?: number;
    }
    interface MemberBlockedData {
        amount?: number;
        blockedDate?: Date;
        blockedNumber?: number;
        bSMV?: number;
        comissionAmount?: number;
        comissionRate?: number;
        fecCode?: string;
        internationalFecCode?: string;
        netAmount?: number;
        unBlockedDate?: Date;
    }
    interface MemberBlockedDataDetail {
        amount?: number;
        cardNumber?: string;
        paraBirimi?: string;
        transactionDate?: Date;
        transactionHour?: string;
    }
    interface MerchantApplicationInvokeContract extends BOA.Common.Types.ContractBase {
        adiSoyadi1?: string;
        adiSoyadi2?: string;
        adiSoyadi3?: string;
        adres1?: string;
        adres2?: string;
        adres3?: string;
        aylikTahminiDisKartCiro?: number;
        aylikTahminiIcKartCiro?: number;
        babaAdi1?: string;
        babaAdi2?: string;
        babaAdi3?: string;
        basvuruDurumu?: string;
        blokeHesNo?: string;
        blokeHesNoGecici?: string;
        branchCode?: string;
        calisilanDigerBankaAdi1?: string;
        calisilanDigerBankaAdi2?: string;
        channel?: string;
        disKartCalismaKosullari1?: number;
        disKartCalismaKosullari2?: number;
        dogumTarihi1?: string;
        dogumTarihi2?: string;
        dogumTarihi3?: string;
        dogumYeri1?: string;
        dogumYeri2?: string;
        dogumYeri3?: string;
        email?: string;
        evAdres1?: string;
        evAdres2?: string;
        evAdres3?: string;
        fax1?: string;
        fax1AlanKodu?: string;
        fax2?: string;
        fax2AlanKodu?: string;
        hekimPOS?: string;
        icKartCalismaKosullari1?: number;
        icKartCalismaKosullari2?: number;
        kategoriKodu?: string;
        kaynakAdi?: string;
        kaynakKodu?: string;
        kullaniciKodu?: string;
        kurulusYili?: number;
        multiNetPOS?: string;
        musteriNo?: number;
        nufusSeriNo1?: string;
        nufusSeriNo2?: string;
        nufusSeriNo3?: string;
        ortak1?: string;
        ortak2?: string;
        ortaklikPayi1?: string;
        ortaklikPayi2?: string;
        ortaklikPayi3?: string;
        personId?: number;
        pOSKatilmaHesabiFlag?: string;
        pOSKatilmaTipi?: string;
        pOSSayisi?: number;
        postaKodu?: string;
        postaKodu1?: string;
        postaKodu2?: string;
        postaKodu3?: string;
        pOSTuru?: string;
        sabitUcretFlag?: string;
        sabitUcretKodu?: string;
        sanalFlag?: string;
        sanalPOSTuru?: string;
        sehir?: string;
        sehir1?: string;
        sehir2?: string;
        sehir3?: string;
        sehirKodu?: string;
        semt?: string;
        sicilKayitAd?: string;
        sicilKayitTarih?: string;
        sicilNo?: string;
        sirketTipi?: string;
        sirketTuru?: string;
        sozlesmeTarih?: string;
        subeAdi?: string;
        subeKodu?: string;
        taahhutEdilenCariValorluOrtalama?: number;
        taahhutEdilenCiro?: number;
        tCKimlikNo?: string;
        tckimlikno1?: string;
        tckimlikno2?: string;
        tckimlikno3?: string;
        tel1?: string;
        tel1AlanKodu?: string;
        tel2?: string;
        tel2AlanKodu?: string;
        telefon1?: string;
        telefon2?: string;
        telefon3?: string;
        tuzelGercek?: string;
        urunOrtalamaBirimDegeri?: number;
        utBaskaUrun?: string;
        utExt?: string;
        utFaaliyet?: string;
        utGenelSubeGorusu?: string;
        utIsyeriOrtaklik?: string;
        uyeAd?: string;
        uyeCiroUstLimit?: number;
        uyeGrupNumarasi?: string;
        uyeTicariAd?: string;
        vdszHesNo?: string;
        vergiDairesi?: string;
        vergiKimlikNo1?: string;
        vergiKimlikNo2?: string;
        vergiKimlikNo3?: string;
        vergiNo?: string;
        webAdres?: string;
        yabanciKimlikNo?: string;
        yabanciKimlikNo1?: string;
        yabanciKimlikNo2?: string;
        yabanciKimlikNo3?: string;
        yetkiliAd1?: string;
        yetkiliAd2?: string;
        yIVIKKPOSSA_BS?: number;
        yIVIKKPOSSA_GnlMdOrani?: number;
        yIVIKKPOSSA_SubeOrani?: number;
        yoneticiAd?: string;
    }
    interface MerchantApplicationInvokeContractResponse extends BOA.Common.Types.ResponseBase {
        basvuruNo?: number;
        rC?: string;
        rCDesc?: string;
    }
    interface MerchantInformationContract extends BOA.Common.Types.ContractBase {
        address?: string;
        cardNumber?: string;
        customerId?: number;
        merchantId?: string;
        merchantName?: string;
        telephoneNumber?: string;
    }
    interface PosApplicationList {
        applicationDate?: Date;
        applicationMemberName?: string;
        applicationNumber?: string;
        applicationState?: string;
        applicationUserCode?: string;
        branchCode?: number;
        rejectCode?: string;
        rejectDepartment?: string;
        rejectDescription?: string;
    }
    interface PosDateFilterContract {
        code?: number;
        description?: string;
        key?: string;
    }
    interface PosMemberNoContract extends BOA.Common.Types.ContractBase {
        posNo?: string;
        posStatus?: string;
    }
    interface PosReceiptFilterContract {
        code?: string;
        description?: string;
        key?: string;
    }
    interface PosTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        fecCode?: string;
        processDate?: Date;
    }
    interface PosViewConstants {
        dateTypeList?: BOA.Types.Kernel.CreditCard.PosDateFilterContract[];
        posReceiptFilterList?: BOA.Types.Kernel.CreditCard.PosReceiptFilterContract[];
    }
    interface PosViewContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        commissionAmount?: number;
        commissionRate?: number;
        fecCode?: string;
        payAmount?: number;
        processDate?: Date;
        processId?: number;
        tax?: number;
        temporaryBlockedEndDate?: Date;
    }
    interface StatementHeader {
        address?: string;
        creditCard?: BOA.Types.Kernel.CreditCard.CreditCard;
        dueDate?: Date;
        earnedGoldPoint?: number;
        existingGoldPoint?: number;
        goldPointConvertedToGold?: number;
        installmentProfit?: number;
        inTermPayments?: number;
        minPayment?: number;
        nextDueDate?: Date;
        nextStatementDate?: Date;
        serialNo?: string;
        statementDate?: Date;
        statementMessage?: string;
        taxes?: number;
        totalDebt?: number;
        totalEarnedGoldPoint?: number;
        transactionTotal?: number;
        transferredBalance?: number;
        transferredGoldPoint?: number;
        usedGoldPoint?: number;
    }
    interface StatementPeriod {
        code?: string;
        description?: string;
    }
    interface StatementSummaryForIVRContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        email?: string;
        faxNumber?: string;
        isEmailDemand?: number;
        isFaxDemand?: number;
        statementCode?: string;
    }
    interface TransactionBase {
        customerID?: string;
    }
    interface VirtualCardContract extends BOA.Common.Types.ContractBase {
        cardNo?: string;
        cVV2?: string;
        expireDate?: Date;
        limit?: BOA.Types.Kernel.CreditCard.CreditCardLimit;
    }
    interface XtmCardEMVRequest extends BOA.Types.Kernel.CreditCard.BSRequestHeader {
        amount?: string;
        eMVData?: string;
        expireDate?: string;
        lMKEncryptedZPK?: string;
        merchantCode?: string;
        newPINBlock?: string;
        pINBlockKeyType?: string;
        termLocation?: string;
        track2?: string;
        zPKEncryptedPINBlock?: string;
    }
    interface XtmCheckLimitRequest extends BOA.Types.Kernel.CreditCard.BSRequestHeader {
        accountNumber?: string;
        accountSuffix?: string;
        amount?: string;
        dummy?: string;
        expireDate?: string;
        islemDoviz?: string;
        termLocation?: string;
    }
    interface XtmUpdateLimitRequest extends BOA.Types.Kernel.CreditCard.BSRequestHeader {
        accountNumber?: string;
        accountSuffix?: string;
        amount?: string;
        expireDate?: string;
        islemDoviz?: string;
        termLocation?: string;
    }
    interface XtmVerifyPasswordRequest extends BOA.Types.Kernel.CreditCard.BSRequestHeader {
        expireDate?: string;
        pINBlockKeyType?: string;
        pinBlock?: string;
        zPKUnderLMK?: string;
    }
}
declare namespace BOA.Types.Kernel.CreditCard.BanksoftVPS {
    interface BSVPosConstants {
    }
    interface BSVPosRequestHeader {
        amount?: string;
        batchNo?: number;
        cardNumber?: string;
        currencyCode?: string;
        cvv2?: string;
        expireDate?: string;
        installmentCount?: number;
        mailOrTelephoneOrder?: boolean;
        merchantOrderId?: string;
        orderPosTxnId?: number;
        posMerchantId?: string;
        sgkPeriod?: string;
        surchargeAmount?: string;
        terminalID?: string;
    }
    interface PSEContract extends BOA.Common.Types.ContractBase {
        acquiringId?: string;
        additionalData?: string;
        amount?: string;
        batchNo?: string;
        cardNumber?: string;
        currencyCode?: string;
        expireDate?: string;
        merchantID?: string;
        posConditionMode?: string;
        posEntryMode?: string;
        processingCode?: string;
        provisionNumber?: string;
        responseCode?: string;
        rRN?: string;
        sTAN?: string;
        terminalID?: string;
        transactionDate?: string;
        transactionTime?: string;
    }
    interface PSEResponseContract {
        provisionNumber?: string;
        requestString?: string;
        responseCode?: string;
        responseMessage?: string;
        responseString?: string;
        rrn?: string;
        stan?: string;
    }
}
declare namespace BOA.Types.Kernel.CreditCard.BanksoftVPS.BSVPosConstants {
    interface MessageType {
    }
    interface MTI {
    }
    interface ProcessingCode {
    }
}
declare namespace BOA.Types.Kernel.CreditCard.BSConstant {
    export const enum AccountType {
        TL = 1,
        USD = 2
    }
    export const enum ReferenceDirection {
        ToBank = 0,
        ToBankSoft = 2
    }
    interface AutoPaymentYD {
    }
    interface AutoPaymentYI {
    }
    interface BankSoftDate {
    }
    interface BSResult {
    }
    interface CardType {
    }
    interface CreditCardBrandOwner {
    }
    interface CreditCardStatus {
    }
    interface CreditCardType {
    }
    interface CustomerStatus {
    }
    interface EvetHayir {
    }
    interface FinancialTransactionFlag {
    }
    interface MessageCode {
    }
    interface ResponseSource {
    }
    interface SendingAddress {
    }
    interface SendingType {
    }
    interface StatementStatus {
    }
    interface TransactionCurrency {
    }
    interface TransactionSource {
    }
    interface TransactionType {
        paymentHGS?: string;
        paymentReligious?: string;
        taxPayment?: string;
    }
    interface YesNo {
    }
}
declare namespace BOA.Types.Kernel.CreditCard.Collection {
    interface InsertMemoContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        customerNumber?: number;
        memoExplanation?: string;
        memoSubject?: string;
        rC?: number;
        rCExplanation?: string;
        sourceCode?: string;
        userCode?: string;
    }
    interface IReadOnlyInsertMemoContract {
        rC?: number;
        rCExplanation?: string;
    }
    interface IReadOnlyStatementDateContract {
        cardNumber?: string;
        customerNumber?: number;
        domesticCurrentTermDebt?: number;
        domesticCurrentTermReceivable?: number;
        domesticMinimumPaymentAmount?: number;
        domesticTotalBalance?: number;
        finalDate?: Date;
        foreignCurrentTermDebt?: number;
        foreignCurrentTermReceivable?: number;
        foreignMinimumPaymentAmount?: number;
        foreignTotalBalance?: number;
        oldCardNumber?: string;
        statementCode?: string;
        statementEditDate?: Date;
        statementStatus?: string;
        statementStatusNumber?: number;
    }
    interface IReadOnlyStatementDelayInformationContract {
        cardNumber?: string;
        customerNumber?: number;
        domesticMinimumPaymentBalance?: number;
        finalDate?: Date;
        statementStatus?: string;
        statementStatusNumber?: number;
    }
    interface IReadOnlyStatementStatusHistoryInformationContract {
        cardNumber?: string;
        statementStatusHistory?: string;
    }
    interface StatementDateContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        currentTermPartial?: number;
        customerNumber?: number;
        domesticCurrentTermCash?: number;
        domesticCurrentTermDebt?: number;
        domesticCurrentTermInterestTax?: number;
        domesticCurrentTermReceivable?: number;
        domesticMinimumPaymentAmount?: number;
        domesticTotalBalance?: number;
        finalDate?: Date;
        foreignCurrentTermDebt?: number;
        foreignCurrentTermReceivable?: number;
        foreignMinimumPaymentAmount?: number;
        foreignTotalBalance?: number;
        oldCardNumber?: string;
        statementCode?: string;
        statementEditDate?: Date;
        statementStatus?: string;
        statementStatusNumber?: number;
    }
    interface StatementDelayInformationContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        customerNumber?: number;
        domesticMinimumPaymentBalance?: number;
        finalDate?: Date;
        statementStatus?: string;
        statementStatusNumber?: number;
    }
    interface StatementStatusHistoryInformationContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        statementStatusHistory?: string;
    }
}
declare namespace BOA.Types.Kernel.CreditCard.CreditCardExtractUtility {
    interface Demand {
    }
    interface DivitConstant {
    }
    interface EmailAndFaxSendingStatus {
    }
    interface InformationCode {
    }
    interface ParameterTypeAndCode {
    }
}
declare namespace BOA.Types.Kernel.CreditGuaranteeFund {
    interface CreditGuaranteeFundCommissionAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        commissionContract?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionContract;
        detailContract?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionDetailContract;
        installmentContract?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionInstallmentContract;
        isCollection?: boolean;
        paymentContract?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionPaymentContract;
    }
    interface CreditGuaranteeFundCommissionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        cGFReferenceNumber?: number;
        commissionRate?: number;
        creditGuaranteeFundCommissionId?: number;
        creditGuaranteeFundType?: string;
        fec?: number;
        fecCode?: string;
        guaranteeRate?: number;
        hostName?: string;
        installmentList?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionInstallmentContract[];
        remainingAmount?: number;
        sourceId?: number;
        sourceType?: number;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditGuaranteeFundCommissionDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        commissionContract?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionContract;
        debtFECCode?: string;
        debtFECType?: number;
        fundingAmount?: number;
        fundingAmountDebitCorrespond?: number;
        fundingFECCode?: string;
        installmentList?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionInstallmentContract[];
        paymentList?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionPaymentContract[];
        projectStatus?: number;
        transferContract?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionTransferContract;
        transferList?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionTransferContract[];
    }
    interface CreditGuaranteeFundCommissionFilterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beginDate?: Date;
        endDate?: Date;
        sourceType?: number;
    }
    interface CreditGuaranteeFundCommissionInstallmentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        creditGuaranteeFundCommissionId?: number;
        creditGuaranteeFundCommissionInstallmentId?: number;
        hostName?: string;
        installmentDate?: Date;
        installmentFECCode?: string;
        installmentOrder?: number;
        installmentType?: number;
        installmentTypeDescription?: string;
        paidAmount?: number;
        paidTransferAmount?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        transferAmount?: number;
        transferFEC?: number;
        transferFECCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditGuaranteeFundCommissionListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        creditGuaranteeFundCommissionId?: number;
        debtFEC?: number;
        debtFECCode?: string;
        debtFECType?: number;
        debtFECTypeDescription?: string;
        fecCode?: string;
        fecId?: number;
        fundingAmountDebitCorrespond?: number;
        hostName?: string;
        installmentAmount?: number;
        installmentCount?: number;
        remainingAmount?: number;
        sourceId?: number;
        sourceType?: number;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        transferredCommissionAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditGuaranteeFundCommissionPaymentContract extends BOA.Common.Types.ContractBase {
        accountingDescription?: string;
        amount?: number;
        businessKey?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAmount?: number;
        collectionAmountLc?: number;
        collectionBranchId?: number;
        collectionFEC?: number;
        collectionFER?: number;
        collectionLedgerId?: number;
        creditGuaranteeFundCommissionInstallmentId?: number;
        creditGuaranteeFundCommissionPaymentId?: number;
        fer?: number;
        fXBusinessKey?: number;
        fXCollectionBusinessKey?: number;
        fXCollectionContract?: BOA.Types.Kernel.FX.FXJournalContract;
        fXContract?: BOA.Types.Kernel.FX.FXJournalContract;
        hasAccounting?: boolean;
        hostName?: string;
        isReturn?: number;
        projectBranchId?: number;
        resourceCode?: string;
        resourceId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditGuaranteeFundCommissionTransferContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        collectedAmount?: number;
        collectionLedgerId?: number;
        commissionAmount?: number;
        commissionFEC?: number;
        commissionFECCode?: string;
        commissionFER?: number;
        creditGuaranteeFundCommissionId?: number;
        creditGuaranteeFundCommissionInstallmentId?: number;
        creditGuaranteeFundCommissionTransferId?: number;
        description?: string;
        fec?: number;
        fecCode?: string;
        fer?: number;
        fXBusinessKey?: number;
        fXCommissionJournalContract?: BOA.Types.Kernel.FX.FXJournalContract;
        fXCommisssionBusinessKey?: number;
        fXJournalContract?: BOA.Types.Kernel.FX.FXJournalContract;
        hostName?: string;
        installmentOrder?: number;
        instanceId?: number;
        pOSOutgoingId?: number;
        pOSStatusDescription?: string;
        receiverAddress?: string;
        receiverBankBranchId?: number;
        receiverBankId?: number;
        receiverIBAN?: string;
        receiverName?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tranDate?: Date;
        transferLedgerId?: number;
        transferredAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditGuaranteeFundCommon {
    }
    interface CreditGuaranteeFundOperationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditGuaranteeFundOperationId?: number;
        creditGuaranteeFundReference?: string;
        debtAmount?: number;
        debtFecCode?: string;
        debtFecType?: string;
        isSelectedItem?: boolean;
        operationStatus?: number;
        sourceId?: number;
        sourceType?: number;
    }
}
declare namespace BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommon {
    export const enum CGFCollectionFEC {
        Nothing = 0,
        TL = 1,
        YP = 2
    }
    export const enum CommissionInstallmentStatus {
        Nothing = 0,
        Waiting = 1,
        PartialPayment = 2,
        FullPayment = 3,
        Canceled = 4
    }
    export const enum CommissionInstallmentType {
        Nothing = 0,
        Normal = 1,
        Surplus = 2
    }
    export const enum CommissionPaymentStatus {
        Passive = 0,
        Active = 1
    }
    export const enum CommissionStatus {
        Nothing = 0,
        Saved = 1,
        Approved = 2,
        Confirmed = 3,
        SurplusBalance = 4,
        Completed = 5
    }
    export const enum CommissionTransferStatus {
        Nothing = 0,
        Saved = 1,
        WaitingApproval = 2,
        Approved = 3,
        Rejected = 4
    }
    export const enum CreditGuaranteeFundOperationStatus {
        Nothing = 0,
        Waiting = 1,
        Opened = 2,
        Canceled = 3
    }
    export const enum CreditGuaranteeFundSourceType {
        Nothing = 0,
        Proposal = 1,
        Project = 2
    }
    export const enum CreditGuaranteeFundType {
        Nothing = 0,
        PLS = 1,
        PGS = 2
    }
    interface ParameterTypes {
    }
}
declare namespace BOA.Types.Kernel.CRM.Campaign {
    interface CrossMarketingMessageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beginDate?: Date;
        campaignId?: number;
        campaignName?: string;
        channelId?: number;
        crossMarketingId?: number;
        crossMarketingInfo?: string;
        customerState?: number;
        customerStateName?: string;
        endDate?: Date;
        imageData?: number[];
        imagePath?: string;
        isActive?: number;
        isNotification?: number;
        journalState?: number;
        journalStateName?: string;
        journalSystemDate?: Date;
        journalUpdateSystemDate?: Date;
        languageId?: number;
        state?: number;
        stateName?: string;
        title?: string;
        verifiedState?: number;
        verifiedStateName?: string;
    }
    interface CrossMarketingMessageRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CRM.Campaign.CrossMarketingMessageContract;
    }
    interface CustomerSetContract extends BOA.Common.Types.ContractBase {
        authorizationId?: number;
        beginDate?: Date;
        code?: string;
        count?: number;
        customerSetIdList?: number[];
        description?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        id?: number;
        name?: string;
        personIdList?: number[];
        script?: string;
        systemDate?: Date;
        targetCustomerSetIdList?: number[];
        targetCustomerSetList?: BOA.Types.Kernel.CRM.Campaign.CustomerSetContract[];
        type?: number;
        typeDesc?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workgroupId?: number;
    }
    interface CustomerSetRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        dataContract?: BOA.Types.Kernel.CRM.Campaign.CustomerSetContract;
        isOnline?: boolean;
        targetCustomerSetId?: number;
    }
}
declare namespace BOA.Types.Kernel.CRM.CampaignManagement {
    interface AdvantageUsageContract extends BOA.Common.Types.ContractBase {
        advantageId?: number;
        campaignAdvantageId?: number;
        comissionId?: number;
        customerId?: number;
        discountAmount?: number;
        tranAmount?: number;
        tranCount?: number;
        tranDate?: Date;
        transactionId?: string;
    }
    interface AdvantageUsageRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CRM.CampaignManagement.AdvantageUsageContract;
    }
    interface CustomerAdvantageContract extends BOA.Common.Types.ContractBase {
        advantageId?: number;
        advantageValue?: string;
        campaignAdvantageId?: number;
        campaignName?: string;
        criteria?: string;
        customerId?: number;
        projectId?: number;
        remainingAmount?: number;
        resultType?: number;
    }
    interface CustomerAdvantageRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.CRM.CampaignManagement.CustomerAdvantageContract;
    }
}
declare namespace BOA.Types.Kernel.CrossMarketing {
    export const enum CrossMArketingJournalTypes {
        CMP = 0,
        APP = 1,
        CNC = 2
    }
    export const enum ResourceSelectionType {
        NotSet = 0,
        All = 1,
        Selected = 2,
        NotSelected = 3
    }
    interface CrossMarketingContract extends BOA.Common.Types.ContractBase {
        activeFrom?: Date;
        activeTo?: Date;
        assemblyName?: string;
        behaviour?: number;
        className?: string;
        crossMarketingCode?: string;
        crossMarketingId?: number;
        defaultMessage?: string;
        methodName?: string;
        name?: string;
        sortOrder?: number;
        target?: string;
    }
    interface CrossMarketingJournalContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        createdDate?: Date;
        crossMarketingCode?: string;
        crossMarketingId?: number;
        crossMarketingJournalId?: number;
        defaultMessage?: string;
        status?: string;
        userId?: number;
        userNote?: string;
    }
    interface CrossMarketingMessageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        channelId?: number;
        crossMarketingHeader?: string;
        crossMarketingId?: number;
        crossMarketingInfo?: string;
        hostIP?: string;
        hostName?: string;
        imageData?: number[];
        imageHeight?: number;
        imagePath?: string;
        imageWidth?: number;
        isNotification?: number;
        languageId?: number;
        resourceCode?: string;
        resourceSelectionType?: BOA.Types.Kernel.CrossMarketing.ResourceSelectionType;
        resourceToOpen?: string;
        state?: number;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userId?: number;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.Customer {
    export const enum CustomerTypeEnum {
        RealPerson = 0,
        CorporatePerson = 1,
        All = 2
    }
    export const enum DataManagementField {
        Email = 1,
        Phone = 2,
        Address = 3,
        Education = 4,
        Profession = 5,
        Car = 6,
        House = 7,
        FavoriteTeam = 8,
        Children = 9,
        EmployerCount = 10
    }
    export const enum PartyType {
        PersonCitizen = 0,
        PersonForeigner = 1,
        Corporate = 2,
        UnDefined = 3
    }
    export const enum PersonTypeEnum {
        RealPerson = 0,
        CorporatePerson = 1,
        All = 2
    }
    export const enum SearchBehaviourType {
        All = 0,
        SearchForRealPerson = 1,
        SearchForCorporate = 2
    }
    export const enum SharedCustomerTypeEnum {
        RequireOneSignature = 1,
        RequireMultiSignature = 2
    }
    export const enum ValidationMessageType {
        PersonInformation = 0,
        PersonError = 1,
        PersonMandatory = 2,
        CustomerRequired = 3,
        CustomerMandatory = 4
    }
    export const enum WebServiceName {
        MernisWebService = 0
    }
    interface AccountComponentCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountClass?: string;
        accountGroupType?: number;
        authorizationType?: number;
        birthDate?: Date;
        birthPlace?: string;
        blackListInfo?: BOA.Types.Kernel.Customer.BlackListCompositeContract;
        branchid?: number;
        branchName?: string;
        channelId?: number;
        citizenship?: number;
        citizenshipCountryId?: number;
        customerClass?: number;
        customerClassCode?: string;
        customerClassName?: string;
        customerid?: number;
        customerName?: string;
        customerName50Characters?: string;
        customerValueSegment?: BOA.Types.Kernel.Customer.CustomerValueSegmentContract;
        defaultAddress?: string;
        defaultEMail?: string;
        defaultEMailUpdateDate?: Date;
        defaultFaxNumber?: string;
        defaultGSM?: string;
        defaultGSMUpdateDate?: Date;
        emailNotExists?: number;
        establishmentDate?: Date;
        establishmentPlace?: string;
        fathersName?: string;
        firmid?: number;
        firmName?: string;
        gender?: number;
        gSMNotExists?: number;
        idNo?: string;
        idSerial?: string;
        individualStatus?: string;
        individualStatusInfo?: string;
        isEmployee?: boolean;
        isFreeZoneCustomer?: boolean;
        isInBlackList?: boolean;
        isInLegitimateProceeding?: boolean;
        isUnder18Age?: boolean;
        mothersName?: string;
        personid?: number;
        personType?: number;
        phoneNumber?: string;
        portfolioClass?: string;
        portfolioOwner?: string;
        portfolioOwnerName?: string;
        privateBankingType?: number;
        profession?: string;
        professionCode?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        share?: number;
        sharedCustomerType?: number;
        status?: number;
        systemRegistrationDate?: Date;
        taxExemption?: boolean;
        taxNumber?: string;
        taxOffice?: string;
        taxRate?: number;
        unitId?: number;
        workGroupId?: number;
    }
    interface AccountComponentCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountClass?: string;
        accountGroupType?: number;
        authorizationType?: number;
        birthDate?: Date;
        birthPlace?: string;
        blackListInfo?: BOA.Types.Kernel.Customer.BlackListCompositeContract;
        branchid?: number;
        branchName?: string;
        channelId?: number;
        citizenship?: number;
        citizenshipCountryId?: number;
        customerClass?: number;
        customerClassCode?: string;
        customerClassName?: string;
        customerid?: number;
        customerName?: string;
        customerName50Characters?: string;
        customerValueSegment?: BOA.Types.Kernel.Customer.CustomerValueSegmentContract;
        defaultAddress?: string;
        defaultEMail?: string;
        defaultEMailUpdateDate?: Date;
        defaultFaxNumber?: string;
        defaultGSM?: string;
        defaultGSMUpdateDate?: Date;
        emailNotExists?: number;
        establishmentDate?: Date;
        establishmentPlace?: string;
        fathersName?: string;
        firmid?: number;
        firmName?: string;
        gender?: number;
        gSMNotExists?: number;
        idNo?: string;
        idSerial?: string;
        individualStatus?: string;
        individualStatusInfo?: string;
        isEmployee?: boolean;
        isFreeZoneCustomer?: boolean;
        isInBlackList?: boolean;
        isInLegitimateProceeding?: boolean;
        isUnder18Age?: boolean;
        mothersName?: string;
        personid?: number;
        personType?: number;
        phoneNumber?: string;
        portfolioClass?: string;
        portfolioOwner?: string;
        portfolioOwnerName?: string;
        privateBankingType?: number;
        profession?: string;
        professionCode?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        share?: number;
        sharedCustomerType?: number;
        status?: number;
        systemRegistrationDate?: Date;
        taxExemption?: boolean;
        taxNumber?: string;
        taxOffice?: string;
        taxRate?: number;
        unitId?: number;
        workGroupId?: number;
    }
    interface AccountNoteContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchName?: string;
        hostIP?: string;
        hostName?: string;
        id?: number;
        note?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AccountNoteContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchName?: string;
        hostIP?: string;
        hostName?: string;
        id?: number;
        note?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AddressContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressId?: number;
        addressSimpleText?: string;
        addressText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        apartmentNumber?: string;
        buildingEntrance?: string;
        buildingId?: number;
        buildingName?: string;
        buildingNumber?: string;
        cityId?: number;
        cityName?: string;
        countryId?: number;
        countryName?: string;
        countryCode?: string;
        countyId?: number;
        countyName?: string;
        districtId?: number;
        districtName?: string;
        flatNo?: number;
        hostIp?: string;
        hostName?: string;
        industrialZoneId?: number;
        industrialZoneName?: string;
        isAutoAdded?: boolean;
        isCardAddress?: boolean;
        isConfirmed?: boolean;
        isDefault?: boolean;
        isSelected?: boolean;
        personId?: number;
        poBoxNo?: string;
        queryDate?: Date;
        siteName?: string;
        streetId?: number;
        streetName?: string;
        systemDate?: Date;
        systemRegistrationDate?: Date;
        townshipId?: number;
        townshipName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
        villageId?: number;
        villageName?: string;
        zipCode?: string;
    }
    interface AddressContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressId?: number;
        addressSimpleText?: string;
        addressText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        apartmentNumber?: string;
        buildingEntrance?: string;
        buildingId?: number;
        buildingName?: string;
        buildingNumber?: string;
        cityId?: number;
        cityName?: string;
        countryId?: number;
        countryName?: string;
        countyId?: number;
        countyName?: string;
        districtId?: number;
        districtName?: string;
        flatNo?: number;
        name1?: string;
        name2?: string;
        stateId?: number;
        stateName?: string;
        republicId?: number;
        republicName?: string;
        provinceId?: number;
        provinceName?: string;
        regionId?: number;
        regionName?: string;
        territoryId?: number;
        territoryName?: string;
        addressLine1?: string;
        addressLine2?: string;
        addressLine3?: string;
        unitTypeId?: string;
        unitTypeName?: string;
        unitNo?: string;
        hostIp?: string;
        hostName?: string;
        industrialZoneId?: number;
        industrialZoneName?: string;
        isAutoAdded?: boolean;
        isCardAddress?: boolean;
        isConfirmed?: boolean;
        isDefault?: boolean;
        isSelected?: boolean;
        personId?: number;
        poBoxNo?: string;
        queryDate?: Date;
        siteName?: string;
        streetId?: number;
        streetName?: string;
        systemDate?: Date;
        systemRegistrationDate?: Date;
        townshipId?: number;
        townshipName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
        villageId?: number;
        villageName?: string;
        zipCode?: string;
        zipCodeId?: string;
    }
    interface AddressPhoneContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressId?: number;
        addressSimpleText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        extensionNumber?: number;
        hostIp?: string;
        hostName?: string;
        isDefault?: boolean;
        phoneAreaCode?: string;
        phoneCountry?: number;
        phoneCountryAreaCode?: number;
        phoneId?: number;
        phoneNumber?: string;
        phoneText?: string;
        phoneTypeId?: number;
        phoneTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface AddressPhoneContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressId?: number;
        addressSimpleText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        extensionNumber?: number;
        hostIp?: string;
        hostName?: string;
        isDefault?: boolean;
        phoneAreaCode?: string;
        phoneCountry?: number;
        phoneCountryAreaCode?: number;
        phoneId?: number;
        phoneNumber?: string;
        phoneText?: string;
        phoneTypeId?: number;
        phoneTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface AdressContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressid?: number;
        addressText?: string;
        addressType?: number;
        apartmentNumber?: string;
        buildingEntrance?: string;
        buildingid?: number;
        buildingName?: string;
        buildingNumber?: string;
        cityid?: number;
        cityName?: string;
        countryid?: number;
        countyid?: number;
        countyName?: string;
        countyRegisterNumber?: number;
        districtid?: number;
        districtName?: string;
        flatNo?: number;
        industrialZoneid?: number;
        industrialZoneName?: string;
        isDefault?: boolean;
        mernisCountyCode?: string;
        personid?: number;
        pOBoxNo?: string;
        siteName?: string;
        stateid?: number;
        stateName?: string;
        streetid?: number;
        streetName?: string;
        townshipid?: number;
        townshipName?: string;
        villageid?: number;
        villageName?: string;
        zipCode?: string;
    }
    interface AdressContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressid?: number;
        addressText?: string;
        addressType?: number;
        apartmentNumber?: string;
        buildingEntrance?: string;
        buildingid?: number;
        buildingName?: string;
        buildingNumber?: string;
        cityid?: number;
        cityName?: string;
        countryid?: number;
        countyid?: number;
        countyName?: string;
        countyRegisterNumber?: number;
        districtid?: number;
        districtName?: string;
        flatNo?: number;
        industrialZoneid?: number;
        industrialZoneName?: string;
        isDefault?: boolean;
        mernisCountyCode?: string;
        personid?: number;
        pOBoxNo?: string;
        siteName?: string;
        stateid?: number;
        stateName?: string;
        streetid?: number;
        streetName?: string;
        townshipid?: number;
        townshipName?: string;
        villageid?: number;
        villageName?: string;
        zipCode?: string;
    }
    interface AllocationContract {
        allocationDayCount?: number;
        allocationStateId?: number;
        approvedMaxMaturity?: number;
        approvedMinMaturity?: number;
        cardType?: string;
        conditionId?: number;
        controlId?: number;
        fiaNo?: number;
        hasValue?: boolean;
        isIndividual?: string;
        isSummary?: boolean;
        limit?: number;
        name?: string;
        proposalId?: number;
        proposalInstallmentCount?: number;
        reasonId?: number;
        result?: number;
        visibleColumnCount?: number;
    }
    interface AllocationContract {
        allocationDayCount?: number;
        allocationStateId?: number;
        approvedMaxMaturity?: number;
        approvedMinMaturity?: number;
        cardType?: string;
        conditionId?: number;
        controlId?: number;
        fiaNo?: number;
        hasValue?: boolean;
        isIndividual?: string;
        isSummary?: boolean;
        limit?: number;
        name?: string;
        proposalId?: number;
        proposalInstallmentCount?: number;
        reasonId?: number;
        result?: number;
        visibleColumnCount?: number;
    }
    interface AuthorizedCustomerInfoContract extends BOA.Common.Types.ContractBase {
        addressText?: string;
        backOfficeUserName?: string;
        birthDate?: Date;
        birthPlace?: string;
        emailAddress?: string;
        fathersName?: string;
        gender?: string;
        gSMAreaCode?: number;
        gSMCountry?: number;
        gSMNumber?: string;
        idDeliveryDate?: Date;
        idDistrict?: string;
        idExpirationDate?: Date;
        idNo?: string;
        idSerial?: string;
        idType?: string;
        jobTitleName?: string;
        mothersMaidenSurname?: string;
        mothersName?: string;
        name?: string;
        personId?: number;
        socialSecurityNumber?: string;
        taxNumber?: string;
        tCKimlikNo?: string;
        userId?: number;
    }
    interface AuthorizedPersonEmailContract extends BOA.Common.Types.ContractBase {
        advertisementEmail?: boolean;
        authorizedPersonId?: number;
        corporatePersonId?: number;
        emailAddress?: string;
        emailId?: number;
        emailType?: number;
        informationEmail?: boolean;
        isDefault?: boolean;
        warningEmail?: boolean;
    }
    interface AuthorizedPersonGsmContract extends BOA.Common.Types.ContractBase {
        advertisementGSM?: boolean;
        authorizedPersonId?: number;
        corporatePersonId?: number;
        gSMAreaCode?: number;
        gSMCountry?: number;
        gsmId?: number;
        gSMNumber?: string;
        gSMType?: number;
        informationGSM?: boolean;
        isDefault?: boolean;
        warningGSM?: boolean;
    }
    interface AuthorizedPersonPhoneContract extends BOA.Common.Types.ContractBase {
        isDefault?: boolean;
        personId?: number;
        phoneAddressType?: number;
        phoneAreaCode?: string;
        phoneCountryAreaCode?: number;
        phoneNumber?: string;
    }
    interface BankTrackingContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        bankRatingList?: BOA.Types.Kernel.Customer.CorrespondentBankRatingContract[];
        currentBankRatingList?: BOA.Types.Kernel.Customer.CorrespondentBankRatingContract[];
        currentFinancialInfoList?: BOA.Types.Kernel.Customer.CorrespondentBankFinancialInfoContract[];
        currentFinancialRatioList?: BOA.Types.Kernel.Customer.CorrespondentBankFinancialRatioContract[];
        financialInfoList?: BOA.Types.Kernel.Customer.CorrespondentBankFinancialInfoContract[];
        financialRatioList?: BOA.Types.Kernel.Customer.CorrespondentBankFinancialRatioContract[];
    }
    interface BlackListCompositeContract extends BOA.Common.Types.ContractBase {
        corporateBlackList?: BOA.Types.Kernel.Customer.BlackListCorporateContract[];
        individualBlackList?: BOA.Types.Kernel.Customer.BlackListIndividualContract[];
        isIndividual?: boolean;
    }
    interface BlackListCompositeContract extends BOA.Common.Types.ContractBase {
        corporateBlackList?: BOA.Types.Kernel.Customer.BlackListCorporateContract[];
        individualBlackList?: BOA.Types.Kernel.Customer.BlackListIndividualContract[];
        isIndividual?: boolean;
    }
    interface BlackListCorporateContract extends BOA.Common.Types.ContractBase {
        blackListName?: string;
        corporateType?: string;
        description?: string;
        informationSource?: string;
        name?: string;
        taxNumber?: string;
    }
    interface BlackListCorporateContract extends BOA.Common.Types.ContractBase {
        blackListName?: string;
        corporateType?: string;
        description?: string;
        informationSource?: string;
        name?: string;
        taxNumber?: string;
    }
    interface BlackListIndividualContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        blackListName?: string;
        description?: string;
        fatherName?: string;
        informationSource?: string;
        motherName?: string;
        name?: string;
        surname?: string;
        taxNumber?: string;
    }
    interface BlackListIndividualContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        blackListName?: string;
        description?: string;
        fatherName?: string;
        informationSource?: string;
        motherName?: string;
        name?: string;
        surname?: string;
        taxNumber?: string;
    }
    interface BoaUserByCustomerIdContract extends BOA.Common.Types.ContractBase {
        activeFrom?: Date;
        assignment?: string;
        branchId?: number;
        branchName?: string;
        customerId?: number;
        defaultChannelId?: number;
        email?: string;
        employeeCase?: string;
        employeeSign?: number;
        fax?: string;
        homePhone?: string;
        initials?: string;
        languageId?: number;
        mobilePhone?: string;
        name?: string;
        printType?: string;
        roleId?: number;
        roleName?: string;
        status?: number;
        userCode?: string;
        userId?: number;
        voip?: string;
        workGroupId?: number;
        workgroupName?: string;
        workPhone?: string;
        workPhoneDirect?: string;
        workPhoneExtension?: string;
    }
    interface BuildingDataContract extends BOA.Common.Types.ContractBase {
        buildingEntrance?: string;
        buildingId?: number;
        buildingName?: string;
        buildingNumber?: string;
        siteName?: string;
        zipCode?: string;
    }
    interface ChangeContract extends BOA.Common.Types.ContractBase {
        information?: string;
        newValue?: string;
        oldValue?: string;
        status?: string;
    }
    interface ChangeTrackBase extends BOA.Common.Types.ContractBase {
        currentTrack?: BOA.Types.Kernel.Customer.ChangeTrackBase;
    }
    interface ChangeTrackBase extends BOA.Common.Types.ContractBase {
        currentTrack?: BOA.Types.Kernel.Customer.ChangeTrackBase;
    }
    interface Constant {
    }
    interface CorporateContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        authorizationType?: number;
        authorizationTypeName?: string;
        closingDate?: Date;
        commercialName?: string;
        corporationLegalType?: number;
        corporationLegalTypeName?: string;
        corporationType?: string;
        corporationTypeName?: string;
        establishmentDate?: Date;
        establishmentPlace?: string;
        establishmentPlaceCode?: number;
        hostIp?: string;
        hostName?: string;
        initialPublicOfferingRatio?: number;
        mainCorporationType?: string;
        personId?: number;
        registeringinstitution?: string;
        registeringinstitutionId?: number;
        registryOfficeCity?: number;
        registryOfficeCounty?: number;
        registryOfficeCountyName?: string;
        sectorId?: string;
        sectorIdCBTR?: string;
        sectorKeyPath?: string;
        sectorName?: string;
        stateShareRatio?: number;
        systemDate?: Date;
        tradeRegistryNo?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporateContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        authorizationType?: number;
        authorizationTypeName?: string;
        closingDate?: Date;
        commercialName?: string;
        corporationLegalType?: number;
        corporationLegalTypeName?: string;
        corporationType?: string;
        corporationTypeName?: string;
        establishmentDate?: Date;
        establishmentPlace?: string;
        establishmentPlaceCode?: number;
        hostIp?: string;
        hostName?: string;
        initialPublicOfferingRatio?: number;
        mainCorporationType?: string;
        personId?: number;
        registeringinstitution?: string;
        registeringinstitutionId?: number;
        registryOfficeCity?: number;
        registryOfficeCounty?: number;
        registryOfficeCountyName?: string;
        sectorId?: string;
        sectorIdCBTR?: string;
        sectorKeyPath?: string;
        sectorName?: string;
        stateShareRatio?: number;
        systemDate?: Date;
        tradeRegistryNo?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporateInfoContract extends BOA.Common.Types.ContractBase {
        authorizationType?: number;
        authorizationTypeName?: string;
        closingDate?: Date;
        commercialName?: string;
        corporationLegalType?: number;
        corporationLegalTypeName?: string;
        corporationType?: string;
        corporationTypeName?: string;
        establishmentDate?: Date;
        establishmentPlace?: string;
        establishmentPlaceCode?: number;
        hostIp?: string;
        hostName?: string;
        mainCorporationType?: string;
        personId?: number;
        registeringinstitution?: string;
        registeringinstitutionId?: number;
        registryOfficeCounty?: number;
        registryOfficeCountyName?: string;
        sectorId?: string;
        sectorIdCBTR?: string;
        sectorKeyPath?: string;
        sectorName?: string;
        systemDate?: Date;
        tradeRegistryNo?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporateOfficerContract extends BOA.Common.Types.ContractBase {
        corporateOfficerId?: number;
        customerId?: number;
        customerName?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        name?: string;
        officerEmailList?: BOA.Types.Kernel.Customer.CorporateOfficerEmailContract[];
        officerPhoneList?: BOA.Types.Kernel.Customer.CorporateOfficerPhoneContract[];
        officerUnitList?: BOA.Types.Kernel.Customer.CorporateOfficerUnitContract[];
        surName?: string;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporateOfficerEmailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        corporateOfficerEmailId?: number;
        corporateOfficerId?: number;
        description?: string;
        emailAddress?: string;
        hostIp?: string;
        hostName?: string;
        isActive?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporateOfficerPhoneContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        areaCode?: number;
        corporateOfficerId?: number;
        corporateOfficerPhoneId?: number;
        countryCode?: number;
        countryId?: number;
        description?: string;
        extensionNumber?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        number?: string;
        phoneText?: string;
        phoneTypeId?: number;
        phoneTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporateOfficerRequest extends BOA.Common.Types.RequestBase {
        corporateOfficerDataContract?: BOA.Types.Kernel.Customer.CorporateOfficerContract;
    }
    interface CorporateOfficerUnitContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        corporateOfficerId?: number;
        unit?: number;
        unitName?: string;
    }
    interface CorporatePersonContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accomodationCountryid?: number;
        authorizationType?: number;
        autoDescription?: string;
        citizenship?: number;
        citizenshipCountryid?: number;
        closingDate?: Date;
        commercialName?: string;
        corporationLegalType?: number;
        corporationType?: string;
        emailNotExists?: boolean;
        establishmentDate?: Date;
        establishmentPlace?: string;
        establishmentPlaceCode?: number;
        gSMNotExists?: boolean;
        language?: number;
        legalName?: string;
        mainCorporationType?: string;
        name?: string;
        pEP?: boolean;
        personid?: number;
        personType?: number;
        recordingBranchid?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        registeringinstitution?: string;
        registeringinstitutionid?: number;
        registryOfficeCity?: number;
        registryOfficeCounty?: number;
        registryOfficeNo?: number;
        sectorid?: string;
        sectoridCBTR?: string;
        sectorName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        stateWFNo?: number;
        status?: number;
        taxNumber?: string;
        taxOffice?: string;
        tradeRegistryNo?: string;
        userDescription?: string;
    }
    interface CorporatePersonInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressList?: BOA.Types.Kernel.Customer.AddressContract[];
        addressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        channelControl?: number;
        corporateInfo?: BOA.Types.Kernel.Customer.CorporateContract;
        currentAddressList?: BOA.Types.Kernel.Customer.AddressContract[];
        currentAddressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        currentEmailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        currentPersonFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        currentPersonFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        customerInfoList?: BOA.Types.Kernel.Customer.PersonCustomerInfoContract[];
        emailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        personFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        personFATCAInfo?: BOA.Types.Kernel.Customer.PersonFATCAContract;
        personFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        personInfo?: BOA.Types.Kernel.Customer.PersonInfoContract;
        registerInfoList?: BOA.Types.Kernel.Customer.RegisterInfoContract[];
    }
    interface CorporatePersonInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressList?: BOA.Types.Kernel.Customer.AddressContract[];
        addressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        channelControl?: number;
        corporateInfo?: BOA.Types.Kernel.Customer.CorporateContract;
        currentAddressList?: BOA.Types.Kernel.Customer.AddressContract[];
        currentAddressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        currentEmailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        currentPersonFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        currentPersonFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        customerInfoList?: BOA.Types.Kernel.Customer.PersonCustomerInfoContract[];
        emailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        personFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        personFATCAInfo?: BOA.Types.Kernel.Customer.PersonFATCAContract;
        personFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        personInfo?: BOA.Types.Kernel.Customer.PersonInfoContract;
        registerInfoList?: BOA.Types.Kernel.Customer.RegisterInfoContract[];
    }
    interface CorporatePersonRichInfoContract extends BOA.Common.Types.ContractBase {
        corporateInfo?: BOA.Types.Kernel.Customer.CorporateInfoContract;
        personInfo?: BOA.Types.Kernel.Customer.PersonInformationContract;
    }
    interface CorrespondentBankActionContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        actionId?: number;
        actionIdOld?: number;
        actionParamCode?: number;
        actionParamDescription?: string;
        correspondentBankActionId?: number;
        personid?: number;
    }
    interface CorrespondentBankBloombergCodeContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        bloombergCode?: string;
        bloombergCodeOld?: string;
        correspondentBankBloombergCodeId?: number;
        hostIP?: string;
        hostName?: string;
        personid?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface CorrespondentBankContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        bankBuildingId?: number;
        bankBuildingName?: string;
        bankTypeId?: number;
        bankTypeName?: string;
        fICode?: number;
        hostIP?: string;
        hostName?: string;
        mainBankAccountNumber?: number;
        paymentTypeId?: number;
        paymentTypeName?: string;
        personid?: number;
        swiftCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorrespondentBankFinancialInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        correspondentBankFinancialInfoId?: number;
        endOfYear?: number;
        fec?: string;
        fecId?: number;
        fecIdOld?: number;
        financials?: string;
        financialsId?: number;
        financialsIdOld?: number;
        firstQuarter?: number;
        fourthQuarter?: number;
        hostIP?: string;
        hostName?: string;
        percentage?: number;
        personid?: number;
        secondQuarter?: number;
        systemDate?: Date;
        thirdQuarter?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
        yearOld?: number;
    }
    interface CorrespondentBankFinancialRatioContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        correspondentBankFinancialRatioId?: number;
        endOfYear?: number;
        financialRatios?: string;
        financialRatiosId?: number;
        financialRatiosIdOld?: number;
        firstQuarter?: number;
        fourthQuarter?: number;
        hostIP?: string;
        hostName?: string;
        personid?: number;
        secondQuarter?: number;
        systemDate?: Date;
        thirdQuarter?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
        yearOld?: number;
    }
    interface CorrespondentBankInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressList?: BOA.Types.Kernel.Customer.AddressContract[];
        addressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        bankTrackingInfo?: BOA.Types.Kernel.Customer.BankTrackingContract;
        bloombergCodeList?: BOA.Types.Kernel.Customer.CorrespondentBankBloombergCodeContract[];
        corporateInfo?: BOA.Types.Kernel.Customer.CorporateContract;
        correspondentBankInfo?: BOA.Types.Kernel.Customer.CorrespondentBankContract;
        currentAddressList?: BOA.Types.Kernel.Customer.AddressContract[];
        currentAddressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        currentBloombergCodeList?: BOA.Types.Kernel.Customer.CorrespondentBankBloombergCodeContract[];
        currentEmailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        currentLeiCodeList?: BOA.Types.Kernel.Customer.CorrespondentBankLeiCodeContract[];
        currentReutersCodeList?: BOA.Types.Kernel.Customer.CorrespondentBankReutersCodeContract[];
        currentSelectedActionList?: BOA.Types.Kernel.Customer.CorrespondentBankActionContract[];
        customerInfoList?: BOA.Types.Kernel.Customer.PersonCustomerInfoContract[];
        emailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        leiCodeList?: BOA.Types.Kernel.Customer.CorrespondentBankLeiCodeContract[];
        personInfo?: BOA.Types.Kernel.Customer.PersonInfoContract;
        registerInfoList?: BOA.Types.Kernel.Customer.RegisterInfoContract[];
        reutersCodeList?: BOA.Types.Kernel.Customer.CorrespondentBankReutersCodeContract[];
        selectedActionList?: BOA.Types.Kernel.Customer.CorrespondentBankActionContract[];
    }
    interface CorrespondentBankLeiCodeContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        correspondentBankLeiCodeId?: number;
        hostIP?: string;
        hostName?: string;
        leiCode?: string;
        leiCodeOld?: string;
        personid?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface CorrespondentBankRatingContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        corporation?: string;
        corporationId?: number;
        corporationIdOld?: number;
        correspondentBankRatingId?: number;
        endOfYear?: string;
        endOfYearId?: number;
        firstQuarter?: string;
        firstQuarterId?: number;
        fourthQuarter?: string;
        fourthQuarterId?: number;
        hostIP?: string;
        hostName?: string;
        personid?: number;
        secondQuarter?: string;
        secondQuarterId?: number;
        systemDate?: Date;
        thirdQuarter?: string;
        thirdQuarterId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
        yearOld?: number;
    }
    interface CorrespondentBankReutersCodeContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        correspondentBankReutersCodeId?: number;
        hostIP?: string;
        hostName?: string;
        personid?: number;
        reutersCode?: string;
        reutersCodeOld?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditLastInstalmentContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        balance?: number;
        branch?: string;
        branchId?: number;
        fec?: number;
        fecCode?: string;
        maturityDate?: Date;
        sequenceNumber?: number;
    }
    interface CreditNextInstalmentContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        balance?: number;
        branch?: string;
        branchId?: number;
        fec?: number;
        fecCode?: string;
        maturityDate?: Date;
        sequenceNumber?: number;
    }
    interface CRMIndividualPersonContract extends BOA.Common.Types.ContractBase {
        accomodationCountryId?: number;
        citizenshipCountryId?: number;
        name?: string;
        personGSMContractList?: BOA.Types.Kernel.Customer.PersonGsmContract[];
        surname?: string;
    }
    interface Customer360AddressContract extends BOA.Common.Types.ContractBase {
        customerAddress?: BOA.Types.Kernel.Customer.CustomerAddressContract;
        faxNumber?: string;
        phoneNumber?: string;
    }
    interface Customer360CommunicationInfoContract extends BOA.Common.Types.ContractBase {
        email?: string;
        gsmNumber?: string;
    }
    interface Customer360CorporateContract extends BOA.Common.Types.ContractBase {
        address?: string;
        cityName?: string;
        eMail?: string;
        faxNumber?: string;
        generalCustomerClass?: string;
        group?: string;
        longName?: string;
        postalCode?: string;
        publicPrivate?: string;
        residence?: string;
        residentOrForeign?: string;
        telephone?: string;
    }
    interface Customer360DebtsTotalContract extends BOA.Common.Types.ContractBase {
        tLBalanceTotal?: number;
        uSDBalanceTotal?: number;
    }
    interface Customer360IndividualInfoContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        deathDate?: Date;
        fathersName?: string;
        gender?: number;
        idCity?: string;
        idCityCode?: number;
        idCounty?: string;
        idCountyCode?: number;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        idExpirationDate?: Date;
        idFamilyOrder?: number;
        idNo?: string;
        idPersonOrder?: number;
        idRegistryNo?: string;
        idSerial?: string;
        idType?: number;
        idTypeInfo?: string;
        idVolume?: number;
        isVerified?: boolean;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        maritalStatusInfo?: string;
        mothersName?: string;
        name?: string;
        personid?: number;
        religion?: number;
        status?: string;
        surname?: string;
    }
    interface Customer360Inquiry extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        inquiryId?: number;
    }
    interface Customer360PanoramaConnectionContract extends BOA.Common.Types.ContractBase {
        target?: BOA.Types.Kernel.Customer.Customer360PanoramaContract;
    }
    interface Customer360PanoramaContract extends BOA.Common.Types.ContractBase {
        accountType?: string;
        age?: number;
        authorizationType?: number;
        authorizationTypeName?: string;
        birthDate?: Date;
        connections?: BOA.Types.Kernel.Customer.Customer360PanoramaConnectionContract[];
        customerClassCode?: string;
        customerClassId?: number;
        customerClassName?: string;
        defaultCustomerId?: number;
        gender?: number;
        genderName?: string;
        isDeletedCustomer?: number;
        level?: number;
        personId?: number;
        personImage?: number[];
        personName?: string;
        personType?: number;
        personTypeName?: string;
        portfolioCode?: string;
        portfolioOwnerName?: string;
        relatedPersonId?: number;
        relation?: string;
        relationId?: number;
        relations?: BOA.Types.Kernel.Customer.Customer360PanoramaContract[];
        share?: number;
        shareHolder?: string;
        valueSegment?: string;
        valueSegmentColor?: string;
    }
    interface Customer360PanoramaRequest extends BOA.Common.Types.RequestBase {
    }
    interface CustomerAccountSearchDialogContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        address?: string;
        birthDate?: number;
        customerAccountLedger?: number;
        customerClass?: string;
        customerType?: string;
        fatherName?: string;
        mainBranchCode?: string;
        shortName?: string;
    }
    interface CustomerAddresContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressSimpleText?: string;
        addressText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        apartmentNumber?: string;
        buildingEntrance?: string;
        buildingId?: number;
        buildingName?: string;
        buildingNumber?: string;
        cityId?: number;
        cityName?: string;
        countryId?: number;
        countryName?: string;
        countyId?: number;
        countyName?: string;
        customerAddressId?: number;
        customerId?: number;
        description?: string;
        districtId?: number;
        districtName?: string;
        flatNumber?: number;
        hostIP?: string;
        hostName?: string;
        industrialZoneId?: number;
        industrialZoneName?: string;
        isActive?: boolean;
        isCardAddress?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        isSelected?: boolean;
        postBoxNumber?: string;
        siteName?: string;
        stateId?: number;
        stateName?: string;
        streetId?: number;
        streetName?: string;
        systemDate?: Date;
        townshipId?: number;
        townshipName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        villageId?: number;
        villageName?: string;
        zipCode?: string;
    }
    interface CustomerAddresContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressSimpleText?: string;
        addressText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        apartmentNumber?: string;
        buildingEntrance?: string;
        buildingId?: number;
        buildingName?: string;
        buildingNumber?: string;
        cityId?: number;
        cityName?: string;
        countryId?: number;
        countryName?: string;
        countyId?: number;
        countyName?: string;
        customerAddressId?: number;
        customerId?: number;
        description?: string;
        districtId?: number;
        districtName?: string;
        flatNumber?: number;
        hostIP?: string;
        hostName?: string;
        industrialZoneId?: number;
        industrialZoneName?: string;
        isActive?: boolean;
        isCardAddress?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        isSelected?: boolean;
        postBoxNumber?: string;
        siteName?: string;
        stateId?: number;
        stateName?: string;
        streetId?: number;
        streetName?: string;
        systemDate?: Date;
        townshipId?: number;
        townshipName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        villageId?: number;
        villageName?: string;
        zipCode?: string;
    }
    interface CustomerAddressContract extends BOA.Common.Types.ContractBase {
        addressId?: number;
        addressText?: string;
        addressType?: number;
        addressTypeInfo?: string;
        isDefault?: boolean;
        isSelected?: boolean;
    }
    interface CustomerAdkRoleContract {
        adkRole?: number;
        adkRoleDescription?: string;
        customerId?: number;
    }
    interface CustomerAdkRoleContract {
        adkRole?: number;
        adkRoleDescription?: string;
        customerId?: number;
    }
    interface CustomerByPhoneContract extends BOA.Common.Types.ContractBase {
        birthdate?: Date;
        birthPlace?: string;
        customerid?: number;
        customerName?: string;
        fathersName?: string;
        isDefault?: boolean;
        mothersName?: string;
        phoneType?: string;
    }
    interface CustomerChangeContract {
        changeList?: BOA.Types.Kernel.Customer.ChangeContract[];
        name?: string;
        recordingDate?: Date;
        recordingUser?: string;
        registerNumber?: string;
    }
    interface CustomerClassContract extends BOA.Common.Types.ContractBase {
        customerClassCode?: string;
        customerClassId?: number;
        customerClassName?: string;
        isActive?: number;
        languageId?: number;
        organizationClassId?: number;
        portfolioClass?: number;
    }
    interface CustomerClassRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        dataContract?: BOA.Types.Kernel.Customer.CustomerClassContract;
    }
    interface CustomerCommunicationInfoContract extends BOA.Common.Types.ContractBase {
        customerEmailContractList?: BOA.Types.Kernel.Customer.CustomerEmailContract[];
        customerGsmNumberContractList?: BOA.Types.Kernel.Customer.CustomerGsmNumberContract[];
    }
    interface CustomerConfidentialContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        correspondenceDetailId?: number;
        customerConfidentialId?: number;
        customerConfidentialType?: number;
        customerConfidentialTypeName?: string;
        customerId?: number;
        endDate?: Date;
        hostName?: string;
        identiyNumber?: string;
        isActive?: boolean;
        isConfidentialCustomer?: boolean;
        isNew?: boolean;
        note?: string;
        personName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerConfidentialInfoContract extends BOA.Common.Types.ContractBase {
        customerConfidentialInfo?: BOA.Types.Kernel.Customer.CustomerConfidentialContract;
        customerConfidentialResourceMapInfoList?: BOA.Types.Kernel.Customer.CustomerConfidentialResourceMapInfoContract;
    }
    interface CustomerConfidentialResourceMapContract extends BOA.Common.Types.ContractBase {
        customerConfidentialId?: number;
        fieldList?: string;
        hostName?: string;
        isActive?: boolean;
        resourceCode?: string;
        resourceId?: number;
        resourceName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerConfidentialResourceMapInfoContract extends BOA.Common.Types.ContractBase {
        currentCustomerConfidentialResourceMapInfoList?: BOA.Types.Kernel.Customer.CustomerConfidentialResourceMapContract[];
        customerConfidentialResourceMapInfoList?: BOA.Types.Kernel.Customer.CustomerConfidentialResourceMapContract[];
    }
    interface CustomerContract extends BOA.Common.Types.ContractBase {
        autoDescription?: string;
        briefCustomerName?: string;
        customerid?: number;
        customerName?: string;
        firmid?: number;
        reasonToPassive?: number;
        recordingBranchid?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        securityFund?: boolean;
        sharedCustomerType?: number;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        stateWFNo?: number;
        status?: number;
        taxExemption?: boolean;
        taxRate?: number;
        userDescription?: string;
    }
    interface CustomerContract extends BOA.Common.Types.ContractBase {
        autoDescription?: string;
        briefCustomerName?: string;
        customerid?: number;
        customerName?: string;
        firmid?: number;
        reasonToPassive?: number;
        recordingBranchid?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        securityFund?: boolean;
        sharedCustomerType?: number;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        stateWFNo?: number;
        status?: number;
        taxExemption?: boolean;
        taxRate?: number;
        userDescription?: string;
    }
    interface CustomerCRMInfoCarModelContract extends BOA.Common.Types.ContractBase {
        carBrandId?: number;
        carBrandText?: string;
        carModelId?: string;
        carModelText?: string;
        carModelYear?: number;
        personId?: number;
        updSystemDate?: Date;
    }
    interface CustomerCRMInfoCarTypeContract extends BOA.Common.Types.ContractBase {
        carType?: number;
        carTypeText?: string;
        personId?: number;
        updateCarType?: number;
        updateCarTypeText?: string;
        updSystemDate?: Date;
    }
    interface CustomerCRMInfoChildrenTypeContract extends BOA.Common.Types.ContractBase {
        childrenType?: number;
        childrenTypeText?: string;
        personId?: number;
        updateChildrenType?: number;
        updateChildrenTypeText?: string;
        updSystemDate?: Date;
    }
    interface CustomerCRMInfoContract extends BOA.Common.Types.ContractBase {
        carBrandId?: number;
        carBrandName?: string;
        carModelId?: string;
        carModelName?: string;
        carModelYear?: number;
        carType?: number;
        childrenType?: number;
        favoriteTeamType?: number;
        hostName?: string;
        houseType?: number;
        personId?: number;
        smartPhoneType?: number;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface CustomerCRMInfoContract extends BOA.Common.Types.ContractBase {
        carBrandId?: number;
        carBrandName?: string;
        carModelId?: string;
        carModelName?: string;
        carModelYear?: number;
        carType?: number;
        childrenType?: number;
        favoriteTeamType?: number;
        hostName?: string;
        houseType?: number;
        personId?: number;
        smartPhoneType?: number;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface CustomerCRMInfoFavoriteTeamTypeContract extends BOA.Common.Types.ContractBase {
        favoriteTeamType?: number;
        favoriteTeamTypeText?: string;
        personId?: number;
        updateFavoriteTeamType?: number;
        updateFavoriteTeamTypeText?: string;
        updSystemDate?: Date;
    }
    interface CustomerCRMInfoHouseTypeContract extends BOA.Common.Types.ContractBase {
        houseType?: number;
        houseTypeText?: string;
        personId?: number;
        updateHouseType?: number;
        updateHouseTypeText?: string;
        updSystemDate?: Date;
    }
    interface CustomerCRMInformationContract extends BOA.Common.Types.ContractBase {
        foreignTradeInformation?: BOA.Types.Kernel.Customer.ForeignTradeInformationContract;
    }
    interface CustomerDetailInformationContract extends BOA.Common.Types.ContractBase {
        backOfficeUserName?: string;
        birthDate?: Date;
        birthPlace?: string;
        branchid?: number;
        branchName?: string;
        bringingProductId?: number;
        citizenship?: number;
        customerid?: number;
        customerName?: string;
        customerType?: string;
        fathersName?: string;
        firmid?: number;
        gender?: string;
        idNo?: string;
        idSerial?: string;
        idType?: string;
        isEmployee?: number;
        jobTitleName?: string;
        lastSchoolGraduated?: string;
        maritalStatus?: number;
        mothersMaidenSurname?: string;
        mothersName?: string;
        musteriTuru?: string;
        personid?: number;
        personType?: string;
        portfolioClass?: string;
        portfolioOwner?: string;
        retailUserHasOTP?: number;
        smallBusiness?: number;
        socialSecurityNumber?: string;
        tCKimlikNo?: string;
        userId?: number;
    }
    interface CustomerEmailContract extends BOA.Common.Types.ContractBase {
        email?: string;
        emailId?: number;
        isDefault?: boolean;
        personId?: number;
        personName?: string;
        systemDate?: Date;
        updateDate?: Date;
    }
    interface CustomerFaxContract extends BOA.Common.Types.ContractBase {
        addressId?: number;
        fax?: string;
        isDefault?: boolean;
    }
    interface CustomerGroupContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        customerName?: string;
        customerTypeName?: string;
        description?: string;
        groupId?: number;
        groupName?: string;
        mainCustomerId?: number;
        mainGroupId?: number;
    }
    interface CustomerGsmNumberContract extends BOA.Common.Types.ContractBase {
        gsmId?: number;
        gsmNumber?: string;
        isDefault?: boolean;
        systemDate?: Date;
        updateDate?: Date;
    }
    interface CustomerGsmNumberDetailContract extends BOA.Common.Types.ContractBase {
        gSMAreaCode?: number;
        gSMCountry?: number;
        gSMNumber?: string;
        gSMType?: number;
        isDefault?: boolean;
        personid?: number;
    }
    interface CustomerInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        accomodation?: number;
        authorizationType?: number;
        birthDate?: Date;
        birthPlace?: string;
        branchid?: number;
        branchName?: string;
        channelControl?: number;
        citizenship?: number;
        currentCustomerToPersonList?: BOA.Types.Kernel.Customer.CustomerToPersonContract[];
        customerAddressList?: BOA.Types.Kernel.Customer.CustomerAddresContract[];
        customerAdkRole?: BOA.Types.Kernel.Customer.CustomerAdkRoleContract;
        customerClass?: number;
        customerEmailList?: BOA.Types.Kernel.Customer.CustomerMailContract[];
        customerInfo?: BOA.Types.Kernel.Customer.CustomerInformationContract;
        customerid?: number;
        customerName?: string;
        customerPhoneList?: BOA.Types.Kernel.Customer.CustomerPhonesContract[];
        customerProfileInfo?: BOA.Types.Kernel.Customer.CustomerProfileContract;
        customerSyncInfo?: BOA.Types.Kernel.Customer.CustomerSyncContract;
        customerToPersonList?: BOA.Types.Kernel.Customer.CustomerToPersonContract[];
        defaultAddress?: string;
        defaultEMail?: string;
        defaultGSM?: string;
        fathersName?: string;
        faxNumber?: string;
        firmid?: number;
        firmName?: string;
        ghbhsDate?: Date;
        hostName?: string;
        isEmployee?: boolean;
        isForeginPersonExists?: boolean;
        isFreeZoneCustomer?: boolean;
        mothersName?: string;
        personid?: number;
        personType?: number;
        phoneNumber?: string;
        portfolioClass?: string;
        portfolioOwner?: string;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        registerInfoList?: BOA.Types.Kernel.Customer.RegisterInfoContract[];
        securityFund?: boolean;
        sharedCustomerType?: number;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        taxExemption?: boolean;
        taxNumber?: string;
        taxOffice?: string;
        taxRate?: number;
        userDescription?: string;
        workGroupId?: number;
    }
    interface CustomerInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        accomodation?: number;
        authorizationType?: number;
        birthDate?: Date;
        birthPlace?: string;
        branchid?: number;
        branchName?: string;
        channelControl?: number;
        citizenship?: number;
        currentCustomerToPersonList?: BOA.Types.Kernel.Customer.CustomerToPersonContract[];
        customerAddressList?: BOA.Types.Kernel.Customer.CustomerAddresContract[];
        customerAdkRole?: BOA.Types.Kernel.Customer.CustomerAdkRoleContract;
        customerClass?: number;
        customerEmailList?: BOA.Types.Kernel.Customer.CustomerMailContract[];
        customerInfo?: BOA.Types.Kernel.Customer.CustomerInformationContract;
        customerid?: number;
        customerName?: string;
        customerPhoneList?: BOA.Types.Kernel.Customer.CustomerPhonesContract[];
        customerProfileInfo?: BOA.Types.Kernel.Customer.CustomerProfileContract;
        customerSyncInfo?: BOA.Types.Kernel.Customer.CustomerSyncContract;
        customerToPersonList?: BOA.Types.Kernel.Customer.CustomerToPersonContract[];
        defaultAddress?: string;
        defaultEMail?: string;
        defaultGSM?: string;
        fathersName?: string;
        faxNumber?: string;
        firmid?: number;
        firmName?: string;
        ghbhsDate?: Date;
        hostName?: string;
        isEmployee?: boolean;
        isForeginPersonExists?: boolean;
        isFreeZoneCustomer?: boolean;
        mothersName?: string;
        personid?: number;
        personType?: number;
        phoneNumber?: string;
        portfolioClass?: string;
        portfolioOwner?: string;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        registerInfoList?: BOA.Types.Kernel.Customer.RegisterInfoContract[];
        securityFund?: boolean;
        sharedCustomerType?: number;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        taxExemption?: boolean;
        taxNumber?: string;
        taxOffice?: string;
        taxRate?: number;
        userDescription?: string;
        workGroupId?: number;
    }
    interface CustomerInfoListByNameContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        customerid?: number;
        customerName?: string;
        emailAddress?: string;
        fathersName?: string;
        mothersName?: string;
        taxNumber?: string;
    }
    interface CustomerInformationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        activityLicenseNumber?: string;
        autoDescription?: string;
        checkManuel?: boolean;
        customerId?: number;
        customerName?: string;
        customerScore?: number;
        firmId?: number;
        firmName?: string;
        freeZoneCode?: string;
        ghbhsDate?: Date;
        hasATMDemand?: string;
        hostName?: string;
        isAbsentPerson?: boolean;
        isFreeZoneCustomer?: boolean;
        licenseEndDate?: Date;
        reasonToPassive?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        securityFund?: boolean;
        sharedCustomerType?: number;
        sharedCustomerTypeName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        status?: number;
        taxExemption?: boolean;
        taxRate?: number;
        updateHostName?: string;
        userDescription?: string;
    }
    interface CustomerInformationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        activityLicenseNumber?: string;
        autoDescription?: string;
        checkManuel?: boolean;
        customerId?: number;
        customerName?: string;
        customerScore?: number;
        firmId?: number;
        firmName?: string;
        freeZoneCode?: string;
        ghbhsDate?: Date;
        hasATMDemand?: string;
        hostName?: string;
        isAbsentPerson?: boolean;
        isFreeZoneCustomer?: boolean;
        licenseEndDate?: Date;
        reasonToPassive?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        securityFund?: boolean;
        sharedCustomerType?: number;
        sharedCustomerTypeName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        status?: number;
        taxExemption?: boolean;
        taxRate?: number;
        updateHostName?: string;
        userDescription?: string;
    }
    interface CustomerMailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        customerEmailId?: number;
        customerId?: number;
        customerNoticeAllowanceList?: BOA.Types.Kernel.Customer.CustomerNoticeAllowanceContract[];
        description?: string;
        emailAddress?: string;
        hostIp?: string;
        hostName?: string;
        isActive?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerMailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        customerEmailId?: number;
        customerId?: number;
        customerNoticeAllowanceList?: BOA.Types.Kernel.Customer.CustomerNoticeAllowanceContract[];
        description?: string;
        emailAddress?: string;
        hostIp?: string;
        hostName?: string;
        isActive?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerNoticeAllowanceContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        allowanceTypeId?: number;
        allowanceTypeName?: string;
        customerId?: number;
        customerNoticeAllowanceId?: number;
        hostIP?: string;
        hostName?: string;
        informationId?: number;
        isAllowance?: boolean;
        noticeTypeId?: number;
        noticeTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerNoticeAllowanceContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        allowanceTypeId?: number;
        allowanceTypeName?: string;
        customerId?: number;
        customerNoticeAllowanceId?: number;
        hostIP?: string;
        hostName?: string;
        informationId?: number;
        isAllowance?: boolean;
        noticeTypeId?: number;
        noticeTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerPaneContract extends BOA.Common.Types.ContractBase {
        accountNoteList?: BOA.Types.Kernel.Customer.AccountNoteContract[];
        alertCount?: number;
        creditLastInstalmentList?: BOA.Types.Kernel.Customer.CreditLastInstalmentContract[];
        creditNextInstalmentList?: BOA.Types.Kernel.Customer.CreditNextInstalmentContract[];
        customerRelationList?: BOA.Types.Kernel.Customer.CustomerRelationsContract[];
        debtListByFEC?: any;
        hasCustomerDebt?: boolean;
        hasCustomerPayment?: boolean;
        isCustomerInBlackList?: boolean;
    }
    interface CustomerParameterContract extends BOA.Common.Types.ContractBase {
        caption?: string;
        dataType?: string;
        defaultValue?: string;
        displayText?: string;
        fieldDescription?: string;
        fieldID?: string;
        rowOrder?: number;
        setID?: string;
        valueDescription?: string;
        valueText?: string;
    }
    interface CustomerPhoneByCustomerIdContract extends BOA.Common.Types.ContractBase {
        addressid?: number;
        isDefault?: boolean;
        personid?: number;
        phoneAddressType?: number;
        phoneAreaCode?: string;
        phoneCountryAreaCode?: number;
        phoneNumber?: string;
        type?: number;
    }
    interface CustomerPhoneContract extends BOA.Common.Types.ContractBase {
        addressId?: number;
        isDefault?: boolean;
        phone?: string;
    }
    interface CustomerPhonesContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressSimpleText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        areaCode?: number;
        countryCode?: number;
        countryId?: number;
        countryName?: string;
        customerAddressId?: number;
        customerId?: number;
        customerNoticeAllowanceList?: BOA.Types.Kernel.Customer.CustomerNoticeAllowanceContract[];
        customerPhoneId?: number;
        description?: string;
        extensionNumber?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        number?: string;
        phoneText?: string;
        phoneTypeId?: number;
        phoneTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerPhonesContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressSimpleText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        areaCode?: number;
        countryCode?: number;
        countryId?: number;
        countryName?: string;
        customerAddressId?: number;
        customerId?: number;
        customerNoticeAllowanceList?: BOA.Types.Kernel.Customer.CustomerNoticeAllowanceContract[];
        customerPhoneId?: number;
        description?: string;
        extensionNumber?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: boolean;
        isDefault?: boolean;
        isNew?: boolean;
        number?: string;
        phoneText?: string;
        phoneTypeId?: number;
        phoneTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerProfileContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        branchId?: number;
        branchName?: string;
        bringingProductId?: number;
        customerAgency?: string;
        customerAgencyType?: number;
        customerClass?: number;
        customerClassName?: string;
        customerId?: number;
        hostIp?: string;
        hostName?: string;
        isBranchIdExist?: boolean;
        isPortfolioClassExist?: boolean;
        isPortfolioOwnerExist?: boolean;
        ownerWorkGroupId?: number;
        portfolioClass?: string;
        portfolioClassName?: string;
        portfolioOwner?: string;
        systemDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerProfileContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        branchId?: number;
        branchName?: string;
        bringingProductId?: number;
        customerAgency?: string;
        customerAgencyType?: number;
        customerClass?: number;
        customerClassName?: string;
        customerId?: number;
        hostIp?: string;
        hostName?: string;
        isBranchIdExist?: boolean;
        isPortfolioClassExist?: boolean;
        isPortfolioOwnerExist?: boolean;
        ownerWorkGroupId?: number;
        portfolioClass?: string;
        portfolioClassName?: string;
        portfolioOwner?: string;
        systemDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerRelationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        authorizationType?: string;
        authorizationTypeId?: number;
        controlStatusTypeDescription?: string;
        controlStatusTypeId?: number;
        customerId?: number;
        customerName?: string;
        customerRelationId?: number;
        description?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isDefault?: boolean;
        oPMBranchNote?: string;
        personId?: number;
        personName?: string;
        relationshipCategoryId?: number;
        relationshipType?: string;
        relationshipTypeId?: number;
        relationTransactionList?: BOA.Types.Kernel.Customer.RelationTransactionContract[];
        startDate?: Date;
        systemDate?: Date;
        transactionAuthorizationType?: string;
        transactionAuthorizationTypeId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        defaultText?: string;
    }
    interface CustomerRelationHierarchyContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        customerId?: number;
        customerRelationHierarchyId?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        relatedCustomerId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerRelationHierarchyWithAddressContract extends BOA.Common.Types.ContractBase {
        addressSimpleText?: string;
        addressText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        apartmentNumber?: string;
        buildingEntrance?: string;
        buildingId?: number;
        buildingName?: string;
        buildingNumber?: string;
        cityId?: number;
        cityName?: string;
        countryId?: number;
        countryName?: string;
        countyId?: number;
        countyName?: string;
        customerId?: number;
        customerName?: string;
        customerRelationHierarchyId?: number;
        districtId?: number;
        districtName?: string;
        flatNumber?: number;
        industrialZoneId?: number;
        industrialZoneName?: string;
        postBoxNumber?: string;
        relatedCustomerId?: number;
        relatedCustomerName?: string;
        siteName?: string;
        stateId?: number;
        stateName?: string;
        streetId?: number;
        streetName?: string;
        townshipId?: number;
        townshipName?: string;
        villageId?: number;
        villageName?: string;
        zipCode?: string;
    }
    interface CustomerRelationsContract extends BOA.Common.Types.ContractBase {
        authorizationTypeName?: string;
        personid?: number;
        personName?: string;
        relation?: string;
        share?: number;
    }
    interface CustomerRoleContract extends BOA.Common.Types.ContractBase {
        appendType?: number;
        customerid?: number;
        description?: string;
        endDate?: Date;
        roleid?: number;
        startDate?: Date;
    }
    interface CustomerScoringContract extends BOA.Common.Types.ContractBase {
        customerScoringDetailList?: BOA.Types.Kernel.Customer.CustomerScoringDetailContract[];
        customerScoringId?: number;
        entityId?: number;
        entityType?: number;
        guidId?: any;
        hostName?: string;
        systemDate?: Date;
        totalScore?: number;
        userName?: string;
    }
    interface CustomerScoringDetailContract extends BOA.Common.Types.ContractBase {
        customerScoringDetailId?: number;
        customerScoringId?: number;
        hostName?: string;
        score?: number;
        scoringParameterType?: number;
        scoringValue?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface CustomerSegmentContract extends BOA.Common.Types.ContractBase {
        bHGSegment?: number;
        cardSegment?: number;
        creditSegment?: number;
        customerNo?: number;
        foneCollectionSegment?: string;
        mainSegment?: string;
        potential?: string;
    }
    interface CustomerSegmentScoreContract extends BOA.Common.Types.ContractBase {
        bureauScore?: number;
        efficiency?: number;
        rFMScore?: number;
        segmentNumber?: number;
        valueSegment?: string;
        valueTendency?: string;
    }
    interface CustomerStateInformationContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        customerId?: number;
        passwordRetryCount?: number;
        personId?: number;
        retailUserHasOTP?: number;
        userId?: number;
        userName?: string;
        userPersonId?: number;
        userStateTypeId?: number;
    }
    interface CustomerSyncContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        personId?: number;
        recordingTime?: Date;
    }
    interface CustomerSyncContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        personId?: number;
        recordingTime?: Date;
    }
    interface CustomerToPersonContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        customerId?: number;
        customerRelationGroupList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        hostIp?: string;
        hostName?: string;
        isDefault?: boolean;
        oldPersonId?: string;
        personId?: number;
        personName?: string;
        personTaxNumber?: string;
        personType?: number;
        personTypeName?: string;
        share?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerToPersonContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        customerId?: number;
        customerRelationGroupList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        hostIp?: string;
        hostName?: string;
        isDefault?: boolean;
        oldPersonId?: string;
        personId?: number;
        personName?: string;
        personTaxNumber?: string;
        personType?: number;
        personTypeName?: string;
        share?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerTransferProcessContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        fromBranchId?: number;
        fromUnitId?: number;
        resourceCode?: string;
        toBranchId?: number;
        toUnitId?: number;
        tranDate?: Date;
    }
    interface CustomerType {
    }
    interface CustomerValueSegmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        churn?: number;
        valueSegment?: string;
        valueSegmentColor?: string;
        valueSegmentDescription?: string;
    }
    interface CustomerValueSegmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        churn?: number;
        valueSegment?: string;
        valueSegmentColor?: string;
        valueSegmentDescription?: string;
    }
    interface CustomerWebAddressContract extends BOA.Common.Types.ContractBase {
        autoDescription?: string;
        endDate?: Date;
        isDefault?: boolean;
        personid?: number;
        startDate?: Date;
        userDescription?: string;
        webAddress?: string;
        webAddressid?: number;
    }
    interface DeadCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        deathDate?: Date;
        description?: string;
        hostName?: string;
        ownerAccountNumber?: number;
        ownerType?: number;
        personId?: number;
        sourceId?: string;
        sourceType?: number;
        status?: string;
        userCode?: string;
    }
    interface FirmInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        currentFinancialInfoList?: BOA.Types.Kernel.Customer.PersonFinancialInfoContract[];
        currentFirmList?: BOA.Types.Kernel.Customer.IndividualFirmContract[];
        financialInfoList?: BOA.Types.Kernel.Customer.PersonFinancialInfoContract[];
        firmList?: BOA.Types.Kernel.Customer.IndividualFirmContract[];
    }
    interface ForeignPersonAddressQueryContract extends BOA.Common.Types.ContractBase {
        addressQueryState?: number;
        channelId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        queryId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ForeignTradeInformationContract extends BOA.Common.Types.ContractBase {
        currentForeignTradeProcurementRelationList?: BOA.Types.Kernel.Customer.ForeignTradeRelationContract[];
        currentForeignTradeRatioList?: BOA.Types.Kernel.Customer.ForeignTradeRatioContract[];
        currentForeignTradeRevenueRelationList?: BOA.Types.Kernel.Customer.ForeignTradeRelationContract[];
        foreignTradeProcurementRelationList?: BOA.Types.Kernel.Customer.ForeignTradeRelationContract[];
        foreignTradeRatioList?: BOA.Types.Kernel.Customer.ForeignTradeRatioContract[];
        foreignTradeRevenueRelationList?: BOA.Types.Kernel.Customer.ForeignTradeRelationContract[];
    }
    interface ForeignTradeRatioContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        foreignTradeRatioId?: number;
        foreignTradeTypeId?: number;
        hostIP?: string;
        hostName?: string;
        ratio?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ForeignTradeRelationContract extends BOA.Common.Types.ContractBase {
        countryId?: number;
        countryName?: string;
        customerId?: number;
        endDate?: Date;
        foreignTradeRelationId?: number;
        foreignTradeRelationTypeId?: number;
        hostIP?: string;
        hostName?: string;
        ratio?: number;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GroupInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        currentGroupDetailList?: BOA.Types.Kernel.Customer.RoleDetailsContract[];
        currentGroupList?: BOA.Types.Kernel.Customer.RoleContract[];
        groupDetailList?: BOA.Types.Kernel.Customer.RoleDetailsContract[];
        groupList?: BOA.Types.Kernel.Customer.RoleContract[];
    }
    interface Helper {
    }
    interface IndividualContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        birthDate?: Date;
        birthPlace?: string;
        deathDate?: Date;
        fathersName?: string;
        gender?: number;
        genderName?: string;
        hostIp?: string;
        hostName?: string;
        idCity?: string;
        idCityCode?: number;
        idCounty?: string;
        idCountyCode?: number;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        identityCardSerialNumber?: string;
        identityCardType?: number;
        idExpirationDate?: Date;
        idFamilyOrder?: number;
        idNo?: string;
        idPersonOrder?: number;
        idRegistryNo?: string;
        idSerial?: string;
        idType?: number;
        idTypeName?: string;
        idVolume?: number;
        isVerified?: boolean;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        maritalStatusName?: string;
        mernisUpdateDate?: Date;
        mothersName?: string;
        name?: string;
        personId?: number;
        queryDate?: Date;
        religion?: number;
        status?: string;
        surname?: string;
        systemDate?: Date;
        tCKKDeliveryReason?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        birthDate?: Date;
        birthPlace?: string;
        deathDate?: Date;
        fathersName?: string;
        gender?: number;
        genderName?: string;
        hostIp?: string;
        hostName?: string;
        idCity?: string;
        idCityCode?: number;
        idCounty?: string;
        idCountyCode?: number;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        identityCardSerialNumber?: string;
        identityCardType?: number;
        idExpirationDate?: Date;
        idFamilyOrder?: number;
        idNo?: string;
        idPersonOrder?: number;
        idRegistryNo?: string;
        idSerial?: string;
        idType?: number;
        idTypeName?: string;
        idVolume?: number;
        isVerified?: boolean;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        maritalStatusName?: string;
        mernisUpdateDate?: Date;
        mothersName?: string;
        name?: string;
        personId?: number;
        queryDate?: Date;
        religion?: number;
        status?: string;
        surname?: string;
        systemDate?: Date;
        tCKKDeliveryReason?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualEducationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        hostIp?: string;
        hostName?: string;
        lastSchoolGraduated?: string;
        level?: number;
        levelName?: string;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualEducationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        hostIp?: string;
        hostName?: string;
        lastSchoolGraduated?: string;
        level?: number;
        levelName?: string;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualEducationInfoContract extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        lastSchoolGraduated?: string;
        level?: number;
        levelName?: string;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualEducationInfoContract extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        lastSchoolGraduated?: string;
        level?: number;
        levelName?: string;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualFirmContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        authorizationTypeId?: number;
        authorizationTypeName?: string;
        chamberLicenced?: number;
        chamberLicencedName?: string;
        endDate?: Date;
        firmId?: number;
        firmName?: string;
        firmTypeId?: number;
        firmTypeName?: string;
        hostIp?: string;
        hostName?: string;
        licenceDate?: Date;
        licenceNumber?: string;
        personId?: number;
        registryOfficeCity?: number;
        registryOfficeCounty?: number;
        registryOfficeCountyName?: string;
        sectorId?: string;
        sectorIdCBTR?: string;
        sectorName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualFirmInfoContract extends BOA.Common.Types.ContractBase {
        authorizationTypeId?: number;
        authorizationTypeName?: string;
        chamberLicenced?: number;
        endDate?: Date;
        firmId?: number;
        firmName?: string;
        firmTypeId?: number;
        firmTypeName?: string;
        hostIp?: string;
        hostName?: string;
        licenceDate?: Date;
        licenceNumber?: string;
        personId?: number;
        registryOfficeCity?: number;
        registryOfficeCounty?: number;
        registryOfficeCountyName?: string;
        sectorId?: string;
        sectorIdCBTR?: string;
        sectorName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualInfoContract extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        mothersMaidenSurname?: string;
        personId?: number;
        residenceStatus?: number;
        systemDate?: Date;
        title?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualInfoContract extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        mothersMaidenSurname?: string;
        personId?: number;
        residenceStatus?: number;
        systemDate?: Date;
        title?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualinfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        hiddenMothersMaidenSurname?: string;
        hostIp?: string;
        hostName?: string;
        mothersMaidenSurname?: string;
        personId?: number;
        residenceStatus?: number;
        systemDate?: Date;
        title?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualinfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        hiddenMothersMaidenSurname?: string;
        hostIp?: string;
        hostName?: string;
        mothersMaidenSurname?: string;
        personId?: number;
        residenceStatus?: number;
        systemDate?: Date;
        title?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualOccupationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        employerName?: string;
        employerSector?: number;
        employerSectorName?: string;
        employerTaxNumber?: string;
        employmentType?: number;
        employmentTypeName?: string;
        hostIp?: string;
        hostName?: string;
        jobTitle?: number;
        jobTitleName?: string;
        personId?: number;
        profession?: number;
        professionName?: string;
        socialSecurityinstitution?: number;
        socialSecurityNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualOccupationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        employerName?: string;
        employerSector?: number;
        employerSectorName?: string;
        employerTaxNumber?: string;
        employmentType?: number;
        employmentTypeName?: string;
        hostIp?: string;
        hostName?: string;
        jobTitle?: number;
        jobTitleName?: string;
        personId?: number;
        profession?: number;
        professionName?: string;
        socialSecurityinstitution?: number;
        socialSecurityNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualOccupationInfoContract extends BOA.Common.Types.ContractBase {
        employerName?: string;
        employerSector?: number;
        employerSectorName?: string;
        employerTaxNumber?: string;
        employmentType?: number;
        employmentTypeName?: string;
        hostIp?: string;
        hostName?: string;
        jobTitle?: number;
        jobTitleName?: string;
        personId?: number;
        profession?: number;
        professionName?: string;
        socialSecurityinstitution?: number;
        socialSecurityNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualOccupationInfoContract extends BOA.Common.Types.ContractBase {
        employerName?: string;
        employerSector?: number;
        employerSectorName?: string;
        employerTaxNumber?: string;
        employmentType?: number;
        employmentTypeName?: string;
        hostIp?: string;
        hostName?: string;
        jobTitle?: number;
        jobTitleName?: string;
        personId?: number;
        profession?: number;
        professionName?: string;
        socialSecurityinstitution?: number;
        socialSecurityNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IndividualPersonContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accomodationCountryid?: number;
        autoDescription?: string;
        birthDate?: Date;
        birthPlace?: string;
        citizenship?: number;
        citizenshipCountryid?: number;
        deathDate?: Date;
        emailNotExists?: boolean;
        fathersName?: string;
        firstName?: string;
        gender?: number;
        gSMNotExists?: boolean;
        idCity?: string;
        idCityCode?: number;
        idCounty?: string;
        idCountyCode?: number;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        idExpirationDate?: Date;
        idFamilyOrder?: number;
        idNo?: string;
        idPersonOrder?: number;
        idRegistryNo?: string;
        idSerial?: string;
        idType?: number;
        idVolume?: number;
        isVerified?: boolean;
        language?: number;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        mothersName?: string;
        name?: string;
        pEP?: boolean;
        personid?: number;
        personType?: number;
        recordingBranchid?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        religion?: number;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        stateWFNo?: number;
        status?: number;
        surname?: string;
        taxNumber?: string;
        taxOffice?: string;
        userDescription?: string;
    }
    interface IndividualPersonInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressEditClicked?: boolean;
        addressList?: BOA.Types.Kernel.Customer.AddressContract[];
        addressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        channelControl?: number;
        currentAddressList?: BOA.Types.Kernel.Customer.AddressContract[];
        currentAddressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        currentDisabledList?: BOA.Types.Kernel.Customer.PersonDisabledContract[];
        currentEmailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        currentGsmList?: BOA.Types.Kernel.Customer.PersonGsmContract[];
        currentPersonFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        currentPersonFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        customerCRMInfo?: BOA.Types.Kernel.Customer.CustomerCRMInfoContract;
        customerInfoList?: BOA.Types.Kernel.Customer.PersonCustomerInfoContract[];
        educationInfo?: BOA.Types.Kernel.Customer.IndividualEducationContract;
        emailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        gsmList?: BOA.Types.Kernel.Customer.PersonGsmContract[];
        individualDetail?: BOA.Types.Kernel.Customer.IndividualinfoContract;
        individualInfo?: BOA.Types.Kernel.Customer.IndividualContract;
        isAbsentTCKN_VKN?: boolean;
        occupationInfo?: BOA.Types.Kernel.Customer.IndividualOccupationContract;
        personDisabledList?: BOA.Types.Kernel.Customer.PersonDisabledContract[];
        personFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        personFATCAInfo?: BOA.Types.Kernel.Customer.PersonFATCAContract;
        personFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        personInfo?: BOA.Types.Kernel.Customer.PersonInfoContract;
        personInfoDetail?: BOA.Types.Kernel.Customer.PersonDetailContract;
        registerInfoList?: BOA.Types.Kernel.Customer.RegisterInfoContract[];
    }
    interface IndividualPersonInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressEditClicked?: boolean;
        addressList?: BOA.Types.Kernel.Customer.AddressContract[];
        addressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        channelControl?: number;
        currentAddressList?: BOA.Types.Kernel.Customer.AddressContract[];
        currentAddressPhoneList?: BOA.Types.Kernel.Customer.AddressPhoneContract[];
        currentDisabledList?: BOA.Types.Kernel.Customer.PersonDisabledContract[];
        currentEmailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        currentGsmList?: BOA.Types.Kernel.Customer.PersonGsmContract[];
        currentPersonFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        currentPersonFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        customerCRMInfo?: BOA.Types.Kernel.Customer.CustomerCRMInfoContract;
        customerInfoList?: BOA.Types.Kernel.Customer.PersonCustomerInfoContract[];
        educationInfo?: BOA.Types.Kernel.Customer.IndividualEducationContract;
        emailList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        gsmList?: BOA.Types.Kernel.Customer.PersonGsmContract[];
        individualDetail?: BOA.Types.Kernel.Customer.IndividualinfoContract;
        individualInfo?: BOA.Types.Kernel.Customer.IndividualContract;
        isAbsentTCKN_VKN?: boolean;
        occupationInfo?: BOA.Types.Kernel.Customer.IndividualOccupationContract;
        personDisabledList?: BOA.Types.Kernel.Customer.PersonDisabledContract[];
        personFATCADetailList?: BOA.Types.Kernel.Customer.PersonFATCADetailContract[];
        personFATCAInfo?: BOA.Types.Kernel.Customer.PersonFATCAContract;
        personFundSourceList?: BOA.Types.Kernel.Customer.PersonFundSourceContract[];
        personInfo?: BOA.Types.Kernel.Customer.PersonInfoContract;
        personInfoDetail?: BOA.Types.Kernel.Customer.PersonDetailContract;
        registerInfoList?: BOA.Types.Kernel.Customer.RegisterInfoContract[];
    }
    interface IndividualPersonInfoWithDetailContract extends BOA.Common.Types.ContractBase {
        addressCityid?: number;
        addressCountryCode?: string;
        addressText?: string;
        addressZipCode?: string;
        birthCountryCode?: string;
        birthDate?: Date;
        birthPlace?: string;
        citizenshipCountryCode?: string;
        emailAddress?: string;
        fathersName?: string;
        faxAreaCode?: string;
        faxCountry?: number;
        faxNumber?: string;
        gender?: number;
        gSMAreaCode?: number;
        gSMCountry?: number;
        gSMNumber?: string;
        idCityCode?: number;
        idCountyCode?: number;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        idFamilyOrder?: number;
        idPersonOrder?: number;
        idVolume?: number;
        isPersonnel?: number;
        language?: number;
        maritalStatus?: number;
        mernisCountyId?: number;
        mernisIdCountyCode?: number;
        mothersName?: string;
        name?: string;
        personType?: number;
        phoneAreaCode?: string;
        phoneCountry?: number;
        phoneNumber?: string;
        serialNo?: string;
        surname?: string;
        taxNumber?: string;
    }
    interface IndividualPersonRichInfoContract extends BOA.Common.Types.ContractBase {
        educationInfo?: BOA.Types.Kernel.Customer.IndividualEducationInfoContract;
        individualDetail?: BOA.Types.Kernel.Customer.IndividualInfoContract;
        individualInfo?: BOA.Types.Kernel.Customer.PersonIndividualContract;
        occupationInfo?: BOA.Types.Kernel.Customer.IndividualOccupationInfoContract;
        personInfo?: BOA.Types.Kernel.Customer.PersonInformationContract;
    }
    interface IndividualPersonRichInfoContract extends BOA.Common.Types.ContractBase {
        educationInfo?: BOA.Types.Kernel.Customer.IndividualEducationInfoContract;
        individualDetail?: BOA.Types.Kernel.Customer.IndividualInfoContract;
        individualInfo?: BOA.Types.Kernel.Customer.PersonIndividualContract;
        occupationInfo?: BOA.Types.Kernel.Customer.IndividualOccupationInfoContract;
        personInfo?: BOA.Types.Kernel.Customer.PersonInformationContract;
    }
    interface PersonIdentificationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        city?: string;
        countryId?: number;
        expirationDate?: Date;
        identificationType?: number;
        idNumber?: number;
        issueDate?: Date;
        personId?: number;
        personIdentificationId?: number;
        identificationTypeName?: string;
        countryName?: string;
    }
    interface PersonIdentificationInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        identificationList?: BOA.Types.Kernel.Customer.PersonIdentificationContract[];
        currentIdentificationList?: BOA.Types.Kernel.Customer.PersonIdentificationContract[];
    }

    interface IndividualRelationInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        adkRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        currentADKRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        currentDelegateRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        currentKinshipRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        currentOtherRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        currentPartnershipRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        delegateRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        kinshipRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        otherRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
        partnershipRelationList?: BOA.Types.Kernel.Customer.PersonRelationContract[];
    }
    interface IndividualStatusContract extends BOA.Common.Types.ContractBase {
        customerName?: string;
        individualStatus?: string;
    }
    interface LookupDataContract extends BOA.Common.Types.ContractBase {
        dataId?: number;
        dataName?: string;
        param?: number;
        paramName?: string;
    }
    interface MernisAddressContract extends BOA.Common.Types.ContractBase {
        addressNumber?: number;
        addressText?: string;
        addressType?: number;
        city?: string;
        cityCode?: number;
        country?: string;
        county?: string;
        countyCode?: number;
        dataSide?: number;
        district?: string;
        districtCode?: number;
        existsOnPerson?: boolean;
        identityNumber?: string;
        innerDoorNo?: string;
        isAddressUncertain?: boolean;
        outerDoorNo?: string;
        personAddressContract?: BOA.Types.Kernel.Customer.AddressContract;
        street?: string;
        streetCode?: number;
        systemRegistrationDate?: Date;
        townShip?: string;
        townShipId?: number;
        village?: string;
        villageCode?: number;
        villageRegistryNo?: number;
    }
    interface MernisAddressQueryContract extends BOA.Common.Types.ContractBase {
        isCurrentAddress?: number;
        isDefaultPerson?: boolean;
        personAddressContract?: BOA.Types.Kernel.Customer.AddressContract;
        personid?: number;
        personMernisAddressContract?: BOA.Types.Kernel.Customer.AddressContract;
        personName?: string;
        queryResponseState?: number;
    }
    interface MernisContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        city?: string;
        cityCode?: number;
        county?: string;
        countyCode?: number;
        dataSide?: number;
        deathDate?: Date;
        deathPlace?: string;
        deliveryDate?: Date;
        deliveryPlace?: string;
        deliveryPlaceCode?: number;
        deliveryReason?: string;
        district?: string;
        districtCode?: number;
        familyOrder?: number;
        fatherName?: string;
        fatherSurname?: string;
        gender?: number;
        genderDefinition?: string;
        identityCardNumber?: number;
        identityCardSerial?: string;
        identityCardSerialNumber?: string;
        identityCardType?: number;
        identityNumber?: string;
        maidenhoodSurname?: string;
        maritalStatus?: string;
        motherName?: string;
        motherSurname?: string;
        name?: string;
        personOrder?: number;
        registryNo?: number;
        religion?: string;
        status?: string;
        surname?: string;
        systemRegistrationDate?: Date;
        tCKKDeliveryReason?: string;
    }
    interface MernisForCorporateContract extends BOA.Common.Types.ContractBase {
        commercialName?: string;
        establishmentDate?: Date;
        establishmentPlace?: string;
        establishmentPlaceCode?: number;
        executiveOfficeAddress?: BOA.Types.Kernel.Customer.MernisAddressContract;
        taxNumber?: string;
        taxOfficeName?: string;
    }
    interface MernisForeignerContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceId?: number;
        citizenship?: string;
        citizenshipId?: number;
        dataSide?: number;
        deathDate?: Date;
        egmPersonId?: string;
        endDateUncertainDescription?: string;
        esEgmPersonId?: string;
        fatherEgmPersonId?: string;
        fatherIdentityNumber?: string;
        fatherName?: string;
        gender?: number;
        genderDefinition?: string;
        identityNumber?: string;
        maritalStatus?: string;
        motherEgmPersonId?: string;
        motherIdentityNumber?: string;
        motherName?: string;
        name?: string;
        partnerIdentityNumber?: string;
        permitBeginDate?: Date;
        permitEndDate?: Date;
        residenceAddress?: string;
        residenceAddressCityCode?: number;
        residenceAddressCityName?: string;
        residenceAddressCountyName?: string;
        residenceMaturityCode?: number;
        residenceMaturityName?: string;
        residencePermitNo?: string;
        residencePermitterCityCode?: number;
        residencePermitterCityName?: string;
        statusDescription?: string;
        surname?: string;
        systemRegistrationDate?: Date;
    }
    interface MernisForTreasuryData extends BOA.Common.Types.ContractBase {
        corporateContractList?: BOA.Types.Kernel.Customer.MernisForCorporateContract[];
        dataPartyType?: BOA.Types.Kernel.Customer.PartyType;
        foreignerContract?: BOA.Types.Kernel.Customer.MernisForeignerContract;
        isTaxNumberExist?: boolean;
    }
    interface MernisParameterContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthDay?: number;
        birthMonth?: number;
        birthPlace?: string;
        birthYear?: number;
        citizenshipId?: number;
        fatherName?: string;
        gender?: number;
        motherName?: string;
        name?: string;
        surname?: string;
    }
    interface MernisParameterContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthDay?: number;
        birthMonth?: number;
        birthPlace?: string;
        birthYear?: number;
        citizenshipId?: number;
        fatherName?: string;
        gender?: number;
        motherName?: string;
        name?: string;
        surname?: string;
    }
    interface MernisQueryContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        mernisQueryId?: number;
        personid?: number;
        queryResponseState?: number;
        queryState?: number;
        queryTypeId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OccupationContract extends BOA.Common.Types.ContractBase {
        code?: string;
        description?: string;
        hostName?: string;
        parentCode?: string;
        parentDescription?: string;
        parentType?: string;
        systemDate?: Date;
        type?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OccupationTypes {
    }
    interface PersonAddressPhoneContract extends BOA.Common.Types.ContractBase {
        addressId?: number;
        addressSimpleText?: string;
        addressTypeId?: number;
        addressTypeName?: string;
        extensionNumber?: number;
        hostIp?: string;
        hostName?: string;
        isDefault?: boolean;
        phoneAreaCode?: string;
        phoneCountry?: number;
        phoneCountryAreaCode?: number;
        phoneId?: number;
        phoneNumber?: string;
        phoneText?: string;
        phoneTypeId?: number;
        phoneTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface PersonChangeContract extends BOA.Common.Types.ContractBase {
        changeList?: BOA.Types.Kernel.Customer.ChangeContract[];
        customerId?: string;
        name?: string;
        recordingDate?: Date;
        recordingUser?: string;
        registerNumber?: string;
        taxNumber?: string;
    }
    interface PersonContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accomodationCountryid?: number;
        accomodationCountryName?: string;
        autoDescription?: string;
        birthDate?: Date;
        citizenship?: number;
        citizenshipCountryid?: number;
        citizenshipCountryName?: string;
        date?: Date;
        fatherName?: string;
        firstName?: string;
        isEmployee?: boolean;
        language?: number;
        lastName?: string;
        motherName?: string;
        name?: string;
        pEP?: boolean;
        personid?: number;
        personType?: number;
        recordingBranchid?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: string;
        stateWFNo?: string;
        status?: string;
        taxNumber?: string;
        taxOffice?: string;
        userDescription?: string;
    }
    interface PersonContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accomodationCountryid?: number;
        accomodationCountryName?: string;
        autoDescription?: string;
        birthDate?: Date;
        citizenship?: number;
        citizenshipCountryid?: number;
        citizenshipCountryName?: string;
        date?: Date;
        fatherName?: string;
        firstName?: string;
        isEmployee?: boolean;
        language?: number;
        lastName?: string;
        motherName?: string;
        name?: string;
        pEP?: boolean;
        personid?: number;
        personType?: number;
        recordingBranchid?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: string;
        stateWFNo?: string;
        status?: string;
        taxNumber?: string;
        taxOffice?: string;
        userDescription?: string;
    }
    interface PersonCRMInfoContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        crmType?: number;
        crmTypeName?: string;
        crmTypeParameter?: number;
        crmTypeValue?: string;
        hostIP?: string;
        hostName?: string;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonCRMInformationContract extends BOA.Common.Types.ContractBase {
        currentPersonCRMInfo?: BOA.Types.Kernel.Customer.PersonCRMInfoContract[];
        personCRMInfo?: BOA.Types.Kernel.Customer.PersonCRMInfoContract[];
    }
    interface PersonCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountType?: string;
        branchId?: number;
        branchName?: string;
        customerClass?: string;
        customerName?: string;
        customerType?: string;
        firmId?: number;
        ownerWorkGroupId?: number;
        share?: number;
        status?: number;
        statusName?: string;
    }
    interface PersonCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountType?: string;
        branchId?: number;
        branchName?: string;
        customerClass?: string;
        customerName?: string;
        customerType?: string;
        firmId?: number;
        ownerWorkGroupId?: number;
        share?: number;
        status?: number;
        statusName?: string;
    }
    interface PersonDetailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        birthCountryId?: number;
        birthCountryName?: string;
        personId?: number;
        secondAccomodationCountryId?: number;
        secondAccomodationCountryName?: string;
        secondCitizenshipCountryId?: number;
        secondCitizenshipCountryName?: string;
        thirdCitizenshipCountryId?: number;
        thirdCitizenshipCountryName?: string;
    }
    interface PersonDetailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        birthCountryId?: number;
        birthCountryName?: string;
        personId?: number;
        secondAccomodationCountryId?: number;
        secondAccomodationCountryName?: string;
        secondCitizenshipCountryId?: number;
        secondCitizenshipCountryName?: string;
        thirdCitizenshipCountryId?: number;
        thirdCitizenshipCountryName?: string;
    }
    interface PersonDisabledContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        disabledId?: number;
        disabledTypeId?: number;
        disabledTypeName?: string;
        disabledTypeShortName?: string;
        hostName?: string;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonDisabledContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        disabledId?: number;
        disabledTypeId?: number;
        disabledTypeName?: string;
        disabledTypeShortName?: string;
        hostName?: string;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonEmailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        emailAddress?: string;
        emailId?: number;
        hostIp?: string;
        hostName?: string;
        isAdvertisementEmail?: boolean;
        isDefault?: boolean;
        isEFTEmail?: boolean;
        isInformationEmail?: boolean;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface PersonEmailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        emailAddress?: string;
        emailId?: number;
        hostIp?: string;
        hostName?: string;
        isAdvertisementEmail?: boolean;
        isDefault?: boolean;
        isEFTEmail?: boolean;
        isInformationEmail?: boolean;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface PersonFATCAContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        accountNumber?: number;
        accountOpenDate?: Date;
        differenceDate?: number;
        establishmentDate?: Date;
        exception?: boolean;
        exceptionDescription?: string;
        exceptionId?: number;
        fATCAOpenAndClose?: boolean;
        fATCAStatusIsExists?: boolean;
        isRegisterNumberMandatory?: boolean;
        parameterIsNull?: boolean;
        personFATCAStatus?: number;
        personFATCAStatusName?: string;
        personFATCAType?: number;
        personFATCATypeDescription?: string;
        personFATCATypeName?: string;
        personId?: number;
        personType?: number;
        registerNumber?: string;
        systemDate?: Date;
        updateSystemDate?: Date;
    }
    interface PersonFATCAContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        accountNumber?: number;
        accountOpenDate?: Date;
        differenceDate?: number;
        establishmentDate?: Date;
        exception?: boolean;
        exceptionDescription?: string;
        exceptionId?: number;
        fATCAOpenAndClose?: boolean;
        fATCAStatusIsExists?: boolean;
        isRegisterNumberMandatory?: boolean;
        parameterIsNull?: boolean;
        personFATCAStatus?: number;
        personFATCAStatusName?: string;
        personFATCAType?: number;
        personFATCATypeDescription?: string;
        personFATCATypeName?: string;
        personId?: number;
        personType?: number;
        registerNumber?: string;
        systemDate?: Date;
        updateSystemDate?: Date;
    }
    interface PersonFATCADetailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        fATCAReasonDescription?: string;
        fATCAReasonId?: number;
        isActive?: boolean;
        personId?: number;
    }
    interface PersonFATCADetailContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        fATCAReasonDescription?: string;
        fATCAReasonId?: number;
        isActive?: boolean;
        personId?: number;
    }
    interface PersonFATCAExceptionContract extends BOA.Common.Types.ContractBase {
        exceptionDescription?: string;
        exceptionId?: number;
        exceptionIsActive?: boolean;
    }
    interface PersonFinancialContract extends BOA.Common.Types.ContractBase {
        employerCount?: number;
        financialBalance?: number;
        financialDate?: Date;
        financialInfoId?: number;
        firmId?: number;
        firmName?: string;
        netSellIncome?: number;
        personId?: number;
    }
    interface PersonFinancialInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        employerCount?: number;
        financialBalance?: number;
        financialDate?: Date;
        financialInfoId?: number;
        firmId?: number;
        firmName?: string;
        hostIp?: string;
        hostName?: string;
        netSellIncome?: number;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonFundSourceContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        fundSourceType?: number;
        fundSourceTypeName?: string;
        hostName?: string;
        personFundSourceId?: number;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonFundSourceContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        fundSourceType?: number;
        fundSourceTypeName?: string;
        hostName?: string;
        personFundSourceId?: number;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonGsmContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        autoDescription?: string;
        endDate?: Date;
        gsmAreaCode?: number;
        gsmCountry?: number;
        gsmCountryAreaCode?: number;
        gsmCountryId?: number;
        gsmId?: number;
        gsmNumber?: string;
        gsmText?: string;
        gsmType?: number;
        hostIp?: string;
        hostName?: string;
        isADKGsm?: boolean;
        isAdvertisementGsm?: boolean;
        isDefault?: boolean;
        isEFTGsm?: boolean;
        isInformationGsm?: boolean;
        isWarningGsm?: boolean;
        personId?: number;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface PersonGsmContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        autoDescription?: string;
        endDate?: Date;
        gsmAreaCode?: number;
        gsmCountry?: number;
        gsmCountryAreaCode?: number;
        gsmCountryId?: number;
        gsmId?: number;
        gsmNumber?: string;
        gsmText?: string;
        gsmType?: number;
        hostIp?: string;
        hostName?: string;
        isADKGsm?: boolean;
        isAdvertisementGsm?: boolean;
        isDefault?: boolean;
        isEFTGsm?: boolean;
        isInformationGsm?: boolean;
        isWarningGsm?: boolean;
        personId?: number;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface PersonGsmContractold extends BOA.Common.Types.ContractBase {
        autoDescription?: string;
        endDate?: Date;
        gsmAreaCode?: number;
        gsmCountry?: number;
        gsmId?: number;
        gsmNumber?: string;
        gsmType?: number;
        isAdvertisementGsm?: boolean;
        isDefault?: boolean;
        isInformationGsm?: boolean;
        isWarningGsm?: boolean;
        personId?: number;
        startDate?: Date;
        userDescription?: string;
    }
    interface PersonIndividualContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        deathDate?: Date;
        fathersName?: string;
        gender?: number;
        genderName?: string;
        hostIp?: string;
        hostName?: string;
        idCity?: string;
        idCityCode?: number;
        idCounty?: string;
        idCountyCode?: number;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        idExpirationDate?: Date;
        idFamilyOrder?: number;
        idNo?: string;
        idPersonOrder?: number;
        idRegistryNo?: string;
        idSerial?: string;
        idType?: number;
        idTypeName?: string;
        idVolume?: number;
        isVerified?: boolean;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        maritalStatusName?: string;
        mernisUpdateDate?: Date;
        mothersName?: string;
        name?: string;
        personId?: number;
        queryDate?: Date;
        religion?: number;
        status?: string;
        surname?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonIndividualContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        deathDate?: Date;
        fathersName?: string;
        gender?: number;
        genderName?: string;
        hostIp?: string;
        hostName?: string;
        idCity?: string;
        idCityCode?: number;
        idCounty?: string;
        idCountyCode?: number;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        idExpirationDate?: Date;
        idFamilyOrder?: number;
        idNo?: string;
        idPersonOrder?: number;
        idRegistryNo?: string;
        idSerial?: string;
        idType?: number;
        idTypeName?: string;
        idVolume?: number;
        isVerified?: boolean;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        maritalStatusName?: string;
        mernisUpdateDate?: Date;
        mothersName?: string;
        name?: string;
        personId?: number;
        queryDate?: Date;
        religion?: number;
        status?: string;
        surname?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        accomodation?: number;
        accomodationCountryId?: number;
        accomodationCountryName?: string;
        autoDescription?: string;
        boutiqueAgent?: string;
        branchId?: number;
        channelId?: number;
        citizenship?: number;
        citizenshipCountryId?: number;
        citizenshipCountryName?: string;
        emailNotExists?: boolean;
        gSMNotExists?: boolean;
        hostName?: string;
        isAbsentPerson?: boolean;
        isPEPInfoChanged?: boolean;
        language?: number;
        name?: string;
        pEP?: boolean;
        personId?: number;
        personScore?: number;
        personType?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        status?: number;
        taxNumber?: string;
        taxOffice?: string;
        updateHostName?: string;
        userDescription?: string;
    }
    interface PersonInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        accomodation?: number;
        accomodationCountryId?: number;
        accomodationCountryName?: string;
        autoDescription?: string;
        boutiqueAgent?: string;
        branchId?: number;
        channelId?: number;
        citizenship?: number;
        citizenshipCountryId?: number;
        citizenshipCountryName?: string;
        emailNotExists?: boolean;
        gSMNotExists?: boolean;
        hostName?: string;
        isAbsentPerson?: boolean;
        isPEPInfoChanged?: boolean;
        language?: number;
        name?: string;
        pEP?: boolean;
        personId?: number;
        personScore?: number;
        personType?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        status?: number;
        taxNumber?: string;
        taxOffice?: string;
        updateHostName?: string;
        userDescription?: string;
    }
    interface PersonInformationContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accomodationCountryId?: number;
        accomodationCountryName?: string;
        autoDescription?: string;
        citizenship?: number;
        citizenshipCountryId?: number;
        citizenshipCountryName?: string;
        emailNotExists?: boolean;
        gSMNotExists?: boolean;
        hostName?: string;
        isAbsentPerson?: boolean;
        language?: number;
        name?: string;
        pEP?: boolean;
        personId?: number;
        personType?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        status?: number;
        taxNumber?: string;
        taxOffice?: string;
        updateHostName?: string;
        userDescription?: string;
    }
    interface PersonInformationContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accomodationCountryId?: number;
        accomodationCountryName?: string;
        autoDescription?: string;
        citizenship?: number;
        citizenshipCountryId?: number;
        citizenshipCountryName?: string;
        emailNotExists?: boolean;
        gSMNotExists?: boolean;
        hostName?: string;
        isAbsentPerson?: boolean;
        language?: number;
        name?: string;
        pEP?: boolean;
        personId?: number;
        personType?: number;
        recordingBranchId?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        status?: number;
        taxNumber?: string;
        taxOffice?: string;
        updateHostName?: string;
        userDescription?: string;
    }
    interface PersonNotificationContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        customerId?: number;
        hostIP?: string;
        hostName?: string;
        isFaxActive?: boolean;
        isMailActive?: boolean;
        isPushActive?: boolean;
        isSmsActive?: boolean;
        isTextActive?: boolean;
        isVisible?: boolean;
        minAmount?: number;
        personId?: number;
        personNotificationId?: number;
        personTypeId?: number;
        systemDate?: Date;
        transactionDetailId?: number;
        transactionDetailName?: string;
        transactionGroupId?: number;
        transactionGroupName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface PersonRelationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressPhone?: string;
        authorizationTypeId?: number;
        authorizationTypeName?: string;
        emailAddress?: string;
        endDate?: Date;
        gsmNumber?: string;
        hostIp?: string;
        hostName?: string;
        informationGsmId?: number;
        isEFTInformation?: boolean;
        isEmployee?: boolean;
        isInformationGsm?: boolean;
        isPasswordGsm?: boolean;
        passwordGsmId?: number;
        personId?: number;
        personnelRegisterNo?: number;
        relationId?: number;
        relationReverseId?: number;
        relationshipCategoryId?: number;
        relationshipCategoryName?: string;
        relationshipReverseTypeId?: number;
        relationshipTypeId?: number;
        relationshipTypeName?: string;
        reverseRecord?: number;
        share?: number;
        startDate?: Date;
        systemDate?: Date;
        toCustomerId?: number;
        toPersonId?: number;
        toPersonName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface PersonRelationContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        addressPhone?: string;
        authorizationTypeId?: number;
        authorizationTypeName?: string;
        emailAddress?: string;
        endDate?: Date;
        gsmNumber?: string;
        hostIp?: string;
        hostName?: string;
        informationGsmId?: number;
        isEFTInformation?: boolean;
        isEmployee?: boolean;
        isInformationGsm?: boolean;
        isPasswordGsm?: boolean;
        passwordGsmId?: number;
        personId?: number;
        personnelRegisterNo?: number;
        relationId?: number;
        relationReverseId?: number;
        relationshipCategoryId?: number;
        relationshipCategoryName?: string;
        relationshipReverseTypeId?: number;
        relationshipTypeId?: number;
        relationshipTypeName?: string;
        reverseRecord?: number;
        share?: number;
        startDate?: Date;
        systemDate?: Date;
        toCustomerId?: number;
        toPersonId?: number;
        toPersonName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userDescription?: string;
        userName?: string;
    }
    interface PersonRelationsContract extends BOA.Common.Types.ContractBase {
        authorizationType?: number;
        autoDescription?: string;
        endDate?: Date;
        permissionType?: string;
        personid?: number;
        relationid?: number;
        relationshipName?: string;
        relationshipTypeid?: number;
        roleid?: number;
        share?: number;
        startDate?: Date;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        stateWFNo?: number;
        toPersonid?: number;
        toPersonName?: string;
        userDescription?: string;
    }
    interface PersonType {
        name?: string;
        value?: number;
    }
    interface PhoneNumberContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        areaCode?: number;
        country?: number;
        extensionNumber?: number;
        isDefault?: boolean;
        personid?: number;
        phoneNumber?: string;
        phoneType?: string;
    }
    interface ProductAndLimitContract extends BOA.Common.Types.ContractBase {
        bSApplicationNo?: number;
        campaignCode?: string;
        cardPayment?: string;
        currencyUnit?: string;
        defermentCount?: number;
        id?: number;
        installmentCount?: number;
        limit?: number;
        membershipPayment?: string;
        prefixCode?: string;
        pricingGroup?: string;
        pricingGroupCode?: string;
        printingPrimacy?: number;
        productCode?: string;
        productGroupCardControl?: string;
        productName?: string;
        riskGroupCode?: string;
        styleCode?: string;
        supplCashLimitFactor?: number;
        supplLimitFactor?: number;
        userCode?: string;
    }
    interface RegisterInfoContract extends BOA.Common.Types.ContractBase {
        registerBranchName?: string;
        registerDate?: Date;
        registerUserName?: string;
        state?: string;
        updateBranchName?: string;
        updateDate?: Date;
        updateUserName?: string;
    }
    interface RegisterInfoContract extends BOA.Common.Types.ContractBase {
        registerBranchName?: string;
        registerDate?: Date;
        registerUserName?: string;
        state?: string;
        updateBranchName?: string;
        updateDate?: Date;
        updateUserName?: string;
    }
    interface RelationTransactionContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        relationId?: number;
        relationTransactionId?: number;
        systemDate?: Date;
        transactionCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RetailUserHasOTPContract extends BOA.Common.Types.ContractBase {
        customerid?: number;
        retailUserHasOTP?: number;
    }
    interface RoleContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        appendType?: number;
        customerId?: number;
        description?: string;
        endDate?: Date;
        groupId?: number;
        groupName?: string;
        hostIp?: string;
        hostName?: string;
        personId?: number;
        roleId?: number;
        roleName?: string;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RoleDetailsContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        customerId?: number;
        detailId?: number;
        detailName?: string;
        detailValue?: string;
        hostIp?: string;
        hostName?: string;
        personId?: number;
        roleId?: number;
        roleName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ScoringValueContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        corporate?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        individual?: number;
        paramCode?: string;
        paramDescription?: string;
        paramType?: number;
        smallBusiness?: number;
        systemDate?: Date;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ScoringValueInfoContract extends BOA.Types.Kernel.Customer.ChangeTrackBase {
        currentValueInfoList?: BOA.Types.Kernel.Customer.ScoringValueContract[];
        valueInfoList?: BOA.Types.Kernel.Customer.ScoringValueContract[];
    }
    interface SelectedIdentityAndAddressInformations extends BOA.Common.Types.ContractBase {
        addressText?: string;
        dataPartyType?: BOA.Types.Kernel.Customer.PartyType;
        date?: Date;
        fatherName?: string;
        isTaxNumberExists?: boolean;
        name?: string;
        place?: string;
        selectedIdentityNumber?: string;
        selectedMernisAddress?: BOA.Types.Kernel.Customer.MernisAddressContract;
        selectedMernisForeignerInfo?: BOA.Types.Kernel.Customer.MernisForeignerContract;
        selectedMernisInfo?: BOA.Types.Kernel.Customer.MernisContract;
        selectedMernisInfoForCorporate?: BOA.Types.Kernel.Customer.MernisForCorporateContract;
    }
    interface ServiceHealthCheckContract extends BOA.Common.Types.ContractBase {
        isAlive?: boolean;
        lastCheckTime?: Date;
        serviceName?: string;
    }
    interface TaxPayerContract extends BOA.Common.Types.ContractBase {
        birthCity?: string;
        birthCountry?: string;
        birthDate?: string;
        birthPlace?: string;
        corporateType?: string;
        fatherName?: string;
        identityNumber?: string;
        name?: string;
        nationality?: string;
        potential?: string;
        surname?: string;
        taxNumber?: string;
    }
    interface ValidationMessageCollection {
        validationMessageList?: BOA.Types.Kernel.Customer.ValidationMessageContract[];
    }
    interface ValidationMessageContract {
        messageType?: BOA.Types.Kernel.Customer.ValidationMessageType;
        text?: string;
    }
    interface WalkInCustomerTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        fec?: number;
        hostName?: string;
        isReverse?: number;
        resourceCode?: string;
        reverseBusinessKey?: number;
        systemDate?: Date;
        tLAmount?: number;
        tranBranchId?: number;
        tranDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        walkInCustomerId?: string;
        walkInCustomerIdType?: number;
    }
}
declare namespace BOA.Types.Kernel.Customer.Constant {
    export const enum NoticeType {
        Gsm = 1,
        Email = 2
    }
}
declare namespace BOA.Types.Kernel.Customer.Helper {
    export const enum CustomerClass {
        Corporate = 1,
        Business = 3,
        Special = 5,
        FinancialInstitutions = 6,
        Micro = 8,
        IndividualNew = 13,
        Tradesman = 14,
        MiddleBigBusiness = 17,
        CommercialNew = 18,
        Individual = 2
    }
    export const enum MandatoryType {
        Yes = 1,
        No = 2
    }
    export const enum PrivateBankingType {
        NotPrivateBankingCustomer = 1,
        PrivateBankingSegmentCustomer = 2,
        PrivateBankingGroupCustomer = 3
    }
    export const enum ScoringEntityType {
        Customer = 1,
        Person = 2
    }
    interface AccomodationType {
    }
    interface AddressTypeName {
    }
    export const enum AuthorizationTypeId {
        Instructions = 1,
        WithDrawal = 2,
        AutorizedForADK = 3,
        All = 99,
    }
    export const enum Constant {
        RecordingChannel = 21,
        TRAccodomationId = 1,
        EnglishLanguageId = 2,
        CorrespondentBankPaymentType = 1,
        addressQuestionedFailed = 6,
        addressQuestionedFromMernis = 1,
        foreignAddressWillBeQuestioned = 0,
        addressWasQuestioned = 1,
        isCurrentAddress = 1,
        isNotCurrentAddress = 0,
        USGsmCountryId = 65,
        NoCountryId = 0,
        MinimumWorkerAge = 15,
        CorrespondentBankType = 2,
        MinimumAdultAge = 18
    }
    interface AutoDescriptionType {
    }
    interface ChangeInformation {
    }
    interface CitizenShipType {
    }

    interface CorporationTypes {
    }
    interface CreditRiskGroupSyncType {
    }
    interface CRMTypes {
    }
    interface CustomerConfidentialType {
    }
    interface CustomerProduct {
    }
    interface CustomerRelationControlStatusTypes {
    }
    interface EmployerSector {
    }
    interface EmploymentType {
    }
    interface ForeignTradeRelationType {
    }
    interface ForeignTradeTypes {
    }
    interface GroupApproveLevel {
    }
    interface IdTypeStatus {
    }
    interface IndividualStatus {
    }
    interface MainCorporationType {
    }
    interface MainGroupType {
    }
    interface MaritalStatus {
    }
    interface ParameterSave {
    }
    interface PersonFATCADocument {
    }
    interface PersonFATCAException {
    }
    interface PersonFatcaQuestionsDescription {
    }
    interface PersonFATCAReason {
    }
    interface PersonFATCAReasonName {
    }
    interface PersonFATCAStatus {
    }
    interface PersonFATCAStatusName {
    }
    interface PersonFATCATime {
    }
    interface PersonFATCAType {
    }
    interface PersonFATCATypeName {
    }
    interface PersonFundSource {
    }
    interface PersonGroup {
    }
    interface PersonIdType {
    }
    interface PersonStatus {
    }
    interface PersonStatusName {
    }
    export const enum PhoneType {
        Phone = 1,
        Fax = 2
    }
    interface PortfolioClass {
    }
    interface PortfolioClassName {
    }
    interface Professions {
    }
    export const enum RelationshipCategories {
        DelegateRelation = 2,
        YKAndTrusteeCommitte = 6,
    }
    export const enum RelationshipTypeId {
        Mandat = 21,
        BoardOfTrusteesMember = 107,
        ViceChairmanOfTheBoardOfTrustees = 106,
        ChairmanOfTheBoardOfTrusteesTreasurer = 105,
        Secretary = 104,
        BoardMember = 103,
        ViceChairman = 102,
        Chairman = 101,
        Accountant = 108,
        ApartmentDirector = 78,
        InstructionAuthorized = 27,
        Authorized = 26,
        ProxyAuthorized = 25,
        AuthorizingTheCompany = 25,
        CuratorOrGuardian = 24,
        UnderTheTutelage = 23,
        Proxy = 22,
        YKMember = 51,
    }
    interface ResourceCodes {
    }
    interface RoleType {
    }
    interface ScoringRiskType {
    }
    interface ScoringTypeName {
    }
    interface StatusType {
    }
}
declare namespace BOA.Types.Kernel.CustomerControl {
    interface AllotmentProductContract {
        productCode?: string;
        productName?: string;
    }
    interface ControlCommon {
    }
    interface ControlConditionColumnContract extends BOA.Common.Types.ContractBase {
        conditionId?: number;
        controlId?: number;
        name?: string;
        width?: number;
    }
    interface ControlConditionContract extends BOA.Common.Types.ContractBase {
        conditionId?: number;
        controlId?: number;
        hasValue?: boolean;
        isSummary?: boolean;
        name?: string;
        reasonId?: number;
        result?: number;
        visibleColumnCount?: number;
    }
    interface ControlConditionLinkContract extends BOA.Common.Types.ContractBase {
        conditionId?: number;
        description?: string;
        value?: string;
    }
    interface ControlConditionValueContract extends BOA.Common.Types.ContractBase {
        conditionId?: number;
        controlId?: number;
        value?: string;
    }
    interface ControlContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentOID?: string;
        canSaveOnRedExemption?: boolean;
        conditionColumnList?: BOA.Types.Kernel.CustomerControl.ControlConditionColumnContract[];
        conditionLinkList?: BOA.Types.Kernel.CustomerControl.ControlConditionLinkContract[];
        conditionList?: BOA.Types.Kernel.CustomerControl.ControlConditionContract[];
        conditionValueList?: BOA.Types.Kernel.CustomerControl.ControlConditionValueContract[];
        controlDate?: Date;
        controlId?: number;
        fec?: number;
        fecCode?: string;
        htmlScript?: string;
        isGroupCustomer?: boolean;
        isNonAccountingRisk?: boolean;
        isSimulation?: boolean;
        portfolioClass?: number;
        reasonList?: BOA.Types.Kernel.CustomerControl.ControlReasonContract[];
        sessionId?: string;
        simulationAllotmentOID?: string;
        simulationCollateralList?: BOA.Types.Kernel.CustomerControl.SimulationCollateralContract[];
        simulationRiskList?: BOA.Types.Kernel.CustomerControl.SimulationRiskContract[];
        sourceId?: number;
        sourceType?: BOA.Types.Kernel.CustomerControl.ControlCommon.SourceType;
        titleInfo?: BOA.Types.Kernel.CustomerControl.TitleInfoContract;
        webMaterialUrl?: string;
    }
    interface ControlReasonContract extends BOA.Common.Types.ContractBase {
        controlId?: number;
        isSummary?: boolean;
        name?: string;
        reasonId?: number;
        result?: number;
    }
    interface CustomerCardContract {
        accountNumber?: number;
        cardNubmer?: string;
    }
    interface CustomerControlStatic {
    }
    interface CustomerProductRiskContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        allotmentProductDetailGroup?: string;
        allotmentProductMainGroup?: string;
        allotmentProductSubGroup?: string;
        costType?: string;
        fec?: number;
        limitType?: string;
        productName?: string;
        profitableRisk?: number;
        unProfitableRisk?: number;
    }
    interface GroupCustomerContract {
        accountNumber?: number;
        customerName?: string;
        groupName?: string;
        isCancellation?: boolean;
    }
    interface IfCustomerPaysDebtContract extends BOA.Common.Types.ContractBase {
        customerName?: string;
        order?: number;
        otherFecUSDRisk?: string;
        riskAmountEUR?: string;
        riskAmountGold?: string;
        riskAmountTL?: string;
        riskAmountUSD?: string;
        riskName?: string;
        totalTLRiskCover?: string;
        uSDFecIndexRisk?: string;
    }
    interface LoansLimitRiskInfoContract extends BOA.Common.Types.ContractBase {
        customerLimitAndRiskList?: BOA.Types.Kernel.CustomerControl.LoansLimitRiskInfoDetailContract[];
        groupLimitAndRiskList?: BOA.Types.Kernel.CustomerControl.LoansLimitRiskInfoDetailContract[];
        isGroupMainCustomer?: boolean;
        productLimitAndRiskList?: BOA.Types.Kernel.CustomerControl.LoansLimitRiskInfoDetailContract[];
    }
    interface LoansLimitRiskInfoDetailContract extends BOA.Common.Types.ContractBase {
        availableLimit?: string;
        customer?: string;
        generalLimit?: string;
        limitType?: string;
        unProfitableRisk?: string;
    }
    interface ProductRemainContract {
        fec?: string;
        nonProfitRisk?: string;
        productName?: string;
        profitRisk?: string;
    }
    interface SimulationCollateralContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        collateralDefinitionId?: number;
        fec?: number;
    }
    interface SimulationRiskContract extends BOA.Common.Types.ContractBase {
        allotmentProductDetailGroup?: string;
        allotmentProductMainGroup?: string;
        allotmentProductSubGroup?: string;
        fec?: number;
        profitableRisk?: number;
        unProfitableRisk?: number;
    }
    interface TitleInfoContract extends BOA.Common.Types.ContractBase {
        allotmentState?: string;
        branchName?: string;
        customerName?: string;
        ferString?: string;
        groupCode?: string;
        groupName?: string;
    }
}
declare namespace BOA.Types.Kernel.CustomerControl.ControlCommon {
    export const enum Condition {
        ProductLimitRisk = 2,
        CustomerLimitRisk = 7
    }
    export const enum ControlResultType {
        Green = 0,
        Yellow = 1,
        Red = 2
    }
    export const enum SourceType {
        GeneralControl = 0,
        LetterOfGuarantee = 3,
        Proposal = 10,
        Project = 11,
        ProjectPayment = 12,
        CollateralRelease = 13,
        KarzProject = 14,
        ApplicationProposal = 15,
        Exchange = 16,
        ChequeBook = 17,
        PreciousMetalSupport = 18,
        FinancialLimitRiskInfo = 19,
        HatProjectInfo = 20
    }
}
declare namespace BOA.Types.Kernel.CustomerControl.CustomerControlStatic {
    interface ApproveUnit {
    }
    interface ColumnNames {
    }
}
declare namespace BOA.Types.Kernel.CustomerTransaction {
    interface CustomerAccountContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        branchId?: number;
        branchName?: string;
        details?: BOA.Types.Kernel.CustomerTransaction.CustomerTransactionDetailContract[];
        fec?: number;
        fecLongName?: string;
        fecName?: string;
        iBAN?: string;
        internalPeriodEnd?: Date;
        lastRenewedDate?: Date;
        lastTranDate?: Date;
        maturityEnd?: Date;
        openDate?: Date;
        productCode?: string;
        tCKNorTaxNumber?: string;
    }
    interface CustomerTransactionDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        credit?: number;
        currentBalance?: number;
        debit?: number;
        description?: string;
        fec?: number;
        fecName?: string;
        resourceCode?: string;
        senderIdentityNumber?: string;
        tranDate?: Date;
        tranRef?: string;
        tranType?: string;
        valueDate?: Date;
    }
    interface CustomerTransactionDetailRequest extends BOA.Common.Types.RequestBase {
        beginDate?: Date;
        endDate?: Date;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.CustomerTransfer {
    interface Common {
    }
    interface CustomerProfileChangeContract extends BOA.Common.Types.ContractBase {
        accountBranchNote?: string;
        branchNote?: string;
        businessKey?: number;
        changeId?: number;
        customerid?: number;
        fromBranchid?: number;
        fromCustomerClass?: number;
        fromPortfolioClass?: number;
        fromPortfolioId?: number;
        fromUnitId?: number;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        toBranchid?: number;
        toCustomerClass?: number;
        toPortfolioClass?: number;
        toPortfolioId?: number;
        toUnitId?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        changeId?: number;
        customerClassId?: number;
        errorInfo?: string;
        fromBranchId?: number;
        fromUnitId?: number;
        isTransferred?: boolean;
        portfolioId?: number;
        toBranchId?: number;
        toUnitId?: number;
        userName?: string;
    }
    interface CustomerTransferProcessLogContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        businessKey?: number;
        changeId?: number;
        errorMessage?: string;
        fromBranchId?: number;
        hasError?: number;
        hostIP?: string;
        hostName?: string;
        newAccountSuffix?: number;
        processDuration?: number;
        processId?: number;
        toBranchId?: number;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.CustomerTransfer.Common {
    export const enum ProcessType {
        ExchangeTransfer = 1,
        FundUtilizationTransfer = 2,
        LetterOfGuaranteeTransfer = 3,
        CollateralTransfer = 4,
        CommissionTransfer = 5,
        BalanceTransfer = 6,
        CostPaymentTransfer = 7,
        AccountTransfer = 8,
        ChequeTransfer = 9,
        ForwardTransfer = 10,
        AllotmentTransfer = 11
    }
    export const enum TransferErrorType {
        NoProduct = 0,
        Successful = 1,
        Error = 2
    }
}
declare namespace BOA.Types.Kernel.DataManagement {
    interface DataManagementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        channelId?: number;
        fieldCount?: number;
        fieldId?: number;
        mandatoryType?: number;
        priority?: number;
        resourceCode?: string;
        updatePeriod?: number;
        updateTime?: number;
        userId?: number;
    }
}
declare namespace BOA.Types.Kernel.DebitCard {
    export const enum AnonymousCardInfoStatus {
        SecureInformationsGenerated = 0,
        AssociatedWithCustomer = 1
    }
    export const enum CampaignEnum {
        Draft = 0,
        WorkFlow = 1,
        Approve = 2,
        Reject = 3,
        Passive = 4
    }
    export const enum ChannelId {
        ATM_OnUs = 3,
        XTM = 13
    }
    export const enum DebitCardCardStatus {
        UnPrinted = 0,
        Broken = 1,
        Stolen = 2,
        SequentialPasswordError = 3,
        RelationCutting = 4,
        LegalFollowUp = 5,
        TemporarilyClosed = 6,
        Fraud = 7,
        OptionalClosed = 8,
        SwallowedCard = 9,
        Retire = 10,
        Lost = 11,
        Normal = 12,
        ReturnedByMail = 13,
        ReturnedByBranch = 14,
        CardRequestCancel = 15,
        Death = 16
    }
    export const enum EmbossingOffice {
        BilesimAS = 0,
        MapiCard = 1,
        InstantIssuing = 2
    }
    export const enum EODStat {
        OpenProvision = 0,
        Donemİci = 1,
        Expired = 2
    }
    export const enum ExternalMessageType {
        Authorization = 0,
        Reverse = 1
    }
    export const enum LanguageId {
        Turkish = 1
    }
    export const enum LimitBaseType {
        Count = 0,
        Amount = 1
    }
    export const enum PosEntryMode {
        Magnetic = 0,
        Fallback = 1,
        Chip = 2,
        Manual = 3,
        ECommerce = 4,
        UnSpecified = 5,
        UnKnown = 6
    }
    export const enum PVVKeyPropertyName {
        PVVKeyA = 0,
        PVVKeyB = 1
    }
    export const enum RequestOriginalType {
        Authorization = 0,
        Reverse = 1
    }
    export const enum SecurityLevel {
        Non3D = 0,
        Half3D = 1,
        Full3D = 2
    }
    export const enum TransactionTypes {
        Withdrawal = 10,
        Deposit = 25,
        DepositToAnotherAcoount = 26,
        CashDepositWithoutCard = 21,
        MoneyTransferFromName = 29,
        CashAdvance = 11,
        MoneyTransfer = 30,
        Purchase = 60,
        InvoicePayment = 164,
        Prepaid = 142,
        FxSell = 125,
        FxBuy = 121,
        PreciousMetalSell = 123,
        PreciousMetalBuy = 122,
        PhysicalPreciousMetal = 190,
        Eft = 300
    }
    interface AccountUsingTypes {
        main?: string;
        virement?: string;
    }
    interface AnonymousCardInfoContract extends BOA.Common.Types.ContractBase {
        cardExpirationDate?: string;
        cardGroupInfo?: BOA.Types.Kernel.DebitCard.IReadonlyCardGroupContract;
        cardInUsePin?: string;
        cardNumber?: string;
        courierBarcodeCode?: string;
        cVV?: string;
        cVV2?: string;
        cVV2Index?: number;
        pVV?: string;
        pVVKeyIndex?: number;
        status?: BOA.Types.Kernel.DebitCard.AnonymousCardInfoStatus;
    }
    interface AtmTcpResourceCode {
        id?: number;
        value?: string;
    }
    interface BanksoftConstant {
    }
    interface Bkm3DSecureContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        citizenship?: string;
        customerId?: number;
        dESKey?: string;
        email?: string;
        embossName?: string;
        expireDate?: string;
        fileId?: number;
        fileName?: string;
        gSMAreaCode?: string;
        gSMNumber?: string;
        hostName?: string;
        id?: number;
        isOnlineNotify?: number;
        isOnlineNotifyDesc?: string;
        lastFileName?: string;
        maxSystemDate?: Date;
        minSystemDate?: Date;
        mothersMaidenSurname?: string;
        notifyType?: string;
        reasonCode?: number;
        reasonCodeDesc?: string;
        reportStatus?: string;
        resultCode?: number;
        resultCodeDesc?: string;
        status?: number;
        statusDesc?: string;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BranchEmailContract extends BOA.Common.Types.ContractBase {
        body?: string;
        email?: string;
        emailList?: string[];
        roleId?: number;
    }
    interface BranchEmailRequest extends BOA.Common.Types.RequestBase {
        branchID?: number;
        dataContract?: BOA.Types.Kernel.DebitCard.BranchEmailContract;
    }
    interface CampaignDefinitionMainContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        activeStatus?: number;
        activeStatusDescription?: string;
        authorizationCode?: string;
        beginDate?: Date;
        billingAmount?: number;
        bkmId?: string;
        bkmIdList?: string;
        branchId?: number;
        businessKey?: number;
        businessKeyOffline?: number;
        campaignBasedOn?: string;
        campaignBasedOnDescription?: string;
        campaignBasedOnId?: number;
        campaignCode?: string;
        campaignDefinitionId?: number;
        campaignQualifyCustomerTransactionId?: number;
        campaignType?: string;
        campaignTypeId?: number;
        cardNumber?: string;
        cRMCode?: string;
        cRMScript?: string;
        dailyDate?: Date;
        debitTransactionDate?: Date;
        debitTransactionId?: number;
        description?: string;
        endDate?: Date;
        gainAccountType?: string;
        gainAccountTypeId?: number;
        gainAmountMain?: number;
        gainAmountRate1?: number;
        gainAmountRate2?: number;
        gainAmountRate3?: number;
        gainAmountRate4?: number;
        gainAmountRate5?: number;
        gainCount?: number;
        gainRate?: number;
        gainType?: string;
        gainTypeDescription?: string;
        gainTypeId?: number;
        hasExcelList?: number;
        hostIP?: string;
        hostName?: string;
        ledgerId?: number;
        location?: string;
        mainProductGroup?: number;
        mainProductGroupName?: string;
        maximumGainAmount?: number;
        maximumTransactionAmount?: number;
        mccCode?: string;
        mccCodeDescription?: string;
        mccGroup?: string;
        mccList?: BOA.Types.Kernel.DebitCard.CampaignDefinitionMainContract[];
        minimumTransactionAmount?: number;
        monthlyDayList?: BOA.Types.Kernel.DebitCard.MonthlyDay[];
        name?: string;
        priorityOrder?: number;
        processDate?: Date;
        processType?: string;
        processTypeCode?: number;
        processTypeCodeMain?: number;
        productType?: string;
        productTypeCodeMain?: number;
        productTypeName?: string;
        promotionType?: number;
        promotionTypeDescription?: string;
        referenceNumber?: string;
        selectedProcessCodeList?: BOA.Types.Kernel.DebitCard.CampaignDefinitionMainContract[];
        selectedProductList?: BOA.Types.Kernel.DebitCard.CampaignDefinitionMainContract[];
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        terminalId?: string;
        timingType?: number;
        timingTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        weeklyDayList?: BOA.Types.Kernel.DebitCard.WeeklyDay[];
        workFlowId?: number;
    }
    interface CardAccountContract extends BOA.Common.Types.ContractBase {
        accountNickName?: string;
        accountNumber?: number;
        accountOwnerNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        accountUsingName?: string;
        accountUsingType?: string;
        branchId?: number;
        branchName?: string;
        cardNumber?: string;
        cardType?: string;
        channelId?: number;
        customerName?: string;
        dailyATMWithdrawal?: number;
        dailyTransferAmount?: number;
        fecCode?: number;
        fecName?: string;
        hostName?: string;
        isDependentAccountChecked?: boolean;
        isMainAccountChecked?: boolean;
        lastTransDate?: Date;
        lastTransferDate?: Date;
        printingDate?: Date;
        productName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CardGroupCode {
        kuveytElektron?: string;
        kuveytElektronSeninBankan?: number;
        kuveytElektronWithProvision?: string;
        kuveytTroy?: number;
    }
    interface CardGroupContract extends BOA.Common.Types.ContractBase {
        bKMExpressKeyA?: string;
        bKMExpressKeyB?: string;
        cardBrand?: string;
        cardExpirationDate?: number;
        cardFee?: number;
        cardFormatType?: string;
        cardLength?: number;
        cardRenewalFee?: number;
        cardType?: string;
        cardVendorType?: string;
        cAVVKeyA?: string;
        cAVVKeyAEncrypted?: string;
        cAVVKeyB?: string;
        cAVVKeyBEncrypted?: string;
        chipServiceCode?: string;
        cVK?: string;
        cVVKeyA?: string;
        cVVKeyAEncrypted?: string;
        cVVKeyB?: string;
        cVVKeyBEncrypted?: string;
        decimalTable?: string;
        hostName?: string;
        isNewCardPrintPwd?: boolean;
        issuerWorkKey?: string;
        isWebDefaultSelected?: boolean;
        isWebDoNotShow?: boolean;
        orderNumber?: number;
        pINKey?: string;
        prefixCode?: string;
        prefixName?: string;
        printFormat?: string;
        pVD?: string;
        pVDEncrypted?: string;
        pVVKeyA1?: string;
        pVVKeyA1Encrypted?: string;
        pVVKeyA2?: string;
        pVVKeyA2Encrypted?: string;
        pVVKeyB1?: string;
        pVVKeyB1Encrypted?: string;
        pVVKeyB2?: string;
        pVVKeyB2Encrypted?: string;
        sequentialPasswordError?: number;
        sequentialPasswordError2?: number;
        serviceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorBIN?: string;
        zCMK?: string;
    }
    interface CardInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        birthDateValidationFailCount?: number;
        branchId?: number;
        brushColor?: string;
        cardCallCenterPin?: string;
        cardClosingDate?: Date;
        cardDemandChannelId?: number;
        cardEmbossName?: string;
        cardEmbossString?: string;
        cardEmbossTitle?: string;
        cardExpirationDate?: string;
        cardFirmEmbossName?: string;
        cardFirmNo?: number;
        cardGroupCode?: string;
        cardInUsePin?: string;
        cardNumber?: string;
        cardPasswordDemandChannelId?: number;
        cardPasswordPostingAddress?: string;
        cardPasswordPostingBranchId?: number;
        cardPasswordPostingType?: string;
        cardPin?: string;
        cardPostingAddress?: string;
        cardPostingBranchId?: number;
        cardPostingType?: string;
        cardPrintingDate?: Date;
        cardPrintPasswordReason?: string;
        cardPrintReason?: string;
        cardPVVOffset?: number;
        cardStatusChangeDesc?: string;
        cardStatusCode?: string;
        cardStatusDescription?: string;
        cardStyleCode?: string;
        cardStyleName?: string;
        cAVVKeyA?: string;
        cAVVKeyB?: string;
        changeStatusDate?: Date;
        chipFlag?: string;
        chipNo?: number;
        countInternalTransferAccount?: number;
        countTransferAccount?: number;
        courierBarcodeCode?: string;
        customerStatus?: string;
        cVV?: string;
        cVV2?: string;
        cVV2Encrypted?: string;
        cVV2Index?: number;
        cVVEncrypted?: string;
        cVVKeyA?: string;
        cVVKeyB?: string;
        dailySequentialPasswordError?: number;
        firstTranDate?: Date;
        hostName?: string;
        incorrectPinDate?: string;
        intPwdReqDate?: Date;
        isActive?: boolean;
        isCardPrint?: boolean;
        isCardSend?: boolean;
        isCardValid?: boolean;
        isImmediate?: boolean;
        isKmhUsing?: boolean;
        isPrintPassword?: boolean;
        isRowActive?: boolean;
        isUnlimitedExpiration?: boolean;
        lastTranDate?: Date;
        ledgerId?: number;
        mainAccountNumber?: string;
        mainBranchId?: number;
        mercekCode?: string;
        nickName?: string;
        oldCardNumber?: string;
        oldCVV?: string;
        oldCVV2?: string;
        oldCVV2Encrypted?: string;
        oldCVVEncrypted?: string;
        oldCVVExpireDate?: string;
        oldPIN?: string;
        passwordPrintDate?: Date;
        pINOfset?: string;
        pinTryCount?: number;
        printPriority?: number;
        printStatusCode?: string;
        printTrialNumber?: number;
        productCode?: string;
        productName?: string;
        pVV?: string;
        pVVEncrypted?: string;
        pVVKeyIndex?: number;
        resultCode?: number;
        resultMessage?: string;
        sequentialPasswordError?: number;
        serviceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CardPrintDemandContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        batchChipGrupCode?: string;
        branchId?: number;
        cardDemandChannelId?: number;
        cardGroupCode?: string;
        cardGroupName?: string;
        cardInfoUpdateSystemDateBegin?: Date;
        cardInfoUpdateSystemDateEnd?: Date;
        cardNumber?: string;
        cardPostingType?: string;
        cardPrintStatus?: string;
        cardPrintUser?: string;
        cardStyleCode?: string;
        cardStyleName?: string;
        chipFlag?: boolean;
        chipNumber?: number;
        contactlessFlag?: boolean;
        hostName?: string;
        immediateSMSSendNumber?: number;
        isCardPrint?: boolean;
        isImmediatePrint?: boolean;
        isSecurity?: boolean;
        mainGroupCode?: string;
        mainGroupName?: string;
        mSDFlag?: boolean;
        nonPrintingDate?: Date;
        nonPrintingFlag?: boolean;
        nonPrintingReason?: string;
        orderNumber?: number;
        parameterChangeFlag?: boolean;
        passwordDemandChannelId?: number;
        passwordOrderNumber?: string;
        printDate?: Date;
        printPriority?: number;
        printTime?: string;
        printType?: string;
        productCode?: string;
        recordDate?: Date;
        subGroupCode?: string;
        subGroupName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CardPrintReasons {
        newPrint?: string;
    }
    interface CardPrintTypeContract extends BOA.Common.Types.ContractBase {
        cardPrintReason?: string;
        channelId?: number;
        hostName?: string;
        isAssignMemo?: boolean;
        isAssignPasswordMemo?: boolean;
        isCardPrintLog?: boolean;
        isCVV?: boolean;
        isFile?: boolean;
        isFirstPrintFlag?: boolean;
        isGenerateCardRenewTran?: boolean;
        isGeneratePIN?: boolean;
        isGeneratePrintCardTran?: boolean;
        isPrintCard?: boolean;
        isPrintPasswordLog?: boolean;
        isPrintPIN?: boolean;
        isPrintPINInfo?: boolean;
        isPVV?: boolean;
        isVade?: boolean;
        passwordPrintReason?: string;
        printCode?: string;
        printName?: string;
        priority?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CardStockContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchName?: string;
        cardAmount?: number;
        cardGroupCode?: string;
        cardLimit?: number;
        cardStyle?: string;
        cardType?: number;
        chipProductCode?: string;
        hostName?: string;
        nameSurname?: string;
        printedCardAmount?: number;
        productCode?: string;
        responseCode?: string;
        responseMessage?: string;
        stockId?: number;
        systemDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        vendorName?: string;
        workgroupId?: number;
    }
    interface CardStockRequest extends BOA.Common.Types.RequestBase {
        chipProductCode?: string;
        dataContract?: BOA.Types.Kernel.DebitCard.CardStockContract;
        responseCode?: string;
        responseMessage?: string;
        userCode?: string;
    }
    interface CustomerInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        applicationDate?: Date;
        branchId?: number;
        cardPostingAddress?: string;
        cCPINStatu?: string;
        channelId?: number;
        companyAccountNumber?: number;
        customerRecordingType?: string;
        firmName?: string;
        followType?: string;
        hostName?: string;
        isAgreement?: boolean;
        isCCPINPrint?: boolean;
        isGiveNewCard?: boolean;
        isRowActive?: boolean;
        isTakeCardFee?: boolean;
        limit?: number;
        limitMultiplier?: number;
        mainGroupCode?: string;
        personId?: number;
        recordEnteringType?: string;
        subGroupCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        usingVirtualCard?: string;
    }
    interface CustomerLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        aTMMoneyLimitAmount?: number;
        bKMMoneyLimitAmount?: number;
        bKMSellingLimitAmount?: number;
        cashBackLimitAmount?: number;
        creditCardWithdrawalAmount?: number;
        depositAccountLimitAmount?: number;
        depositLimitAmount?: number;
        eFTLimitAmount?: number;
        financeCode?: string;
        generalCommisionAmount?: number;
        hostName?: string;
        internalTransferLimitAmount?: number;
        isCashBack?: boolean;
        isDepositAccount?: boolean;
        isDepositProcess?: boolean;
        isMoneyDeposit?: boolean;
        isMoneyTransfer?: boolean;
        isMoneyWithdrawal?: boolean;
        isSellingPos?: boolean;
        isTakeCardFee?: boolean;
        isTakeRenewalFee?: boolean;
        isUsingCardNumber?: boolean;
        kontorLimitAmount?: number;
        mainDepositLimitAmount?: number;
        mainPaymentLimitAmount?: number;
        newCardBin?: string;
        pOSSellingLimitAmount?: number;
        systemDate?: Date;
        transferAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerLimitInfoContract extends BOA.Common.Types.ContractBase {
        aTMMoneyLimitAmount?: number;
        bKMMoneyLimitAmount?: number;
        bKMSellingLimitAmount?: number;
        cashBackLimitAmount?: number;
        depositLimitLimitAmount?: number;
        eFTLimitAmount?: number;
        internalTransferLimitAmount?: number;
        isDepositAccountLimitAmount?: number;
        mainDepositLimitAmount?: number;
        pOSSellingLimitAmount?: number;
        transferAmount?: number;
    }
    interface CustomerMemoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        channelId?: number;
        gsmNumber?: string;
        hostName?: string;
        memo?: string;
        memoId?: number;
        state?: string;
        subject?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerStatus {
    }
    interface DebitCardAccountContract extends BOA.Types.Kernel.Account.AccountSaveContract {
        id?: number;
        isDependentAccountChecked?: boolean;
        isMainAccountChecked?: boolean;
    }
    interface DebitCardApplicationAccountContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        applicationId?: number;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DebitCardApplicationConfiguration {
        cardPrintMagneticPartReadNewCommandIsEnabled?: boolean;
        isApplicationFormNewLocationEnabled?: boolean;
        isImmediateCardPrintCanBeDoneFromBOA?: boolean;
        isKernelSelectCardInfoByAccountNumber2Enabled?: boolean;
        isSendingAddressControlEnabled?: boolean;
        provisionProjectVerifyCAVVControlIsEnabled?: boolean;
        provisionProjectVerifyCVV2ControlIsEnabled?: boolean;
    }
    interface DebitCardApplicationContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        cardGroup?: number;
        cardNo?: string;
        cardSendingAddress?: number;
        cardType?: number;
        channelId?: number;
        customerId?: number;
        displayName?: string;
        employmentType?: number;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        instanceId?: number;
        isImmidiateCard?: number;
        isKMHUsing?: boolean;
        kmhLimitUsed?: number;
        kMHPackageId?: number;
        mainAccount?: number;
        minimumBalance?: number;
        monthlyCertificatedIncome?: number;
        monthlyNetIncome?: number;
        productCode?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        sGKPremiumDayCount?: number;
        sGKTurnoverCountWithinLastTwoYear?: number;
        stateId?: number;
        statusNo?: number;
        systemDate?: Date;
        transportType?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        versionId?: number;
    }
    interface DebitCardApplicationInitialValue extends BOA.Common.Types.ContractBase {
        configuration?: BOA.Types.Kernel.DebitCard.DebitCardApplicationConfiguration;
    }
    interface DebitCardBalanceInquiryCommissionRequest extends BOA.Types.Kernel.DebitCard.DebitCardProvisionProcessRequest {
    }
    interface DebitCardCache {
        acquirerBankList?: BOA.Types.Kernel.General.ParameterContract[];
        debitForeignMargin?: number;
        externalResponseCodes?: BOA.Types.Kernel.DebitCard.ExternalResponseCodeContract[];
        externalTransactionMap?: any;
        fecList?: BOA.Types.Kernel.General.ParameterContract[];
        internalResponseCodes?: any;
        rateInformations?: BOA.Types.Kernel.DebitCard.DebitCardCache.IRateInformations;
        reverseExternalTransactionMap?: any;
    }
    interface DebitCardCardStatusHelper {
    }
    interface DebitCardCashWithdrawalProvisionRequest extends BOA.Types.Kernel.DebitCard.DebitCardProvisionProcessRequest {
    }
    interface DebitCardCommon {
    }
    interface DebitCardConstant {
        countInternalTransferAccountDefaultValue?: number;
    }
    interface DebitCardContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        creditCardCustomerDebitCard?: BOA.Types.Kernel.CreditCard.CreditCardCustomerDebitCard;
        creditCardRelatedAccountList?: BOA.Types.Kernel.CreditCard.CreditCardRelatedAccount[];
        customerInfo?: BOA.Types.Kernel.DebitCard.DebitCardCustomerContract;
        debitCardDetailInfo?: BOA.Types.Kernel.DebitCard.DebitCardDetailInfoContract;
        personId?: number;
        printingInfo?: BOA.Types.Kernel.DebitCard.DebitCardPrintingInfoContract;
    }
    interface DebitCardCustomerAddressContract extends BOA.Common.Types.ContractBase {
        cepTelAlanKodu?: string;
        cepTelNo?: string;
        cepTelUlkeKodu?: string;
        evAdres1?: string;
        evAdres2?: string;
        evAdres3?: string;
        evEmail?: string;
        evFaxAlanKodu?: string;
        evFaxNo?: string;
        evFaxUlkeKodu?: string;
        evPostaKodu?: string;
        evSehir?: string;
        evSehirKodu?: string;
        evSemt?: string;
        evTelAlanKodu?: string;
        evTelNo?: string;
        evTelUlkeKodu?: string;
        evUlke?: string;
        evUlkeKodu?: string;
        insUpd?: string;
        isAdres1?: string;
        isAdres2?: string;
        isAdres3?: string;
        isEmail?: string;
        isExtension?: string;
        isFaxAlanKodu?: string;
        isFaxNo?: string;
        isFaxUlkeKodu?: string;
        isPostaKodu?: string;
        isSehir?: string;
        isSehirKodu?: string;
        isSemt?: string;
        isTelAlanKodu?: string;
        isTelNo?: string;
        isTelUlkeKodu?: string;
        isUlke?: string;
        isUlkeKodu?: string;
        musteriNo?: number;
        rC?: number;
    }
    interface DebitCardCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        birthDate?: Date;
        birthPlace?: string;
        cardSendingAddressType?: string;
        cardSendingBranchId?: number;
        cardSendingType?: string;
        citizenshipCountryCode?: string;
        citizenshipCountryName?: string;
        commercialTitle?: string;
        companyAccountNumber?: number;
        customerBranchId?: number;
        customerCurrentStateCode?: string;
        customerGroupCode?: string;
        customerStateCode?: string;
        customerSubGroupCode?: string;
        customerType?: string;
        depositAmount?: number;
        depositRate?: number;
        emergencyPersonName?: string;
        emergencyPersonPhone?: string;
        emergencyPersonPhoneAreaCode?: string;
        emergencyPersonPhoneExtension?: string;
        explanation?: string;
        fathersName?: string;
        financialInfoUpdateDate?: Date;
        firmName?: string;
        firmPrintingName?: string;
        firstName?: string;
        gender?: string;
        homeAddress1?: string;
        homeAddress2?: string;
        homeAddress3?: string;
        homeCityName?: string;
        homeCountryName?: string;
        homeCountyName?: string;
        homeEMail?: string;
        homeFaxAreaCode?: string;
        homeFaxPhone?: string;
        homeGSMAreaCode?: string;
        homeGSMPhone?: string;
        homePhone?: string;
        homePhoneAreaCode?: string;
        homePhoneExtension?: string;
        homePostalCode?: string;
        identityNumber?: string;
        idNo?: string;
        idSerial?: string;
        idType?: string;
        insertDate?: Date;
        insertUserName?: string;
        interbankMoneyTransferAmount?: number;
        interbankMoneyTransferRate?: number;
        intrabankMoneyTransferAmount?: number;
        intrabankMoneyTransferRate?: number;
        lastName?: string;
        limitUpdateDate?: Date;
        maidenhoodSurname?: string;
        maritalStatus?: string;
        mothersMaidenSurname?: string;
        mothersName?: string;
        occupation?: string;
        passwordSendingAddressType?: string;
        passwordSendingBranchId?: number;
        passwordSendingType?: string;
        pOSSaleAmount?: number;
        pOSSaleRate?: number;
        printingName?: string;
        printingTitle?: string;
        secondName?: string;
        taxNumber?: string;
        taxOffice?: string;
        title?: string;
        toAccountDepositAmount?: number;
        toAccountDepositRate?: number;
        tradeRegistryNo?: string;
        updateDate?: Date;
        updateUserName?: string;
        withdrawalAmount?: number;
        withdrawalRate?: number;
        workAddress1?: string;
        workAddress2?: string;
        workAddress3?: string;
        workCityName?: string;
        workCountryName?: string;
        workCountyName?: string;
        workEMail?: string;
        workFaxAreaCode?: string;
        workFaxPhone?: string;
        workName?: string;
        workPhone?: string;
        workPhoneAreaCode?: string;
        workPhoneExtension?: string;
        workPostalCode?: string;
    }
    interface DebitCardCustomerGroupContract extends BOA.Common.Types.ContractBase {
        customerGroupCode?: string;
        customerGroupName?: string;
        customerSubGroupCode?: string;
        customerSubGroupName?: string;
    }
    interface DebitCardCustomerInfoContract extends BOA.Common.Types.ContractBase {
        insUpd?: string;
        mAcilKisi?: string;
        mbAd?: string;
        mbAnneAdi?: string;
        mbAnneKizSoyad?: string;
        mbBabaAdi?: string;
        mbBirimKodu?: string;
        mbCinsiyet?: string;
        mbDogTarih?: string;
        mbDogYeri?: string;
        mbEmbossAdi?: string;
        mbFirmaAdi?: string;
        mbIkinciAd?: string;
        mbKimlikNo?: string;
        mbKimlikSeriNo?: string;
        mbKimlikTipi?: string;
        mbKizlikSoyad?: string;
        mbMedeniDurumu?: string;
        mbMustNo?: number;
        mbSoyad?: string;
        mbTabiyetAciklama?: string;
        mbTabiyeti?: string;
        mbUnvan?: string;
        mdAltGrupKodu?: string;
        mdFirmaNo?: number;
        mdGrupKodu?: string;
        mFirmaEmbossAdi?: string;
        mFirmaFlag?: string;
        mIsGorev?: string;
        mIsyeriAdi?: string;
        mKartYollamaAdres?: string;
        mKartYollamaTipi?: string;
        mKartYollaSube?: string;
        mKayitTarihi?: string;
        mMusteriTipi?: string;
        mSifreYollamaAdres?: string;
        mSifreYollamaTipi?: string;
        mSifreYollaSube?: string;
        mSozlesmeFlag?: string;
        mTicaretSicilNo?: string;
        mTuzelUnvan?: string;
        mVergiDairesi?: string;
        mVergiNo?: string;
        rC?: number;
    }
    interface DebitCardCustomerStateContract extends BOA.Common.Types.ContractBase {
        customerStateCode?: string;
        customerStateName?: string;
    }
    interface DebitCardDetailInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardBranchId?: number;
        cardEmbossName?: string;
        cardGroupCode?: string;
        cardNumber?: string;
        cardStateCode?: string;
        cardStyleName?: string;
        closingDate?: Date;
        currentCardStateCode?: string;
        dueDate?: string;
        formerCardNumber?: string;
        insertDate?: Date;
        insertTermId?: string;
        insertUserName?: string;
        passwordPrintingDate?: Date;
        printingDate?: Date;
        stateUpdateDate?: Date;
        updateDate?: Date;
        updateTermId?: string;
        updateUserName?: string;
    }
    interface DebitCardGeneralParameterContract extends BOA.Common.Types.ContractBase {
        debitLimitAmount?: number;
    }
    interface DebitCardInternationalProvisionRequest extends BOA.Types.Kernel.DebitCard.DebitCardProvisionProcessRequest {
    }
    interface DebitCardKMHInfoContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        cardNumber?: string;
        creditAccountSuffix?: number;
        kMHBalance?: number;
        kMHLimit?: number;
        kMHPackageId?: number;
        ledgerId?: number;
        minimumBalance?: number;
    }
    interface DebitCardLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cashAdvanceLimit?: number;
        cashDepositLimit?: number;
        channel?: number;
        depositLimit?: number;
        depositToAccountLimit?: number;
        eftLimit?: number;
        fxBuyLimit?: number;
        fxSellLimit?: number;
        invoicePaymentLimit?: number;
        limitBase?: BOA.Types.Kernel.DebitCard.LimitBaseType;
        mainGroupCode?: string;
        moneyTransferLimit?: number;
        physicalPreciousMetalLimit?: number;
        preciousMetalBuyLimit?: number;
        preciousMetalSellLimit?: number;
        prepaidLimit?: number;
        subGroupCode?: string;
        tLAmount?: number;
        tranDate?: Date;
        transactionType?: BOA.Types.Kernel.DebitCard.TransactionTypes;
        withdrawalLimit?: number;
        withdrawalRemainingLimit?: number;
    }
    interface DebitCardNewCardContract extends BOA.Common.Types.ContractBase {
        anindaBasim?: string;
        hkAdSoyad?: string;
        hkAdSoyad2?: string;
        hkAdSoyad3?: string;
        hkAdSoyad4?: string;
        hkAdSoyad5?: string;
        hkAdSoyad6?: string;
        hkAdSoyad7?: string;
        hkAdSoyad8?: string;
        hkDovizCinsi?: string;
        hkDovizCinsi2?: string;
        hkDovizCinsi3?: string;
        hkDovizCinsi4?: string;
        hkDovizCinsi5?: string;
        hkDovizCinsi6?: string;
        hkDovizCinsi7?: string;
        hkDovizCinsi8?: string;
        hkHesapNo?: string;
        hkHesapNo2?: string;
        hkHesapNo3?: string;
        hkHesapNo4?: string;
        hkHesapNo5?: string;
        hkHesapNo6?: string;
        hkHesapNo7?: string;
        hkHesapNo8?: string;
        hkHesapTuru?: string;
        hkHesapTuru2?: string;
        hkHesapTuru3?: string;
        hkHesapTuru4?: string;
        hkHesapTuru5?: string;
        hkHesapTuru6?: string;
        hkHesapTuru7?: string;
        hkHesapTuru8?: string;
        hkKullanimTuru?: string;
        hkKullanimTuru2?: string;
        hkKullanimTuru3?: string;
        hkKullanimTuru4?: string;
        hkKullanimTuru5?: string;
        hkKullanimTuru6?: string;
        hkKullanimTuru7?: string;
        hkKullanimTuru8?: string;
        hkMusteriNo?: number;
        hkMusteriNo2?: number;
        hkMusteriNo3?: number;
        hkMusteriNo4?: number;
        hkMusteriNo5?: number;
        hkMusteriNo6?: number;
        hkMusteriNo7?: number;
        hkMusteriNo8?: number;
        hkRumuz?: string;
        hkRumuz2?: string;
        hkRumuz3?: string;
        hkRumuz4?: string;
        hkRumuz5?: string;
        hkRumuz6?: string;
        hkRumuz7?: string;
        hkRumuz8?: string;
        hkSubeKodu?: string;
        hkSubeKodu2?: string;
        hkSubeKodu3?: string;
        hkSubeKodu4?: string;
        hkSubeKodu5?: string;
        hkSubeKodu6?: string;
        hkSubeKodu7?: string;
        hkSubeKodu8?: string;
        kaAnaHesapNo?: string;
        kaAnaSubeKodu?: string;
        kaBasimOnceligi?: number;
        kaBirimKodu?: string;
        kaEmbossAdi?: string;
        kaEmbossUnvan?: string;
        kaFirmaEmbossAdi?: string;
        kaGrupKodu?: string;
        kaKartStili?: string;
        kaKartYollamaAdresi?: string;
        kaKartYollamaTipi?: string;
        kaKartYollaSube?: string;
        kaKayitTerm?: string;
        kaKayitUser?: string;
        kaMusteriNo?: number;
        kartNo?: string;
        kaRumuz?: string;
        kaSifreYollamaAdresi?: string;
        kaSifreYollamaTipi?: string;
        kaSifreYollaSube?: string;
        rC?: number;
        rCAciklama?: string;
    }
    interface DebitCardParametersContract extends BOA.Common.Types.ContractBase {
        customerGroupList?: BOA.Types.Kernel.DebitCard.DebitCardCustomerGroupContract[];
        customerStateList?: BOA.Types.Kernel.DebitCard.DebitCardCustomerStateContract[];
        debitCardStateList?: BOA.Types.Kernel.DebitCard.DebitCardStateContract[];
        generalParameterList?: BOA.Types.Kernel.DebitCard.DebitCardGeneralParameterContract[];
        printingReasonList?: BOA.Types.Kernel.DebitCard.DebitCardPrintingReasonContract[];
    }
    interface DebitCardPosProvisionRequest extends BOA.Types.Kernel.DebitCard.DebitCardProvisionProcessRequest {
    }
    interface DebitCardPrintingInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardDemandSource?: string;
        cardNumber?: string;
        cardPrintingReason?: string;
        cardSendingAddressType?: string;
        cardSendingBranchId?: number;
        cardSendingType?: string;
        isCardDelivered?: boolean;
        isPasswordChanged?: boolean;
        passwordDemandSource?: string;
        passwordPrintingReason?: string;
        passwordSendingAddressType?: string;
        passwordSendingBranchId?: number;
        passwordSendingType?: string;
        printingPiority?: number;
    }
    interface DebitCardPrintingReasonContract extends BOA.Common.Types.ContractBase {
        reasonCode?: string;
        reasonName?: string;
    }
    interface DebitCardProvisionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        acquirerBankId?: string;
        additionalResponseData?: string;
        authorizationCode?: string;
        authorizationFlagForSavingAccount?: string;
        billingAmount?: number;
        billingAmountCurrencyCode?: string;
        bKMUniqueMerchantId?: string;
        canEnterNewBOAProvisionSystem?: boolean;
        cardBrand?: string;
        cardSequenceNumber?: string;
        cashbackAmount?: number;
        cashbackCommissionAmount?: number;
        cashbackTaxRate?: number;
        cAVV?: string;
        channelId?: number;
        customerId?: number;
        cVV2?: string;
        description?: string;
        eCI?: number;
        entryMode?: string;
        expirationDate?: string;
        expireDate?: string;
        externalSourceCode?: string;
        externalTerminalType?: string;
        externalTransactionCode?: string;
        externalTransactionType?: number;
        iCCData?: string;
        isFromAccount?: boolean;
        limitBase?: BOA.Types.Kernel.DebitCard.LimitBaseType;
        localTransactionDate?: string;
        localTransactionTime?: string;
        mainGroupCode?: string;
        mCC?: string;
        merchantCity?: string;
        merchantCode?: string;
        merchantCountryCode?: string;
        merchantLocation?: string;
        merchantName?: string;
        merchantNumber?: string;
        originalAmount?: number;
        originalAmountCurrencyCode?: string;
        pAN?: string;
        performerTerminalId?: string;
        pINUnderLMK?: string;
        pinBlock?: string;
        pinKey?: string;
        pOSData?: string;
        pOSEntryMode?: string;
        referanceNumber?: string;
        resourceCode?: string;
        retrievalReferenceNumber?: string;
        reversalReasonCode?: string;
        rRN?: string;
        settlementAmount?: number;
        settlementAmountCurrencyCode?: string;
        stan?: string;
        subGroupCode?: string;
        systemTraceAuditNumber?: string;
        taxNumber?: string;
        terminalBranchId?: number;
        terminalId?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        track1?: string;
        track2?: string;
        tranDate?: Date;
        transactionCurrencyCode?: string;
        transactionDate?: string;
        transactionTime?: string;
        transactionType?: BOA.Types.Kernel.DebitCard.TransactionTypes;
        transmissionDTS?: string;
        zPKKeyIndex?: string;
    }
    interface DebitCardProvisionExtensions {
    }
    interface DebitCardProvisionExternalResponseCodes {
        success?: number;
        systemError?: number;
    }
    interface DebitCardProvisionProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.DebitCard.IDebitCardProvisionContext;
    }
    interface DebitCardProvisionResult extends BOA.Common.Types.Result {
        externalResponseCode?: number;
        internalResponseCode?: number;
        responseMessage?: string;
    }
    interface DebitCardProvisionResultCodes {
        accountNotFound?: number;
        fxNotAppropriate?: number;
        notEnoughBalance?: number;
        success?: number;
        systemError?: number;
        systemError_OriginalNotFound?: number;
        systemError_ProvisionFatalError?: number;
        systemError_ReverseAmountIsNotValid?: number;
        systemError_ReverseCurrencyCodeNotAppropriate?: number;
    }
    interface DebitCardProvisionReverseContract extends BOA.Common.Types.ContractBase {
        amountUsedFromAccount?: number;
        amountUsedFromKMH?: number;
        billingAmount?: number;
        billingCurrency?: string;
        blockageId?: number;
        businessKey?: number;
        cashbackAmount?: number;
        cashbackTaxRate?: number;
        commissionAmount?: number;
        kMHAccountSuffix?: number;
        kMHPackageId?: number;
        originalAmount?: number;
        originalCurrency?: string;
        originalDebitTransaction?: BOA.Types.Kernel.DebitCard.DebitTransactionContract;
        settlementAmount?: number;
        settlementCurrency?: string;
        systemDate?: Date;
        tranDate?: Date;
    }
    interface DebitCardStateContract extends BOA.Common.Types.ContractBase {
        stateCode?: string;
        stateName?: string;
    }
    interface DebitCardTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        cardNumber?: string;
        fec?: number;
        terminalId?: string;
        transactionDate?: string;
    }
    interface DebitCardWSInstantCustomerAddressContract extends BOA.Common.Types.ContractBase {
        cepTelAlanKodu?: string;
        cepTelNo?: string;
        cepTelUlkeKodu?: string;
        evAdres1?: string;
        evAdres2?: string;
        evAdres3?: string;
        evEmail?: string;
        evFaxAlanKodu?: string;
        evFaxNo?: string;
        evFaxUlkeKodu?: string;
        evPostaKodu?: string;
        evSehir?: string;
        evSehirKodu?: string;
        evSemt?: string;
        evTelAlanKodu?: string;
        evTelNo?: string;
        evTelUlkeKodu?: string;
        evUlke?: string;
        evUlkeKodu?: string;
        isAdres1?: string;
        isAdres2?: string;
        isAdres3?: string;
        isEmail?: string;
        isExtension?: string;
        isFaxAlanKodu?: string;
        isFaxNo?: string;
        isFaxUlkeKodu?: string;
        isPostaKodu?: string;
        isSehir?: string;
        isSehirKodu?: string;
        isSemt?: string;
        isTelAlanKodu?: string;
        isTelNo?: string;
        isTelUlkeKodu?: string;
        isUlke?: string;
        isUlkeKodu?: string;
        musteriNo?: number;
    }
    interface DebitCardWSInstantCustomerAddressContractResponse extends BOA.Common.Types.ResponseBase {
        insUpd?: string;
        rC?: number;
    }
    interface DebitCardWSInstantCustomerInfoContract extends BOA.Common.Types.ContractBase {
        acilKisi?: string;
        ad?: string;
        altGrupKodu?: string;
        anneAdi?: string;
        anneKizlikSoyad?: string;
        babaAdi?: string;
        birimKodu?: string;
        cinsiyet?: string;
        dogumTarihi?: string;
        dogumYeri?: string;
        embossadi?: string;
        firmaAdi?: string;
        firmaEmbossAdi?: string;
        firmaFlag?: string;
        firmaNo?: number;
        grupKOdu?: string;
        ikinciAd?: string;
        isGorev?: string;
        isyeriAdi?: string;
        kartGonderimAdres?: string;
        kartGonderimSube?: string;
        kartGonderimTipi?: string;
        kayitTarihi?: string;
        kimlikNo?: string;
        kimlikSeriNo?: string;
        kimlikTipi?: string;
        kizlikSoyad?: string;
        medeniDurumu?: string;
        musteriTipi?: string;
        mustNo?: number;
        sifreYolaSube?: string;
        sifreYollaAdres?: string;
        sifreYollamaTipi?: string;
        soyad?: string;
        sozlesmeFlag?: string;
        tabiyeti?: string;
        tabiyetiAciklama?: string;
        ticaretSicilNo?: string;
        tuzelUnvan?: string;
        unvan?: string;
        vergiDairesi?: string;
        vergiNo?: string;
    }
    interface DebitCardWSInstantCustomerInfoContractResponse extends BOA.Common.Types.ResponseBase {
        insUpd?: string;
        rC?: number;
    }
    interface DebitCardWSInstantGetCardNoContract extends BOA.Common.Types.ContractBase {
        anaHesapNo?: string;
        anaSubeKodu?: string;
        anindaBasim?: string;
        basimOnceligi?: number;
        birimKodu?: string;
        embossAdi?: string;
        embossUnvan?: string;
        firmaEmbossAdi?: string;
        grupKodu?: string;
        hkAdSoyad?: string;
        hkAdSoyad2?: string;
        hkAdSoyad3?: string;
        hkAdSoyad4?: string;
        hkAdSoyad5?: string;
        hkAdSoyad6?: string;
        hkAdSoyad7?: string;
        hkAdSoyad8?: string;
        hkDovizCinsi?: string;
        hkDovizCinsi2?: string;
        hkDovizCinsi3?: string;
        hkDovizCinsi4?: string;
        hkDovizCinsi5?: string;
        hkDovizCinsi6?: string;
        hkDovizCinsi7?: string;
        hkDovizCinsi8?: string;
        hkHesapNo?: string;
        hkHesapNo2?: string;
        hkHesapNo3?: string;
        hkHesapNo4?: string;
        hkHesapNo5?: string;
        hkHesapNo6?: string;
        hkHesapNo7?: string;
        hkHesapNo8?: string;
        hkHesapTuru?: string;
        hkHesapTuru2?: string;
        hkHesapTuru3?: string;
        hkHesapTuru4?: string;
        hkHesapTuru5?: string;
        hkHesapTuru6?: string;
        hkHesapTuru7?: string;
        hkHesapTuru8?: string;
        hkKullanimTuru?: string;
        hkKullanimTuru2?: string;
        hkKullanimTuru3?: string;
        hkKullanimTuru4?: string;
        hkKullanimTuru5?: string;
        hkKullanimTuru6?: string;
        hkKullanimTuru7?: string;
        hkKullanimTuru8?: string;
        hkMusteriNo?: number;
        hkMusteriNo2?: number;
        hkMusteriNo3?: number;
        hkMusteriNo4?: number;
        hkMusteriNo5?: number;
        hkMusteriNo6?: number;
        hkMusteriNo7?: number;
        hkMusteriNo8?: number;
        hkRumuz?: string;
        hkRumuz2?: string;
        hkRumuz3?: string;
        hkRumuz4?: string;
        hkRumuz5?: string;
        hkRumuz6?: string;
        hkRumuz7?: string;
        hkRumuz8?: string;
        hkSubeKodu?: string;
        hkSubeKodu2?: string;
        hkSubeKodu3?: string;
        hkSubeKodu4?: string;
        hkSubeKodu5?: string;
        hkSubeKodu6?: string;
        hkSubeKodu7?: string;
        hkSubeKodu8?: string;
        kartStili?: string;
        kartYollamaAdresi?: string;
        kartYollamaTipi?: string;
        kartYollaSube?: string;
        kayitTerm?: string;
        kayitTerminal?: string;
        kayitUser?: string;
        musteriNo?: number;
        rumuz?: string;
        sifreYollamaAdresi?: string;
        sifreYollamaTipi?: string;
        sifreYollaSube?: string;
    }
    interface DebitCardWSInstantGetCardNoContractResponse extends BOA.Common.Types.ResponseBase {
        kartNo?: string;
        rC?: number;
        rCDesc?: string;
    }
    interface DebitHelper {
    }
    interface DebitLimitContract extends BOA.Common.Types.ContractBase {
        aTMWithdrawalLimit?: number;
        bKMMoneyLimitRate?: number;
        bKMSellingLimitRate?: number;
        cashBackLimitRate?: number;
        creditCardWithdrawalRate?: number;
        depositAccountLimitRate?: number;
        depositLimitRate?: number;
        eFTLimitRate?: number;
        generalCommisionRate?: number;
        internalTransferLimitRate?: number;
        internationalMoneyLimitRate?: number;
        internationalSellingLimitRate?: number;
        kontorLimitRate?: number;
        mainDepositLimitRate?: number;
        mainPaymentLimitRate?: number;
        pOSSellingLimitRate?: number;
        transferLimitRate?: number;
    }
    interface DebitParameterContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        key?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        value0?: string;
        value1?: string;
        value2?: string;
        value3?: string;
        value4?: string;
        value5?: string;
        value6?: string;
        value7?: string;
        value8?: string;
        value9?: string;
    }
    interface DebitTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        acquirerId?: string;
        additionalResponseData?: string;
        amountUsedFromAccount?: number;
        amountUsedFromKMH?: number;
        authenticationId?: string;
        authorizationCode?: string;
        billingAmount?: number;
        billingCurrencyCode?: string;
        bKMUniqueMerchantId?: string;
        blockageId?: number;
        businessKey?: number;
        cardBrand?: string;
        cardNumber?: string;
        cardSequenceNumber?: string;
        cashbackAmount?: number;
        cashbackTaxRate?: number;
        channelId?: number;
        commissionAmount?: number;
        currentAmountScore?: number;
        debitTransactionId?: number;
        description?: string;
        entryMode?: string;
        errorMessage?: string;
        externalResponseCode?: number;
        externalTransactionCode?: string;
        externalTransactionType?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        hostName?: string;
        iCCData?: string;
        internalResponseCode?: number;
        isMernisChecked?: number;
        isReversed?: number;
        kMHAccountSuffix?: number;
        kMHPackageId?: number;
        kMHScore?: number;
        localTransactionDate?: string;
        localTransactionTime?: string;
        location?: string;
        merchantCode?: string;
        merchantNumber?: string;
        originalAmount?: number;
        originalCurrencyCode?: string;
        pOSData?: string;
        processTransactionDate?: string;
        processTransactionTime?: string;
        referenceNumber?: string;
        retrievalReferenceNumber?: string;
        reversalReasonCode?: string;
        reverseTransactionDate?: Date;
        settlementAmount?: number;
        settlementCurrencyCode?: string;
        sourceCode?: string;
        systemDate?: Date;
        systemTraceAuditNumber?: string;
        tableId?: number;
        taxNumber?: string;
        terminalBranchId?: number;
        terminalId?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        tranBranchId?: number;
        transactionCode?: string;
        transactionDate?: Date;
        transactionReference?: string;
        transmissionDTS?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DebitTransactionReverseContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        acquirerId?: string;
        additionalResponseData?: string;
        amountUsedFromAccount?: number;
        amountUsedFromKMH?: number;
        authenticationId?: string;
        authorizationCode?: string;
        billingAmount?: number;
        billingCurrencyCode?: string;
        bKMUniqueMerchantId?: string;
        blockageId?: number;
        businessKey?: number;
        cardBrand?: string;
        cardNumber?: string;
        cardSequenceNumber?: string;
        cashbackAmount?: number;
        cashbackTaxRate?: number;
        channelId?: number;
        commissionAmount?: number;
        currentAmountScore?: number;
        debitTransactionReverseId?: number;
        description?: string;
        entryMode?: string;
        errorMessage?: string;
        externalResponseCode?: number;
        externalTransactionCode?: string;
        externalTransactionType?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        hostName?: string;
        iCCData?: string;
        internalResponseCode?: number;
        isMernisChecked?: number;
        kMHAccountSuffix?: number;
        kMHPackageId?: number;
        kMHScore?: number;
        localTransactionDate?: string;
        localTransactionTime?: string;
        location?: string;
        merchantCode?: string;
        merchantNumber?: string;
        originalAmount?: number;
        originalCurrencyCode?: string;
        pOSData?: string;
        processTransactionDate?: string;
        processTransactionTime?: string;
        referenceNumber?: string;
        retrievalReferenceNumber?: string;
        reversalReasonCode?: string;
        reverseTransactionDate?: Date;
        settlementAmount?: number;
        settlementCurrencyCode?: string;
        systemDate?: Date;
        systemTraceAuditNumber?: string;
        tableId?: number;
        taxNumber?: string;
        terminalBranchId?: number;
        terminalId?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        tranBranchId?: number;
        transactionCode?: string;
        transactionDate?: Date;
        transactionReference?: string;
        transmissionDTS?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DebitTransactionSearchContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        externalResponseCodes?: number[];
        processTransactionTimeBegin?: string;
        processTransactionTimeEnd?: string;
        transactionDateBegin?: Date;
        transactionDateEnd?: Date;
    }
    interface DebitTransactionSearchResultContract extends BOA.Common.Types.ContractBase {
        acquirerIdDescription?: string;
        debitTransaction?: BOA.Types.Kernel.DebitCard.DebitTransactionContract;
        externalTransactionCodeDescription?: string;
        internalResponseCodeDescription?: string;
    }
    interface DebitTypeLoader {
    }
    interface ExternalResponseCodeContract extends BOA.Common.Types.ContractBase {
        description?: string;
        externalResponseCode?: number;
        iRCFrom?: number;
        iRCTo?: number;
        languageId?: number;
    }
    interface ExternalTransactionMapContract extends BOA.Common.Types.ContractBase {
        canGainGoldScore?: boolean;
        canUseKMH?: boolean;
        channelId?: BOA.Common.Types.ChannelContract;
        externalTransactionCode?: string;
        isActive?: boolean;
        isMoneyWithdrawal?: boolean;
        languageId?: number;
        messageType?: BOA.Types.Kernel.DebitCard.ExternalMessageType;
        reverseExternalTransactionCode?: string;
        transactionCode?: number;
        transactionName?: string;
    }
    interface ExtractAccountTransactionsContract extends BOA.Common.Types.ContractBase {
        kmhScore?: number;
        location?: string;
        settlementAmount?: number;
        totalScore?: number;
        transactionDate?: string;
        transactionDateAsDateTime?: Date;
    }
    interface ExtractCompositContract extends BOA.Common.Types.ContractBase {
        extractAccountTransactions?: BOA.Types.Kernel.DebitCard.ExtractAccountTransactionsContract[];
        extractCustomerInfo?: BOA.Types.Kernel.DebitCard.ExtractCustomerInfoContract[];
        extractGoldScoreCalculation?: BOA.Types.Kernel.DebitCard.ExtractGoldScoreContract[];
        extractPath?: string;
    }
    interface ExtractCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressText?: string;
        availableKarzLimit?: number;
        cardEmbossName?: string;
        cardNumber?: string;
        cardNumberFormatted?: string;
        cardStatus?: string;
        cardType?: string;
        cardVendor?: string;
        expiryDate?: Date;
        expiryDateFormatted?: string;
        expiryDateFormattedNext?: string;
        expiryDateNext?: Date;
        extractDebt?: number;
        karzLimit?: number;
        karzOpenDate?: Date;
        karzStatus?: boolean;
        maturityDate?: Date;
        maturityDateDay?: number;
        maturityDateFormatted?: string;
        maturityDateFormattedNext?: string;
        maturityDateNext?: Date;
        productName?: string;
        totalDebt?: number;
    }
    interface ExtractGoldScoreContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        cardNumber?: string;
        convertedGoldSore?: number;
        currentGoldScore?: number;
        obtainedGoldSore?: number;
        obtainedGoldSoreAll?: number;
        transferredGoldSore?: number;
        transferredGoldSoreToAccount?: number;
    }
    interface ExtractSummaryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        convertedGoldScore?: number;
        currentGoldScore?: number;
        expiryDate?: Date;
        extractDebt?: number;
        extractId?: number;
        hostName?: string;
        karzLimit?: number;
        maturityDate?: Date;
        nextExpiryDate?: Date;
        nextMaturityDate?: Date;
        obtainedAllGoldScore?: number;
        obtainedGoldScore?: number;
        productType?: string;
        systemDate?: Date;
        transferredGoldScore?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FWD {
    }
    interface GoldScoreRateMiniContract extends BOA.Common.Types.ContractBase {
        currentAccountRate?: number;
        kMHAccountRate?: number;
    }
    interface ICardInfoCustomerSMSMessageData {
        accountNumber?: number;
        cardNumber?: string;
        cardStatusCode?: string;
    }
    interface IDebitCardProvision {
        provisionData?: BOA.Types.Kernel.DebitCard.DebitCardProvisionContract;
    }
    interface IDebitCardProvisionContext {
        account?: BOA.Types.Kernel.Account.AccountSaveContract;
        acquirerBankAccount?: BOA.Types.Kernel.Account.AccountSaveContract;
        acquirerBankAccountNumber?: number;
        acquirerBankAccountSuffix?: number;
        amountUsedFromAccount?: number;
        amountUsedFromKMH?: number;
        authenticationId?: string;
        availableBalance?: number;
        availableBalanceAfterKMHMinimumLimit?: number;
        blockageAmount?: number;
        blockageDescription?: string;
        blockageId?: number;
        businessKey?: number;
        cache?: BOA.Types.Kernel.DebitCard.DebitCardCache;
        campaignFlag?: number;
        cardGroup?: BOA.Types.Kernel.DebitCard.IReadonlyCardGroupContract;
        cardInfo?: BOA.Types.Kernel.DebitCard.IReadOnlyCardInfoContract;
        channelId?: BOA.Common.Types.ChannelContract;
        commissionAmount?: number;
        externalTransactionMap?: BOA.Types.Kernel.DebitCard.ExternalTransactionMapContract;
        goldScoreForAmountUsedFromAccount?: number;
        goldScoreForAmountUsedFromKMH?: number;
        isMernisChecked?: boolean;
        isMoneyWithdrawal?: boolean;
        kMHInfo?: BOA.Types.Kernel.DebitCard.DebitCardKMHInfoContract;
        mCCGroupCode?: string;
        merchantCity?: string;
        merchantCountryCode?: string;
        merchantName?: string;
        messageType?: BOA.Types.Kernel.DebitCard.ExternalMessageType;
        panEntryMode?: string;
        pinEntryMode?: string;
        provisionContract?: BOA.Types.Kernel.DebitCard.IDebitCardProvisionContract;
        responseBalance?: number;
        responseBlockedAmount?: number;
        settlementFecId?: number;
        settlementFxRate?: number;
        settlementFxRateDay?: Date;
        toAccount?: BOA.Types.Kernel.Account.AccountSaveContract;
        totalTransactionAmount?: number;
        transactionCode?: number;
        transactionName?: string;
    }
    interface IDebitCardProvisionContextForOrchestrationSide {
        authenticationId?: string;
        commissionAmount?: number;
        pAN?: string;
        totalTransactionAmount?: number;
    }
    interface IDebitCardProvisionContract {
        accountNumber?: number;
        accountSuffix?: number;
        acquirerBankId?: string;
        additionalResponseData?: string;
        authorizationCode?: string;
        authorizationFlagForSavingAccount?: string;
        billingAmount?: number;
        billingAmountCurrencyCode?: string;
        bKMUniqueMerchantId?: string;
        canEnterNewBOAProvisionSystem?: boolean;
        cardBrand?: string;
        cardSequenceNumber?: string;
        cashbackAmount?: number;
        cashbackCommissionAmount?: number;
        cashbackTaxRate?: number;
        cAVV?: string;
        channelId?: number;
        customerId?: number;
        cVV2?: string;
        description?: string;
        eCI?: number;
        entryMode?: string;
        expirationDate?: string;
        expireDate?: string;
        externalSourceCode?: string;
        externalTerminalType?: string;
        externalTransactionCode?: string;
        externalTransactionType?: number;
        iCCData?: string;
        isFromAccount?: boolean;
        limitBase?: BOA.Types.Kernel.DebitCard.LimitBaseType;
        localTransactionDate?: string;
        localTransactionTime?: string;
        mainGroupCode?: string;
        mCC?: string;
        merchantCity?: string;
        merchantCode?: string;
        merchantCountryCode?: string;
        merchantLocation?: string;
        merchantName?: string;
        merchantNumber?: string;
        originalAmount?: number;
        originalAmountCurrencyCode?: string;
        pAN?: string;
        performerTerminalId?: string;
        pINUnderLMK?: string;
        pinBlock?: string;
        pinKey?: string;
        pOSData?: string;
        pOSEntryMode?: string;
        referanceNumber?: string;
        resourceCode?: string;
        retrievalReferenceNumber?: string;
        reversalReasonCode?: string;
        rRN?: string;
        settlementAmount?: number;
        settlementAmountCurrencyCode?: string;
        stan?: string;
        subGroupCode?: string;
        systemTraceAuditNumber?: string;
        taxNumber?: string;
        terminalBranchId?: number;
        terminalId?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        track1?: string;
        track2?: string;
        tranDate?: Date;
        transactionCurrencyCode?: string;
        transactionDate?: string;
        transactionTime?: string;
        transactionType?: BOA.Types.Kernel.DebitCard.TransactionTypes;
        transmissionDTS?: string;
        zPKKeyIndex?: string;
    }
    interface IDebitCardTechnicalProvisionContext {
        additionalResponseData?: string;
        cardGroup?: BOA.Types.Kernel.DebitCard.IReadonlyCardGroupContract;
        cardInfo?: BOA.Types.Kernel.DebitCard.IReadOnlyCardInfoContract;
        cardStatusCode?: string;
        cAVV?: string;
        expirationDateOfCardInDatabase?: string;
        externalSourceCode?: string;
        isVerifyPINControlDisabled?: boolean;
        pOSEntryModeIsNonThreeDEntry?: boolean;
        userEnteredCVV2?: string;
        userEnteredExpireDate?: string;
        userEnteredPinBlock?: string;
        userEnteredTrack2?: string;
    }
    interface ImmediatePrintCardInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchPrinterName?: string;
        cardGroupCode?: string;
        cardGroupName?: string;
        cardNumber?: string;
        cardPrintStatus?: string;
        cardStyle?: string;
        cardType?: string;
        channelId?: number;
        cvv?: string;
        cvv2?: string;
        cVV2Encrypted?: string;
        cvvEncrypted?: string;
        deliveryDate?: Date;
        deliveryStatus?: string;
        deliveryUser?: string;
        embossName?: string;
        expirationDate?: string;
        expirationPeriod?: number;
        followNumber?: number;
        hostName?: string;
        oldCvv?: string;
        oldCvv2?: string;
        oldCVV2Encrypted?: string;
        oldCvvEncrypted?: string;
        printDate?: Date;
        printDescription?: string;
        printStatus?: string;
        printTrialNumber?: number;
        productCode?: string;
        pVVEncrypted?: string;
        pvvKey?: string;
        pvvKeyIndex?: string;
        recordDate?: Date;
        serviceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InternalResponseCodeContract extends BOA.Common.Types.ContractBase {
        description?: string;
        internalResponseCode?: number;
        languageId?: number;
    }
    interface IReadOnlyAnonymousCardInfoContract {
        cardExpirationDate?: string;
        cardGroupInfo?: BOA.Types.Kernel.DebitCard.IReadonlyCardGroupContract;
        cardInUsePin?: string;
        cardNumber?: string;
        courierBarcodeCode?: string;
        cVV?: string;
        cVV2?: string;
        cVV2Index?: number;
        pVV?: string;
        pVVKeyIndex?: number;
        status?: BOA.Types.Kernel.DebitCard.AnonymousCardInfoStatus;
    }
    interface IReadOnlyBkm3DSecureContract {
        cardNumber?: string;
        customerId?: number;
        dESKey?: string;
        email?: string;
        embossName?: string;
        expireDate?: string;
        fileName?: string;
        id?: number;
        isOnlineNotify?: number;
        reasonCode?: number;
        reasonCodeDesc?: string;
        resultCode?: number;
        status?: number;
        taxNumber?: string;
    }
    interface IReadOnlyCardAccountContract {
        accountNickName?: string;
        accountNumber?: number;
        accountOwnerNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        accountUsingName?: string;
        accountUsingType?: string;
        branchId?: number;
        branchName?: string;
        cardNumber?: string;
        cardType?: string;
        channelId?: number;
        customerName?: string;
        dailyATMWithdrawal?: number;
        dailyTransferAmount?: number;
        fecCode?: number;
        fecName?: string;
        hostName?: string;
        isDependentAccountChecked?: boolean;
        isMainAccountChecked?: boolean;
        lastTransDate?: Date;
        lastTransferDate?: Date;
        printingDate?: Date;
        productName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IReadonlyCardGroupContract {
        bKMExpressKeyA?: string;
        bKMExpressKeyB?: string;
        cardBrand?: string;
        cardExpirationDate?: number;
        cardFee?: number;
        cardFormatType?: string;
        cardLength?: number;
        cardRenewalFee?: number;
        cardType?: string;
        cardVendorType?: string;
        cAVVKeyA?: string;
        cAVVKeyB?: string;
        chipServiceCode?: string;
        cVK?: string;
        cVVKeyA?: string;
        cVVKeyB?: string;
        decimalTable?: string;
        hostName?: string;
        isNewCardPrintPwd?: boolean;
        issuerWorkKey?: string;
        isWebDefaultSelected?: boolean;
        isWebDoNotShow?: boolean;
        orderNumber?: number;
        pINKey?: string;
        prefixCode?: string;
        prefixName?: string;
        printFormat?: string;
        pVD?: string;
        pVVKeyA1?: string;
        pVVKeyA2?: string;
        pVVKeyB1?: string;
        pVVKeyB2?: string;
        sequentialPasswordError?: number;
        sequentialPasswordError2?: number;
        serviceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorBIN?: string;
        zCMK?: string;
    }
    interface IReadOnlyCardInfoContract {
        accountNumber?: number;
        birthDateValidationFailCount?: number;
        branchId?: number;
        brushColor?: string;
        cardCallCenterPin?: string;
        cardClosingDate?: Date;
        cardDemandChannelId?: number;
        cardEmbossName?: string;
        cardEmbossString?: string;
        cardEmbossTitle?: string;
        cardExpirationDate?: string;
        cardFirmEmbossName?: string;
        cardFirmNo?: number;
        cardGroupCode?: string;
        cardInUsePin?: string;
        cardNumber?: string;
        cardPasswordDemandChannelId?: number;
        cardPasswordPostingAddress?: string;
        cardPasswordPostingBranchId?: number;
        cardPasswordPostingType?: string;
        cardPin?: string;
        cardPostingAddress?: string;
        cardPostingBranchId?: number;
        cardPostingType?: string;
        cardPrintingDate?: Date;
        cardPrintPasswordReason?: string;
        cardPrintReason?: string;
        cardPVVOffset?: number;
        cardStatusChangeDesc?: string;
        cardStatusCode?: string;
        cardStatusDescription?: string;
        cardStyleCode?: string;
        cardStyleName?: string;
        cAVVKeyA?: string;
        cAVVKeyB?: string;
        changeStatusDate?: Date;
        chipFlag?: string;
        chipNo?: number;
        countInternalTransferAccount?: number;
        countTransferAccount?: number;
        courierBarcodeCode?: string;
        customerStatus?: string;
        cVV?: string;
        cVV2?: string;
        cVV2Index?: number;
        cVVKeyA?: string;
        cVVKeyB?: string;
        dailySequentialPasswordError?: number;
        firstTranDate?: Date;
        hostName?: string;
        incorrectPinDate?: string;
        intPwdReqDate?: Date;
        isActive?: boolean;
        isCardPrint?: boolean;
        isCardSend?: boolean;
        isCardValid?: boolean;
        isImmediate?: boolean;
        isKmhUsing?: boolean;
        isPrintPassword?: boolean;
        isRowActive?: boolean;
        isUnlimitedExpiration?: boolean;
        lastTranDate?: Date;
        ledgerId?: number;
        mainAccountNumber?: string;
        mainBranchId?: number;
        nickName?: string;
        oldCardNumber?: string;
        oldCVV?: string;
        oldCVV2?: string;
        oldCVVExpireDate?: string;
        oldPIN?: string;
        passwordPrintDate?: Date;
        pINOfset?: string;
        pinTryCount?: number;
        printPriority?: number;
        printStatusCode?: string;
        printTrialNumber?: number;
        productCode?: string;
        productName?: string;
        pVV?: string;
        pVVKeyIndex?: number;
        resultCode?: number;
        resultMessage?: string;
        sequentialPasswordError?: number;
        serviceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IReadOnlyCustomerMemoContract {
        accountNumber?: number;
        cardNumber?: string;
        channelId?: number;
        hostName?: string;
        memo?: string;
        state?: string;
        subject?: string;
        userName?: string;
    }
    interface IReadOnlyDebitCardLimitContract {
        aTMWithdrawalLimit?: number;
        bKMMoneyLimitRate?: number;
        bKMSellingLimitRate?: number;
        cashBackLimitRate?: number;
        creditCardWithdrawalRate?: number;
        depositAccountLimitRate?: number;
        depositLimitRate?: number;
        eFTLimitRate?: number;
        generalCommisionRate?: number;
        internalTransferLimitRate?: number;
        internationalMoneyLimitRate?: number;
        internationalSellingLimitRate?: number;
        kontorLimitRate?: number;
        mainDepositLimitRate?: number;
        mainPaymentLimitRate?: number;
        pOSSellingLimitRate?: number;
        transferLimitRate?: number;
    }
    interface IReadOnlyDebitTransactionContract {
        accountNumber?: number;
        accountSuffix?: number;
        acquirerId?: string;
        additionalResponseData?: string;
        amountUsedFromAccount?: number;
        amountUsedFromKMH?: number;
        authenticationId?: string;
        authorizationCode?: string;
        billingAmount?: number;
        billingCurrencyCode?: string;
        bKMUniqueMerchantId?: string;
        blockageId?: number;
        businessKey?: number;
        cardBrand?: string;
        cardNumber?: string;
        cardSequenceNumber?: string;
        cashbackAmount?: number;
        cashbackTaxRate?: number;
        channelId?: number;
        commissionAmount?: number;
        currentAmountScore?: number;
        debitTransactionId?: number;
        description?: string;
        entryMode?: string;
        errorMessage?: string;
        externalResponseCode?: number;
        externalTransactionCode?: string;
        externalTransactionType?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        hostName?: string;
        iCCData?: string;
        internalResponseCode?: number;
        isMernisChecked?: number;
        isReversed?: number;
        kMHAccountSuffix?: number;
        kMHPackageId?: number;
        kMHScore?: number;
        localTransactionDate?: string;
        localTransactionTime?: string;
        location?: string;
        merchantCode?: string;
        merchantNumber?: string;
        originalAmount?: number;
        originalCurrencyCode?: string;
        pOSData?: string;
        processTransactionDate?: string;
        processTransactionTime?: string;
        referenceNumber?: string;
        retrievalReferenceNumber?: string;
        reversalReasonCode?: string;
        reverseTransactionDate?: Date;
        settlementAmount?: number;
        settlementCurrencyCode?: string;
        sourceCode?: string;
        systemDate?: Date;
        systemTraceAuditNumber?: string;
        tableId?: number;
        taxNumber?: string;
        terminalBranchId?: number;
        terminalId?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        tranBranchId?: number;
        transactionCode?: string;
        transactionDate?: Date;
        transactionReference?: string;
        transmissionDTS?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IReadOnlyExtractGoldScoreContract {
        businessKey?: number;
        cardNumber?: string;
        convertedGoldSore?: number;
        currentGoldScore?: number;
        obtainedGoldSore?: number;
        obtainedGoldSoreAll?: number;
        transferredGoldSore?: number;
        transferredGoldSoreToAccount?: number;
    }
    interface IReadonlyZoneKeyContract {
        zmkULmk?: string;
        zmkULmkKcv?: string;
        zoneCode?: string;
        zpkULmk?: string;
        zpkULmkKcv?: string;
        zpkUZmk?: string;
        zpkUZmkKcv?: string;
    }
    interface IsOnlineNotify {
    }
    interface Labels {
        convertedGoldSore?: string;
        currentGoldScore?: string;
        obtainedGoldSore?: string;
        obtainedGoldSoreAll?: string;
        transferredGoldSore?: string;
        transferredGoldSoreToAccount?: string;
    }
    interface LogFileSerializer {
    }
    interface MapiKeyContract extends BOA.Common.Types.ContractBase {
        expireDate?: Date;
        key?: string;
        keyId?: number;
        keyType?: string;
    }
    interface MassEmbossPlainTextForMagneticCardContract extends BOA.Common.Types.ContractBase {
        addressCity?: string;
        addressCounty?: string;
        addressLine01?: string;
        addressLine02?: string;
        addressLine03?: string;
        addressText?: string;
        barcodeCode?: string;
        branchId?: number;
        branchName?: string;
        cardPostingType?: string;
        cardPrintReason?: string;
        cardStyleCode?: string;
        companyEmbossName?: string;
        companyName?: string;
        customerAccountNo?: number;
        customerGroupCode?: string;
        cVV?: string;
        cVV2?: string;
        cVVEncrypted?: string;
        embossingOffice?: BOA.Types.Kernel.DebitCard.EmbossingOffice;
        embossName?: string;
        embossTitle?: string;
        expireDateYYYYMM?: string;
        name?: string;
        oldCVVEncrypted?: string;
        pAN?: string;
        pvkIndex?: number;
        pVV?: string;
        rowNum?: number;
        serviceCode?: string;
        surname?: string;
        zipCode?: string;
    }
    interface MCCContract extends BOA.Common.Types.ContractBase {
        description?: string;
        languageId?: number;
        mCC?: string;
    }
    interface Messages {
        accountBranchNumberNotFound?: string;
        accountNotFoundAccountNumberAndSuffixAre?: string;
        errorOccured?: string;
        recordsRetrievedCountIs?: string;
        thereIsNoRecordForThisBarcode?: string;
        tlAccountNotFound?: string;
    }
    interface MonthlyDay extends BOA.Common.Types.ContractBase {
        monthDay?: string;
        monthDayCode?: number;
    }
    interface ParticipationRetirementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        cardNumber?: string;
        cardNumberMasked?: string;
        iban?: string;
    }
    interface ProductContract extends BOA.Common.Types.ContractBase {
        productCode?: string;
    }
    interface ProductRequest extends BOA.Common.Types.RequestBase {
        parentProductCode?: string;
    }
    interface Property {
        convertedGoldSore?: string;
        currentGoldScore?: string;
        obtainedGoldSore?: string;
        obtainedGoldSoreAll?: string;
        transferredGoldSore?: string;
        transferredGoldSoreToAccount?: string;
    }
    interface RestrictedMCCContract extends BOA.Common.Types.ContractBase {
        isDomestic?: boolean;
        isMaster?: boolean;
        isVisa?: boolean;
        mCC?: string;
    }
    interface TrackData extends BOA.Common.Types.ContractBase {
        cVV?: string;
        expireDate?: Date;
        pAN?: string;
        serviceCode?: string;
        trackId?: number;
    }
    interface TrackDataParser {
    }
    interface TransactionLimitContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        base?: BOA.Types.Kernel.DebitCard.LimitBaseType;
        transactionCode?: number;
    }
    interface TypesKernelDebitCardExtensions {
    }
    interface WeeklyDay extends BOA.Common.Types.ContractBase {
        weekDay?: string;
        weekDayCode?: number;
    }
    interface ZoneKeyContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        zmkULmk?: string;
        zmkULmkKcv?: string;
        zoneCode?: string;
        zpkULmk?: string;
        zpkULmkKcv?: string;
        zpkUZmk?: string;
        zpkUZmkKcv?: string;
    }
}
declare namespace BOA.Types.Kernel.DebitCard.BanksoftConstant {
    interface TransactionCode {
        aTMNODebitCommission?: string;
        aTMNODebitCommissionBalanceInquiry?: string;
        balanceInquiryCommission?: string;
        balanceInquiryCommissionReverse?: string;
        domesticCashWithdrawal?: string;
        domesticCashWithdrawalReverse?: string;
        domesticMoneyTransfer?: string;
        domesticMoneyTransferReverse?: string;
        domesticPosPurchase?: string;
        domesticPosPurchaseReverse?: string;
        mastercardBalanceInquiry?: string;
        mastercardBalanceInquiryReverse?: string;
        mCCashWithdrawal?: string;
        mCCashWithdrawalReverse?: string;
        mCPosPurchase?: string;
        mCPosPurchaseReverse?: string;
        moneyFunding?: string;
        moneyFundingReverse?: string;
        pINChangeIssuing?: string;
        pINChangeIssuingReverse?: string;
        pINUnblock?: string;
        pINUnblockReverse?: string;
        posPurchase?: string;
        posPurchaseReverse?: string;
        visaCashWithdrawal?: string;
        visaCashWithdrawalReverse?: string;
        visaPosPurchase?: string;
        visaPosPurchaseReverse?: string;
    }
}
declare namespace BOA.Types.Kernel.DebitCard.DebitCardCache {
    interface IRateInformations {
        commonPointATMBalanceInquiry?: number;
        commonPointATMWithdrawalCommissionRate?: number;
        commonPointATMWithdrawalConstant?: number;
        singlePointATMBalanceInquiry?: number;
    }
}
declare namespace BOA.Types.Kernel.DebitCard.DebitCardCommon {
    interface CardSendingType {
    }
    interface CustomerLimitRate {
    }
    interface DebitCardState {
    }
    interface PasswordSendingType {
    }
}
declare namespace BOA.Types.Kernel.DebitCard.DebitCardConstant {
    interface AccountUsingType {
    }
    interface AddressType {
    }
    interface Bkm3DSecureNotifyReasonCode {
    }
    interface Bkm3DSecureNotifyResultCodeDescriptions {
    }
    interface Bkm3DSecureNotifyStatus {
    }
    interface CardPrintReason {
    }
    interface CardPrintType {
    }
    interface CardStatus {
    }
    interface ComingSourceDescription {
    }
    interface CustomerMainGroup {
    }
    interface DebitClearingAccountingStatus {
        processing?: number;
    }
    interface DebitClearingAccountingType {
    }
    interface GoldCardChangeInfoState {
    }
    interface GoldScoreIsCycle {
    }
    interface KMHProductCode {
    }
    interface PostingType {
    }
    interface PrintStatus {
    }
    interface PrintStatusDescription {
    }
    interface ProductType {
        oZELBANKACILIKDEBITK?: string;
    }
    interface StyleCode {
    }
    interface TerminalType {
    }
}
declare namespace BOA.Types.Kernel.DebitCard.DynamicCoding {
    export const enum DynamicCodeGroups {
        ProcessKernelDebitCard = 0,
        UICardGeneralDebitCardCommon = 1,
        VirtualPosServices = 2,
        CardGeneralDebitTCPListener = 3
    }
    interface CodeContract {
        newImplementationTypeFullName?: string;
        outputAssemblyName?: string;
        referenceAssemblyNames?: string[];
        sourceCode?: string;
    }
    interface Compiler {
    }
    interface DynamicCode {
        context?: BOA.Types.Kernel.DebitCard.DynamicCoding.DynamicCodeContext;
    }
    interface DynamicCodeContext {
        callerInformation?: BOA.Types.Kernel.DebitCard.DynamicCoding.DynamicCodeGroups;
        dataLayer?: BOA.Types.Kernel.DebitCard.DynamicCoding.IDynamicCodeDataLayer;
        objectCreator?: BOA.Types.Kernel.DebitCard.DynamicCoding.IDynamicCodeObjectCreator;
    }
    interface IDynamicCode {
    }
    interface IDynamicCodeDataLayer {
    }
    interface IDynamicCodeObjectCreator {
    }
    interface TypeCache {
    }
    interface TypeCacheFactory {
    }
}
declare namespace BOA.Types.Kernel.DebitCard.DynamicCoding.TypeCacheFactory {
    interface CacheItem {
        creationTime?: Date;
        duration?: any;
        value?: BOA.Types.Kernel.DebitCard.DynamicCoding.TypeCache;
    }
}
declare namespace BOA.Types.Kernel.DebtSecurity {
    interface CustodianContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerName?: string;
    }
    interface DailyAccrualContract extends BOA.Common.Types.ContractBase {
        accruedCouponReturn?: number;
        accruedPurchasePrice?: number;
        accruedReturn?: number;
        accruedReturnPerUnit?: number;
        amortizedCost?: number;
        amortizedPremiumAndDiscount?: number;
        correctedAccruedPurchasePrice?: number;
        correctedAmortizedCost?: number;
        correctedUnitPurchasePrice?: number;
        couponReturn?: number;
        couponReturnPerUnit?: number;
        date?: Date;
        daysElapsed?: number;
        daysElapsedForAcc?: number;
        iRRValue?: number;
        isCorrectionApplied?: boolean;
        marketValue?: number;
        period?: number;
        remainingNominal?: number;
        unamortizedPremiumAndDiscount?: number;
    }
    interface SecurityComboContract extends BOA.Common.Types.ContractBase {
        cBTCode?: string;
        fec?: number;
        fecCode?: string;
        isActive?: boolean;
        iSIN?: string;
        issueDate?: Date;
        issueLocation?: number;
        issuerAccountNumber?: number;
        issuerAccountSuffix?: number;
        issuerType?: number;
        maturityDate?: Date;
        perUnit?: number;
        reutersCode?: string;
        securityId?: number;
        securityTemplate?: number;
    }
    interface XirrContract extends BOA.Common.Types.ContractBase {
        tranDate?: Date;
        xirrCashFlow?: BOA.Types.Kernel.DebtSecurity.XirrValuesContract[];
        xirrRate?: number;
    }
    interface XirrValuesContract extends BOA.Common.Types.ContractBase {
        cashFlow?: number;
        coupon?: BOA.Types.Kernel.FX.SecurityCouponContract;
        couponDays?: number;
        couponRate?: number;
        days?: number;
        periodEnd?: number;
        periodStart?: number;
    }
}
declare namespace BOA.Types.Kernel.DirectFundUtilization {
    interface ApplicationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentLimit?: number;
        applicationDate?: Date;
        applicationId?: number;
        applicationInfo?: BOA.Types.Kernel.FundUtilization.ApplicationSaveContract;
        applicationLimit?: number;
        branchId?: number;
        educationLevel?: number;
        employmentType?: number;
        employmentYear?: number;
        gradeType?: number;
        homeState?: number;
        inhabitancyMonth?: number;
        inhabitancyYear?: number;
        monthlyExpense?: number;
        monthlyIncomeCertified?: number;
        monthlyIncomeUnCertified?: number;
        monthlyPayment?: number;
        socialSecurityInstitution?: number;
        taxNumber?: string;
    }
    interface ApplicationResultContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        autoAllotmentMessage?: string;
        reasonOfNotAutoAllotment?: number;
    }
    interface CommissionHistoryContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businnessKey?: number;
        commisionCode?: string;
        commissionHistoryId?: number;
        description?: string;
        percent?: number;
        processType?: number;
        purchaserId?: number;
        relatedPurchaserId?: number;
        relatedSupplierId?: number;
        supplierId?: number;
        systemDate?: Date;
        tranDate?: Date;
    }
    interface Constants {
        active?: number;
        checked?: number;
        onlinePaymentCancelActionId?: number;
        onlinePaymentCancelResourceCode?: string;
        onlinePaymentReconciliationFileNameFormat?: string;
        oTSPaymentCancelActionId?: number;
        oTSPaymentCancelResourceCode?: string;
        supplierLimitFileNameFormat?: string;
        tL?: number;
        unChecked?: number;
        useAllSuffix?: number;
    }
    interface CorporateWebSiteContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        installmentList?: BOA.Types.Kernel.FundUtilization.InstallmentContract[];
        proposalId?: number;
        supplierAccountNumber?: number;
    }
    interface DoPaymentContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        extensionFileName?: string;
        extensionPath?: string;
        fecContract?: BOA.Types.Kernel.General.FECContract;
        htmlDataList?: string;
        invoiceContract?: BOA.Types.Kernel.DirectFundUtilization.InvoiceContract;
        invoiceCount?: number;
        invoiceFileName?: string;
        invoiceTransactionContract?: BOA.Types.Kernel.DirectFundUtilization.InvoiceTransactionContract;
        onlinePaymentReconciliationDetailContract?: BOA.Types.Kernel.DirectFundUtilization.OnlinePaymentReconciliationDetailContract;
        orderContract?: BOA.Types.Kernel.DirectFundUtilization.OrderContract;
        orderInvoiceContract?: BOA.Types.Kernel.DirectFundUtilization.OrderInvoiceContract;
        oTSPaymentContract?: BOA.Types.Kernel.DirectFundUtilization.OTSPaymentContract;
        payBackPlanContract?: BOA.Types.Kernel.FundUtilization.PayBackPlanContract;
        paymentDecisionContract?: BOA.Types.Kernel.DirectFundUtilization.PaymentDecisionContract;
        purchaserContract?: BOA.Types.Kernel.DirectFundUtilization.PurchaserContract;
        purchaserCustomerInfoContract?: BOA.Types.Kernel.Customer.CustomerInfoContract;
        resourceCode?: string;
        resourceId?: number;
        supplierContract?: BOA.Types.Kernel.DirectFundUtilization.SupplierContract;
        supplierCustomerInfoContract?: BOA.Types.Kernel.Customer.CustomerInfoContract;
        supplierPurchaserLimitContract?: BOA.Types.Kernel.DirectFundUtilization.SupplierPurchaserLimitContract;
        totalInvoiceAmount?: number;
    }
    interface Enums {
    }
    interface FileContentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cancelRecordCount?: number;
        cancelRecordTotalAmount?: number;
        firmCode?: string;
        firstInvoiceDescription?: string;
        invoiceList?: BOA.Types.Kernel.DirectFundUtilization.InvoiceContract[];
        paymentRecordCount?: number;
        paymentRecordTotalAmount?: number;
        purchaserName?: string;
        recordCount?: number;
        recordTotalAmount?: number;
        supplier?: BOA.Types.Kernel.DirectFundUtilization.SupplierContract;
        supplierBranchId?: number;
        supplierName?: string;
        supplierPurchaser?: BOA.Types.Kernel.DirectFundUtilization.SupplierPurchaserContract;
        tranDate?: Date;
        tranNextDate?: Date;
    }
    interface FTPDefinitionContract extends BOA.Common.Types.ContractBase {
        address?: string;
        archiveFolder?: string;
        code?: string;
        fTPDefinitionId?: number;
        fTPType?: string;
        fTPUser?: string;
        hostIP?: string;
        hostName?: string;
        invoiceFileDefinitionCode?: string;
        invoiceFolder?: string;
        limitFileDefinitionCode?: string;
        limitFolder?: string;
        name?: string;
        password?: string;
        paymentFileDefinitionCode?: string;
        paymentFolder?: string;
        port?: number;
        resultFileDefinitionCode?: string;
        resultFolder?: string;
        systemDate?: Date;
        tempFolder?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FTPProcessContract extends BOA.Common.Types.ContractBase {
        fileType?: number;
        fTPProcessId?: number;
        hostIP?: string;
        hostName?: string;
        processType?: number;
        sourceFile?: string;
        status?: number;
        supplierId?: number;
        supplierPurchaserId?: number;
        systemDate?: Date;
        targetFile?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FTPProcessTraceContract extends BOA.Common.Types.ContractBase {
        fTPProcessId?: number;
        fTPProcessTraceId?: number;
        severity?: number;
        supplierId?: number;
        supplierPurchaserId?: number;
        systemDate?: Date;
        traceLog?: string;
    }
    interface FTPReadProcessContract extends BOA.Common.Types.ContractBase {
        address?: string;
        ftpDefinitionCode?: string;
        ftpType?: string;
        fTPUser?: string;
        group?: string;
        password?: string;
        port?: number;
        supplierId?: number;
        supplierPurchaserId?: number;
    }
    interface InformationRequest extends BOA.Common.Types.RequestBase {
        doPaymentContract?: BOA.Types.Kernel.DirectFundUtilization.DoPaymentContract;
    }
    interface InvoiceContract extends BOA.Common.Types.ContractBase {
        allotmentCommissionRate?: number;
        allotmentExtendedDayCount?: number;
        allotmentSupplierCommissionRate?: number;
        amount?: number;
        applicationId?: number;
        businessKey?: number;
        dCSCommissionPercent?: number;
        dCSPurchaserCommissionPercent?: number;
        debtFer?: number;
        description?: string;
        dueDate?: Date;
        endTransactionDate?: Date;
        fec?: number;
        fecCode?: string;
        firstTransactionDate?: Date;
        hostIP?: string;
        hostName?: string;
        installmentCount?: number;
        invoiceId?: number;
        loanCommissionRate?: number;
        loanProfitRate?: number;
        maturityType?: number;
        nonPaymentPeriod?: number;
        number?: string;
        operationType?: number;
        paymentDescription?: string;
        paymentTime?: any;
        processType?: string;
        purchaserAccountNumber?: number;
        purchaserBranchId?: number;
        purchaserCode?: string;
        purchaserId?: number;
        purchaserName?: string;
        resultCode?: string;
        resultDescription?: string;
        status?: number;
        statusName?: string;
        supplierAccountNumber?: number;
        supplierId?: number;
        supplierName?: string;
        systemDate?: Date;
        transactionDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InvoiceFileContentContract extends BOA.Common.Types.ContractBase {
        footer?: BOA.Types.Kernel.DirectFundUtilization.FileContentContract;
        header?: BOA.Types.Kernel.DirectFundUtilization.FileContentContract;
        invoiceList?: BOA.Types.Kernel.DirectFundUtilization.InvoiceContract[];
        orderInvoiceList?: BOA.Types.Kernel.DirectFundUtilization.OrderInvoiceContract[];
        orderList?: BOA.Types.Kernel.DirectFundUtilization.OrderContract[];
    }
    interface InvoiceTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        invoiceId?: number;
        invoiceTransactionId?: number;
        projectId?: number;
        purchaserAccountNumber?: number;
        purchaserAccountSuffix?: number;
        supplierAccountNumber?: number;
        supplierAccountSuffix?: number;
        systemDate?: Date;
        transactionType?: number;
        transactionTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ISZInvoiceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        beginPaymentDate?: Date;
        beginTransactionDate?: Date;
        beginWitholdingDate?: Date;
        branchCode?: number;
        branchName?: string;
        businessKey?: string;
        customerName?: string;
        description?: string;
        endPaymentDate?: Date;
        endTransactionDate?: Date;
        endWitholdingDate?: Date;
        fec?: number;
        fecCode?: string;
        installmentCount?: number;
        installmentNo?: string;
        invoiceAmount?: number;
        invoiceId?: number;
        paymentAccountNumber?: number;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentSuffix?: number;
        result?: string;
        schoolAccountNumber?: number;
        schoolName?: string;
        serviceType?: string;
        status?: number;
        statusDesc?: string;
        studentName?: string;
        studentTCKN?: string;
        supplierId?: number;
        totalAmount?: number;
        transactionDate?: Date;
        witholdingAmount?: number;
        witholdingDate?: Date;
        witholdingReleasedAmount?: number;
    }
    interface LoansCommissionRequest extends BOA.Common.Types.TransactionRequestBase {
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
    }
    interface NonCashRiskAccountingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        fecType?: number;
        reverseBusinessKey?: number;
        reverseDate?: Date;
        tranDate?: Date;
        transactionType?: number;
    }
    interface OnlinePaymentContract extends BOA.Common.Types.ContractBase {
        allotmentAmount?: number;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        description?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        installmentCount?: number;
        installmentInformationList?: BOA.Types.Kernel.DirectFundUtilization.OnlinePaymentInstallmentContract[];
        isCash?: number;
        maxPaymentDate?: Date;
        minPaymentDate?: Date;
        name?: string;
        onlinePaymentId?: number;
        paymentDate?: Date;
        paymentFec?: string;
        paymentFecCode?: string;
        paymentId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        periodInfo?: string;
        purchaserAccountNumber?: number;
        purchaserAccountSuffix?: number;
        purchaserBranchId?: number;
        purchaserBranchName?: string;
        purchaserId?: number;
        purchaserName?: string;
        resourceId?: number;
        resultText?: string;
        serviceType?: string;
        status?: number;
        statusName?: string;
        supplier?: BOA.Types.Kernel.DirectFundUtilization.SupplierContract;
        supplierAccountNumber?: number;
        supplierId?: number;
        supplierName?: string;
        systemDate?: Date;
        taxNumber?: string;
        transactionBranchName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface OnlinePaymentInquiryInformationContract extends BOA.Common.Types.ContractBase {
        criticalDescription?: string;
        fec?: string;
        fecCode?: string;
        isCashTransaction?: boolean;
        maximumInstallmentCount?: number;
        paymentAmountCash?: number;
        paymentAmountInstallment?: number;
        paymentDescription?: string;
        paymentId?: number;
        paymentParentId?: number;
        periodInfo?: string;
        serviceType?: string;
    }
    interface OnlinePaymentInquiryResultContract extends BOA.Common.Types.ContractBase {
        errorReason?: string;
        isError?: boolean;
        name?: string;
        paymentList?: BOA.Types.Kernel.DirectFundUtilization.OnlinePaymentInquiryInformationContract[];
        surname?: string;
        taxNumber?: string;
    }
    interface OnlinePaymentInstallmentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        blockageDate?: Date;
        commissionAmount?: number;
        feeType?: string;
        hostIP?: string;
        hostName?: string;
        installmentDate?: Date;
        installmentNumber?: number;
        invoiceId?: number;
        onlinePaymentId?: number;
        onlinePaymentInstallmentId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OnlinePaymentReconciliationContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        hostIP?: string;
        hostName?: string;
        onlinePaymentAmount?: number;
        onlinePaymentCount?: number;
        paymentDate?: Date;
        paymentList?: BOA.Types.Kernel.DirectFundUtilization.OnlinePaymentReconciliationDetailContract[];
        resultDescription?: string;
        status?: number;
        statusName?: string;
        supplierId?: number;
        supplierName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OnlinePaymentReconciliationDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        description?: string;
        installmentCount?: number;
        isCash?: number;
        onlinePaymentAmount?: number;
        onlinePaymentId?: number;
        onlinePaymentStatus?: number;
        paymentDate?: Date;
        paymentId?: number;
        periodInfo?: string;
        purchaserAccountNumber?: number;
        purchaserAccountSuffix?: number;
        serviceType?: string;
        status?: number;
        statusName?: string;
        studentName?: string;
        supplierId?: number;
        taxNumber?: string;
    }
    interface OnlinePaymentResultContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        errorReason?: string;
        paymentInfo?: BOA.Types.Kernel.DirectFundUtilization.OnlinePaymentContract;
        resultCode?: number;
        transactionResult?: BOA.Types.Kernel.DirectFundUtilization.Enums.OnlineTransactionResult;
    }
    interface OrderContract extends BOA.Common.Types.ContractBase {
        allotmentCommissionRate?: number;
        allotmentSupplierCommissionRate?: number;
        businessKey?: number;
        dCSCommissionPercent?: number;
        dCSPurchaserCommissionPercent?: number;
        debtFER?: number;
        description?: string;
        endPaymentDate?: Date;
        endTransactionDate?: Date;
        estimatedLoanProfitRate?: number;
        estimatedMaturityDayCount?: number;
        estimatedPaymentAmount?: number;
        estimatedPaymentDate?: Date;
        fec?: number;
        fecCode?: string;
        firstPaymentDate?: Date;
        firstTransactionDate?: Date;
        hostIP?: string;
        hostName?: string;
        loanProfitRate?: number;
        maturityDayCount?: number;
        maturityType?: number;
        number?: string;
        operationType?: number;
        orderId?: number;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentDescription?: string;
        processType?: string;
        purchaserAccountNumber?: number;
        purchaserBranchId?: number;
        purchaserCode?: string;
        purchaserId?: number;
        purchaserName?: string;
        resultCode?: string;
        resultDescription?: string;
        status?: number;
        statusName?: string;
        supplierAccountNumber?: number;
        supplierId?: number;
        supplierName?: string;
        supplierPurchaserId?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OrderInvoiceContract extends BOA.Common.Types.ContractBase {
        documentNumber?: number;
        electronicInvoice?: number;
        electronicInvoiceHashCode?: string;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        invoiceDate?: Date;
        invoiceDueDate?: Date;
        invoiceNumber?: string;
        invoiceRecordDate?: Date;
        itemNumber?: number;
        operationType?: number;
        orderId?: number;
        orderInvoiceId?: number;
        purchaserAccountNumber?: number;
        purchaserId?: number;
        purchaserName?: string;
        purchaserPaymentAmount?: number;
        purchaserTaxNumber?: number;
        status?: number;
        statusName?: string;
        supplierAccountNumber?: number;
        supplierCode?: string;
        supplierId?: number;
        supplierName?: string;
        supplierPurchaserId?: number;
        supplierTitle?: string;
        systemDate?: Date;
        transactionCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OTSPaymentContract extends BOA.Common.Types.ContractBase {
        allotmentAmount?: number;
        amount?: number;
        applicationId?: number;
        branchId?: number;
        businessKey?: number;
        description?: string;
        fecType?: number;
        hostIP?: string;
        hostName?: string;
        identityTaxNumber?: string;
        installmentNumber?: number;
        invoiceList?: BOA.Types.Kernel.DirectFundUtilization.InvoiceContract[];
        maxPaymentDate?: Date;
        minPaymentDate?: Date;
        name?: string;
        oTSPaymentId?: number;
        paymentDate?: Date;
        paymentType?: number;
        paymentTypeName?: string;
        purchaserAccountNumber?: number;
        purchaserAccountSuffix?: number;
        purchaserBranchId?: number;
        purchaserBranchName?: string;
        purchaserId?: number;
        purchaserName?: string;
        status?: number;
        statusName?: string;
        supplier?: BOA.Types.Kernel.DirectFundUtilization.SupplierContract;
        supplierAccountNumber?: number;
        supplierId?: number;
        supplierName?: string;
        systemDate?: Date;
        transactionBranchName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface ParameterTypes {
    }
    interface PaymentDecisionContract extends BOA.Common.Types.ContractBase {
        amountTransferredByCredit?: number;
        amountTransferredInCash?: number;
    }
    interface PurchaserAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        branchId?: number;
        customerName?: string;
        fec?: number;
        fecName?: string;
        orderNumber?: number;
        purchaserAccountId?: number;
        purchaserId?: number;
    }
    interface PurchaserContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchName?: string;
        eMail?: string;
        gSMNumber?: string;
        name?: string;
        purchaserAccountList?: BOA.Types.Kernel.DirectFundUtilization.PurchaserAccountContract[];
        purchaserId?: number;
        status?: number;
        supplierId?: number;
        supplierPurchaserList?: BOA.Types.Kernel.DirectFundUtilization.SupplierPurchaserContract[];
        supplierType?: number;
    }
    interface SupplierAccountContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        accountType?: number;
        accountTypeName?: string;
        branchId?: number;
        fec?: number;
        fecName?: string;
        supplierAccountId?: number;
        supplierId?: number;
    }
    interface SupplierConfigContract extends BOA.Common.Types.ContractBase {
        configCode?: number;
        configName?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        prodValue?: string;
        supplierConfigId?: number;
        supplierId?: number;
        systemDate?: Date;
        testValue?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SupplierContract extends BOA.Common.Types.ContractBase {
        accountList?: BOA.Types.Kernel.DirectFundUtilization.SupplierAccountContract[];
        accountNumber?: number;
        allotmentCommissionRate?: number;
        allotmentExtendedDayCount?: number;
        allotmentProductCode?: string;
        allotmentSupplierCommissionRate?: number;
        assuranceCommissionMainBranchPercent?: number;
        assuranceCommissionRate?: number;
        branchId?: number;
        cashBlockageDayCount?: number;
        configList?: BOA.Types.Kernel.DirectFundUtilization.SupplierConfigContract[];
        creditBlockageDayCount?: number;
        dCSCommissionPercent?: number;
        dCSPurchaserCommissionPercent?: number;
        delayToleranceDayCount?: number;
        eMail?: string;
        gSMNumber?: string;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        informationList?: BOA.Types.Kernel.DirectFundUtilization.SupplierInformationContract[];
        installmentBeginDayCount?: number;
        installmentNumber?: number;
        isReconcilation?: number;
        loanCommissionRate?: number;
        loanProfitRate?: number;
        name?: string;
        parentSupplierId?: number;
        paymentTime?: any;
        productCode?: string;
        status?: number;
        supplierCode?: string;
        supplierId?: number;
        supplierType?: number;
        supplierTypeName?: string;
        systemDate?: Date;
        turnoverCommissionPercent?: number;
        turnoverCommissionPeriod?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
    }
    interface SupplierInformationContract extends BOA.Common.Types.ContractBase {
        informationCode?: string;
        informationDescription?: string;
        informationName?: string;
        informationType?: number;
        supplierId?: number;
        supplierType?: number;
        templateCode?: string;
    }
    interface SupplierPurchaserConfigContract extends BOA.Common.Types.ContractBase {
        configCode?: string;
        configName?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        prodValue?: string;
        supplierPurchaserConfigId?: number;
        supplierPurchaserId?: number;
        systemDate?: Date;
        testValue?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SupplierPurchaserContract extends BOA.Common.Types.ContractBase {
        allotmentCommissionRate?: number;
        allotmentExtendedDayCount?: number;
        allotmentRate?: number;
        dCSCommissionPercent?: number;
        dCSPurchaserCommissionPercent?: number;
        installmentNumber?: number;
        lastLoanUsageDate?: Date;
        limitSharePercentage?: number;
        loanCommissionRate?: number;
        loanProfitRate?: number;
        nonPaymentPeriod?: number;
        paymentChoice?: number;
        paymentTime?: any;
        purchaserCode?: string;
        purchaserId?: number;
        purchaserName?: string;
        riskToSupplier?: number;
        supplierId?: number;
        supplierName?: string;
        supplierPurchaserConfigList?: BOA.Types.Kernel.DirectFundUtilization.SupplierPurchaserConfigContract[];
        supplierPurchaserId?: number;
        supplierPurchaserInformationList?: BOA.Types.Kernel.DirectFundUtilization.SupplierPurchaserInformationContract[];
        supplierType?: number;
        useAllSuffix?: number;
    }
    interface SupplierPurchaserInformationContract extends BOA.Common.Types.ContractBase {
        informationCode?: string;
        informationName?: string;
        informationType?: number;
        supplierPurchaserId?: number;
        supplierType?: number;
        templateCode?: string;
    }
    interface SupplierPurchaserLimitContract extends BOA.Common.Types.ContractBase {
        allMaturityDate?: Date;
        availableLimit?: number;
        groupRoofLimit?: number;
        guarantedInvoiceAmount?: number;
        hostIP?: string;
        hostName?: string;
        limit?: number;
        notGuarantedInvoiceAmount?: number;
        pendingInvoiceAmount?: number;
        pendingInvoiceCount?: number;
        productLimit?: number;
        purchaserAccountNumber?: number;
        purchaserCode?: string;
        purchaserId?: number;
        purchaserName?: string;
        risk?: number;
        roofLimit?: number;
        supplierAccountNumber?: number;
        supplierId?: number;
        supplierName?: string;
        supplierPurchaserId?: number;
        supplierType?: number;
        supplierTypeName?: string;
        systemDate?: Date;
        totalAmount?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface SupplierPurchaserLimitFileContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        firmCode?: string;
        limitList?: BOA.Types.Kernel.DirectFundUtilization.SupplierPurchaserLimitContract[];
        recordCount?: number;
        supplier?: BOA.Types.Kernel.DirectFundUtilization.SupplierContract;
        tranDate?: Date;
    }
}
declare namespace BOA.Types.Kernel.DirectFundUtilization.Constants {
    interface Divit {
    }
    interface InvoiceDivit {
    }
    interface KKBMaritalStatus {
    }
    interface OTSDivit {
    }
    interface TableHelper {
        column?: string;
        columnAmount?: string;
        columnHeader?: string;
        row?: string;
        sytle?: string;
        table?: string;
    }
    interface Template {
    }
}
declare namespace BOA.Types.Kernel.DirectFundUtilization.Enums {
    export const enum AccountType {
        blockade = 1,
        Collection = 2
    }
    export const enum APLSTATE {
        ApplicationLaunched = 1,
        ApplicationApproval = 2,
        BMRSaved = 3,
        ApplcationReject = 4,
        AllotmentViaGM = 5,
        AllotmentViaBranch = 6,
        ApplicationRejectByGM = 7,
        ApplicationRejectByBranch = 8,
        AUTOAllotment = 9
    }
    export const enum CommissionProcessType {
        DirectDebitUsegeCommission = 1,
        LimitAllocationCommission = 2,
        PaymentGuaranteeCommission = 3,
        TurnoverCommission = 4,
        LoanUsageCommission = 5
    }
    export const enum FormType {
        Normal = 0,
        Update = 1,
        Copy = 2,
        Flow = 3,
        Search = 4
    }
    export const enum FTPProcessFileType {
        Invoice = 1,
        Limit = 2,
        Payment = 3,
        InvoiceResult = 4,
        Order = 5,
        OrderResult = 6,
        OrderInvoice = 7,
        OrderInvoiceResult = 8
    }
    export const enum FTPProcessStatus {
        NotProcessed = 0,
        Processed = 1,
        ReadyForResponsing = 2,
        Responsed = 3,
        Failed = 9
    }
    export const enum FTPProcessType {
        Incoming = 1,
        Outgoing = 2
    }
    export const enum FTPType {
        FTP = 1,
        SFTP = 2
    }
    export const enum InfromationGroupType {
        CreditUtilization = 1,
        CreditDayAlert = 2,
        InvoicePaymentDone = 3,
        InvoicePaymentFail = 4,
        InvoiceGuaranteeDone = 5,
        InvoiceGuaranteeFail = 6,
        Reconcilation = 7,
        Limit = 8,
        DailyInvoiceNotify = 9,
        WeeklyInvoiceNotify = 10,
        MonthlyInvoiceNotfy = 11,
        LimitAllocationMaturity = 12,
        LimitPassive = 13,
        InvoiceResult = 14,
        InvoicePayment = 15,
        FileError = 16,
        MaxInvoiceDueDay = 17,
        PurchaserInvResult = 18,
        FutureInvoiceNotify = 19,
        InvoicePassiveAndDelete = 20
    }
    export const enum InvoiceMaturityType {
        Cash = 0,
        Futures = 1
    }
    export const enum InvoiceOperationType {
        Insert = 0,
        Update = 1,
        Delete = 2
    }
    export const enum InvoiceStatus {
        Pending = 1,
        GuaranteeDone = 2,
        GuaranteeFailed = 3,
        Processed = 4,
        PaymentDone = 5,
        PaymentFailed = 6,
        Passive = 7,
        Error = 8,
        Duplicate = 9
    }
    export const enum InvoiceTransactionType {
        Cash = 1,
        Credit = 2
    }
    export const enum MaritalStatus {
        Married = 0,
        Single = 1,
        Other = 2,
        Divorced = 3,
        Widow = 4
    }
    export const enum OnlinePaymentStatus {
        UnReported = 1,
        Reported = 2
    }
    export const enum OnlineTransactionResult {
        Success = 1,
        UnSuccess = 2,
        SystemError = 3,
        UnDone = 4,
        DuplicateReport = 5
    }
    export const enum OnlineTransactionType {
        Cash = 1,
        Credit = 2,
        CreditCard = 3,
        MoneyTransfer = 4
    }
    export const enum OrderInvoiceOperationType {
        Insert = 0,
        Update = 1,
        Delete = 2
    }
    export const enum OrderInvoiceStatus {
        Pending = 1,
        Processed = 2,
        OrderDone = 3,
        PaymentFailed = 4,
        Passive = 5,
        Error = 6,
        Duplicate = 7
    }
    export const enum OrderOperationType {
        Insert = 0,
        Update = 1,
        Delete = 2
    }
    export const enum OrderStatus {
        Pending = 1,
        Processed = 2,
        OrderDone = 3,
        PaymentFailed = 4,
        Passive = 5,
        Error = 6,
        Duplicate = 7
    }
    export const enum OTOTAHSISURUNLIMIT {
        RealEstateProductLimit = 1,
        VehicleProductLimit = 2,
        ConsumerServiceProductLimit = 3,
        MachineryEquipmentsProductLimit = 4,
        Cheque = 6,
        DomesticBond = 7,
        SchoolInstallment = 8
    }
    export const enum PaymentChoice {
        Cash = 1,
        Credit = 2,
        CashAndCredit = 3,
        CreditAndCash = 4
    }
    export const enum ReconStatus {
        OnlyMatchPayment = 1,
        OnlyBankPayment = 2,
        OnlyInstitutionPayment = 3
    }
    export const enum Status {
        Active = 1,
        Passive = 2
    }
    export const enum SupplierType {
        WebService = 1,
        CorporateWebSite = 2,
        File = 3,
        Integration = 4,
        SupplierFinancing = 5
    }
}
declare namespace BOA.Types.Kernel.DivitMail {
    export const enum DivitMailState {
        EmailSended = 0,
        EmailHandled = 1
    }
    interface DivitMailContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        cc?: string;
        channelId?: number;
        content?: string;
        departmentId?: number;
        description?: string;
        divitFlowId?: string;
        divitId?: string;
        divitInstanceId?: string;
        divitMailBusinessKey?: string;
        divitMailDataId?: number;
        divitMailDefinitionCode?: string;
        divitMailDefinitionId?: number;
        divitMailDocumentList?: BOA.Types.Kernel.DivitMail.DivitMailDefinitionDocumentContract[];
        divitMailForwardFlowList?: BOA.Types.Kernel.DivitMail.DivitMailDefinitionForwardFlowContract[];
        divitMailSendMailList?: BOA.Types.Kernel.DivitMail.DivitMailDefinitionSendInformationContract[];
        divitMailSendSMSList?: BOA.Types.Kernel.DivitMail.DivitMailDefinitionSendInformationContract[];
        documentId?: number;
        from?: string;
        hostName?: string;
        instanceId?: number;
        isForwardWorkflow?: boolean;
        isSendMail?: boolean;
        isSendSMS?: boolean;
        mainBusinessKey?: number;
        registryId?: number;
        serializedObject?: number[];
        state?: BOA.Types.Kernel.DivitMail.DivitMailState;
        stateId?: number;
        subject?: string;
        to?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranUnitId?: number;
        userName?: string;
    }
    interface DivitMailDataTransactionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        businessKeyString?: string;
        divitMailDataId?: number;
        divitMailDefinitionCode?: string;
        hostIP?: string;
        hostName?: string;
        isError?: number;
        message?: string;
        systemDate?: Date;
        systemEndDate?: Date;
        userName?: string;
    }
    interface DivitMailDefinitionContract extends BOA.Common.Types.ContractBase {
        cc?: string;
        changeIndexId?: number;
        content?: string;
        description?: string;
        divitFlowId?: string;
        divitFlowIdOld?: string;
        divitId?: string;
        divitInstanceId?: string;
        divitMailCode?: string;
        divitMailId?: number;
        documentId?: number;
        hostIP?: string;
        hostName?: string;
        isForwardWorkflow?: boolean;
        isForwardWorkflowLabel?: string;
        isSendMail?: boolean;
        isSendMailLabel?: string;
        isSendSMS?: boolean;
        isSendSMSLabel?: string;
        registryId?: number;
        registryName?: string;
        subject?: string;
        systemDate?: Date;
        to?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DivitMailDefinitionDocumentContract extends BOA.Common.Types.ContractBase {
        divitMailDocumentId?: number;
        divitMailId?: number;
        documentId?: number;
        documentName?: string;
        isAdded?: boolean;
    }
    interface DivitMailDefinitionForwardFlowContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionName?: string;
        divitMailForwardFlowId?: number;
        divitMailId?: number;
        flowId?: number;
        flowName?: string;
        instanceStateId?: number;
        stateId?: number;
        stateName?: string;
    }
    interface DivitMailDefinitionSendInformationContract extends BOA.Common.Types.ContractBase {
        contentType?: number;
        contentTypeName?: string;
        divitMailId?: number;
        divitMailSendInformationId?: number;
        informationType?: number;
        to?: string;
    }
}
declare namespace BOA.Types.Kernel.DMS {
    export const enum ApplicationRightType {
        None = 0,
        Admin = 1,
        Writer = 2,
        Reader = 3
    }
    export const enum FileContentLocationType {
        InTable = 0,
        InFileStream = 1
    }
    interface AvailableDocument {
        description?: string;
        documentId?: number;
        documentName?: string;
        isExists?: boolean;
        isMandatory?: boolean;
        lastModifiedDate?: Date;
        lastModifiedDateDisplay?: Date;
    }
    interface DivitDocumentsContract extends BOA.Common.Types.ContractBase {
        applicationName?: string;
        description?: string;
        divitId?: string;
        docId?: number;
        docName?: string;
        documentFlowMapId?: number;
        flowId?: string;
        flowName?: string;
        flowStepId?: string;
        flowStepName?: string;
        hostIP?: string;
        hostName?: string;
        isEmergency?: number;
        isMandatory?: number;
        isTraceable?: number;
        profileId?: string;
        profileName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        viewOrderNo?: number;
    }
    interface DivitFileSearchContract {
        flowId?: any;
        instanceId?: string;
    }
    interface DivitSearchContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        description?: string;
        divitId?: string;
        extension?: string;
        fileId?: number;
        fileName?: string;
        fileServerObjectId?: string;
        flowId?: string;
        flowIdList?: string[];
        flowName?: string;
        folderId?: number;
        hostName?: string;
        instanceId?: string;
        isCurrent?: number;
        isCurrentBool?: boolean;
        mimeType?: string;
        personId?: number;
        searchText?: string;
        state?: number;
        systemDate?: Date;
        systemEndDate?: Date;
        unitId?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        versionNumber?: number;
    }
    interface DivitSearchContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        description?: string;
        divitId?: string;
        extension?: string;
        fileId?: number;
        fileName?: string;
        fileServerObjectId?: string;
        flowId?: string;
        flowIdList?: string[];
        flowName?: string;
        folderId?: number;
        hostName?: string;
        instanceId?: string;
        isCurrent?: number;
        isCurrentBool?: boolean;
        mimeType?: string;
        personId?: number;
        searchText?: string;
        state?: number;
        systemDate?: Date;
        systemEndDate?: Date;
        unitId?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        versionNumber?: number;
    }
    interface DivitServiceDistinctFileTypesContract extends BOA.Common.Types.ContractBase {
        fileType?: number;
        lastModifiedDate?: Date;
    }
    interface DivitServiceDocumentContract extends BOA.Common.Types.ContractBase {
        description?: string;
        docName?: string;
        docType?: string;
        documentId?: string;
        extension?: string;
        mimeType?: string;
        state?: string;
        version?: string;
    }
    interface DocumentContent {
        content?: number[];
        contentLocationType?: number;
        filePath?: string;
        transactionContext?: number[];
        validityEndDate?: Date;
    }
    interface DocumentContent {
        content?: number[];
        contentLocationType?: number;
        filePath?: string;
        transactionContext?: number[];
        validityEndDate?: Date;
    }
    interface DocumentFlowMapContract extends BOA.Common.Types.ContractBase {
        description?: string;
        docId?: number;
        docName?: string;
        documentFlowMapId?: number;
        flowId?: string;
        hasWebcam?: number;
        hostIP?: string;
        hostName?: string;
        maxFileSize?: number;
        scanName?: string;
        scanningProfileId?: number;
        systemDate?: Date;
        uIColorCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DocumentFlowMapContract extends BOA.Common.Types.ContractBase {
        description?: string;
        docId?: number;
        docName?: string;
        documentFlowMapId?: number;
        flowId?: string;
        hasWebcam?: number;
        hostIP?: string;
        hostName?: string;
        maxFileSize?: number;
        scanName?: string;
        scanningProfileId?: number;
        systemDate?: Date;
        uIColorCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DocumentsContract extends BOA.Common.Types.ContractBase {
        description?: string;
        docId?: number;
        docName?: string;
        hostIP?: string;
        hostName?: string;
        isArchive?: boolean;
        isCustomerDocument?: boolean;
        qRFileCode?: string;
        sendValidityPeriodMail?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validityPeriodInDays?: number;
    }
    interface DocumentsContract extends BOA.Common.Types.ContractBase {
        description?: string;
        docId?: number;
        docName?: string;
        hostIP?: string;
        hostName?: string;
        isArchive?: boolean;
        isCustomerDocument?: boolean;
        qRFileCode?: string;
        sendValidityPeriodMail?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validityPeriodInDays?: number;
    }
    interface FileNetDocumentInfo {
        documentContent?: number[];
        documentId?: string;
        instanceId?: string;
        message?: string;
        mimeType?: string;
    }
    interface FilenetDocumentInfoList {
        arrayOfAvailableDocument?: BOA.Types.Kernel.DMS.AvailableDocument[];
        divitXml?: string;
    }
    interface FilenetInfoContract extends BOA.Common.Types.ContractBase {
        applicationName?: string;
        divitXML?: string;
        flowID?: string;
        flowStepID?: string;
        instanceID?: string;
        messages?: string;
        notification?: string;
        profileID?: string;
    }
    interface FilenetInfoContractWithRelation extends BOA.Types.Kernel.DMS.FilenetInfoContract {
        divitXML?: string;
    }
    interface FilenetInfoRelationContract {
        bOAApplicationName?: string;
        bOAApplicationStepId?: string;
        relationInstanceID?: string;
    }
    interface FilenetInfoRelationContract {
        bOAApplicationName?: string;
        bOAApplicationStepId?: string;
        relationInstanceID?: string;
    }
    interface FilenetUserInfoContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        personId?: number;
        tCNo?: number;
    }
    interface FilenetUserInfoContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        personId?: number;
        tCNo?: number;
    }
    interface FileServerDocument extends BOA.Common.Types.ContractBase {
        branchId?: number;
        creator?: string;
        dateCreated?: Date;
        dateLastModified?: Date;
        description?: string;
        documentName?: string;
        documentType?: string;
        extension?: string;
        fileId?: number;
        fileSize?: number;
        id?: string;
        instanceId?: string;
        isDefinedCustomerFile?: boolean;
        isDeleted?: boolean;
        lastModifier?: string;
        mimeType?: string;
        orderNumber?: number;
        qRCodeValueList?: any;
        qRFileCode?: string;
        relationalId?: string;
        scanInstanceId?: string;
        state?: string;
        validityBeginDate?: Date;
        validityEndDate?: Date;
        validityPeriodInDays?: number;
        version?: string;
    }
    interface FileServerDocument extends BOA.Common.Types.ContractBase {
        branchId?: number;
        creator?: string;
        dateCreated?: Date;
        dateLastModified?: Date;
        description?: string;
        documentName?: string;
        documentType?: string;
        extension?: string;
        fileId?: number;
        fileSize?: number;
        id?: string;
        instanceId?: string;
        isDefinedCustomerFile?: boolean;
        isDeleted?: boolean;
        lastModifier?: string;
        mimeType?: string;
        orderNumber?: number;
        qRCodeValueList?: any;
        qRFileCode?: string;
        relationalId?: string;
        scanInstanceId?: string;
        state?: string;
        validityBeginDate?: Date;
        validityEndDate?: Date;
        validityPeriodInDays?: number;
        version?: string;
    }
    interface FileServerDocumentExtended extends BOA.Types.Kernel.DMS.FileServerDocument {
        accountNumber?: number;
        flowId?: any;
        folderDescription?: string;
        folderId?: number;
        personNumber?: number;
    }
    interface FileServerDocumentExtended extends BOA.Types.Kernel.DMS.FileServerDocument {
        accountNumber?: number;
        flowId?: any;
        folderDescription?: string;
        folderId?: number;
        personNumber?: number;
    }
    interface FileServerDocumentWithContent extends BOA.Types.Kernel.DMS.FileServerDocument {
        docContent?: BOA.Types.Kernel.DMS.DocumentContent;
    }
    interface FlowContract extends BOA.Common.Types.ContractBase {
        applicationName?: string;
        description?: string;
        flowId?: string;
        flowName?: string;
        flowOwnerDept?: string;
        flowOwnerPerson?: string;
        hostIP?: string;
        hostName?: string;
        isEmergency?: number;
        isEmergencyBool?: boolean;
        isNotification?: number;
        isNotificationBool?: boolean;
        objectStoreId?: number;
        objectStoreIdDesc?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FlowContract extends BOA.Common.Types.ContractBase {
        applicationName?: string;
        description?: string;
        flowId?: string;
        flowName?: string;
        flowOwnerDept?: string;
        flowOwnerPerson?: string;
        hostIP?: string;
        hostName?: string;
        isEmergency?: number;
        isEmergencyBool?: boolean;
        isNotification?: number;
        isNotificationBool?: boolean;
        objectStoreId?: number;
        objectStoreIdDesc?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FolderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        description?: string;
        folderId?: number;
        tranDate?: Date;
    }
    interface IFileService {
    }
    interface MimeTypeContract extends BOA.Common.Types.ContractBase {
        description?: string;
        extension?: string;
        hostIP?: string;
        hostName?: string;
        isWorkViewer?: number;
        isWorkViewerBool?: boolean;
        mimeType?: string;
        mimeTypeId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface QrCodedCustomerDocumentContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        currentFileIdentity?: string;
        customerId?: number;
        divitId?: string;
        docId?: number;
        docName?: string;
        fileIdentity?: string;
        fileServerObjectId?: any;
        flowName?: string;
        instanceId?: string;
        localFilePath?: string;
        message?: string;
        pageCount?: number;
        qrCodedCustomerDocumentId?: number;
    }
    interface QrCodedCustomerDocumentRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DMS.QrCodedCustomerDocumentContract;
        fileServerObjectIdDictionary?: any;
        qrDocumentIdList?: number[];
    }
}
declare namespace BOA.Types.Kernel.DMS.DivitMail {
    export const enum DivitMailState {
        EmailSended = 0,
        EmailHandled = 1
    }
    interface DivitMailContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        attachment?: string;
        businessKey?: number;
        cc?: string;
        channelId?: number;
        content?: string;
        departmentId?: number;
        description?: string;
        divitFlowId?: string;
        divitId?: string;
        divitInstanceId?: string;
        divitMailBusinessKey?: string;
        divitMailDataAttachmentList?: BOA.Types.Kernel.DMS.DivitMail.DivitMailDataAttachmentContract[];
        divitMailDataDetail?: BOA.Types.Kernel.DMS.DivitMail.DivitMailDefinitionDetailContract;
        divitMailDataId?: number;
        divitMailDefinitionCode?: string;
        divitMailDefinitionId?: number;
        divitMailDocumentList?: BOA.Types.Kernel.DMS.DivitMail.DivitMailDefinitionDocumentContract[];
        divitMailForwardFlowList?: BOA.Types.Kernel.DMS.DivitMail.DivitMailDefinitionForwardFlowContract[];
        divitMailSendMailList?: BOA.Types.Kernel.DMS.DivitMail.DivitMailDefinitionSendInformationContract[];
        divitMailSendSMSList?: BOA.Types.Kernel.DMS.DivitMail.DivitMailDefinitionSendInformationContract[];
        documentId?: number;
        expireDay?: number;
        from?: string;
        hostName?: string;
        isChangeWFStatus?: boolean;
        isForwardWorkflow?: boolean;
        isMailSended?: boolean;
        isSendMail?: boolean;
        isSendSMS?: boolean;
        mainBusinessKey?: number;
        registryId?: number;
        serializedObject?: number[];
        state?: BOA.Types.Kernel.DMS.DivitMail.DivitMailState;
        stateId?: number;
        subject?: string;
        to?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranUnitId?: number;
        typeName?: string;
        userName?: string;
        wFInstanceId?: string;
    }
    interface DivitMailDataAttachmentContract extends BOA.Common.Types.ContractBase {
        attachmentPath?: string;
        divitMailAttachmentId?: number;
        divitMailId?: number;
    }
    interface DivitMailDataTransactionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        businessKeyString?: string;
        content?: string;
        divitMailDataId?: number;
        divitMailDefinitionCode?: string;
        hostIP?: string;
        hostName?: string;
        isError?: number;
        message?: string;
        systemDate?: Date;
        systemEndDate?: Date;
        userName?: string;
    }
    interface DivitMailDefinitionContract extends BOA.Common.Types.ContractBase {
        attachment?: string;
        cc?: string;
        changeIndexId?: number;
        content?: string;
        description?: string;
        divitFlowId?: string;
        divitFlowIdOld?: string;
        divitId?: string;
        divitInstanceId?: string;
        divitMailCode?: string;
        divitMailId?: number;
        documentId?: number;
        expireDay?: number;
        hostIP?: string;
        hostName?: string;
        isChangeWFStatus?: boolean;
        isForwardWorkflow?: boolean;
        isForwardWorkflowLabel?: string;
        isSendMail?: boolean;
        isSendMailLabel?: string;
        isSendSMS?: boolean;
        isSendSMSLabel?: string;
        registryId?: number;
        registryName?: string;
        subject?: string;
        systemDate?: Date;
        to?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: string;
    }
    interface DivitMailDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        divitMailDetailId?: number;
        divitMailId?: number;
        emailContent?: string;
        emailSubject?: string;
        smsContent?: string;
    }
    interface DivitMailDefinitionDocumentContract extends BOA.Common.Types.ContractBase {
        divitMailDocumentId?: number;
        divitMailId?: number;
        documentId?: number;
        documentName?: string;
        isAdded?: boolean;
    }
    interface DivitMailDefinitionForwardFlowContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionName?: string;
        divitMailForwardFlowId?: number;
        divitMailId?: number;
        flowId?: number;
        flowName?: string;
        instanceStateId?: number;
        stateId?: number;
        stateName?: string;
    }
    interface DivitMailDefinitionSendInformationContract extends BOA.Common.Types.ContractBase {
        contentType?: number;
        contentTypeName?: string;
        divitMailId?: number;
        divitMailSendInformationId?: number;
        informationType?: number;
        to?: string;
    }
}
declare namespace BOA.Types.Kernel.DocumentManagement.BackOffice {
    interface ApplicationNameContract extends BOA.Common.Types.ContractBase {
        applicationName?: string;
    }
    interface DocumentFlowMapRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DMS.DocumentFlowMapContract;
    }
    interface DocumentsRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DMS.DocumentsContract;
        flowId?: string;
    }
    interface FlowProfileDocsContract extends BOA.Common.Types.ContractBase {
        applicationName?: string;
        divitId?: string;
        docName?: string;
        documentFlowMapId?: number;
        flowId?: string;
        flowName?: string;
        flowStepId?: string;
        flowStepName?: string;
        hostIP?: string;
        hostName?: string;
        isArchive?: number;
        isArchiveBool?: boolean;
        isMandatory?: number;
        isMandatoryBool?: boolean;
        isTraceable?: number;
        isTraceableBool?: boolean;
        profileId?: string;
        profileName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        viewOrderNo?: number;
    }
    interface FlowProfileDocsRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DocumentManagement.BackOffice.FlowProfileDocsContract;
        dataContractList?: BOA.Types.Kernel.DocumentManagement.BackOffice.FlowProfileDocsContract[];
        flowId?: string;
    }
    interface FlowRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DMS.FlowContract;
    }
    interface ScanningProfileContract extends BOA.Common.Types.ContractBase {
        description?: string;
        dPI?: number;
        hostIP?: string;
        hostName?: string;
        isSimplex?: number;
        isSimplexBool?: boolean;
        outputFormat?: number;
        outputFormatDesc?: string;
        scanMode?: number;
        scanModeDesc?: string;
        scanName?: string;
        scanningProfileId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ScanningProfileRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.DocumentManagement.BackOffice.ScanningProfileContract;
    }
}
declare namespace BOA.Types.Kernel.EDistraint {
    interface AttachmentRequest {
    }
    interface AttachmentResponse {
    }
    interface AttachmentResponseType {
        hash?: string;
        msg?: string;
    }
    interface AttachmentType {
        binaryData?: BOA.Types.Kernel.EDistraint.base64Binary;
        fileName?: string;
        hash?: string;
        opType?: number;
        opTypeSpecified?: boolean;
        transferSession?: BOA.Types.Kernel.EDistraint.TransferSessionType;
    }
    interface base64Binary {
        contentType?: string;
        value?: number[];
    }
    interface EDestraintRequest extends BOA.Common.Types.ContractBase {
        bank_Code?: string;
        blocked_Amount?: number;
        businessKey?: number;
        father_Name?: string;
        hBNO?: string;
        name?: string;
        packageId?: string;
        surname?: string;
        tCKN?: string;
        vDKODU?: string;
        vKN?: string;
    }
    interface EDistraintCancel extends BOA.Common.Types.ContractBase {
    }
    interface EDistraintFileConfigurationContract extends BOA.Common.Types.ContractBase {
    }
    interface EDistraintProcess extends BOA.Common.Types.ContractBase {
    }
    interface EDistraintResponse extends BOA.Common.Types.ContractBase {
    }
    interface EDistraintResponseAccountInfo extends BOA.Common.Types.ContractBase {
    }
    interface EDistraintResponseAccountInfoDHA extends BOA.Common.Types.ContractBase {
    }
    interface EDistraintResponseSalaryInfo extends BOA.Common.Types.ContractBase {
    }
    interface EDistraintServiceContract extends BOA.Common.Types.ContractBase {
        attachment?: string;
        bankCode?: number;
        bcc?: string;
        body?: string;
        businessKey?: number;
        businessKeyStr?: string;
        byteAttachment?: number[];
        cc?: string;
        content?: number[];
        contentType?: string;
        dateTime?: Date;
        dateTime2?: Date;
        dateTimeStr?: string;
        description?: string;
        error?: string;
        fileByte?: number[];
        fileName?: string;
        from?: string;
        isRead?: number;
        message?: string;
        messageId?: number;
        messageType?: number;
        opType?: number;
        packgeId?: string;
        packgeIdRequest?: string;
        packgeName?: string;
        password?: string;
        pIN?: string;
        programId?: number;
        query?: string;
        recordCount?: number;
        serialNumber?: string;
        session?: string;
        sessionDate?: Date;
        spName?: string;
        status?: number;
        subject?: string;
        templateId?: number;
        terminal?: string;
        timeout?: number;
        to?: string;
        username?: string;
        version?: number;
    }
    interface EDistraintServiceRequest extends BOA.Common.Types.RequestBase {
    }
    interface EHVAPFault {
    }
    interface EHVAPFaultMessage {
    }
    interface EHVAPFaultType {
    }
    interface KeyResponse {
    }
    interface KeyType {
        key?: string;
        pid?: string;
        transferSession?: BOA.Types.Kernel.EDistraint.TransferSessionType;
    }
    interface RecRequest {
    }
    interface RecResponse {
    }
    interface RecRetType {
        hbn?: string;
        retval?: number;
        vdkod?: string;
    }
    interface RecType {
        hbn?: string;
        transferSession?: BOA.Types.Kernel.EDistraint.TransferSessionType;
        vdkod?: string;
    }
    interface SessionReq {
    }
    interface SessionReqType {
        pass?: string;
        transferSession?: BOA.Types.Kernel.EDistraint.TransferSessionType;
        uname?: string;
    }
    interface TransferSession {
    }
    interface TransferSessionType {
        id?: number;
    }
}
declare namespace BOA.Types.Kernel.EDistraint.Durum {
    interface Durum {
        durumAciklama?: string;
        durumKod?: number;
        gonderilenIslemSayisi?: number;
        hatalar?: BOA.Types.Kernel.EDistraint.Durum.DurumHatalar;
        islemTipi?: number;
        islenenIslemSayisi?: number;
        kurumKod?: string;
        paketId?: string;
    }
    interface DurumHatalar {
        hata?: BOA.Types.Kernel.EDistraint.Durum.Hata_type[];
    }
    interface Hata_type {
        aciklama?: string;
        dokumanAdi?: string;
        hataKodu?: number;
    }
}
declare namespace BOA.Types.Kernel.EDistraint.HacizCevap {
    export const enum Birim_type {
        LOT = 0,
        _GR = 1,
        _AD = 2,
        AED = 3,
        AFN = 4,
        ALL = 5,
        AMD = 6,
        ANG = 7,
        AOA = 8,
        ARS = 9,
        AUD = 10,
        AWG = 11,
        AZN = 12,
        BAM = 13,
        BBD = 14,
        BDT = 15,
        BGN = 16,
        BHD = 17,
        BIF = 18,
        BMD = 19,
        BND = 20,
        BOB = 21,
        BRL = 22,
        BSD = 23,
        BTN = 24,
        BWP = 25,
        BYR = 26,
        BZD = 27,
        CAD = 28,
        CDF = 29,
        CHF = 30,
        CLP = 31,
        CNY = 32,
        COP = 33,
        CRC = 34,
        CSD = 35,
        CUP = 36,
        CVE = 37,
        CYP = 38,
        CZK = 39,
        DJF = 40,
        DKK = 41,
        DOP = 42,
        DZD = 43,
        EEK = 44,
        EGP = 45,
        ERN = 46,
        ETB = 47,
        EUR = 48,
        FJD = 49,
        FKP = 50,
        GBP = 51,
        GEL = 52,
        GHC = 53,
        GIP = 54,
        GMD = 55,
        GNF = 56,
        GTQ = 57,
        GYD = 58,
        HKD = 59,
        HNL = 60,
        HRK = 61,
        HTG = 62,
        HUF = 63,
        IDR = 64,
        ILS = 65,
        INR = 66,
        IQD = 67,
        IRR = 68,
        ISK = 69,
        JMD = 70,
        JOD = 71,
        JPY = 72,
        KES = 73,
        KGS = 74,
        KHR = 75,
        KMF = 76,
        KPW = 77,
        KRW = 78,
        KWD = 79,
        KYD = 80,
        KZT = 81,
        LAK = 82,
        LBP = 83,
        LKR = 84,
        LRD = 85,
        LSL = 86,
        LTL = 87,
        LVL = 88,
        LYD = 89,
        MAD = 90,
        MDL = 91,
        MGA = 92,
        MKD = 93,
        MMK = 94,
        MNT = 95,
        MOP = 96,
        MRO = 97,
        MTL = 98,
        MUR = 99,
        MVR = 100,
        MWK = 101,
        MXN = 102,
        MYR = 103,
        MZN = 104,
        NAD = 105,
        NGN = 106,
        NIO = 107,
        NOK = 108,
        NPR = 109,
        NZD = 110,
        OMR = 111,
        PAB = 112,
        PEN = 113,
        PGK = 114,
        PHP = 115,
        PKR = 116,
        PLN = 117,
        PYG = 118,
        QAR = 119,
        ROL = 120,
        RUB = 121,
        RWF = 122,
        SAR = 123,
        SBD = 124,
        SCR = 125,
        SDD = 126,
        SEK = 127,
        SGD = 128,
        SHP = 129,
        SIT = 130,
        SKK = 131,
        SLL = 132,
        SOS = 133,
        SRD = 134,
        STD = 135,
        SVC = 136,
        SYP = 137,
        SZL = 138,
        THB = 139,
        TJS = 140,
        TMM = 141,
        TND = 142,
        TOP = 143,
        TRY = 144,
        TTD = 145,
        TWD = 146,
        TZS = 147,
        UAH = 148,
        UGX = 149,
        USD = 150,
        UYU = 151,
        UZS = 152,
        VEB = 153,
        VND = 154,
        VUV = 155,
        WST = 156,
        XAF = 157,
        XAG = 158,
        XAU = 159,
        XCD = 160,
        XDR = 161,
        XOF = 162,
        XPD = 163,
        XPF = 164,
        XPT = 165,
        YER = 166,
        ZAR = 167,
        ZMK = 168,
        ZWD = 169
    }
    export const enum HesapTur_type {
        Item1100 = 0,
        Item2100 = 1,
        Item5100 = 2,
        Item5500 = 3,
        Item1000 = 4,
        Item2000 = 5,
        Item3000 = 6,
        Item3100 = 7,
        Item3200 = 8,
        Item3300 = 9,
        Item3400 = 10,
        Item4000 = 11,
        Item5000 = 12,
        Item6000 = 13,
        Item7000 = 14,
        Item8000 = 15,
        Item9000 = 16
    }
    export const enum ItemChoiceType {
        TCKN = 0,
        VKN = 1
    }
    interface Paket {
        baslik?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketBaslik;
        hacizCevapListe?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListe;
    }
    interface PaketBaslik {
        bankaKod?: string;
        islemSayisi?: number;
        islemTipi?: number;
        paketId?: string;
        tarih?: string;
        versiyon?: number;
    }
    interface PaketHacizCevapListe {
        hacizCevap?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListeHacizCevap[];
    }
    interface PaketHacizCevapListeHacizCevap {
        ad?: string;
        babaAdi?: string;
        dogumTarihi?: string;
        hBN?: string;
        item?: string;
        item1?: any;
        itemElementName?: BOA.Types.Kernel.EDistraint.HacizCevap.ItemChoiceType;
        maasBilgileri?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListeHacizCevapMaasBilgileri;
        soyad?: string;
        vDKOD?: string;
    }
    interface PaketHacizCevapListeHacizCevapHesapBilgileri {
        hesap?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListeHacizCevapHesapBilgileriHesap[];
    }
    interface PaketHacizCevapListeHacizCevapHesapBilgileriHesap {
        blokeTutarYTL?: number;
        dHABilgileri?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListeHacizCevapHesapBilgileriHesapDHABilgileri;
        hesapID?: string;
        hesapNo?: string;
        kiymet?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListeHacizCevapHesapBilgileriHesapKiymet;
        subeAd?: string;
        subeKod?: string;
        turKod?: BOA.Types.Kernel.EDistraint.HacizCevap.HesapTur_type;
    }
    interface PaketHacizCevapListeHacizCevapHesapBilgileriHesapDHABilgileri {
        dHA?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListeHacizCevapHesapBilgileriHesapDHABilgileriDHA[];
    }
    interface PaketHacizCevapListeHacizCevapHesapBilgileriHesapDHABilgileriDHA {
        aciklama?: string;
        hacizSiraNo?: number;
        hacizTatbikZaman?: string;
        kod?: number;
        kurumAd?: string;
        kurumKod?: string;
        tutar?: number;
    }
    interface PaketHacizCevapListeHacizCevapHesapBilgileriHesapKiymet {
        altHesap?: string;
        ekTanim?: string;
        kiymetKod?: string;
        miktar?: number;
        tur?: BOA.Types.Kernel.EDistraint.HacizCevap.Birim_type;
        uyeKod?: string;
    }
    interface PaketHacizCevapListeHacizCevapMaasBilgileri {
        maas?: BOA.Types.Kernel.EDistraint.HacizCevap.PaketHacizCevapListeHacizCevapMaasBilgileriMaas[];
    }
    interface PaketHacizCevapListeHacizCevapMaasBilgileriMaas {
        hesapNo?: string;
        maasTur?: number;
        subeAd?: string;
        subeKod?: string;
        tutar?: number;
    }
}
declare namespace BOA.Types.Kernel.EDistraint.HacizIptal {
    interface Paket {
        baslik?: BOA.Types.Kernel.EDistraint.HacizIptal.PaketBaslik;
        hacizIptalListe?: BOA.Types.Kernel.EDistraint.HacizIptal.PaketHacizIptalListe;
    }
    interface PaketBaslik {
        bankaKod?: string;
        islemSayisi?: number;
        islemTipi?: number;
        paketId?: string;
        tarih?: string;
        versiyon?: number;
    }
    interface PaketHacizIptalListe {
        hacizIptal?: BOA.Types.Kernel.EDistraint.HacizIptal.PaketHacizIptalListeHacizIptal[];
    }
    interface PaketHacizIptalListeHacizIptal {
        hBN?: string;
        vDKOD?: string;
    }
}
declare namespace BOA.Types.Kernel.EDistraint.HacizIslem {
    export const enum Birim_type {
        LOT = 0,
        _GR = 1,
        _AD = 2,
        AED = 3,
        AFN = 4,
        ALL = 5,
        AMD = 6,
        ANG = 7,
        AOA = 8,
        ARS = 9,
        AUD = 10,
        AWG = 11,
        AZN = 12,
        BAM = 13,
        BBD = 14,
        BDT = 15,
        BGN = 16,
        BHD = 17,
        BIF = 18,
        BMD = 19,
        BND = 20,
        BOB = 21,
        BRL = 22,
        BSD = 23,
        BTN = 24,
        BWP = 25,
        BYR = 26,
        BZD = 27,
        CAD = 28,
        CDF = 29,
        CHF = 30,
        CLP = 31,
        CNY = 32,
        COP = 33,
        CRC = 34,
        CSD = 35,
        CUP = 36,
        CVE = 37,
        CYP = 38,
        CZK = 39,
        DJF = 40,
        DKK = 41,
        DOP = 42,
        DZD = 43,
        EEK = 44,
        EGP = 45,
        ERN = 46,
        ETB = 47,
        EUR = 48,
        FJD = 49,
        FKP = 50,
        GBP = 51,
        GEL = 52,
        GHC = 53,
        GIP = 54,
        GMD = 55,
        GNF = 56,
        GTQ = 57,
        GYD = 58,
        HKD = 59,
        HNL = 60,
        HRK = 61,
        HTG = 62,
        HUF = 63,
        IDR = 64,
        ILS = 65,
        INR = 66,
        IQD = 67,
        IRR = 68,
        ISK = 69,
        JMD = 70,
        JOD = 71,
        JPY = 72,
        KES = 73,
        KGS = 74,
        KHR = 75,
        KMF = 76,
        KPW = 77,
        KRW = 78,
        KWD = 79,
        KYD = 80,
        KZT = 81,
        LAK = 82,
        LBP = 83,
        LKR = 84,
        LRD = 85,
        LSL = 86,
        LTL = 87,
        LVL = 88,
        LYD = 89,
        MAD = 90,
        MDL = 91,
        MGA = 92,
        MKD = 93,
        MMK = 94,
        MNT = 95,
        MOP = 96,
        MRO = 97,
        MTL = 98,
        MUR = 99,
        MVR = 100,
        MWK = 101,
        MXN = 102,
        MYR = 103,
        MZN = 104,
        NAD = 105,
        NGN = 106,
        NIO = 107,
        NOK = 108,
        NPR = 109,
        NZD = 110,
        OMR = 111,
        PAB = 112,
        PEN = 113,
        PGK = 114,
        PHP = 115,
        PKR = 116,
        PLN = 117,
        PYG = 118,
        QAR = 119,
        ROL = 120,
        RUB = 121,
        RWF = 122,
        SAR = 123,
        SBD = 124,
        SCR = 125,
        SDD = 126,
        SEK = 127,
        SGD = 128,
        SHP = 129,
        SIT = 130,
        SKK = 131,
        SLL = 132,
        SOS = 133,
        SRD = 134,
        STD = 135,
        SVC = 136,
        SYP = 137,
        SZL = 138,
        THB = 139,
        TJS = 140,
        TMM = 141,
        TND = 142,
        TOP = 143,
        TRY = 144,
        TTD = 145,
        TWD = 146,
        TZS = 147,
        UAH = 148,
        UGX = 149,
        USD = 150,
        UYU = 151,
        UZS = 152,
        VEB = 153,
        VND = 154,
        VUV = 155,
        WST = 156,
        XAF = 157,
        XAG = 158,
        XAU = 159,
        XCD = 160,
        XDR = 161,
        XOF = 162,
        XPD = 163,
        XPF = 164,
        XPT = 165,
        YER = 166,
        ZAR = 167,
        ZMK = 168,
        ZWD = 169
    }
    export const enum HesapTur_type {
        Item1100 = 0,
        Item2100 = 1,
        Item5100 = 2,
        Item5500 = 3,
        Item1000 = 4,
        Item2000 = 5,
        Item3000 = 6,
        Item3100 = 7,
        Item3200 = 8,
        Item3300 = 9,
        Item3400 = 10,
        Item4000 = 11,
        Item5000 = 12,
        Item6000 = 13,
        Item7000 = 14,
        Item8000 = 15,
        Item9000 = 16
    }
    export const enum ItemChoiceType {
        TCKN = 0,
        VKN = 1
    }
    interface Paket {
        baslik?: BOA.Types.Kernel.EDistraint.HacizIslem.PaketBaslik;
        hacizIslemListe?: BOA.Types.Kernel.EDistraint.HacizIslem.PaketHacizIslemListe;
    }
    interface PaketBaslik {
        bankaKod?: string;
        islemSayisi?: number;
        islemTipi?: number;
        paketId?: string;
        tarih?: string;
        versiyon?: number;
    }
    interface PaketHacizIslemListe {
        hacizIslem?: BOA.Types.Kernel.EDistraint.HacizIslem.PaketHacizIslemListeHacizIslem[];
    }
    interface PaketHacizIslemListeHacizIslem {
        ad?: string;
        babaAdi?: string;
        hBN?: string;
        hesapBilgileri?: BOA.Types.Kernel.EDistraint.HacizIslem.PaketHacizIslemListeHacizIslemHesapBilgileri;
        item?: string;
        itemElementName?: BOA.Types.Kernel.EDistraint.HacizIslem.ItemChoiceType;
        soyad?: string;
        vDKOD?: string;
    }
    interface PaketHacizIslemListeHacizIslemHesapBilgileri {
        hesap?: BOA.Types.Kernel.EDistraint.HacizIslem.PaketHacizIslemListeHacizIslemHesapBilgileriHesap[];
    }
    interface PaketHacizIslemListeHacizIslemHesapBilgileriHesap {
        hesapID?: string;
        hesapNo?: string;
        kiymet?: BOA.Types.Kernel.EDistraint.HacizIslem.PaketHacizIslemListeHacizIslemHesapBilgileriHesapKiymet;
        subeAd?: string;
        subeKod?: string;
        tip?: number;
        turKod?: BOA.Types.Kernel.EDistraint.HacizIslem.HesapTur_type;
        tutar?: number;
    }
    interface PaketHacizIslemListeHacizIslemHesapBilgileriHesapKiymet {
        altHesap?: string;
        ekTanim?: string;
        kiymetKod?: string;
        miktar?: number;
        tur?: BOA.Types.Kernel.EDistraint.HacizIslem.Birim_type;
        uyeKod?: string;
    }
}
declare namespace BOA.Types.Kernel.EDistraint.HacizIstek {
    export const enum ItemChoiceType {
        TCKN = 0,
        VKN = 1
    }
    interface Paket {
        baslik?: BOA.Types.Kernel.EDistraint.HacizIstek.PaketBaslik;
        hacizIstekListe?: BOA.Types.Kernel.EDistraint.HacizIstek.PaketHacizIstekListe;
    }
    interface PaketBaslik {
        bankaKod?: string;
        islemSayisi?: number;
        islemTipi?: number;
        metin?: string;
        paketId?: string;
        tarih?: string;
        versiyon?: number;
    }
    interface PaketHacizIstekListe {
        hacizIstek?: BOA.Types.Kernel.EDistraint.HacizIstek.PaketHacizIstekListeHacizIstek[];
    }
    interface PaketHacizIstekListeHacizIstek {
        ad?: string;
        babaAdi?: string;
        hBN?: string;
        item?: string;
        itemElementName?: BOA.Types.Kernel.EDistraint.HacizIstek.ItemChoiceType;
        soyad?: string;
        tutar?: number;
        vDKOD?: string;
    }
}
declare namespace BOA.Types.Kernel.EDistraintService {
    interface AttachmentReponseType {
    }
    interface AttachmentRequest {
    }
    interface AttachmentResponse {
    }
    interface AttachmentType {
        contentType?: string;
    }
    interface Base64Binary {
    }
    interface EDistraintServiceContract extends BOA.Common.Types.ContractBase {
        content?: number[];
        description?: string;
        fileByte?: number[];
        message?: string;
        messageId?: number;
        messageType?: number;
        opType?: number;
        packgeId?: string;
        packgeName?: string;
        password?: string;
        pIN?: string;
        session?: string;
        sessionDate?: Date;
        status?: number;
        terminal?: string;
        timeout?: number;
        username?: string;
    }
    interface EDistraintServiceRequest extends BOA.Common.Types.RequestBase {
    }
    interface EHVAPFault {
    }
    interface EHVAPFaultMessage {
    }
    interface EHVAPFaultType {
    }
    interface KeyResponse {
    }
    interface KeyType {
    }
    interface SessionReq {
    }
    interface SessionReqType {
    }
    interface TransferSession {
    }
    interface TransferSessionType {
    }
}
declare namespace BOA.Types.Kernel.EFT {
    export const enum FieldCharacteristic {
        A = 1,
        S = 2,
        K = 3
    }
    interface AccountResult {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        iBAN?: string;
        type?: BOA.Types.Kernel.EFT.Constant.AccountResultType;
    }
    interface AfterCloseContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        limitDate?: Date;
        mainLimit?: number;
        usedLimit?: number;
    }
    interface Constant {
    }
    interface EFTIdendity {
        transactionDateTime?: Date;
        transactionNumber?: BOA.Types.Kernel.EFT.TransactionNumber;
    }
    interface Extensions {
    }
    interface GeneralInformationContract extends BOA.Common.Types.ContractBase {
        accountNo?: string;
        address?: string;
        birthDate?: string;
        birthPlace?: string;
        counter?: string;
        customerName?: string;
        customerNo?: string;
        description?: string;
        eFTTextleri?: string[];
        expenseInfo?: string;
        idNo?: string;
        orderAmount?: string;
        passportNo?: string;
        paymentDetail?: string;
        paymentType?: string;
        receiverName?: string;
        senderName?: string;
        senderReceiverInfo?: string;
        tran?: string;
        tranRefNo?: string;
    }
    interface HaberGenlEftSatirListesi {
        lines?: string[];
        sayacEklendiMi?: boolean;
    }
    interface InComingContract extends BOA.Common.Types.ContractBase {
        adupFileName?: string;
        channelId?: number;
        channelName?: string;
        fon1Balance?: number;
        fon1Debit?: number;
        haberGenel?: BOA.Types.Kernel.EFT.GeneralInformationContract;
        hasAcc?: boolean;
        hostName?: string;
        id?: number;
        inComingStatus?: BOA.Types.Kernel.EFT.InComingStateAndDetails;
        inComingValues?: BOA.Types.Kernel.EFT.InComingValuesContract[];
        isClosure?: boolean;
        msgAmount?: number;
        msgComment?: string;
        msgCreditCardNumber?: string;
        msgEndMessageMarker?: string;
        msgEnteranceTime?: string;
        msgGroupType?: string;
        msgMessageCode?: string;
        msgPartitionNumber?: string;
        msgPaymentSource?: string;
        msgPriority?: number;
        msgReceiverAccountNumber?: string;
        msgReceiverBankCode?: string;
        msgReceiverBankName?: string;
        msgReceiverBranchCode?: string;
        msgReceiverBranchName?: string;
        msgReceiverCitizenshipId?: string;
        msgReceiverCityCode?: string;
        msgReceiverName?: string;
        msgReceiverPhone?: string;
        msgRecievedFlag?: string;
        msgReferenceNumber?: string;
        msgSenderAccountNumber?: string;
        msgSenderBankCode?: string;
        msgSenderBankName?: string;
        msgSenderBranchCode?: string;
        msgSenderBranchName?: string;
        msgSenderCitizenshipId?: string;
        msgSenderCityCode?: string;
        msgSenderName?: string;
        msgSenderPhone?: string;
        msgSequenceNumber?: string;
        msgSystemCode?: string;
        msgTransactionDate?: Date;
        msgTransactionTime?: string;
        muhRef?: string;
        netAmount?: number;
        oldState?: number;
        oldStateDetail?: number;
        oldTransactionBranchId?: number;
        paymentAccount?: string;
        paymentAccountType?: number;
        paymentType?: BOA.Types.Kernel.EFT.Constant.PaymentType;
        productType?: number;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverBranchId?: number;
        relatedInComingContract?: BOA.Types.Kernel.EFT.InComingContract;
        relatedOutGoingContract?: BOA.Types.Kernel.EFT.OutGoingContract;
        relationType?: number;
        relationTypeDescription?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        returnReason?: string;
        startUserName?: string;
        state?: number;
        stateDescription?: string;
        stateDetail?: number;
        stateDetailDescription?: string;
        statusReason?: number;
        statusReasonName?: string;
        systemDate?: Date;
        tranContract?: BOA.Types.Kernel.EFT.InComingTranContract;
        transactionBranchId?: number;
        transactionBranchName?: string;
        uniqueIdentity?: BOA.Types.Kernel.EFT.EFTIdendity;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
    }
    interface InComingStateAndDetails {
        explanationId?: number;
        isPayable?: boolean;
        isReturnable?: boolean;
        state?: BOA.Types.Kernel.EFT.Constant.IncomingStates;
        stateDetail?: BOA.Types.Kernel.EFT.Constant.IncomingDetailStates;
    }
    interface InComingStatus {
    }
    interface InComingTranContract extends BOA.Common.Types.ContractBase {
        approveUserName?: string;
        businessKey?: number;
        businessKeyValue?: string;
        hostName?: string;
        inComingId?: number;
        reverseBusinessKey?: number;
        startUserName?: string;
        state?: number;
        stateDescription?: string;
        stateDetail?: number;
        stateDetailDescription?: string;
        tranDate?: Date;
        tranDescription?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface InComingValuesContract extends BOA.Common.Types.ContractBase {
        componentType?: number;
        defaultValue?: string;
        fieldDescription?: string;
        fieldId?: number;
        fieldName?: string;
        fieldValue?: string;
        fieldValueCode?: string;
        ktMandatoryDesc?: string;
        messageId?: number;
        paramTypeName?: string;
        rowNumber?: number;
        sequenceNumber?: number;
    }
    interface OutGoingContract extends BOA.Common.Types.ContractBase {
        accountingTranRef?: string;
        approveUserName?: string;
        authorizedPersonID?: number;
        blackListVerificationType?: number;
        channelId?: BOA.Common.Types.ChannelContract;
        channelName?: string;
        divitId?: string;
        errorCode?: string;
        genericValueList?: BOA.Types.Kernel.EFT.OutGoingValuesContract[];
        hostName?: string;
        ibanNotDeclared?: boolean;
        id?: number;
        isArriveInfoReturns?: boolean;
        isAuthorized?: boolean;
        isOrder?: boolean;
        isRent?: boolean;
        isTotalAmountInfoChecked?: boolean;
        msgAmount?: number;
        msgComment?: string;
        msgCreditCardNumber?: string;
        msgMessageCode?: string;
        msgPaymentSource?: string;
        msgPaymentType?: string;
        msgPriority?: number;
        msgReceivedFlag?: string;
        msgReceiverAccountNumber?: string;
        msgReceiverAddress?: string;
        msgReceiverAddress2?: string;
        msgReceiverBankCode?: string;
        msgReceiverBankName?: string;
        msgReceiverBranchCode?: string;
        msgReceiverBranchName?: string;
        msgReceiverCitizenshipId?: string;
        msgReceiverCityCode?: string;
        msgReceiverFatherName?: string;
        msgReceiverName?: string;
        msgReceiverPhone?: string;
        msgReferenceNumber?: string;
        msgSenderAccountNumber?: string;
        msgSenderBankCode?: string;
        msgSenderBranchCode?: string;
        msgSenderCitizenshipId?: string;
        msgSenderCityCode?: string;
        msgSenderName?: string;
        msgSenderPhone?: string;
        msgTransactionDate?: Date;
        muhRef?: string;
        nationality?: string;
        outGoingTran?: BOA.Types.Kernel.EFT.OutGoingTranContract;
        outGoingValues?: BOA.Types.Kernel.EFT.OutGoingValuesContract[];
        passportNumber?: string;
        paymentAccountType?: BOA.Types.Kernel.EFT.Constant.PaymentAccountType;
        paymentSourceDescription?: string;
        pPMLimit?: number;
        receiptDescription?: string;
        relationType?: number;
        relationTypeDescription?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderAccountBranchId?: number;
        senderAccountNumber?: number;
        senderAccountSuffix?: number;
        senderAddress?: string;
        senderPersonType?: number;
        senderTaxOffice?: string;
        startUserName?: string;
        state?: number;
        stateDescription?: string;
        stateDetail?: number;
        stateDetailDescription?: string;
        systemDate?: Date;
        totalAmount?: number;
        transactionBranchId?: number;
        transactionBranchName?: string;
        uniqueIdentity?: BOA.Types.Kernel.EFT.EFTIdendity;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
        withoutLimit?: number;
        workFlowInstanceId?: number;
    }
    interface OutGoingTranContract extends BOA.Common.Types.ContractBase {
        approveUserName?: string;
        businessKey?: number;
        businessKeyValue?: string;
        hostName?: string;
        outGoingId?: number;
        reverseBusinessKey?: number;
        startUserName?: string;
        state?: number;
        stateDescription?: string;
        stateDetail?: number;
        stateDetailDescription?: string;
        tranDate?: Date;
        tranDescription?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface OutGoingValuesContract extends BOA.Common.Types.ContractBase {
        componentType?: number;
        defaultValue?: string;
        fieldDescription?: string;
        fieldId?: number;
        fieldName?: string;
        fieldValue?: string;
        formatType?: string;
        isAutoSet?: boolean;
        ktMandatoryDesc?: string;
        messageId?: number;
    }
    interface ReplacementCharater {
        croppedCharacter?: string;
        turkishCharacter?: string;
    }
    interface SendEFTAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.EFT.OutGoingContract;
        outGoingId?: number;
    }
    interface StructureContract extends BOA.Common.Types.ContractBase {
        characteristic?: string;
        defaultValue?: string;
        fieldDataType?: string;
        fieldDescription?: string;
        fieldDisplayName?: string;
        fieldId?: number;
        fieldName?: string;
        fieldValue?: string;
        firstPosition?: number;
        formatId?: number;
        inComingColumnName?: string;
        ktMandatory?: number;
        length?: number;
        mandatory?: number;
        messageCode?: string;
        messageId?: string;
        minimumLength?: number;
        outGoingColumnName?: string;
        paramTypeName?: string;
        rowName?: string;
        rowNumber?: number;
        rowType?: string;
        rowTypeName?: string;
        sequenceNumber?: number;
        startPosition?: number;
        visibility?: number;
    }
    interface TransactionNumber {
        bankCode?: string;
        branchCode?: string;
        referenceNumber?: string;
    }
    interface ValidationContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        fieldId?: string;
        methodName?: string;
        type?: number;
    }
}
declare namespace BOA.Types.Kernel.EFT.Constant {
    export const enum AccountResultType {
        FoundAsAccount = 1,
        NotActiveOrNotProductTypeOne = 2,
        NotActiveBranch = 3,
        NotFound = 4,
        NotAccount = 5,
        FoundAsGeneralLedgerAccount = 6
    }
    export const enum AccountType {
        None = 0,
        AccountWithSuffix = 1,
        AccountWithSuffixNotInt = 2,
        AccountWithOutSuffix = 3,
        IBAN = 4,
        CreditCard = 5
    }
    export const enum IADEReasons {
        AliciBilgiEksikVeyaHatali = 1,
        HesapNoileAliciIsmiUyumsuz = 2,
        HesapKapatilmis = 3,
        HesapNoYanlis = 4,
        HesapEFTicinUygunDegil = 5,
        HABRGENListinadenIade = 6,
        DigerNedenler = 7,
        AliciTCKNVKNFarkli = 8,
        GöndericiBilgileriEksikYadaHatali = 9
    }
    export const enum IncomingDetailStates {
        NoDetails = 0,
        GondereninAdiEksik = 2,
        GondereninTCKNVKNEksik = 3,
        OdemeBekliyor = 4,
        OdemeReddedildiFraud = 5,
        OdemeReddedildiSube = 6,
        ManuelOdendi = 7,
        OtomatikOdendi = 8,
        FraudBlokeliOdendi = 9,
        SubeOperasyonOnayıBekliyor = 10,
        FraudOnayıBekliyor = 11,
        IadeBekliyor = 12,
        ManuelIade = 13,
        OtomatikIade = 14
    }
    export const enum IncomingStates {
        Acik = 1,
        OnayBekliyor = 2,
        Odendi = 3,
        Silindi = 4,
        Hata = 5,
        IadeEdildi = 6
    }
    export const enum InComingTranType {
        Receive = 1,
        Save = 2,
        Update = 3,
        Pay = 4,
        Delete = 5,
        DeletePayment = 6,
        CancelUpdate = 7,
        CancelPayment = 8,
        Approve = 9,
        ApproveUpdate = 10,
        AprrovePayment = 11,
        Reject = 12,
        RejectUpdate = 13,
        RejectPayment = 14,
        Return = 15
    }
    export const enum MailTypes {
        Aggreement = 1,
        Error = 2,
        OpenClose = 3,
        MoneyWaiting = 4,
        Information = 5
    }
    export const enum MsgPaymentType {
        KiraDegil = 99,
        KonutKirasi = 1,
        IsyeriKirasi = 2,
        DigerKiralar = 3
    }
    export const enum NameAndAccountMatchType {
        NotMatched = 1,
        Matched = 2,
        UnMatchable = 3
    }
    export const enum OutGoingDetailStates {
        HabrBaslCalistirilamadi = 1,
        HabrBaslBekleniyor = 2,
        HabrKapaCalistirilamadi = 3,
        SubeLimitiAlinamadi = 4,
        KapanisSaatiAlinamadi = 5,
        KapanisSaatiGeldi = 6,
        BakiyeAlinamadi20003 = 7,
        BakiyeAlinamadi20004 = 8,
        ToplamGidenBakiyeBuyuktur = 9,
        TarihFarkli = 10,
        HabrKapaAlindi = 11,
        HazineLimitiAlinamadi = 12,
        TutarLimittenBuyuktur = 13,
        MailGonderimiBasarisiz = 14,
        HSRCyeYazilamadi = 15,
        TransactionHistoryAlinamadi = 16,
        MuhasebeSilmeBasarisiz = 17,
        HSRCyeYazildi = 18,
        KayitYok = 19,
        TranInsertBasarisiz = 20,
        TabloAlinamadi = 21,
        AckBekliyor = 22,
        EkrandanSilindi = 23,
        OtomatikSilindi = 24,
        BankayaUlasti = 25,
        IadeIstendi = 26,
        ADUPileGonderildi = 27,
        ADUPDosyaHatasi = 28,
        ProcessdenSilindi = 29
    }
    export const enum OutGoingStates {
        QueueWaiting = 1,
        Sent = 2,
        HasError = 3,
        Deleted = 4,
        DateWaiting = 5,
        MoneyWaiting = 6
    }
    export const enum PaymentAccountType {
        None = 0,
        Account = 1,
        GeneralLedger = 2,
        Cahce = 3
    }
    export const enum PaymentType {
        Single = 1,
        Group = 2
    }
    export const enum RelationsMessageType {
        InComing = 1,
        OutGoing = 2
    }
    export const enum RelationType {
        AyrintiTalebi = 1,
        Ayrinti = 2,
        IadeTalebi = 3,
        Iade = 4
    }
    export const enum TranType {
        Accounting = 1,
        Process = 2,
        Update = 3,
        Delete = 4,
        Coex = 5,
        ADUP = 6,
        Send = 7
    }
    interface BankaSubeSehir {
        bankaKodu?: string;
        sehirKodu?: string;
        subeKodu?: string;
    }
    interface HabrSkodSchedulingType {
    }
    interface HabrSkodTranType {
    }
    interface MessageCode {
    }
    interface MsgPaymentResource {
    }
    interface ReplacementCharater {
        croppedCharacter?: string;
        turkishCharacter?: string;
    }
}
declare namespace BOA.Types.Kernel.EmployeeDismissal {
    export const enum EmployeeType {
        ExWorker = 12,
        ExBankadaKampus = 19,
        ExOutSource = 20
    }
    export const enum PersonnelType {
        Worker = 1,
        OutSource = 2,
        ExEmployee = 4,
        ExOutSource = 6
    }
}
declare namespace BOA.Types.Kernel.ErpInvoice {
    interface ExpensePaymentsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        accountSuffix?: number;
        amount?: number;
        bankBranchId?: number;
        bankId?: number;
        branchId?: number;
        businessKey?: number;
        description?: string;
        dysApplicationName?: string;
        dysNo?: string;
        expenseType?: number;
        fec?: number;
        fer?: number;
        id?: number;
        isBranchPayment?: boolean;
        ledgerId?: number;
        oracleAccountName?: string;
        oracleAccountNumber?: number;
        oracleSlipReference?: string;
        oracleTranDate?: Date;
        paymentType?: number;
        sourceAccountNumber?: number;
        sourceAccountSuffix?: number;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        tranRef?: string;
        userName?: string;
    }
    interface InvoiceAccountingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        businessKey?: number;
        cancelDate?: Date;
        comment?: string;
        costCenterId?: number;
        credit?: number;
        debit?: number;
        divitId?: string;
        divitInstanceId?: string;
        fec?: number;
        fer?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        invoiceId?: number;
        invoiceLineId?: number;
        isCancelled?: number;
        ledgerId?: number;
        originalAmount?: number;
        originalCurrency?: number;
        seqNum?: number;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InvoiceContract extends BOA.Common.Types.ContractBase {
        accountingDate?: Date;
        accountingNumber?: number;
        accountSuffix?: number;
        approveStatus?: number;
        approveStatusName?: string;
        branchID?: number;
        budgetId?: number;
        budgetIdName?: string;
        businessKey?: number;
        costCenterID?: number;
        deliveryDate?: Date;
        deliveryUser?: string;
        description?: string;
        divitInstanceId?: string;
        expenseTypeDetailId?: number;
        expenseTypeId?: number;
        fecID?: number;
        fecIDName?: string;
        hostIP?: string;
        hostName?: string;
        invoiceChannel?: number;
        invoiceDate?: Date;
        invoiceId?: number;
        invoiceLineList?: BOA.Types.Kernel.ErpInvoice.InvoiceLineContract[];
        invoiceNumber?: string;
        invoiceStatus?: number;
        invoiceType?: number;
        ledgerID?: number;
        organizationId?: number;
        paymentAmount?: number;
        paymentCondition?: number;
        paymentDate?: Date;
        paymentFecID?: number;
        paymentGroup?: number;
        pEBeginDate?: Date;
        pEEndDate?: Date;
        personId?: number;
        prePaidExpense?: string;
        proxyVendorBankId?: number;
        proxyVendorId?: number;
        rate?: number;
        rateDate?: Date;
        rateTypeId?: number;
        systemDate?: Date;
        taxAmountInvoice?: number;
        taxTotalAmount?: number;
        taxType?: number;
        totalAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        uuID?: string;
        vehicleId?: number;
        vendorBankId?: number;
        vendorId?: number;
        vendorName?: string;
        workFlowDescription?: string;
        workFlowInstanceId?: number;
    }
    interface InvoiceLineContract extends BOA.Common.Types.ContractBase {
        accountingNumber?: number;
        branchID?: number;
        budgetID?: number;
        companyName?: string;
        costCenterID?: number;
        description?: string;
        eXInvoiceDate?: Date;
        exInvoiceLineId?: number;
        eXInvoiceNo?: string;
        expenseItemId?: number;
        fA?: string;
        fecID?: number;
        flag?: number;
        hostIP?: string;
        hostName?: string;
        invoiceId?: number;
        invoiceLineId?: number;
        invoiceNumber?: string;
        ledgerID?: number;
        lineAmount?: number;
        lineDefinition?: string;
        lineNumber?: number;
        lineStatus?: number;
        lineType?: number;
        organizationID?: number;
        organizationName?: string;
        pELedgerID?: number;
        pENextYearLedgerID?: number;
        personID?: number;
        personName?: string;
        purchaseContractNumber?: string;
        systemDate?: Date;
        taxAmount?: number;
        taxCode?: number;
        taxNumber?: string;
        unit?: number;
        unitCode?: number;
        unitPrice?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vehicleId?: number;
    }
    interface InvoicePaymentContract extends BOA.Common.Types.ContractBase {
        fundPayment?: string;
        hostIP?: string;
        hostName?: string;
        instanceId?: number;
        invoiceId?: number;
        invoicePaymentId?: number;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentId?: number;
        prePayment?: string;
        prePaymentInvoiceId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorBankId?: number;
        vendorId?: number;
    }
    interface VehicleFleetDemandInvoiceContract extends BOA.Common.Types.ContractBase {
        fleetDemandInvoiceId?: number;
        hostIP?: string;
        hostName?: string;
        invoiceId?: number;
        invoiceLineId?: number;
        lineAmount?: number;
        organizationId?: number;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vehicleId?: number;
    }
}
declare namespace BOA.Types.Kernel.ESignature {
    export const enum ESignatureResultSeverity {
        Error = 0,
        Warning = 1,
        Information = 2
    }
    export const enum Methods {
        Undefined = 0,
        Authenticate = 1,
        SignCAdESBES = 2,
        GetSmartCardTerminals = 3,
        GetSmartCardInfo = 4,
        GetSignatureCertificates = 5,
        GetEncryptionCertificates = 6,
        VerifyCAdESSignatures = 7,
        SignPDF = 8,
        SignPAdES = 9,
        VerifyPDFSignatures = 10,
        GetWinCertStorage = 11,
        SignCAdESEST = 12
    }
    export const enum PDFSignatureType {
        Standard = 0,
        PAdESBasic = 1,
        PAdESEnhanced = 2,
        PAdESDocumentTimestamp = 3
    }
    interface CAdESSigningContract extends BOA.Common.Types.ContractBase {
        certificateIndex?: number;
        certificateSerialNumber?: string;
        content?: number[];
        isQualified?: boolean;
        pIN?: string;
        savePath?: string;
        smartCardSerialNumber?: string;
        terminal?: string;
    }
    interface CertificateInfoContract extends BOA.Common.Types.ContractBase {
        expirationDate?: Date;
        friendlyName?: string;
        hasPrivateKey?: boolean;
        issuerName?: string;
        serialNumber?: string;
        startDate?: Date;
        subjectName?: string;
        thumbprint?: string;
        version?: number;
    }
    interface ESignatureRequestBase {
        method?: BOA.Types.Kernel.ESignature.Methods;
        servicePassword?: string;
        serviceUrl?: string;
        serviceUsername?: string;
        signingContract?: BOA.Types.Kernel.ESignature.ISigningContract;
    }
    interface ESignatureResponseBase {
        results?: BOA.Types.Kernel.ESignature.ESignatureResult[];
        success?: boolean;
    }
    interface ESignatureResult {
        errorCode?: string;
        errorMessage?: string;
        exception?: string;
        isFriendly?: boolean;
        params?: string[];
        severity?: BOA.Types.Kernel.ESignature.ESignatureResultSeverity;
    }
    interface ISigningContract {
        content?: number[];
    }
    interface PDFSignature {
        authorName?: string;
        contactInfo?: string;
        customData?: number[];
        isSignatureForAllDocument?: boolean;
        location?: string;
        reason?: string;
        signatureName?: string;
        signaturePIN?: string;
        signatureType?: BOA.Types.Kernel.ESignature.PDFSignatureType;
        signingTime?: Date;
    }
    interface PDFSigningContract extends BOA.Common.Types.ContractBase {
        certificateSerialNumber?: string;
        content?: number[];
        signature?: BOA.Types.Kernel.ESignature.PDFSignature;
        smartCardSerialNumber?: string;
    }
    interface ResultExtensions {
    }
    interface SmartCardInfoContract extends BOA.Common.Types.ContractBase {
        certificateInfoList?: BOA.Types.Kernel.ESignature.CertificateInfoContract[];
        serialNumber?: string;
        terminal?: string;
    }
    interface SystemStore {
        certificateInfoList?: BOA.Types.Kernel.ESignature.CertificateInfoContract[];
        name?: string;
    }
    interface WinCertStorageContract extends BOA.Common.Types.ContractBase {
        accessType?: string;
        systemStores?: any;
    }
}
declare namespace BOA.Types.Kernel.Exchange {
    export const enum Allocation {
        ALLOC = 0,
        UNALL = 1
    }
    export const enum ApplicationName {
        OTSCustomer = 1,
        YourBankCustomer = 2,
        BOACustomer = 3,
        BOAIndividualPerson = 4,
        BOACorporatePerson = 5,
        BOAExcelCustomer = 6
    }
    export const enum Complexity {
        Simple = 0,
        Complex = 1
    }
    export const enum DealingMethod24D {
        ELEC = 0
    }
    export const enum Field22Code {
        AMEND = 0,
        CANCEL = 1,
        COMPLETE = 2,
        CORRECT = 3,
        EXOPTION = 4,
        NEW = 5,
        NOTICE = 6
    }
    export const enum FurtherIdentification {
        DELIVERY = 0,
        TRANSFER = 1
    }
    export const enum OfacDetailLevel {
        Full_Include_Filtered = 0,
        None_Include_Filtered = 1,
        Full = 2,
        None = 3
    }
    export const enum OfacSearchType {
        Name = 0,
        Text = 1,
        RJE = 2,
        BIC = 3,
        GenericName = 4,
        IndividualName = 5
    }
    export const enum PartyARole17R {
        B = 0,
        L = 1,
        NA = 2
    }
    export const enum PrintViewType {
        HTML = 0,
        TEXT = 1
    }
    export const enum ScopeOfOperation {
        AGNT = 0,
        BILA = 1,
        BROK = 2
    }
    export const enum StatusKey {
        Creation = 1,
        Verification = 2,
        Modification = 3,
        Authorization = 4,
        AuthorizationACK = 43,
        IncomingModification = 5,
        IncomingAuthorize = 6,
        Completed = 7,
        Received = 8,
        NetworkACK = 9,
        NetworkNACK = 10,
        Sent = 13,
        ReceivedFromSAA = 19,
        KambiyoCreation = 20,
        OFACOUT = 23,
        SAAError = 31,
        Networkackrs = 45,
        KaraListe = 52,
        GelenKaraliste = 53,
        InQueue = 54
    }
    export const enum TransactionType600 {
        BOUGHT = 0,
        SOLD = 1
    }
    export const enum TypeOfEventMT320 {
        CONF = 0
    }
    export const enum TypeOfOperation {
        AMND = 0,
        CANC = 1,
        DUPL = 2,
        EXOP = 3,
        NEWT = 4
    }
    export const enum UnitId {
        Kambiyo = 1,
        Hazine = 2,
        DUBAI = 3,
        Akreditif = 4,
        HazineOp = 5,
        Tahsiller = 6,
        Transferler = 7,
        UB = 8,
        Garanti_Mektuplar = 9,
        İhrAkreditifleri = 10,
        İthAkreditifleri = 11,
        none = 99
    }
    export const enum ViewType {
        Hepsi = 0,
        PrintView = 1,
        QuickView = 2,
        OriginalView = 3
    }
    interface AccuityCorrBankContract extends BOA.Common.Types.ContractBase {
        clearerInstitutionNameFull?: string;
        clearerPhysicalAddress?: string;
        clearerSwiftBic?: string;
        countryNameFull?: string;
        institutionNameFull?: string;
        isoCountryCode?: string;
        isoCurrencyCode?: string;
        ownerSwiftBic?: string;
    }
    interface AdditionalConditionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        descriptionWithoutEnter?: string;
        exchangeId?: number;
        id?: number;
        isActive?: number;
        isDescriptionChanged?: boolean;
        isSent?: number;
        isTemp?: boolean;
        messageType?: string;
        sequenceNumber?: number;
        stateName?: string;
        status?: number;
    }
    interface BankListContract extends BOA.Common.Types.ContractBase {
        branchName?: string;
        cityTown?: string;
        clearerInstitutionNameFull?: string;
        clearerPhysicalAddress?: string;
        clearerSwiftBic?: string;
        contactInformation?: string;
        contactType?: string;
        countryNameFull?: string;
        departmentFunctionValue?: string;
        headOffice?: string;
        institutionNameFull?: string;
        institutionTypeValue?: string;
        isoCountryCode?: string;
        isoCurrencyCode?: string;
        officerName?: string;
        officeTypeValue?: string;
        ownerSwiftBic?: string;
        physicalAddress?: string;
        postalCode?: string;
        stateProvinceRegionFull?: string;
    }
    interface Common {
    }
    interface Constant {
    }
    interface CounterBankCommissionInfoContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        bankCommissionInfoId?: number;
        calculationPeriod?: number;
        calculationPeriodDescription?: string;
        collectionPeriod?: number;
        collectionPeriodDescription?: string;
        collectionType?: number;
        collectionTypeDescription?: string;
        commissionExpiryDate?: Date;
        costType?: number;
        costTypeDescription?: string;
        exchangeId?: number;
        expenseType?: number;
        expenseTypeDescription?: string;
        issueDate?: Date;
        paymentPeriodDevider?: number;
        rate?: number;
        status?: number;
    }
    interface CounterBankCommissionInstallmentContract extends BOA.Common.Types.ContractBase {
        accountWithInstitution?: string;
        bankCommissionInfoId?: number;
        bankCommissionInstallmentId?: number;
        calculationPeriod?: number;
        chargeAmount?: number;
        collectionPeriod?: number;
        confirmationInstruction?: number;
        costTypeDescription?: string;
        detailOfCharge?: string;
        exchangeId?: number;
        explanation?: string;
        fec?: number;
        fecCode?: string;
        finishDate?: Date;
        isSelected?: boolean;
        maxDate?: Date;
        messageType?: string;
        minDate?: Date;
        narrative?: string;
        oPMApprover?: string;
        oPMUser?: string;
        orderingInstitution?: string;
        paidAmount?: number;
        productSubType?: string;
        rate?: number;
        receiverBankCode?: string;
        reference?: string;
        relatedReference?: string;
        remainRisk?: number;
        repeatNumber?: number;
        senderBankCode?: string;
        startDate?: Date;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        fec?: number;
        fromBranchId?: number;
        fromUnitId?: number;
        ledgerId?: number;
        newAccountSuffix?: number;
        toBranchId?: number;
        toUnitId?: number;
    }
    interface CustomerTransferRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.Exchange.CustomerTransferContract;
        isBalanceClose?: boolean;
    }
    interface DescriptionOfGoodsColumnContract extends BOA.Common.Types.ContractBase {
        columnName?: string;
        columnValue?: string;
        currentCount?: number;
        dGId?: number;
        id?: number;
    }
    interface DescriptionOfGoodsContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        columnList?: BOA.Types.Kernel.Exchange.DescriptionOfGoodsColumnContract[];
        description?: string;
        descriptionWithoutEnter?: string;
        exchangeId?: number;
        id?: number;
        incomingQuantity?: string;
        isActive?: number;
        isDescriptionChanged?: boolean;
        isFromExcel?: boolean;
        isSent?: number;
        isTemp?: boolean;
        maxQuantity?: number;
        messageType?: string;
        minquantity?: number;
        quantity?: number;
        remainingQuantity?: number;
        sequenceNumber?: number;
        state?: string;
        stateName?: string;
        status?: number;
        unitPrice?: number;
    }
    interface DivitToExcelContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        divitId?: string;
        divitInstanceId?: string;
        docId?: number;
        ofacList?: BOA.Types.Kernel.Exchange.OfacContract[];
        opmUser?: string;
        reference?: string;
    }
    interface DocumentTLTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        description?: string;
        fec?: number;
        iBAN?: string;
        isTLTransaction?: boolean;
        k14Amount?: number;
        k14ReceiverBranchCode?: number;
        k14ReceiverParticipantCode?: number;
        k14TaxNumber?: string;
        lehdarName?: string;
        rateType?: number;
        senderIBAN?: string;
        transactionType?: number;
    }
    interface DocumentTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountWith?: string;
        amount?: number;
        assignmentJobTypeCode?: number;
        autoUpdate?: boolean;
        ben58D?: string;
        beneficiary?: string;
        beneficiaryReference?: string;
        benInst?: number;
        branchId?: number;
        branchName?: string;
        changeExpense?: number;
        chargeAmount?: number;
        chargeBankReference?: string;
        chargeType?: number;
        chargeTypeDesc?: string;
        colorState?: number;
        commissionKey?: string;
        compensationAmount?: number;
        compensationSuffix?: number;
        corrBankBranchId?: number;
        correspondentAccountNumber?: number;
        correspondentAccountSuffix?: number;
        correspondentBank?: string;
        correspondentExpense?: number;
        correspondentReference?: string;
        creditTypeName?: string;
        currentAmount?: number;
        currentSuffix?: number;
        currentSuffixBranchId?: number;
        customerName?: string;
        documentId?: number;
        editUser?: string;
        exchangeId?: number;
        fec?: number;
        fecName?: string;
        funded?: string;
        fundedAmount?: number;
        fundSuffix?: number;
        hostIp?: string;
        hostName?: string;
        infoType?: number;
        insuranceNumber?: string;
        intermediaryBank?: string;
        isAutoJob?: boolean;
        isConfirmed?: number;
        isFragment?: boolean;
        isFunded?: number;
        isLateFunded?: boolean;
        isLeasing?: boolean;
        isTemp?: boolean;
        isTLTransaction?: boolean;
        isToday?: number;
        isTransferReportFromDifferentBranch?: number;
        k14Amount?: number;
        lehdarNameAndAddress?: string;
        mtId?: number;
        narrative?: string;
        noticeTypeName?: string;
        ofacList?: BOA.Types.Kernel.Exchange.OfacContract[];
        oPMApprover?: string;
        oPMDirector?: string;
        oPMExpert?: string;
        opmUser?: string;
        oPMUser?: string;
        outGoingId?: number;
        payingBank?: string;
        payingBankName?: string;
        paymentSource?: number;
        paymentSourceName?: string;
        paymentType?: number;
        productSubType?: string;
        productSubTypeDescription?: string;
        receiverBank?: string;
        reference?: string;
        remittanceInformation?: string;
        reserveExpense?: number;
        reserveExpenseFX?: number;
        reserveExpenseTL?: number;
        resourceCode?: string;
        resourceId?: number;
        rezervName?: string;
        riskKey?: number;
        senderInfoFor756?: string;
        senderInformation?: string;
        sendInfoFor202?: string;
        sequenceNumber?: number;
        state?: number;
        stateId?: number;
        stateName?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        today?: Date;
        toleranceRate?: number;
        tOPMDirector?: string;
        tOPMExpert?: string;
        tranDate?: Date;
        transferKey?: number;
        transferSequenceNumber?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
        wfInstanceId?: number;
    }
    interface DraftDocumentContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        documentContent?: number[];
        documentName?: string;
        draftDocumentId?: number;
        exchangeId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface ExchangeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        authorizedPersonId?: number;
        branchId?: number;
        branchName?: string;
        changeVersion?: number;
        channelId?: number;
        collateralType?: number;
        confirmAccountNumber?: number;
        confirmAccountSuffix?: number;
        confirmAmount?: string;
        confirmBranchId?: number;
        confirmRate?: number;
        controlId?: number;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        correspondentReference?: string;
        customerAddress?: string;
        customerName?: string;
        divitId?: any;
        exchangeId?: number;
        fec?: number;
        fecDesc?: string;
        hostIp?: string;
        hostName?: string;
        incentiveId?: number;
        incomingDocumentTotalAmount?: number;
        isActive?: number;
        isConfirmed?: number;
        isConfirmedDetail?: string;
        isIncentive?: number;
        isLeasing?: number;
        isNonCustomer?: boolean;
        isNonCustomerByte?: number;
        manualRiskAmount?: number;
        oPMApprover?: string;
        opmUser?: string;
        portfolioClass?: number;
        productContent?: number;
        productSubType?: string;
        productSubTypeDetail?: number;
        productType?: number;
        reference?: string;
        remainingRisk?: number;
        resourceCode?: string;
        riskTransactionType?: number;
        systemDate?: Date;
        thirdPersonSerializeId?: number;
        toleranceRate?: number;
        totalDocumentAmount?: number;
        totalRisk?: number;
        totalTransferAmount?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ExchangeDetailContract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        fieldName?: string;
        fieldValue?: string;
        messageType?: string;
        sequenceNumber?: number;
        swiftId?: number;
    }
    interface ExchangeListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        advanceAmount?: number;
        amountUSD?: number;
        branchId?: number;
        branchName?: string;
        branchUserName?: string;
        branchZone?: string;
        businesKey?: number;
        businessKey?: number;
        calledAmount?: number;
        calledPaymentDate?: Date;
        changeVersion?: number;
        colorState?: number;
        commissionAmount?: number;
        commissionId?: number;
        confirmationDescription?: string;
        confirmCommissionStartDate?: Date;
        confirmingBank?: string;
        confirmingBankName?: string;
        confirmRate?: number;
        controlId?: number;
        correspondentReference?: string;
        countryId?: number;
        countryName?: string;
        creditTypeName?: string;
        customerName?: string;
        deferredAmount?: number;
        deferredDay?: number;
        description?: string;
        divitId?: any;
        exchangeId?: number;
        exchangeStatus?: string;
        expiryDate?: Date;
        fec?: number;
        fecName?: string;
        funded?: string;
        fundedAmount?: number;
        instanceOwner?: string;
        insuranceNumber?: string;
        insuranceParty?: number;
        isActive?: number;
        isBoa?: number;
        isConfirmed?: number;
        isConfirmedDescription?: string;
        isFunded?: number;
        isIncentive?: number;
        isIncentiveDescription?: string;
        isManuelAmendment?: boolean;
        isMissDocument?: boolean;
        lehdar?: string;
        manualRiskAmount?: number;
        maxAmount?: number;
        maxValueDate?: Date;
        messageType?: string;
        minAmount?: number;
        minValueDate?: Date;
        missDocument?: string;
        nameOfGoods?: string;
        operationType?: number;
        oPMApproverName?: string;
        oPMDirectorName?: string;
        oPMManagerName?: string;
        opmUser?: string;
        option?: number;
        originalExchangeId?: number;
        placeOfLoading?: string;
        placeOfUnloading?: string;
        processTypeName?: string;
        productSubType?: string;
        productSubTypeDescription?: string;
        projectWorkflowInstanceId?: number;
        projecWorkflowActiveStateId?: number;
        receiver?: string;
        receiverBIC?: string;
        reference?: string;
        referralType?: number;
        remainingRisk?: number;
        remainingRiskUSD?: number;
        responsiblePartyName?: string;
        riskOut?: number;
        senderBIC?: string;
        sequenceNumber?: number;
        shipmentDate?: Date;
        sightAmount?: number;
        startDate?: Date;
        state?: number;
        stateDescription?: string;
        toleranceRate?: number;
        totalAmount?: number;
        totalDocumentAmount?: number;
        totalRisk?: number;
        totalTransferAmount?: number;
        tranDate?: Date;
        transferAmount?: number;
        tranState?: string;
        typeOfDelivery?: number;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
        wFInstanceId?: number;
    }
    interface ExchangeTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        exchangeId?: number;
        hostIp?: string;
        hostName?: string;
        reverseBusinessKey?: number;
        sequenceNumber?: number;
        systemDate?: Date;
        tranDate?: Date;
        transactionType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ExchangeTransferListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountNumberLehdar?: string;
        accountSuffix?: number;
        amount?: number;
        amountUSD?: number;
        authorizedPersonId?: number;
        bankAccountNumber?: string;
        benChargeOwnFecAmount?: number;
        beneficiaryBankName?: string;
        beneficiaryBIC?: string;
        benOrShaChargeBsmvAmount?: number;
        benOrShaChargeOwnFecAmount?: number;
        benOrShaChargeTlAmount?: number;
        branchId?: number;
        branchName?: string;
        businesKey?: number;
        businessKey?: number;
        channelId?: number;
        chargeAccount?: number;
        chargeFEC?: number;
        chargeFecCode?: string;
        chargeOption?: number;
        chargeOptionDesc?: string;
        chargeSuffix?: number;
        chargeType?: number;
        chargeTypeDescription?: string;
        corrBankAccount?: number;
        corrBankBranchId?: number;
        corrBankName?: string;
        corrBankSuffix?: number;
        corrBankSwiftCode?: string;
        countryId?: number;
        countryName?: string;
        currentSuffix?: number;
        customerAddress1?: string;
        customerAddress2?: string;
        customerCountry?: string;
        customerName?: string;
        description?: string;
        divitId?: any;
        docTypeDesc?: string;
        documentDate?: Date;
        documentNumber?: string;
        documentType?: string;
        exchangeId?: number;
        exporterName?: string;
        fec?: number;
        fecCode?: string;
        field56CodeFor202?: string;
        field56NameFor202?: string;
        fundCurrentAccountNumber?: number;
        fundedAmount?: number;
        fundSuffix?: number;
        hostIp?: string;
        hostName?: string;
        incentiveId?: number;
        institutionAccountNumber?: string;
        intermediaryBank?: string;
        intermediaryBankAccountNumber?: string;
        intermediaryBankName?: string;
        isActive?: number;
        isConfirmed?: number;
        isDepartment?: number;
        isDepartmentBool?: boolean;
        isEndInBranch?: number;
        isEndInBranchDesc?: string;
        isEndInOpm?: boolean;
        isExporterDifferent?: string;
        isExporterDifferentBool?: boolean;
        isForeignBased?: number;
        isFunded?: number;
        isFundedBool?: boolean;
        isFundedDesc?: string;
        isIncentive?: number;
        isIncentiveDesc?: string;
        isIntraBankBool?: boolean;
        isIntrabankTransfer?: number;
        isIntraBankTrasnferDesc?: string;
        isLeasing?: number;
        isVostroBool?: boolean;
        k14QueryToken?: number;
        k14RecieverBranchId?: number;
        k14RecieverParticipantCode?: number;
        k14Status?: string;
        lehdarCustomerNameField?: string;
        mtId?: number;
        ofacList?: BOA.Types.Kernel.Exchange.OfacContract[];
        oPMApprover?: string;
        oPMApproverName?: string;
        opmUser?: string;
        opmUserName?: string;
        orderingInstitution?: string;
        ourChargeBsmvAmount?: number;
        ourChargeTlAmount?: number;
        printState?: number;
        printStateName?: string;
        productContent?: number;
        productSubType?: string;
        productSubTypeDescription?: string;
        productSubTypeDetail?: number;
        productType?: number;
        receiverCharge?: number;
        reference?: string;
        regionName?: string;
        remittanceInformation?: string;
        resourceCode?: string;
        sendAmount?: number;
        senderCharge?: number;
        senderCustomerNameAndAddress?: string;
        senderInformation?: string;
        sourceType?: number;
        sourceTypeDesc?: string;
        sourceTypeName?: string;
        state?: number;
        statusDescription?: string;
        swiftMessageType?: number;
        swiftMessageTypeDesc?: string;
        swiftStatus?: number;
        swiftStatusName?: string;
        systemDate?: Date;
        tempAccountNumber?: string;
        totalCharge?: number;
        tranDate?: Date;
        unFundedAmount?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        valueDate?: Date;
        vostroMainAccountIban?: string;
        vostroReference?: string;
        vostroSwiftCode?: string;
        wfInstanceId?: number;
    }
    interface EximBankContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        finView202Contract?: BOA.Types.Kernel.Exchange.FinView202Contract;
        ledgerId?: number;
        selectedAccountCorrespondent?: BOA.Types.Kernel.Account.AccountCorrespondentContract;
    }
    interface EximBankRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        eximBankContract?: BOA.Types.Kernel.Exchange.EximBankContract;
    }
    interface FieldContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        currencyIsoCode?: string;
        fecId?: number;
        fieldName?: string;
        fieldValue?: string;
        hasValueDateField?: boolean;
        index1?: number;
        index2?: number;
        isAmountField?: boolean;
        isCurrencyField?: boolean;
        isMandatory?: boolean;
        isValueDateField?: boolean;
        repeatIndex?: number;
        repeatSequence?: number;
        valueDate?: Date;
    }
    interface FieldDetailContract extends BOA.Common.Types.ContractBase {
        description?: string;
        fieldName?: string;
        fieldOption?: string;
        isItems?: BOA.Types.Kernel.Exchange.IsItem;
        isMandatory?: boolean;
    }
    interface FinView103Contract extends BOA.Types.Kernel.Exchange.FinViewBaseContract {
        amount32A?: number;
        amount33B?: number;
        beneficiary59Address1?: string;
        beneficiary59Address2?: string;
        beneficiary59AIdentifierCode?: string;
        beneficiary59CountryName?: string;
        beneficiary59Name?: string;
        beneficiary59Type?: string;
        beneficiaryAccount56A?: string;
        beneficiaryCustomer59Account?: string;
        beneficiaryInfoType?: string;
        chargeAmount?: number;
        chargeCurrency?: number;
        chargeId71A?: number;
        currency?: number;
        currencyFEC?: number;
        currencyIsoCode?: string;
        detailsOfCharges71A?: string;
        identifierCode50A?: string;
        information70?: string;
        institution56ACode?: string;
        institution56AName?: string;
        institution57ACode?: string;
        institution57AName?: string;
        mtId?: number;
        orderingCustAccount50K?: string;
        orderingCustAddress50K1?: string;
        orderingCustAddress50K2?: string;
        orderingCustCountryCode50K?: string;
        orderingCustName50K?: string;
        orderingCustomerType?: string;
        orderingInfoType?: string;
        orderingInst52ACode?: string;
        partyIdentifier57D?: string;
        receiverBic?: string;
        receiverCorrespondent54ACode?: string;
        receiversCharges71G?: number;
        reimbursemenent55ACode?: string;
        senderBic?: string;
        senderCorrAccount53B?: string;
        senderCorrespondent53ACode?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        sendingInstitution51A?: string;
        valueDate?: Date;
    }
    interface FinView110Contract extends BOA.Common.Types.ContractBase {
        chequeNumber21?: string;
        currency?: number;
        currencyAndAmount32B?: number;
        dateOfIssue30?: Date;
        mtId?: number;
        payee59?: string;
        receiverBic?: string;
        senderBic?: string;
        senderReference20?: string;
    }
    interface FinView191Contract extends BOA.Common.Types.ContractBase {
        amountOfCharge32B?: number;
        currency?: number;
        currencyFEC?: number;
        currencyIsoCode?: string;
        detailsOfCharges71B?: string;
        exchangeId?: number;
        mtId?: number;
        productSubId?: number;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        sendersReference20?: string;
        senderToReceiverInfo72?: string;
        valueDate?: Date;
    }
    interface FinView192Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        mtAndDateOfTheOriginalMessage11S?: string;
        mtId?: number;
        narrative79?: string;
        productSubId?: number;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        sendersReference20?: string;
    }
    interface FinView195Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        mtAndDateOfTheOriginalMessage11A?: string;
        mtId?: number;
        narrative77A?: string;
        narrative79?: string;
        productSubId?: number;
        queries75?: string;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        sendersReference20?: string;
    }
    interface FinView199Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        finView?: string;
        mtId?: number;
        narrative79?: string;
        otherDescription?: string;
        productSubId?: number;
        reasonCode?: number;
        reasonValue?: string;
        receiverBic?: string;
        refundCharge?: number;
        relatedReference21?: string;
        senderBic?: string;
        sendersReference20?: string;
        swiftId?: number;
    }
    interface FinView200Contract extends BOA.Types.Kernel.Exchange.FinViewBaseContract {
        amount32A?: number;
        currency?: number;
        currencyFEC?: number;
        currencyIsoCode?: string;
        institution57AAccount?: string;
        institution57ACode?: string;
        intermediary56ACode?: string;
        mtId?: number;
        receiverBic?: string;
        referenceNumber20?: string;
        senderBic?: string;
        senderCorrespondent53ACode?: string;
        senderReceiverInfo72?: string;
        valueDate?: Date;
    }
    interface FinView202Contract extends BOA.Types.Kernel.Exchange.FinViewBaseContract {
        amount32A?: number;
        beneficiary58ACode?: string;
        beneficiary58AName?: string;
        beneficiaryAccount56A?: string;
        beneficiaryAccount57A?: string;
        beneficiaryAccount58A?: string;
        currency?: number;
        currencyFEC?: number;
        currencyIsoCode?: string;
        exchangeId?: number;
        institution56ACode?: string;
        institution56AName?: string;
        institution57ACode?: string;
        institution57AName?: string;
        institution57DCode?: string;
        institution57DName?: string;
        mtId?: number;
        orderingInst52Code?: string;
        receiverBic?: string;
        receiverCorrespondent54ACode?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderCorrespondent53ACode?: string;
        senderCorrespondent53BCode?: string;
        senderReceiverInfo72?: string;
        swiftId?: number;
        valueDate?: Date;
    }
    interface FinView202COVContract extends BOA.Types.Kernel.Exchange.FinViewBaseContract {
        amount32A?: number;
        amount33B?: number;
        beneficiary59Address1?: string;
        beneficiary59Address2?: string;
        beneficiary59AIdentifierCode?: string;
        beneficiary59CountryName?: string;
        beneficiary59Name?: string;
        beneficiary59Type?: string;
        beneficiaryAccount56A?: string;
        beneficiaryCustomer59Account?: string;
        beneficiaryInstitution58ACode?: string;
        beneficiaryInstitution58AName?: string;
        currency?: number;
        currencyFEC?: number;
        currencyIsoCode?: string;
        field119?: string;
        identifierCode50A?: string;
        information70?: string;
        institution57ACode?: string;
        institution57AName?: string;
        intermediary56ACode?: string;
        mtId?: number;
        orderingCustAccount50F?: string;
        orderingCustAccount50K?: string;
        orderingCustAddress50F1?: string;
        orderingCustAddress50F2?: string;
        orderingCustAddress50K1?: string;
        orderingCustAddress50K2?: string;
        orderingCustCountryCode50F?: string;
        orderingCustCountryCode50K?: string;
        orderingCustName50F?: string;
        orderingCustName50K?: string;
        orderingCustomerType?: string;
        orderingInst52ACode?: string;
        partyIdentifier58A?: string;
        receiverBic?: string;
        receiverCorrespondent54ACode?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderCorrespondent53ACode?: string;
        senderReceiverInfo72?: string;
        valueDate?: Date;
    }
    interface FinView210Contract extends BOA.Common.Types.ContractBase {
        accountIdentification25?: string;
        amount32B?: number;
        currency?: number;
        intermediary56ACode?: string;
        orderingInst52ACode?: string;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        valueDate30?: Date;
    }
    interface FinView300Contract extends BOA.Common.Types.ContractBase {
        amount32B?: number;
        amount33B?: number;
        commonReference22C?: string;
        currency32B?: number;
        currency33B?: number;
        exchangeRate36?: number;
        newSequence15A?: string;
        newSequence15B?: string;
        partyA82ACode?: string;
        partyB87ACode?: string;
        receiverBic?: string;
        receivingAgent57ACodeBought?: string;
        receivingAgent57ACodeSold?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        tradeDate30T?: Date;
        typeOfOperation22A?: BOA.Types.Kernel.Exchange.TypeOfOperation;
        valueDate30V?: Date;
    }
    interface FinView320Contract extends BOA.Common.Types.ContractBase {
        amount32B?: number;
        amount34E?: number;
        commonReference22C?: string;
        currency32B?: number;
        currency34E?: number;
        dayCountFraction14D?: string;
        dealingMethod24D?: BOA.Types.Kernel.Exchange.DealingMethod24D;
        deliveryAgent53?: string;
        interestRate37G?: number;
        maturityDate30P?: Date;
        newSequence15A?: string;
        newSequence15B?: string;
        newSequence15C?: string;
        newSequence15D?: string;
        nextInterestDueDate30X?: Date;
        partyA82ACode?: string;
        partyARole17R?: BOA.Types.Kernel.Exchange.PartyARole17R;
        partyB87ACode?: string;
        receiverBic?: string;
        receivingAgent57ACode?: string;
        receivingAgent57ACodeIn15D?: string;
        receivingAgent57ACountCode?: string;
        receivingAgent57ACountCodeIn15D?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        scopeOfOperation94A?: BOA.Types.Kernel.Exchange.ScopeOfOperation;
        tradeDate30T?: Date;
        typeOfEvent22B?: BOA.Types.Kernel.Exchange.TypeOfEventMT320;
        typeOfOperation22A?: BOA.Types.Kernel.Exchange.TypeOfOperation;
        valueDate30V?: Date;
    }
    interface FinView400Contract extends BOA.Common.Types.ContractBase {
        amount32A?: number;
        amount32B?: number;
        amount33A?: number;
        amount71B?: number;
        currency?: number;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        valueDate?: Date;
    }
    interface FinView410Contract extends BOA.Common.Types.ContractBase {
        amount32A?: number;
        currency?: number;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderInformation?: string;
    }
    interface FinView412Contract extends BOA.Common.Types.ContractBase {
        amount32A?: number;
        currency?: number;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderInformation?: string;
        valueDate?: Date;
    }
    interface FinView416Contract extends BOA.Common.Types.ContractBase {
        amount32A?: number;
        currency?: number;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        relatedReference21A?: string;
    }
    interface FinView420Contract extends BOA.Common.Types.ContractBase {
        amount32A?: number;
        currency32A?: number;
        currency32AIsoCode?: string;
        dateOfCollectionInstruction30?: Date;
        draweeAccount59?: string;
        draweeNameAddress59?: string;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderReceiverInfo72?: string;
        valueDate?: Date;
    }
    interface FinView422Contract extends BOA.Common.Types.ContractBase {
        amount32A?: number;
        currency?: number;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
    }
    interface FinView499Contract extends BOA.Common.Types.ContractBase {
        narrative79?: string;
        receiverBic?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
    }
    interface FinView600Contract extends BOA.Common.Types.ContractBase {
        agreement77HType?: string;
        amount32F?: number;
        amount34P?: number;
        amount34R?: number;
        availability26C?: string;
        code22?: BOA.Types.Kernel.Exchange.Field22Code;
        commonReference22?: string;
        currency33G?: number;
        currency34P?: number;
        currency34R?: number;
        date34P?: Date;
        date34R?: Date;
        dateContractAgreedAmended30?: Date;
        delivererOrReceiverer87ACode?: string;
        newSequence15A?: string;
        newSequence15B?: string;
        newSequence15C?: string;
        partyA82ACode?: string;
        partyB87ACode?: string;
        price33G?: number;
        receiverBic?: string;
        receivingAgent57ACode?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        transactionType?: BOA.Types.Kernel.Exchange.TransactionType600;
        type26C?: number;
    }
    interface FinView604Contract extends BOA.Common.Types.ContractBase {
        amount32F?: number;
        availability26C?: string;
        beneficiaryOfCommodity88APartyIdentifier?: string;
        beneficiaryOfCommodity88BLocation?: string;
        beneficiaryOfCommodity88BPartyIdentifier?: string;
        beneficiaryOfCommodity88DNameAddress?: string;
        beneficiaryOfCommodity88DPartyIdentifier?: string;
        beneficiaryOfTheCommodity88ACode?: string;
        furtherIdentification23?: BOA.Types.Kernel.Exchange.FurtherIdentification;
        instructingParty82ACode?: string;
        mtId?: number;
        receiverBic?: string;
        receiverOfCommodity87APartyIdentifier?: string;
        receiverOfCommodity87BLocation?: string;
        receiverOfCommodity87BPartyIdentifier?: string;
        receiverOfCommodity87DNameAddress?: string;
        receiverOfCommodity87DPartyIdentifier?: string;
        receiverOftheCommodity87ACode?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        type26C?: number;
        valueDate30?: Date;
    }
    interface FinView605Contract extends BOA.Common.Types.ContractBase {
        amount32F?: number;
        availability26C?: string;
        beneficiaryOfCommodity88A?: string;
        certificateBarNumbers26D?: string;
        furtherIdentification23?: BOA.Types.Kernel.Exchange.FurtherIdentification;
        instructingParty82ACode?: string;
        mtId?: number;
        receiverBic?: string;
        receiverOftheCommodity87ACode?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderToReceiverInfo72Sequence1?: string;
        senderToReceiverInfo72Sequence2?: string;
        type26C?: number;
        valueDate30?: Date;
    }
    interface FinView607Contract extends BOA.Common.Types.ContractBase {
        amount32F?: number;
        availability26C?: string;
        denomination26C?: number;
        furtherAccountIdentification25?: string;
        mtId?: number;
        receiverBic?: string;
        receiverOftheCommodity87ACode?: string;
        referenceNumber20?: string;
        relatedReference21?: string;
        senderBic?: string;
        type26C?: number;
        valueDate30?: Date;
    }
    interface FinView700Contract extends BOA.Common.Types.ContractBase {
        additionalAmountsCovered?: string;
        additionalConditions?: string;
        adviseThroughBank?: string;
        adviseThroughBankType?: string;
        amount32B?: number;
        applicableRules?: string;
        applicant?: string;
        applicantBank?: string;
        applicantBankType?: string;
        availableWith?: string;
        availableWithType?: string;
        bankDetail41?: string;
        beneficiary?: string;
        beneficiaryCustomer59Account?: string;
        charges?: string;
        confirmationInstructions?: string;
        currency?: number;
        dateOfExpiry?: Date;
        dateOfIssue?: Date;
        deferredPaymentDetails?: string;
        descriptionOfGoods?: string;
        documentaryCreditNumber?: string;
        documentsRequired?: string;
        draftsAt?: string;
        drawee?: string;
        draweeType?: string;
        exchangeId?: number;
        formOfDocumentaryCredit?: string;
        instructionsToThePaying?: string;
        latestDateOfShipment?: Date;
        maximumCreditAmount?: string;
        mixedPaymentDetails?: string;
        mtId?: number;
        partialShipments?: string;
        percentageCreditAmountTolerance?: string;
        percentageCreditAmountToleranceNegative?: string;
        percentageCreditAmountTolerancePositive?: string;
        periodForPresentation?: string;
        placeOfExpiry?: string;
        placeOfFinalDestination?: string;
        placeOfTakingInCharge?: string;
        portOfDischarge?: string;
        portOfLoading?: string;
        productSubTypeENG?: string;
        receiverBic?: string;
        referencetoPreAdvice?: string;
        reimbursingBank?: string;
        reimbursingBankType?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
        shipmentPeriod?: string;
        transshipment?: string;
    }
    interface FinView701Contract extends BOA.Common.Types.ContractBase {
        additionalConditions?: string;
        descriptionOfGoods?: string;
        documentaryCreditNumber?: string;
        documentsRequired?: string;
        exchangeId?: number;
        mtId?: number;
        receiverBic?: string;
        senderBic?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
    }
    interface FinView707Contract extends BOA.Common.Types.ContractBase {
        additionalAmountsCovered?: string;
        amount32B?: number;
        amount33B?: number;
        amount34B?: number;
        beneficiaryCustomer59Account?: string;
        currency?: number;
        dateOfAmendment30?: Date;
        dateOfIssue?: Date;
        exchangeId?: number;
        issuingBank?: string;
        issuingBanksReference23?: string;
        issuingBankType?: string;
        latestDateOfShipment?: Date;
        maximumCreditAmount?: string;
        mtId?: number;
        narrative79?: string;
        newDateOfExpiry?: Date;
        numberOfAmendment26E?: number;
        percentageCreditAmountTolerance?: string;
        placeOfFinalDestination?: string;
        placeOfTakingInCharge?: string;
        portOfDischarge?: string;
        portOfLoading?: string;
        receiverBic?: string;
        receiversReference21?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        shipmentPeriod?: string;
    }
    interface FinView710Contract extends BOA.Common.Types.ContractBase {
        additionalAmountsCovered?: string;
        additionalConditions?: string;
        adviseThroughBank?: string;
        adviseThroughBankType?: string;
        amount32B?: number;
        applicableRules?: string;
        applicant?: string;
        applicantBank?: string;
        applicantBankType?: string;
        availableWith?: string;
        availableWithCode?: string;
        availableWithType?: string;
        beneficiary?: string;
        beneficiaryCustomer59Account?: string;
        charges?: string;
        confirmationInstructions?: string;
        currency?: number;
        dateOfExpiry?: Date;
        dateOfIssue?: Date;
        deferredPaymentDetails?: string;
        descriptionOfGoods?: string;
        documentaryCreditNumber?: string;
        documentsRequired?: string;
        draftsAt?: string;
        drawee?: string;
        draweeType?: string;
        formOfDocumentaryCredit?: string;
        instructionsToThePaying?: string;
        issuingBank?: string;
        issuingBankType?: string;
        latestDateOfShipment?: Date;
        maximumCreditAmount?: string;
        mixedPaymentDetails?: string;
        mtId?: number;
        nonBankIssuer?: string;
        partialShipments?: string;
        percentageCreditAmountTolerance?: string;
        periodForPresentation?: string;
        placeOfExpiry?: string;
        placeOfFinalDestination?: string;
        placeOfTakingInCharge?: string;
        portOfDischarge?: string;
        portOfLoading?: string;
        receiverBic?: string;
        referencetoPreAdvice?: string;
        reimbursingBank?: string;
        reimbursingBankType?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
        shipmentPeriod?: string;
        transshipment?: string;
    }
    interface FinView711Contract extends BOA.Common.Types.ContractBase {
        additionalConditions?: string;
        descriptionOfGoods?: string;
        documentaryCreditNumber?: string;
        documentsRequired?: string;
        exchangeId?: number;
        formOfDocumentaryCredit?: string;
        mtId?: number;
        receiverBic?: string;
        senderBic?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
    }
    interface FinView720Contract extends BOA.Common.Types.ContractBase {
        additionalAmountsCovered?: string;
        additionalConditions?: string;
        adviseThroughBank?: string;
        adviseThroughBankType?: string;
        amount32B?: number;
        applicableRules?: string;
        applicant?: string;
        applicantBank?: string;
        availableWith?: string;
        availableWithType?: string;
        beneficiary?: string;
        beneficiaryCustomer59Account?: string;
        charges?: string;
        confirmationInstructions?: string;
        currency?: number;
        dateOfExpiry?: Date;
        dateOfIssue?: Date;
        deferredPaymentDetails?: string;
        descriptionOfGoods?: string;
        documentaryCreditNumber?: string;
        documentsRequired?: string;
        draftsAt?: string;
        drawee?: string;
        draweeType?: string;
        formOfDocumentaryCredit?: string;
        instructionsToThePaying?: string;
        issuingBank?: string;
        issuingBankType?: string;
        latestDateOfShipment?: Date;
        maximumCreditAmount?: string;
        mixedPaymentDetails?: string;
        mtId?: number;
        partialShipments?: string;
        percentageCreditAmountTolerance?: string;
        periodForPresentation?: string;
        placeOfExpiry?: string;
        placeOfFinalDestination?: string;
        placeOfTakingInCharge?: string;
        portOfDischarge?: string;
        portOfLoading?: string;
        receiverBic?: string;
        referencetoPreAdvice?: string;
        reimbursingBank?: string;
        reimbursingBankType?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
        shipmentPeriod?: string;
        transshipment?: string;
    }
    interface FinView721Contract extends BOA.Common.Types.ContractBase {
        additionalConditions?: string;
        descriptionOfGoods?: string;
        documentaryCreditNumber?: string;
        documentsRequired?: string;
        exchangeId?: number;
        formOfDocumentaryCredit?: string;
        mtId?: number;
        receiverBic?: string;
        senderBic?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
    }
    interface FinView730Contract extends BOA.Common.Types.ContractBase {
        coverDate?: Date;
        mtId?: number;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        sendersReference20?: string;
        senderToReceiverInfo72?: string;
        statusKey?: BOA.Types.Kernel.Exchange.StatusKey;
    }
    interface FinView734Contract extends BOA.Common.Types.ContractBase {
        amount32A?: number;
        chargesClaimed?: string;
        coverDate?: Date;
        currency?: number;
        discrepancies?: string;
        disposalOfDocuments?: string;
        mtId?: number;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
    }
    interface FinView740Contract extends BOA.Common.Types.ContractBase {
        accountIdentification25?: string;
        additionalAmountsCovered?: string;
        amount32B?: number;
        applicableRules?: string;
        availableInst41Address?: string;
        availableInst41BIC?: string;
        availableInst41Code?: string;
        availableInst41Name?: string;
        bankInCharge71A?: string;
        beneficiary59Address1?: string;
        beneficiary59Address2?: string;
        beneficiary59Address3?: string;
        beneficiary59Name?: string;
        beneficiaryBankBIC?: string;
        beneficiaryBankReference?: string;
        currency?: number;
        dateOfExpiry?: Date;
        deferredPaymentDetails?: string;
        draftsAt?: string;
        drawee?: string;
        exchangeId?: number;
        expiryDate?: Date;
        expiryPlace?: string;
        issuingBankReference?: string;
        maximumCreditAmount?: string;
        mixedPaymentDetails?: string;
        mtId?: number;
        negotiatingBank?: string;
        otherCharges71B?: string;
        placeOfExpiry?: string;
        receiverBic?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        toleranceRate?: string;
    }
    interface FinView742Contract extends BOA.Common.Types.ContractBase {
        accountWithBankAddress?: string;
        accountWithBankBIC?: string;
        accountWithBankCode?: string;
        accountWithBankName?: string;
        additionalAmountClaimed33B?: number;
        additionalAmountClaimed33BCurrency?: number;
        beneficiaryBank?: string;
        beneficiaryBankBIC?: string;
        beneficiaryBankCode?: string;
        beneficiaryBankReference20?: string;
        charges71B?: string;
        dateofIssue?: Date;
        exchangeId?: number;
        issuingBankBIC?: string;
        issuingBankName?: string;
        issuingBankReference21?: string;
        mtId?: number;
        principalAmountClaimed32B?: number;
        principalAmountClaimed32BCurrency?: number;
        receiverBic?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        totalAmountClaimed34?: number;
        totalAmountClaimed34Currency?: number;
        totalAmountClaimed34Date?: Date;
    }
    interface FinView747Contract extends BOA.Common.Types.ContractBase {
        additionalAmountsCovered?: string;
        dateOfReimburse?: Date;
        decreaseOfCreditAmount?: number;
        decreaseOfCreditAmountCurrency?: number;
        exchangeId?: number;
        increaseOfCreditAmount?: number;
        increaseOfCreditAmountCurrency?: number;
        issuingBankReference?: string;
        maximumCreditAmount?: number;
        mtId?: number;
        narrative?: string;
        newCreditAmount?: number;
        newCreditAmountCurrency?: number;
        newDateOfExpiry?: Date;
        percentageCreditAmountTolerance?: number;
        receiverBic?: string;
        reimbursingBankReference?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
    }
    interface FinView750Contract extends BOA.Common.Types.ContractBase {
        accountWithBankAddress?: string;
        accountWithBankBIC?: string;
        accountWithBankCode?: string;
        accountWithBankName?: string;
        additionalAmount33B?: number;
        additionalAmount33BCurrency?: number;
        charges71B?: string;
        discrepancies77J?: string;
        exchangeId?: number;
        mtId?: number;
        principalAmount32B?: number;
        principalAmount32BCurrency?: number;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        totalAmountToBePaid34B?: number;
        totalAmountToBePaid34BCurrency?: number;
    }
    interface FinView752Contract extends BOA.Common.Types.ContractBase {
        amount32B?: number;
        charges71B?: string;
        currency?: number;
        dateOfAdvice?: Date;
        documentaryCreditNumber?: string;
        exchangeId?: number;
        furtherIdentification23?: string;
        mtId?: number;
        netAmount?: number;
        netAmountCurrency?: number;
        netAmountDate?: Date;
        presentingBanksReference?: string;
        receiverBic?: string;
        receiverCorrespondent54ACode?: string;
        senderBic?: string;
        senderCorrespondent53ACode?: string;
        senderReceiverInfo72?: string;
    }
    interface FinView754Contract extends BOA.Common.Types.ContractBase {
        accountWithBankBIC?: string;
        additionalAmount33B?: number;
        additionalAmount33BCurrency?: number;
        amount32A?: number;
        beneficiaryBankBIC?: string;
        chargesAdded73Amount?: number;
        chargesAdded73Currency?: number;
        chargesDeducted71BAmount?: number;
        chargesDeducted71BCurrency?: number;
        currency32A?: number;
        date32A?: Date;
        exchangeId?: number;
        mtId?: number;
        narrative77A?: string;
        narrative79?: string;
        receiverBic?: string;
        reimbursingBank53A?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        totalAmountClaimed34?: number;
        totalAmountClaimed34Currency?: number;
        totalAmountClaimed34Date?: Date;
    }
    interface FinView756Contract extends BOA.Common.Types.ContractBase {
        amount32B?: number;
        amount33A?: number;
        currency?: number;
        currency33A?: number;
        exchangeId?: number;
        mtId?: number;
        receiverBic?: string;
        receiverCorrespondent54A?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderCorrespondent53A?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        valueDate?: Date;
    }
    interface FinView760Contract extends BOA.Common.Types.ContractBase {
        amount?: number;
        applicableRules?: string;
        currency?: string;
        date?: Date;
        detailsOfGuarantee?: string;
        exchangeId?: number;
        furtherIdentification?: string;
        mtId?: number;
        receiverBic?: string;
        senderBic?: string;
        senderReceiverInfo?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
        transactionReferenceNumber?: string;
    }
    interface FinView767Contract extends BOA.Common.Types.ContractBase {
        amendmentDetails?: string;
        date?: Date;
        dateOfIssue31C?: Date;
        exchangeId?: number;
        furtherIdentification?: string;
        mtId?: number;
        numberOfAmendment26E?: number;
        receiverBic?: string;
        relatedReference?: string;
        senderBic?: string;
        sequenceOfTotal?: number;
        sequenceTotal?: number;
        transactionReferenceNumber?: string;
    }
    interface FinView799Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        mtId?: number;
        narrative?: string;
        receiverBic?: string;
        relatedReference?: string;
        senderBic?: string;
        transactionReferenceNumber?: string;
    }
    interface FinView910Contract extends BOA.Types.Kernel.Exchange.FinViewBaseContract {
        accountIdentification25?: string;
        amount32A?: number;
        currency?: number;
        currencyFEC?: number;
        currencyIsoCode?: string;
        institution56ACode?: string;
        mtId?: number;
        orderingCustAccount50K?: string;
        orderingCustAddress50K1?: string;
        orderingCustAddress50K2?: string;
        orderingCustName50K?: string;
        orderingInst52ACode?: string;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        senderReceiverInfo72?: string;
        sendersReference20?: string;
        valueDate?: Date;
    }
    interface FinView950Contract extends BOA.Common.Types.ContractBase {
        accountIdentification25?: string;
        closingAvailableBalance64?: number;
        closingBalance62F?: number;
        fec?: number;
        mTID?: number;
        openingBalance60F?: number;
        sequenceNumber28C?: string;
        statementLine61?: BOA.Types.Kernel.Exchange.Swift950StatementLine61[];
        transactionReferenceNumber20?: string;
    }
    interface FinViewBaseContract extends BOA.Common.Types.ContractBase {
    }
    interface FinViewn92Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        mtAndDateOfTheOriginalMessage11S?: string;
        mtId?: number;
        narrative79?: string;
        productSubId?: number;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        sendersReference20?: string;
    }
    interface FinViewn95Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        mtAndDateOfTheOriginalMessage11A?: string;
        mtId?: number;
        narrative77A?: string;
        narrative79?: string;
        productSubId?: number;
        queries75?: string;
        receiverBic?: string;
        relatedReference21?: string;
        senderBic?: string;
        sendersReference20?: string;
    }
    interface FinViewN98Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        mtId?: number;
        narrative?: string;
        receiverBic?: string;
        senderBic?: string;
        transactionReferenceNumber?: string;
    }
    interface FinViewN99Contract extends BOA.Common.Types.ContractBase {
        exchangeId?: number;
        messageType?: string;
        mtId?: number;
        narrative?: string;
        receiverBic?: string;
        relatedReference?: string;
        senderBic?: string;
        transactionReferenceNumber?: string;
    }
    interface ImportLCContract extends BOA.Common.Types.ContractBase {
        advanceAmount?: number;
        agreementDate?: Date;
        agreementNumber?: string;
        agreementType?: string;
        andor?: string;
        applicableRules?: number;
        applicableRulesDesc?: string;
        bankInCharge?: string;
        bankInChargeName?: string;
        beneficiary?: string;
        beneficiaryStandby?: string;
        branchUBApproach?: boolean;
        calledAmount?: number;
        calledPaymentDate?: Date;
        chargeAmount?: number;
        chargeResponsible?: number;
        chargeRestext?: string;
        chargeType?: number;
        commissionId?: number;
        confBankExpirationDate?: Date;
        confBankInstallmentType?: string;
        confBankPaymentType?: string;
        confirmationInstructions?: string;
        confirmingBank?: string;
        confirmingBankName?: string;
        correspondentReference?: string;
        countryId?: number;
        countryName?: string;
        creditType?: number;
        customerInform?: string;
        deferredAmount?: number;
        deferredDay?: number;
        deliveryBy?: number;
        deliveryBy2?: number;
        description?: string;
        documentDetail?: string;
        documentPeriod?: number;
        documentType?: number;
        drawee?: string;
        draweeBankName?: string;
        exchangeId?: number;
        expectedDay?: number;
        expiryDate?: Date;
        expiryPlace?: string;
        formOfLC?: number;
        formOfLCDesc?: string;
        fundedAmount?: number;
        goodsText?: string;
        isConfirmBankChanged?: boolean;
        isConfirmingBankChangedbyUB?: boolean;
        isControlNeeded?: boolean;
        isFunded?: number;
        isLeasing?: boolean;
        isMissDocument?: boolean;
        isNegotiation?: number;
        isPartialShipment?: number;
        isStandBy?: number;
        issueDate?: Date;
        isTransshipment?: number;
        isUbApproved?: boolean;
        maxValueDay?: number;
        missDocument?: string;
        paymentDetail?: string;
        rambursmentCharges?: number;
        receiverBank?: string;
        reimbursementBank?: string;
        rejectDescription?: string;
        relatedDocument?: number;
        remainingRisk?: number;
        requestedBank?: string;
        responsibleParty?: number;
        result?: number;
        resultMessage?: string;
        senderInformation?: string;
        shipmentDate?: Date;
        shipmentDatePeriod?: number;
        sightAmount?: number;
        signControl?: boolean;
        toleranceRateN?: number;
        toleranceRateP?: number;
        totalDocumentAmount?: number;
        totalRisk?: number;
        totalTransferAmount?: number;
        tranCode?: number;
        tranCodeStandard?: number;
        tranDate?: Date;
        typeOfDelivery?: number;
        typeOfDelivery2?: number;
        ubMailAddress?: string;
        wFInstanceId?: number;
    }
    interface IntraBankOption {
    }
    interface IsItem {
        isAmount?: boolean;
        isCurrency?: boolean;
        isMandatory?: boolean;
        isValueDate?: boolean;
        repeateCount?: number;
    }
    interface ListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        applicant?: string;
        branchId?: number;
        correspondentReference?: string;
        countryId?: number;
        creditType?: string;
        exchangeId?: number;
        fec?: number;
        isConfirmed?: number;
        isFunded?: number;
        isIncentive?: number;
        lehdar?: string;
        maxAmount?: number;
        maxValueDate?: Date;
        maxValueDateforSystem?: Date;
        minAmount?: number;
        minValueDate?: Date;
        minValueDateforSystem?: Date;
        opmUser?: string;
        productSubType?: string;
        reference?: string;
        responsibleParty?: string;
        senderBIC?: string;
        swiftCode?: string;
    }
    interface OfacContract extends BOA.Common.Types.ContractBase {
        dateOfBirth?: string;
        matchedId?: number;
        matchedListId?: string;
        matchedName?: string;
        matchedScore?: number;
        national_Id?: string;
        note?: string;
        placeOfBirth?: string;
        primary_Name?: string;
        sanctionList?: BOA.Types.Kernel.Exchange.Sanction[];
    }
    interface OGTSource {
    }
    interface PrintTrackingContract extends BOA.Common.Types.ContractBase {
        agreementCode?: string;
        description?: string;
        divitId?: string;
        docIdDivit?: number;
        docType?: number;
        documentId?: number;
        exchangeId?: number;
        flowId?: string;
        hostIp?: string;
        hostName?: string;
        reason?: number;
        reasonDescription?: string;
        sequenceNumber?: number;
        state?: number;
        stateDescription?: string;
        systemDate?: Date;
        updateDate?: Date;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
        wfInstanceId?: number;
    }
    interface ProvisionParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        branchId?: number;
        countryId?: number;
        fec?: number;
        sectorId?: number;
        swiftCode?: string;
    }
    interface RelatedImportLCInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beneficiary?: string;
        exchangeId?: number;
        reference?: string;
    }
    interface RequestedFileContract extends BOA.Common.Types.ContractBase {
        description?: string;
        descriptionWithoutEnter?: string;
        exchangeId?: number;
        isActive?: number;
        isDescriptionChanged?: boolean;
        isSent?: number;
        isTemp?: boolean;
        messageType?: string;
        requestedFileId?: number;
        sequenceNumber?: number;
        stateName?: string;
        status?: number;
    }
    interface Sanction {
        fromDate?: string;
        listName?: string;
        toDate?: string;
    }
    interface SendLGDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        activeState?: string;
        beneficiaryName?: string;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        changeVersion?: number;
        commissionAmount?: number;
        commissionBusinessKey?: number;
        commissionDayCount?: number;
        commissionId?: number;
        commissionJournalId?: number;
        commissionRate?: number;
        confirmingBank?: string;
        confirmingBankName?: string;
        country?: string;
        customerName?: string;
        definiteName?: string;
        deliveryOptionName?: string;
        description?: string;
        detailsOfGuarantee?: string;
        divitId?: any;
        exchangeId?: number;
        exchangeStatus?: string;
        expiryDate?: Date;
        fec?: number;
        instanceId?: any;
        isActive?: number;
        isConfirmed?: number;
        isConfirmedDescription?: string;
        isIndefinite?: number;
        kGDefiniteName?: string;
        kontrExpiryDate?: Date;
        manualAmount?: number;
        maxAmount?: number;
        maxValueDate?: Date;
        maxValueDateforSystem?: Date;
        minAmount?: number;
        minValueDate?: Date;
        minValueDateforSystem?: Date;
        openingDate?: Date;
        oPMDirectorName?: string;
        opmUser?: string;
        originalExchangeId?: number;
        productSubType?: string;
        productSubTypeDescription?: string;
        propertyDescription?: string;
        reference?: string;
        relatedReference?: string;
        remainingRisk?: number;
        requestedAmount?: number;
        requestedFEC?: number;
        requestedFECName?: string;
        shipmentDate?: Date;
        systemDate?: Date;
        totalCompensationAmount?: number;
        totalRisk?: number;
        tranDate?: Date;
        wFInstanceId?: number;
    }
    interface StandardStatement extends BOA.Common.Types.ContractBase {
        advanceAmount?: number;
        amount?: number;
        bankInCharge?: string;
        charges?: number;
        correspondentSwift?: string;
        country?: number;
        creditType?: number;
        deliveryBy?: number;
        fec?: number;
        fieldName?: string;
        formOfLC?: number;
        isConfirmed?: number;
        isCorrespondent?: number;
        productSubType?: string;
        reference?: string;
        reimbursementBank?: string;
        responsibleParty?: number;
        toleranceRate?: number;
        tranCode?: number;
        typeOfDelivery?: number;
    }
    interface StringExtensions {
    }
    interface Swift950StatementLine61 extends BOA.Common.Types.ContractBase {
        accountInstitutionReference?: string;
        amount?: number;
        debitAndCreditMark?: string;
        fundsCode?: string;
        referenceAccountOwner?: string;
        supplementaryDetails?: string;
        transactionTypeIdentificationCode?: string;
        valueDate?: Date;
    }
    interface SwiftExtensionContract extends BOA.Common.Types.ContractBase {
        additionalConditions?: string;
        descriptionOfGoods?: string;
        documentsRequired?: string;
        exchangeId?: number;
        messageType?: string;
        sequenceOfTotal?: number;
        sequenceOfTotalString?: string;
        sequenceTotal?: number;
    }
    interface SwiftInstanceContract extends BOA.Common.Types.ContractBase {
    }
    interface SwiftItemContract extends BOA.Common.Types.ContractBase {
        componentSettings?: string;
        componentTypes?: string;
        description?: string;
        indexAndRepeatValue?: string;
        isHasOption?: string;
        name?: string;
        secondComponentSettings?: string;
        textFieldFormat?: string;
    }
    interface SwiftJournalContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        currency?: string;
        finView?: string;
        followupDate?: Date;
        followUpEmailSent?: number;
        followUpUser?: string;
        followUpUserEmail?: string;
        followUpUserName?: string;
        hostIp?: string;
        hostName?: string;
        instanceId?: number;
        isFlowWaitForRelationalFlow?: boolean;
        isForwarded?: number;
        isForwardedLabel?: string;
        isProcessed?: number;
        isReceiveSwift?: number;
        isRMAControl?: boolean;
        isValidControl?: boolean;
        maxSystemDate?: Date;
        messageType?: string;
        messageViewList?: BOA.Types.Kernel.Exchange.SwiftMessageViewContract[];
        minSystemDate?: Date;
        mTId?: number;
        opmUser?: string;
        opmUserEmail?: string;
        opmUserName?: string;
        ourReference?: string;
        processState?: number;
        processStateName?: string;
        productId?: number;
        productSubId?: number;
        receiverBic?: string;
        reference?: string;
        relatedReference?: string;
        senderBic?: string;
        statusKey?: BOA.Types.Kernel.Exchange.StatusKey;
        swiftId?: number;
        swiftStatus?: number;
        systemDate?: Date;
        unitId?: number;
        unitIdType?: BOA.Types.Kernel.Exchange.UnitId;
        unitType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
        wfInstanceId?: number;
        workflowActiveStateId?: number;
    }
    interface SwiftMessageContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        applicationName?: string;
        creationDate?: Date;
        creationDateEnd?: Date;
        creationDateStart?: Date;
        currency?: string;
        detailLevel?: BOA.Types.Kernel.Exchange.OfacDetailLevel;
        direction?: string;
        externalId?: string;
        fieldValue?: string;
        finView?: string;
        fromMtId?: number;
        generalReference?: string;
        inRouting?: boolean;
        instanceId?: string;
        isnOsn1?: string;
        isnOsn2?: string;
        maxAmount?: number;
        messagePack?: string;
        messageType?: string;
        messageViewType?: BOA.Types.Kernel.Exchange.ViewType;
        minAmount?: number;
        mtId?: number;
        ofacPassword?: string;
        ofacUserName?: string;
        password?: string;
        receiverBic?: string;
        reference?: string;
        relatedReference?: string;
        saveRequest?: boolean;
        searchType?: BOA.Types.Kernel.Exchange.OfacSearchType;
        senderBic?: string;
        session1?: string;
        session2?: string;
        status?: string;
        statusKey?: BOA.Types.Kernel.Exchange.StatusKey;
        statusName?: string;
        targetStep?: number;
        threshold?: number;
        toMtId?: number;
        unit?: string;
        userName?: string;
        valueDate?: Date;
        valueDateEnd?: Date;
        valueDateStart?: Date;
        zoneId?: number;
    }
    interface SwiftMessageDefinitionContract extends BOA.Common.Types.ContractBase {
        complexity?: BOA.Types.Kernel.Exchange.Complexity;
        fullText?: string;
        name?: string;
        type?: string;
    }
    interface SwiftMessageFieldsNecessityStateContract extends BOA.Common.Types.ContractBase {
        blockRepeatIndex?: number;
        defaultValue?: string;
        inFieldIndex?: number;
        isMandatory?: boolean;
        isMandatoryBlock?: boolean;
        isRepeatableBlock?: boolean;
        isSingleRepetition?: boolean;
        name?: string;
        repeatIndex?: number;
        sequence?: string;
        sequenceName?: string;
        subOfSubSequence?: string;
        subOfSubSequenceName?: string;
        subSequence?: string;
        subSequenceName?: string;
        tagName?: string;
    }
    interface SwiftMessageViewContract extends BOA.Common.Types.ContractBase {
        messageView?: string;
        mtId?: number;
        printViewType?: BOA.Types.Kernel.Exchange.PrintViewType;
        viewType?: BOA.Types.Kernel.Exchange.ViewType;
    }
    interface SwiftParameterContract extends BOA.Common.Types.ContractBase {
    }
    interface SwiftQueueContract extends BOA.Common.Types.ContractBase {
        finView?: string;
        hostname?: string;
        id?: number;
        isInRouting?: number;
        isInRoutingBool?: boolean;
        isProcessed?: number;
        isSent?: number;
        mtId?: number;
        retryCount?: number;
        swiftId?: number;
        systemDate?: Date;
        targetStatus?: number;
        unitId?: number;
        updateDate?: Date;
        username?: string;
    }
    interface SwiftSchemaContract extends BOA.Common.Types.ContractBase {
        messageType?: string;
    }
    interface SwiftUserContract extends BOA.Common.Types.ContractBase {
        password?: string;
        sender?: string;
        userName?: string;
    }
    interface TagContract extends BOA.Common.Types.ContractBase {
    }
    interface TransferInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        beneficiaryAccountNumber?: string;
        beneficiaryCustomerAddress1?: string;
        beneficiaryCustomerAddress2?: string;
        beneficiaryCustomerCountry?: string;
        beneficiaryCustomerCountryId?: number;
        beneficiaryCustomerName?: string;
        beneficiarySwiftCode?: string;
        branchId?: number;
        chargeType?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        corrBankAccount?: number;
        corrBankSuffix?: number;
        description?: string;
        documentDate?: Date;
        documentNumber?: string;
        draftDocumentList?: BOA.Types.Kernel.Exchange.DraftDocumentContract[];
        exchangeId?: number;
        fec?: number;
        fecName?: string;
        ourCommissionContract?: BOA.Common.Types.CommissionContract;
        recieverCharge?: number;
        reference?: string;
        state?: number;
        stateName?: string;
        tranDate?: Date;
        valueDate?: Date;
    }
    interface TransferInfoListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        description?: string;
        exchangeId?: number;
        fec?: number;
        maxAmount?: number;
        maxTranDate?: Date;
        minAmount?: number;
        minTranDate?: Date;
        reference?: string;
    }
}
declare namespace BOA.Types.Kernel.Exchange.ExchangeTransferListContract {
    export const enum ParseOption {
        Default = 0,
        CustomerNameAndAddress = 1,
        Description72 = 2,
        NoParse = 3
    }
}
declare namespace BOA.Types.Kernel.Exchange.IsItem {
    export const enum Type {
        Mandatory = 0,
        Currency = 1,
        Amount = 2,
        Date = 3,
        Text = 4
    }
}
declare namespace BOA.Types.Kernel.Exchange.SwiftMessageContract {
    export const enum Patterns {
        PatternCurrencyAmount = 0,
        PatternYYMMDDCurrencyAmount = 1,
        PatternCurrencyAmount4Param = 2,
        PatternCurrencyAmount5Param = 3,
        PatternCurrencyAmount9Param = 4,
        PatternPIandCI = 5,
        PatternPIandNA = 6,
        PatternSingleIndexedField = 7,
        PatternNumberAndTotal = 8,
        PatternCodeAndInfo = 9,
        PatternTimeIndication = 10,
        PatternDefault = 11
    }
}
declare namespace BOA.Types.Kernel.FAM {
    interface AssetBranchContract {
        branchId?: number;
        category?: string;
        city?: number;
        name?: string;
        type?: string;
    }
    interface AssetHelperContract extends BOA.Common.Types.ContractBase {
    }
    interface AssetHelperRequest extends BOA.Common.Types.RequestBase {
        assetBranchContract?: BOA.Types.Kernel.FAM.AssetBranchContract;
        countyContract?: BOA.Types.Kernel.FAM.CountyContract;
        customerContract?: BOA.Types.Kernel.FAM.CustomerContract;
        organizationContract?: BOA.Types.Kernel.FAM.OrganizationContract;
    }
    interface CityContract {
        cityId?: number;
        cityName?: string;
    }
    interface CountyContract {
        cityId?: number;
        countyId?: number;
        countyName?: string;
    }
    interface CustomerContract {
        branchId?: number;
        customerClassCode?: string;
        customerClassId?: number;
        customerClassName?: string;
        customerId?: number;
        customerName?: string;
    }
    interface OrganizationContract extends BOA.Common.Types.ContractBase {
        costCenterId?: number;
        locationId?: number;
        organizationId?: number;
        organizationName?: string;
        organizationType?: string;
    }
    interface VendorContract {
        customerId?: number;
        vendorId?: number;
        vendorName?: string;
    }
}
declare namespace BOA.Types.Kernel.FinancialAllotment {
    interface CommitteeReportContract {
        reportDate?: Date;
    }
}
declare namespace BOA.Types.Kernel.FlatFileSystem {
    export const enum DelimiterType {
        Fixed = 0,
        Delimeted = 1
    }
    export const enum PartTypeEnum {
        Header = 0,
        Data = 1,
        Footer = 2,
        FileName = 3,
        Comment = 4
    }
    interface ActionTypeContract extends BOA.Common.Types.ContractBase {
        actionTypeId?: number;
        assemblyName?: string;
        methodName?: string;
        requestName?: string;
    }
    interface Constants {
    }
    interface EmailContract extends BOA.Types.Kernel.FlatFileSystem.MailDefinitionContract {
        fileName?: string;
        mainBusinessKey?: number;
        transactionDate?: Date;
    }
    interface EmailRequest extends BOA.Types.Kernel.FlatFileSystem.FlatFileRequestBase {
        dataContract?: any;
    }
    interface EngineDataContract {
        comment?: any;
        data?: any;
        fileName?: any;
        footer?: any;
        header?: any;
    }
    interface FieldConverterDefinitionContract extends BOA.Common.Types.ContractBase {
        definition?: string;
        fieldConverterDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FieldFormatDefinitionContract extends BOA.Common.Types.ContractBase {
        definition?: string;
        fieldConverter?: any;
        fieldConverterDefinitionId?: number;
        fieldFormatDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FileDefinitionContract extends BOA.Common.Types.ContractBase {
        encoding?: string;
        fileDefinitionCode?: string;
        fileDefinitionId?: number;
        fileType?: number;
        group?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        owner?: number;
        parts?: any;
        rowDelimiter?: string;
        sourceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FileNameContract {
        extension?: string;
        fileName?: string;
        path?: string;
        value?: any;
    }
    interface FilePartContract {
        lineNumber?: number;
        lineString?: string;
        value?: any;
    }
    interface FilePartDefinitionContract extends BOA.Common.Types.ContractBase {
        delimiterChar?: string;
        delimiterType?: number;
        fileDefinitionId?: number;
        filePartDefinitionId?: number;
        filePartType?: any;
        filePartTypeDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        length?: number;
        markerChar?: string;
        markerLength?: number;
        markerStart?: number;
        name?: string;
        paddingChar?: string;
        partCode?: string;
        partType?: string;
        partTypeEnum?: any;
        patterns?: any;
        propertyMappings?: any;
        rowCount?: number;
        sequenceNumber?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FilePartTypeDefinitionContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        description?: string;
        filePartTypeDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        typeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FilePatternDefinitionContract extends BOA.Common.Types.ContractBase {
        charLength?: number;
        dataType?: string;
        description?: string;
        fieldAlignment?: number;
        fieldFormat?: any;
        fieldFormatDefinitionId?: number;
        fieldName?: string;
        fieldPaddingChar?: string;
        fieldTrimType?: number;
        filePartDefinitionId?: number;
        filePatternDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        outputDefinition?: string;
        propertyName?: string;
        sequenceNumber?: number;
        startIndex?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FlatFileRequestBase extends BOA.Common.Types.RequestBase {
        actionTransactionDate?: Date;
        args?: any[];
        externalData?: any;
        fileName?: string;
        flatPackageId?: number;
        ftpDefinitionId?: number;
        parserResult?: any;
        partCode?: string;
        scheduledTaskId?: number;
        specialKey?: string;
    }
    interface FlatPackageContract extends BOA.Common.Types.ContractBase {
        actionAfterSuccess?: number;
        actionBeforeStart?: number;
        actionBeforeSuccess?: number;
        errorCheckType?: number;
        fileDefinition?: any;
        fileDefinitionId?: number;
        fileExtension?: string;
        filePrefix?: string;
        fileTypeCode?: string;
        fileTypeName?: string;
        flatPackageId?: number;
        hostIP?: string;
        hostName?: string;
        isPartOfMultipleFile?: boolean;
        mailType?: number;
        mainAction?: number;
        name?: string;
        owner?: string;
        path?: string;
        securityType?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        transferTypeCode?: string;
        transferTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validationType?: number;
    }
    interface FlatPackageHistoryContract extends BOA.Common.Types.ContractBase {
        flatPackageHistoryId?: number;
        flatPackageId?: number;
        hostIP?: string;
        hostName?: string;
        mailStatus?: number;
        newFileName?: string;
        originalFileName?: string;
        status?: number;
        systemDate?: Date;
        transactionDate?: Date;
        transactionTime?: any;
        transferTypeCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FtpDefinitionContract extends BOA.Common.Types.ContractBase {
        actionAfterSuccess?: number;
        address?: string;
        archivePath?: string;
        compressionTypeCode?: string;
        destinationFolder?: string;
        ftpDefinitionId?: number;
        ftpTypeCode?: string;
        hostIP?: string;
        hostName?: string;
        isCheckSubFolder?: boolean;
        isOnlyLastFile?: boolean;
        mailType?: number;
        name?: string;
        password?: string;
        passwordEncrypted?: string;
        port?: number;
        sourceFolder?: string;
        status?: number;
        systemDate?: Date;
        timeout?: number;
        transferTypeCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        user?: string;
        userName?: string;
        validationType?: number;
    }
    interface FtpHistoryContract extends BOA.Common.Types.ContractBase {
        fileAttributes?: string;
        fileModifyDate?: Date;
        fileModifyTime?: string;
        fileSize?: number;
        ftpDefinitionId?: number;
        ftpHistoryId?: number;
        hostIP?: string;
        hostName?: string;
        isSkipped?: boolean;
        mailStatus?: number;
        newFileName?: string;
        originalFileName?: string;
        status?: number;
        subFolder?: string;
        systemDate?: Date;
        transactionDate?: Date;
        transactionTime?: any;
        transferTypeCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MailDefinitionContract extends BOA.Common.Types.ContractBase {
        flatPackageId?: number;
        ftpDefinitionId?: number;
        ftpName?: string;
        hostIP?: string;
        hostName?: string;
        mailCc?: string;
        mailDefinitionId?: number;
        mailFrom?: string;
        mailTemplateCode?: string;
        mailTo?: string;
        packageName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MultiplePackageContract extends BOA.Common.Types.ContractBase {
        actionAfterSuccess?: number;
        actionBeforeStart?: number;
        actionBeforeSuccess?: number;
        dataSectionName?: string;
        fileDefinition?: any;
        fileDefinitionId?: number;
        flatPackageId?: number;
        hostIP?: string;
        hostName?: string;
        mainAction?: number;
        multiplePackageId?: number;
        runOrder?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ParserContract extends BOA.Common.Types.ContractBase {
        flatPackageDefinition?: any;
        patternListOfPackage?: any;
    }
    interface ProcessCallHistoryContract extends BOA.Common.Types.ContractBase {
        applicationServerName?: string;
        businessKey?: number;
        flatPackageId?: number;
        ftpDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        processName?: string;
        scheduledTaskId?: number;
        sourceId?: number;
        systemDate?: Date;
        transactionDate?: Date;
        userName?: string;
    }
    interface ProcessErrorContract extends BOA.Common.Types.ContractBase {
        applicationServerName?: string;
        businessKey?: number;
        errorDescription?: string;
        flatPackageId?: number;
        ftpDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        processName?: string;
        scheduledTaskId?: number;
        systemDate?: Date;
        transactionDate?: Date;
        userName?: string;
    }
    interface PropertyMappingDefinitionContract extends BOA.Common.Types.ContractBase {
        dataType?: string;
        definition?: string;
        filePartDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        propertyMappingDefinitionId?: number;
        propertyName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ScheduledTaskContract extends BOA.Common.Types.ContractBase {
        flatPackageId?: number;
        flatPackageStatus?: number;
        ftpDefinitionId?: number;
        ftpStatus?: number;
        hasError?: boolean;
        hostIP?: string;
        hostName?: string;
        mailStatus?: number;
        scheduledTaskId?: number;
        startTime?: string;
        systemDate?: Date;
        transactionDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validationStatus?: number;
        workDate?: Date;
    }
    interface ScheduledTaskDefinitionContract extends BOA.Common.Types.ContractBase {
        flatPackageId?: number;
        ftpDefinitionId?: number;
        fTPName?: string;
        hostIP?: string;
        hostName?: string;
        packageName?: string;
        scheduledTaskDefinitionId?: number;
        startTime?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}

declare namespace BOA.Types.Kernel.FlatFileSystem.Common {
    interface FlatFileSystemCommon {
    }
}
declare namespace BOA.Types.Kernel.FlatFileSystem.Common.FlatFileSystemCommon {
    export const enum DefinitionStatus {
        Active = 1,
        Passive = 2
    }
    export const enum ErrorCheckType {
        RollbackAllRecords = 1,
        RollbackCurrentRecord = 2
    }
    export const enum FieldAlignment {
        Center = 1,
        Right = 2,
        Left = 3
    }
    export const enum FieldTrimMode {
        None = 0,
        RightAndLeft = 1,
        Right = 2,
        Left = 3
    }
    export const enum FileComppressionType {
        Unzipped = 1,
        Zipped = 2
    }
    export const enum FileType {
        Single = 1,
        Multiple = 2
    }
    export const enum FtpStatus {
        Nothing = 1,
        Succeed = 2,
        FileNotFound = 3,
        HasError = 4
    }
    export const enum FtpType {
        FTP = 1,
        SFTP = 2
    }
    export const enum MailType {
        SendMail = 1,
        NotSendMail = 2
    }
    export const enum PatternType {
        N = 0,
        F = 1,
        H = 2,
        D = 3,
        C = 4
    }
    export const enum ProcessStatus {
        Incompleted = 1,
        Completed = 2,
        HasError = 3
    }
    export const enum sourceOrDestionationType {
        Table = 1,
        SP = 2,
        DataContract = 3
    }
    export const enum TransferType {
        Incoming = 1,
        Outgoing = 2
    }
    export const enum ValidationType {
        Continue = 1,
        Break = 2
    }
}
declare namespace BOA.Types.Kernel.FlatFileSystem.Extensions {
    interface IOExtentions {
    }
    interface PredicateBuilder {
    }
    interface StringExtensions {
    }
}
declare namespace BOA.Types.Kernel.Foreign.Common {
    interface AgreementForwardContract extends BOA.Common.Types.ContractBase {
        agreementKey?: string;
        id?: number;
        instanceId?: number;
        productId?: number;
        productSubId?: number;
        reference?: string;
        sourceBranchId?: number;
        systemDate?: Date;
        targetBranchId?: number;
        userName?: string;
    }
    interface CommissionInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        baseAmount?: number;
        baseBSMVAmount?: number;
        bsmvAmount?: number;
        bSMVIncluded?: boolean;
        bsmvPaymentDay?: number;
        businessKey?: number;
        canInstallment?: boolean;
        commissionAmount?: number;
        commissionBaseAmount?: number;
        commissionBaseCount?: number;
        commissionFEC?: number;
        commissionFECCode?: string;
        commissionInstalmentList?: BOA.Common.Types.CommissionInstalmentContract[];
        commissionJournalId?: number;
        commissionKey?: string;
        commissionRate?: number;
        commissionType?: number;
        commissionTypeName?: string;
        customerclass?: number;
        description?: string;
        hasBSMV?: boolean;
        hasInstalment?: number;
        hasPayment?: boolean;
        installmentCount?: number;
        mainTransactionFEC?: number;
        maxCommissionAmount?: number;
        maxCommissionRate?: number;
        minCommissionAmount?: number;
        minCommissionRate?: number;
        paidBsmvAmount?: number;
        paidCommissionAmount?: number;
        requestedCommissionAmount?: number;
        resourceId?: number;
        resourceName?: string;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        transactionAmount?: number;
    }
    interface CommissionPaymentInfoDetailContract extends BOA.Common.Types.ContractBase {
        commissionInfo?: BOA.Types.Kernel.Foreign.Common.CommissionInfoContract;
        commissionPaymentList?: BOA.Common.Types.CommissionPaymentContract[];
    }
    interface CommonTaskContract extends BOA.Common.Types.ContractBase {
        businesskey?: number;
        commonTaskId?: number;
        description?: string;
        divitId?: any;
        hostName?: string;
        isSwiftSend?: boolean;
        maxDate?: Date;
        messageType?: string;
        minDate?: Date;
        oPMApprover?: string;
        opmUser?: string;
        receiverBank?: string;
        reference?: string;
        swiftNarrative?: string;
        systemDate?: Date;
        taskType?: number;
        taskTypeName?: string;
        tranReference?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
}
declare namespace BOA.Types.Kernel.Forward {
    interface ForwardCommon {
    }
    interface ForwardConstants {
    }
    interface ForwardCriticalCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        isProcessed?: number;
        productCode?: number;
        systemDate?: Date;
        tranDate?: Date;
    }
    interface ForwardEmailListContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        eMail?: string;
    }
    interface ForwardStateContract extends BOA.Common.Types.ContractBase {
        active?: number;
        description?: string;
        limitControl?: number;
        passive?: number;
        stateCode?: number;
        withholdingControl?: number;
    }
    interface ForwardTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixTo?: number;
        askAmount?: number;
        askFEC?: number;
        baseRate?: number;
        bidAmount?: number;
        bidFEC?: number;
        branchId?: number;
        businessKey?: number;
        businessKeyReference?: number;
        channelId?: number;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        derivativeLossAmount?: number;
        derivativeProfitAmount?: number;
        eODBusinessKey?: number;
        followId?: string;
        foreignLossAmount?: number;
        foreignProfitAmount?: number;
        forwardId?: number;
        forwardRate?: number;
        fXJournalData?: BOA.Types.Kernel.FX.FXJournalContract;
        fXReference?: string;
        hasStoppage?: number;
        hostIP?: string;
        hostName?: string;
        isLimitSufficient?: boolean;
        isRejectBranch?: boolean;
        isSwap?: boolean;
        negativeSimilasyonState?: boolean;
        oldState?: number;
        orderNumber?: number;
        originalId?: number;
        pairRate?: number;
        parentId?: number;
        parityBase?: number;
        portfolioClass?: number;
        productCode?: number;
        profitableRisk?: number;
        proposalPayBackPlanInstallmentId?: number;
        proposedRate?: number;
        resourceCode?: string;
        riskInsufficient?: boolean;
        spotRate?: number;
        state?: number;
        stoppageAmount?: number;
        stoppageSuffix?: number;
        systemDate?: Date;
        tranDate?: Date;
        tranType?: number;
        tranTypeRM?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
        valueDateControl?: number;
        valueDay?: number;
        wFInstanceId?: number;
        withholdingAccountNumber?: number;
    }
    interface ForwardTransactionListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixFromSpot?: number;
        accountSuffixTo?: number;
        accountSuffixToSpot?: number;
        active?: number;
        activeName?: string;
        askAmount?: number;
        askFEC?: number;
        askFECSpot?: number;
        askFECValue?: string;
        baseRate?: number;
        bidAmount?: number;
        bidFEC?: number;
        bidFECSpot?: number;
        bidFECValue?: string;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        channelDescription?: string;
        channelId?: number;
        closingDate?: Date;
        customerName?: string;
        customerStatusName?: string;
        eODBusinessKey?: number;
        followId?: string;
        forwardControlRateDetails?: string;
        forwardId?: number;
        forwardRate?: number;
        fXReference?: string;
        hasStoppage?: number;
        openingDate?: Date;
        orderNumber?: number;
        originalId?: number;
        pairRate?: number;
        parentId?: number;
        productCode?: number;
        productName?: string;
        profitOrLossForwardTransaction?: number;
        proposedRate?: number;
        publicOrderFirstDate?: Date;
        regionDesc?: string;
        resourceCode?: string;
        spotRate?: number;
        state?: number;
        stateDescription?: string;
        stoppageSuffix?: number;
        systemDate?: Date;
        tranDate?: Date;
        tranType?: number;
        tranTypeDescription?: string;
        userName?: string;
        valueDate?: Date;
        valueDay?: number;
        wFInstanceId?: number;
        withholdingAccountDetails?: string;
    }
    interface ForwardTransactionListParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        activeState?: number;
        askFEC?: number;
        bidFEC?: number;
        branchId?: number;
        forwardId?: number;
        isSwap?: number;
        maxAskAmount?: number;
        maxBidAmount?: number;
        maxTranDate?: Date;
        maxValueDate?: Date;
        maxValueDay?: number;
        minAskAmount?: number;
        minBidAmount?: number;
        minTranDate?: Date;
        minValueDate?: Date;
        minValueDay?: number;
        originalId?: number;
        parentId?: number;
        periodType?: number;
        productCode?: number;
        reference?: number;
        state?: number;
        transactionState?: number;
        tranType?: number;
    }
    interface ForwardTransactionRMContract extends BOA.Common.Types.ContractBase {
        forwardId?: number;
        hostIP?: string;
        hostName?: string;
        profitLoss?: number;
        systemDate?: Date;
        tLAmount?: number;
        tLRate?: number;
        tranTypeRM?: number;
        uSDAmount?: number;
        uSDRate?: number;
        userName?: string;
    }
    interface ForwardWithholdingCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withholdingAccountNumber?: number;
    }
}
declare namespace BOA.Types.Kernel.Forward.ForwardCommon {
    export const enum ForwardAgreementState {
        Agreement_Absent = 0,
        Agreement_Existing = 1
    }
    export const enum ForwardAgreementType {
        Agreement_Forward = 1,
        Agreement_Withholding = 2
    }
    export const enum ForwardChannelType {
        Sube = 1,
        Internet = 2
    }
    export const enum ForwardJournalParameterTypes {
        PeriodDaily = 1,
        PeriodMonthly = 2
    }
    export const enum ForwardLimitState {
        Limit_ExcessiveAmount = 0,
        Limit_Sufficient = 1,
        Limit_RunningTrans = 2
    }
    export const enum ForwardMailTypes {
        GuaranteeAmountInsufficient = 1,
        BelowCallRate = 2,
        AmountLimitExceed = 3,
        WaitingApprovalByCredit = 4,
        ValueDateChanged = 5,
        ApprovedByTreasury = 6,
        BelowClosingRate = 7,
        AllRMTransactions = 8
    }
    export const enum ForwardPeriodTypes {
        Daily = 1,
        Monthly = 2
    }
    export const enum ForwardProductCodes {
        WITHHOLDING = 1,
        SWAP = 2,
        LIMIT = 3,
        INSTALLMENT = 5
    }
    export const enum ForwardRMTranTypes {
        BID = 0,
        ASK = 1
    }
    export const enum ForwardStates {
        NewTransaction = 10,
        NewTransaction_ChangedAmount = 11,
        NewTransaction_ChangedMaturity = 12,
        NewTransaction_Otomatic = 13,
        NewTransaction_ApprovedByCredit = 20,
        NewTransaction_ChangedMaturity_ApprovedByCredit = 21,
        NewTransaction_WaitingApprovalByCredit = 30,
        NewTransaction_ChangedMaturity_WaitingApprovalByCredit = 31,
        NewTransaction_ChangedMaturity_WaitingApprovalByTreasury = 32,
        NewTransaction_WaitingApprovalByBranch = 33,
        NewTransaction_RejectedByCredit = 40,
        OldTransaction_ChangedAmount = 41,
        OldTransaction_ChangedMaturity = 42
    }
    export const enum ForwardTranTypes {
        BID = 1,
        ASK = 2,
        ARBITRAGE = 3
    }
    interface DivitIdsForDivit {
    }
    interface ForwardChannelTypeName {
    }
    interface ForwardTranTypesName {
    }
}
declare namespace BOA.Types.Kernel.Fraud {
    interface FraudAnalyticAccountBrowserUsageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        browser_Name?: string;
        last_TranDate?: Date;
        month?: number;
        total_Number?: number;
        year?: number;
    }
    interface FraudAnalyticAccountCallCenterContract extends BOA.Common.Types.ContractBase {
        customerIdMax?: number;
        processCount?: number;
        transactionIdMax?: number;
        userId?: number;
    }
    interface FraudAnalyticAccountIpUsageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        iP?: string;
        last_TranDate?: Date;
        month?: number;
        total_Number?: number;
        year?: number;
    }
    interface FraudAnalyticAccountPlatformUsageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        last_TranDate?: Date;
        month?: number;
        platform_Name?: string;
        total_Number?: number;
        year?: number;
    }
    interface FraudAnalyticAccountStatisticsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        max_Tran_Amount?: number;
        max_Tran_Amount_Org?: number;
        max_Tran_Amount_Org_Ccy?: string;
        max_Tran_Date?: Date;
        max_Type?: string;
        max_Type_Code?: number;
        year?: number;
    }
    interface FraudAnalyticRelatedAccountsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        last_TranDate?: Date;
        to_Bank_Code?: string;
        to_Id?: string;
        to_Id_Number?: string;
        total_Number?: number;
        type?: string;
        type_Code?: number;
        year?: number;
    }
    interface FraudEFTInfoContract extends BOA.Common.Types.ContractBase {
        ibanNotDeclared?: number;
        receiverAccountNumber?: string;
        receiverName?: string;
    }
    interface FraudInternalContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        displayName?: string;
        username?: string;
    }
    interface FraudInternetBankingLoginContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        isSuccessful?: number;
        loginDate?: Date;
        loginIp?: string;
        loginType?: number;
        oTPLoginHistoryId?: number;
        userId?: number;
        userName?: string;
    }
    interface FraudUserPreviousProcessContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        systemDate?: Date;
        transactionCode?: string;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization {
    export const enum AdvanceProjectNotificationType {
        NONE = -1,
        FiveDaysBefore = 5,
        OnClosingDay = 0,
        FiveDaysAfter = -5,
        TenDaysAfter = -10,
        MoreTenDaysAfter = -99,
        TwnetyFiveDaysAfter = -25
    }
    export const enum DelegationApprovePlace {
        None1 = 0,
        Create = 1,
        Cancel = 2,
        None = 3
    }
    export const enum DelegationReadingType {
        NONE = 0,
        ByPhone = 1,
        ByParol = 2
    }
    export const enum EasyLoanEODProcess {
        None = 0,
        WorkFlowStarted = 1,
        PaymentCompleted = 2,
        ProjectCancel = 3
    }
    export const enum EasyLoanFlowState {
        Waiting = 0,
        Started = 1,
        Processing = 2,
        Canceled = 3,
        Finished = 4,
        HasError = 5
    }
    export const enum FormType {
        NONE = 0,
        OrderForm = 1,
        DelegationForm = 2,
        ParolDelegationForm = 3,
        CondDelegationForm = 4,
        OnlineDelegationForm = 5
    }
    export const enum FromResource {
        ProjectDocLeasingEdit = 0
    }
    export const enum FundUtilizationProcessEnumeration {
        Nothing = 0,
        Proposal = 1,
        Project = 2,
        All = 99
    }
    export const enum LifeInsuranceControlType {
        NoLifeInsurance = 0,
        LifeInsuranceOk = 1,
        LifeInsuranceCancel = 2
    }
    export const enum OrderDelegationStatus {
        DataInput = 0,
        Saved = 1,
        SentToApprove = 2,
        WaitingProjectApprove = 3,
        Approved = 4,
        Rejected = 5,
        ProjectRejected = 6,
        Canceled = 7
    }
    export const enum OrderDelegationType {
        NONE = -1,
        MalSatınAlma = 1,
        LeasingMalSatınAlma = 2,
        LeasingSerbestBolgeMalSatınAlma = 3,
        MalSatınAlmaVekalet = 4,
        SartlıCifteVekalet = 5,
        IthalatveIhaleSartlıVekalet = 6,
        parolSartlıCifteVekalet = 7,
        CallCenterVekalet = 8,
        BahreynKredileriVekalet = 9,
        KolayFinansmanVekalet = 10,
        IhracatSartliMalAlisVekaleti = 11,
        IhracatMalSatisVekaleti = 12,
        LeasingGumrukteDevir = 13
    }
    export const enum PaymentDocumentInfoRecordType {
        Gayrimenkul = 1,
        Arac = 2,
        Menkul = 3
    }
    export const enum PaymentType {
        NONE = 0,
        PaymentInAdvance = 1,
        PaymentAgainstDocument = 2
    }
    export const enum ProjectInsuranceDetailType {
        MakineKirilmasi = 1,
        ElektronikCihaz = 2,
        GMenkul = 3
    }
    export const enum ProjectInsuranceFormState {
        Add = 0,
        Update = 1,
        ConvertToFreight = 2,
        AdditionalPolicyRequest = 3,
        Cancel = 4,
        Delete = 5,
        Explore = 6,
        PaymentDocument = 7
    }
    export const enum ProjectInsuranceFormType {
        FlotanSigorta = 1,
        KatiSigorta = 2
    }
    export const enum ProjectInsuranceStatus {
        SigortaBilgiGirisi = 1,
        Kaydedildi = 2,
        OPMSigortaIade = 3,
        PoliceDuzenlendi = 4,
        NeovayaTalepGonderildi = 5,
        PoliceIptaliTalepEdildi = 6,
        PoliceIptalEdildi = 7,
        ZeyilTalepEdildi = 8,
        ZeyilDuzenlendi = 9,
        PoliceOdendi = 10
    }
    export const enum ProjectInsuranceTransportationType {
        Kamyon = 1,
        Gemi = 2,
        Ucak = 3,
        Tren = 4
    }
    export const enum ProjectInsuranceType {
        NakliyatSigortasi = 1,
        DemirbasSigortasi = 2
    }
    export const enum ProposalAndProjectExtensionTypeEnumeration {
        Nothing = 0,
        CreditGuaranteeFund = 1,
        ProjectFinance = 2,
        ExportFinance = 3
    }
    export const enum VendorType {
        NONE = 0,
        Customer = 1,
        Native = 2,
        Foreign = 3
    }
    interface AccessPointHierarchyContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        levelNumber?: number;
        workGroupId?: number;
    }
    interface AccountingLimitContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        customerType?: string;
        fec?: number;
        isRevocable?: boolean;
        totalAmount?: number;
        unitId?: number;
    }
    interface AdvanceProjectNotificationsContract extends BOA.Common.Types.ContractBase {
        advanceClosingDate?: Date;
        branchName?: string;
        call3DayCount?: number;
        call3Id?: number;
        callCount?: number;
        customerAccountNumber?: number;
        customerAccountSuffix?: number;
        customerMail?: string;
        customerName?: string;
        customerPhoneNumber?: string;
        divitId?: string;
        fundingAmount?: number;
        fundingFEC?: number;
        fundingFECCode?: string;
        mailType?: number;
        notificationCode?: number;
        operationUser?: number;
        operationUserCode?: string;
        operationUserFaxNumber?: string;
        operationUserMail?: string;
        operationUserName?: string;
        orderTable?: string;
        paymentDate?: Date;
        projectId?: number;
        projectProductCode?: string;
        toInfoType?: number;
        vendorId?: number;
        vendorMail?: string;
        vendorName?: string;
        vendorPhoneNumber?: string;
        wFInstanceId?: number;
        wFStateName?: string;
    }
    interface AppealFormContract extends BOA.Common.Types.ContractBase {
        addressText?: string;
        advancePaymentAmount?: number;
        advancePaymentFEC?: number;
        advancePaymentRate?: number;
        agreementType?: number;
        agreementTypeName?: string;
        commercialName?: string;
        costOfGoodsWithoutVAT?: number;
        customerName?: string;
        debtFEC?: number;
        debtFECType?: number;
        debtFECTypeName?: string;
        debtFER?: number;
        documentAmount?: number;
        documentDate?: Date;
        documentNumber?: string;
        emailAddress?: string;
        faxNumber?: string;
        fundingAmount?: number;
        fundingFEC?: number;
        fundingFECCode?: string;
        fundingFER?: number;
        goodsOrServiceType?: number;
        goodsOrServiceTypeName?: string;
        gsmNumber?: string;
        hasDebtSpesificExchangeRate?: boolean;
        incentiveId?: number;
        incentiveTypeName?: string;
        leasingPurchasingVATAmount?: number;
        leasingPurchasingVATRate?: number;
        operationLocation?: number;
        operationLocationName?: string;
        paymentDate?: Date;
        paymentForeignType?: string;
        paymentType?: number;
        personType?: number;
        personTypeName?: string;
        phoneNumber?: string;
        productCode?: string;
        productName?: string;
        projectDate?: Date;
        projectId?: number;
        projectPayBackPlanId?: number;
        proposalId?: number;
        taxNumber?: string;
        taxOffice?: string;
        taxRate?: number;
        totalImportCost?: number;
        totalLeasingAmount?: number;
        vATAmount?: number;
        whoSatisfyPurchasingVAT?: number;
    }
    interface ApplicationBusinessAssosiationInfoContract extends BOA.Common.Types.ContractBase {
        applicationBusinessAssosiationId?: number;
        applicationId?: number;
        corporationLegalType?: number;
        corporationLegalTypeName?: string;
        establishmentDate?: Date;
        sectorId?: string;
        sectorKeyPath?: string;
        share?: number;
        taxOffice?: string;
        toPersonId?: number;
        toPersonName?: string;
        tradeRegistryNo?: string;
    }
    interface ApplicationCollectionInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        applicationCollectionId?: number;
        applicationProductId?: number;
        priorityOrder?: number;
    }
    interface ApplicationControlsInfoContract extends BOA.Common.Types.ContractBase {
        applicationControlsId?: number;
        applicationId?: number;
        controlCode?: number;
        controlCodeDescription?: string;
        controlValue?: number;
    }
    interface ApplicationCorporateGuarantorInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressText?: string;
        applicationCorporateGuarantorId?: number;
        applicationId?: number;
        cityId?: number;
        commercialName?: string;
        corporationLegalType?: number;
        corporationLegalTypeDescription?: string;
        countryId?: number;
        countyId?: number;
        emailAddress?: string;
        establishmentDate?: Date;
        phoneNumber?: string;
        sectorId?: string;
        sectorKeyPath?: string;
        sectorName?: string;
        taxNumber?: string;
        taxOffice?: string;
        tradeRegistryNo?: string;
        zipCode?: string;
    }
    interface ApplicationEmailInfoContract extends BOA.Common.Types.ContractBase {
        applicationEmailId?: number;
        applicationId?: number;
        emailAddress?: string;
    }
    interface ApplicationExpenseInfoContract extends BOA.Common.Types.ContractBase {
        applicationExpenseId?: number;
        applicationId?: number;
        expenseAmount?: number;
        expenseType?: number;
        expenseTypeDescription?: string;
    }
    interface ApplicationExtendedContract extends BOA.Common.Types.ContractBase {
        guarantorOwnDepositAmount?: number;
        hasGuarantorRealPeople?: boolean;
        hasLastTwoYearsLegalFollow?: boolean;
        isExistDIPCampaignOffer?: boolean;
        isGuarantorRiskAgeGroup?: boolean;
        kKBCreditCardLimit?: number;
        kKBCreditCardLimitOccupancyRate?: number;
        kKBFirstRegistrationDate?: Date;
        kKBSecondPeriodOfDelay?: number;
        lastMonthGuarantorCurrentAvarage?: number;
    }
    interface ApplicationGuarantorListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        applicationGuarantorId?: number;
        applicationId?: number;
        corporateGuarantorInfo?: BOA.Types.Kernel.FundUtilization.ApplicationCorporateGuarantorInfoContract;
        customerName?: string;
        personGuarantorInfo?: BOA.Types.Kernel.FundUtilization.ApplicationPersonGuarantorInfoContract;
        personType?: number;
    }
    interface ApplicationIncomeInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationIncomeId?: number;
        certifiedIncomeAmount?: number;
        incomeType?: number;
        incomeTypeDescription?: string;
        ownIncomeAmount?: number;
        partnerIncomeAmount?: number;
    }
    interface ApplicationLimitAndMaturityContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        averageInstallmentAmount?: number;
        bITTRate?: number;
        fecID?: number;
        fundingAmount?: number;
        hasOnlyOneProposal?: boolean;
        id?: number;
        installmentCount?: number;
        isApproved?: boolean;
        monthlyProfitRate?: number;
        productCode?: string;
        productGroup?: number;
        productName?: string;
        profitRate?: number;
        proposalId?: number;
        proposalType?: number;
        proposalTypeDesc?: string;
        rUSFRate?: number;
    }
    interface ApplicationListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        applicationClass?: string;
        applicationDate?: Date;
        applicationId?: number;
        branchClass?: string;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        channelName?: string;
        customerName?: string;
        customerRoleId?: number;
        fiaNumber?: string;
        isReject?: number;
        personId?: number;
        portfolioClass?: number;
        portfolioClassDescription?: string;
        products?: string;
        state?: number;
        stateDescription?: string;
        userName?: string;
    }
    interface ApplicationListParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        applicationClass?: string;
        applicationId?: number;
        beginDate?: Date;
        branchClass?: string;
        branchId?: number;
        channelId?: number;
        endDate?: Date;
        fiaNumber?: string;
        portfolioClass?: number;
        proposalId?: number;
        state?: number;
        userName?: string;
    }
    interface ApplicationNotificationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        applicationId?: number;
        applicationNotificationId?: number;
        businessKey?: number;
        productName?: string;
        tranDate?: Date;
    }
    interface ApplicationOwnFirmFinancialInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationOwnFirmFinancialId?: number;
        employerCount?: number;
        financialBalance?: number;
        financialDate?: Date;
        firmId?: number;
        netSellIncome?: number;
    }
    interface ApplicationOwnRealEstateInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationOwnRealEstateId?: number;
        approximateValue?: number;
        cityId?: number;
        cityName?: string;
        countyId?: number;
        countyName?: string;
        hasRentalIncome?: number;
        realEstateType?: string;
        realEstateTypeDescription?: string;
    }
    interface ApplicationOwnVehicleInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationOwnVehicleId?: number;
        purposeOfUseDescription?: string;
        purposeOfUseId?: number;
        vehicleBrandId?: number;
        vehicleBrandName?: string;
        vehicleIdNumber?: string;
        vehicleInsuarancePrice?: number;
        vehicleModelId?: number;
        vehicleModelName?: string;
        vehicleYear?: number;
    }
    interface ApplicationPartnerInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationPartnerId?: number;
        birthDate?: Date;
        birthPlace?: string;
        fathersName?: string;
        gender?: number;
        gSMNumber?: string;
        hasPartnerOccupation?: number;
        maidenhoodSurname?: string;
        name?: string;
        officePhoneNumber?: string;
        profession?: number;
        surname?: string;
        taxNumber?: string;
    }
    interface ApplicationPersonGuarantorInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressText?: string;
        applicationId?: number;
        applicationPersonGuarantorId?: number;
        birthDate?: Date;
        birthPlace?: string;
        citizenshipCountryId?: number;
        cityId?: number;
        countryId?: number;
        countyId?: number;
        educationLevel?: number;
        emailAddress1?: string;
        emailAddress2?: string;
        employerName?: string;
        employmentMonth?: number;
        employmentType?: number;
        employmentYear?: number;
        fathersName?: string;
        gender?: number;
        homeState?: number;
        inhabitancyMonth?: number;
        inhabitancyYear?: number;
        jobTitle?: number;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        monthlyIncomeAmount?: number;
        mothersMaidenSurname?: string;
        mothersName?: string;
        ownFirmId?: number;
        ownFirmLicenceDate?: Date;
        ownFirmSectorId?: string;
        ownFirmSectorName?: string;
        ownFirmType?: number;
        personGuarantorPhoneListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationPersonGuarantorPhoneInfoContract[];
        profession?: number;
        relationshipDegree?: number;
        socialSecurityInstitution?: number;
        zipCode?: string;
    }
    interface ApplicationPersonGuarantorPhoneInfoContract extends BOA.Common.Types.ContractBase {
        applicationPersonGuarantorId?: number;
        applicationPersonGuarantorPhoneId?: number;
        phoneNumber?: string;
        type?: number;
        typeName?: string;
    }
    interface ApplicationPersonGuarantorReportInfoContract extends BOA.Common.Types.ContractBase {
        addressText?: string;
        applicationId?: number;
        applicationPersonGuarantorId?: number;
        birthDate?: Date;
        birthPlace?: string;
        cityName?: string;
        countryName?: string;
        countyName?: string;
        customerName?: string;
        educationLevelName?: string;
        emailAddress1?: string;
        employmentDuration?: string;
        employmentTypeName?: string;
        fathersName?: string;
        firmName?: string;
        genderName?: string;
        gSMNumber?: string;
        homeStateName?: string;
        idInfo?: string;
        idTypeName?: string;
        inhabitancyDuration?: string;
        maidenhoodSurname?: string;
        maritalStatusName?: string;
        monthlyIncomeAmount?: number;
        mothersMaidenSurname?: string;
        mothersName?: string;
        phoneNumber?: string;
        professionName?: string;
        relationshipDegree?: number;
        socialSecurityInstitutionName?: string;
        taxNumber?: string;
        zipCode?: string;
    }
    interface ApplicationPhoneInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationPhoneId?: number;
        phoneNumber?: string;
        type?: number;
        typeName?: string;
    }
    interface ApplicationProductInfoContract extends BOA.Common.Types.ContractBase {
        advancePaymentRate?: number;
        applicationClass?: string;
        applicationCollectionListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationCollectionInfoContract[];
        applicationId?: number;
        applicationProductId?: number;
        applicationProductScoreListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationProductScoreInfoContract[];
        averageInstallmentAmount?: number;
        branchId?: number;
        collateralList?: BOA.Types.Kernel.FundUtilization.AutoAllotmentProductColleteral[];
        controlId?: number;
        employeeAvailableLimitId?: number;
        fundingAmount?: number;
        fundingFEC?: number;
        fundingFecCode?: string;
        goodsCollateralKindDescription?: string;
        goodsOrServiceType?: number;
        instanceId?: number;
        isApprovalRequired?: number;
        isAutomaticRejected?: number;
        mainProductCode?: string;
        personId?: number;
        productCode?: string;
        productGroup?: number;
        productName?: string;
        proposalId?: number;
        proposalInfo?: BOA.Types.Kernel.FundUtilization.ProposalContract;
        proposalStatus?: number;
        proposalStatusDescription?: string;
        proposalTranList?: BOA.Types.Kernel.FundUtilization.ProposalTranContract[];
        ruleVersionId?: number;
        score?: number;
        scoreCardClass?: string;
    }
    interface ApplicationProductScoreInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        applicationClass?: string;
        applicationId?: number;
        applicationProductId?: number;
        applicationProductScoreId?: number;
        customerName?: string;
        instanceId?: number;
        proposalGoodOrServiceId?: number;
        proposalGoodsOrServiceInfo?: string;
        proposalGoodsOrServiceType?: number;
        proposalGoodsOrServiceTypeName?: string;
        proposalId?: number;
        ruleVersionId?: number;
        score?: number;
        scoreCardClass?: string;
    }
    interface ApplicationRejectReasonsInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationRejectReasonsId?: number;
        rejectReasonCode?: number;
        rejectReasonCodeDescription?: string;
    }
    interface ApplicationReportInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressText?: string;
        applicationDate?: Date;
        applicationId?: number;
        birthDate?: Date;
        birthPlace?: string;
        branchId?: number;
        branchName?: string;
        branchOpinion?: string;
        cityName?: string;
        countryName?: string;
        countyName?: string;
        customerName?: string;
        educationLevelName?: string;
        email?: string;
        emergencyPersonName?: string;
        emergencyPersonPhone1?: string;
        emergencyPersonSurName?: string;
        employerName?: string;
        employmentDuration?: string;
        employmentType?: number;
        employmentTypeName?: string;
        fathersName?: string;
        firmAddressText?: string;
        firmCityId?: number;
        firmCityName?: string;
        firmCountyId?: number;
        firmCountyName?: string;
        firmId?: number;
        firmName?: string;
        firmPhone?: string;
        firmZipCode?: string;
        genderName?: string;
        gSMNumber?: string;
        hasPartnerOccupation?: number;
        homeStateName?: string;
        idSerial?: string;
        idTypeName?: string;
        inhabitancyDuration?: string;
        isHomeMortgageDescription?: string;
        licenceDate?: Date;
        licenceNumber?: string;
        maidenhoodSurname?: string;
        maritalStatusName?: string;
        militaryServiceStateName?: string;
        mortgageDescription?: string;
        mothersMaidenSurname?: string;
        mothersName?: string;
        netIncome?: number;
        partnerBirthDate?: Date;
        partnerBirthPlace?: string;
        partnerFathersName?: string;
        partnerGSMNumber?: string;
        partnerMaidenhoodSurname?: string;
        partnerName?: string;
        partnerOfficePhoneNumber?: string;
        partnerProfessionName?: string;
        partnerSurname?: string;
        partnerTaxNumber?: string;
        personId?: number;
        phoneNumber?: string;
        professionName?: string;
        relationshipDegree?: number;
        relationshipDegreeName?: string;
        sectorId?: string;
        sectorName?: string;
        socialSecurityInstitutionName?: string;
        state?: number;
        taxNumber?: string;
        taxOffice?: string;
        totalExpense?: number;
        totalIncome?: number;
        userName?: string;
        zipCode?: string;
    }
    interface ApplicationSaveContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressText?: string;
        allotmentNo?: string;
        applicationBusinessAssosiationListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationBusinessAssosiationInfoContract[];
        applicationClass?: string;
        applicationControlsListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationControlsInfoContract[];
        applicationDate?: Date;
        applicationEmailListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationEmailInfoContract[];
        applicationExpenseListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationExpenseInfoContract[];
        applicationGuarantorList?: BOA.Types.Kernel.FundUtilization.ApplicationGuarantorListContract[];
        applicationGuarantorListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationGuarantorListContract[];
        applicationId?: number;
        applicationIncomeListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationIncomeInfoContract[];
        applicationLimitAndMaturityListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationLimitAndMaturityContract[];
        applicationOwnFirmFinancialListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationOwnFirmFinancialInfoContract[];
        applicationOwnRealEstateListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationOwnRealEstateInfoContract[];
        applicationOwnVehicleListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationOwnVehicleInfoContract[];
        applicationPartnerInfo?: BOA.Types.Kernel.FundUtilization.ApplicationPartnerInfoContract;
        applicationPhoneListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationPhoneInfoContract[];
        applicationProductListInfo?: BOA.Types.Kernel.FundUtilization.ApplicationProductInfoContract[];
        applicationStatus?: number;
        averageInstallmentAmount?: number;
        birthDate?: Date;
        birthPlace?: string;
        branch?: string;
        branchClass?: string;
        branchId?: number;
        branchOpinion?: string;
        calculatedExpense?: number;
        calculatedIncome?: number;
        channelId?: number;
        childrenNuber?: number;
        citizenshipCountryId?: number;
        cityId?: number;
        countryId?: number;
        countyId?: number;
        creditExpense?: number;
        customerClass?: number;
        customerClassId?: number;
        customerRoleId?: number;
        customerRoleName?: string;
        debitIncomeRate?: number;
        divitId?: any;
        eDistraint?: number;
        educationLevel?: number;
        emergencyPersonName?: string;
        emergencyPersonPhone1?: string;
        emergencyPersonPhone2?: string;
        emergencyPersonSurName?: string;
        employerName?: string;
        employmentMonth?: number;
        employmentType?: number;
        employmentYear?: number;
        estimatedExpense?: number;
        estimatedIncome?: number;
        fathersName?: string;
        fecID?: number;
        fIANumber?: string;
        firmAddressText?: string;
        firmCityId?: number;
        firmCountyId?: number;
        firmEmployeesNumber?: number;
        firmId?: number;
        firmPhone?: string;
        firmType?: number;
        firmZipCode?: string;
        fundingAmount?: number;
        fundSourceType?: number;
        gender?: number;
        homeState?: number;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        idNo?: string;
        idSerial?: string;
        idType?: number;
        individualPersonRichInfo?: BOA.Types.Kernel.Customer.IndividualPersonRichInfoContract;
        inhabitancyMonth?: number;
        inhabitancyYear?: number;
        isApplicationCustomerControlAmountSame?: boolean;
        isHomeMortgage?: number;
        isLoanDeptCalculated?: number;
        jobSector?: number;
        jobTitle?: number;
        lastEmploymentMonth?: number;
        lastEmploymentYear?: number;
        licenceDate?: Date;
        licenceNumber?: string;
        limitAndMaturityInfoMessage?: string;
        limitAndMaturityProposalState?: number;
        maidenhoodSurname?: string;
        maritalStatus?: number;
        militaryServiceState?: number;
        monthlyFinancialLiability?: number;
        monthlyInstallmentAmountPayable?: number;
        mortgageDescription?: string;
        mothersMaidenSurname?: string;
        mothersName?: string;
        netIncome?: number;
        personelState?: number;
        personId?: number;
        personType?: number;
        portfolioClass?: number;
        preferredAmount?: number;
        productCode?: string;
        productName?: string;
        profession?: number;
        reasonOfNotAutoAllotment?: number;
        relationshipDegree?: number;
        resourceCode?: string;
        scoreCardClass?: string;
        sectorId?: string;
        sectorName?: string;
        sGKLastTwoYearsWorkOut?: number;
        sGKNumberOfDays?: number;
        socialSecurityInstitution?: number;
        startWorkFlowUser?: string;
        state?: number;
        systemDate?: Date;
        taxOffice?: string;
        totalExpense?: number;
        totalIncome?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        zipCode?: string;
    }
    interface ApplicationTransactionInfoContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        applicationTransactionId?: number;
        businessKey?: number;
        hostName?: string;
        state?: number;
        stateName?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface AutoAllotmentColleteral extends BOA.Common.Types.ContractBase {
    }
    interface AutoAllotmentProduct extends BOA.Common.Types.ContractBase {
        isActiveRisk?: boolean;
        proposalId?: number;
    }
    interface AutoAllotmentProductColleteral extends BOA.Common.Types.ContractBase {
        applicationProductCollateralId?: number;
        applicationProductId?: number;
        collateralCode?: number;
        collateralLowerAmount?: number;
        collateralUpperAmount?: number;
        isActiveRisk?: boolean;
        productCode?: string;
    }
    interface AutoCustomerInfoDWContract extends BOA.Common.Types.ContractBase {
        accountOpenDate?: Date;
        amountOfCurrentRisk?: number;
        applicationId?: number;
        currentDelayedDayCount?: number;
        customerId?: number;
        customerSegment?: string;
        etlTime?: Date;
        hasAutoRejectAllotment?: boolean;
        hasCanceled?: boolean;
        hasLegalUnFollowupClosedCredit?: boolean;
        hasTeverruk?: boolean;
        inGrayList?: boolean;
        isAgeWithRisk?: number;
        isFollowupLawyer?: number;
        isPersonnel?: number;
        lastAppovedCreditDate?: Date;
        lastMonthsAvgCurrentBalance?: number;
        lastMonthsAvgValorBalance?: number;
        lastSixMonthsAvgCurrentBalance?: number;
        lastSixMonthsCreditMaxDelayedDayCount?: number;
        lastSixMonthsDelayedInstallmentCount?: number;
        lastSixMonthsSumProductivityRevenue?: number;
        lastSixMonthsTCMBDrawnChequeControlRecord?: number;
        lastSixMonthsTCMBProtestedChequeControlRecord?: number;
        lastThreeMonthsAvgCurrentBalance?: number;
        lastThreeMonthsTCMBProtestedChequeControlRecord?: number;
        lastTreeMonthsTCMBDrawnChequeControlRecord?: number;
        lastTwelveMonthsAvgCurrentBalance?: number;
        lastTwelveMonthsAvgValorBalance?: number;
        lastTwelveMonthsCreditMaxDelayedDayCount?: number;
        lastTwelveMonthsDelayedInstallmentCount?: number;
        lastTwelveMonthsSumProductivityRevenue?: number;
        lastTwelveMonthsTCMBDrawnChequeControlRecord?: number;
        lastTwelveMonthsTCMBProtestedChequeControlRecord?: number;
        maxFirmAge?: number;
        occupation?: string;
        participationAccountBalance?: number;
        rejectDepartment?: string;
        typeOfLocation?: string;
    }
    interface AutoGroupDWContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        currentNumberOfDelayDay?: number;
        etlTime?: Date;
        groupActiveLimit?: number;
        hasAutoRejectAllotment?: number;
        hasTeverruk?: number;
        lastPeriodSumDefault?: number;
        lastSixMonthsAvgBalanceWithTL?: number;
        lastSixMonthsCreditMaxDelayedDayCount?: number;
        lastSixMonthsDelayedInstallmentNumber?: number;
        lastSixMonthsSumProductivityRevenue?: number;
        lastSixMonthsTCMBDrawnChequeRecord?: number;
        lastSixMonthsTCMBProtestedChequeRecord?: number;
        lastSixPeriodSumDefault?: number;
        lastThreeMonthsTCMBDrawnChequeRecord?: number;
        lastThreeMonthsTCMBProtestedChequeRecord?: number;
        lastThreePeriodSumDefault?: number;
        lastTwelveMonthsAvgBalanceWithTL?: number;
        lastTwelveMonthsAvgValorBalance?: number;
        lastTwelveMonthsCreditMaxDelayedDayCount?: number;
        lastTwelveMonthsDelayedInstallmentNumber?: number;
        lastTwelveMonthsSumProductivityRevenue?: number;
        lastTwelveMonthsTCMBDrawnChequeRecord?: number;
        lastTwelveMonthsTCMBProtestedChequeRecord?: number;
        participationBalanceWithTL?: number;
        referenceCustomerId?: number;
    }
    interface AutomaticPriceRuleCode {
    }
    interface AutomaticPricingInfoContract extends BOA.Common.Types.ContractBase {
        averageBalance?: number;
        averageOfEffectiveFXRate?: number;
        cashProfitableLimit?: number;
        corporateRatingScore?: string;
        creditRiskGroupCode?: number;
        customerRelationalGroupCode?: string;
        editedRelationalGroup?: string;
        firmProductivity?: number;
        fundUtilizationProductivity?: number;
        hasLitigation?: number;
        hasRestructure?: number;
        incorporatedCash?: number;
        isActiveAccount?: number;
        limit?: number;
        productActivity?: number;
        totalAverageCashRisk?: number;
        totalAverageNonCashRisk?: number;
        totalProfitableRisk?: number;
        weightedAverageDeposit?: number;
    }
    interface AutoPricingBranchCurrentRateContract extends BOA.Common.Types.ContractBase {
        currentPoolFTP?: number;
        fundsTransferPricing?: number;
        monthlyFTP?: number;
        participationPoolFTP?: number;
    }
    interface AutoPricingCrossSellingContract extends BOA.Common.Types.ContractBase {
        conditionalProductMargin?: number;
        discountMethod?: number;
        discountMethodDesc?: string;
        discountValue?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        isChanged?: boolean;
        isContractSelected?: boolean;
        isTemp?: boolean;
        minOrderCount?: number;
        name?: string;
        obligatory?: boolean;
        payBackPlanId?: number;
        productCode?: string;
        productName?: string;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        status?: number;
        statusDesc?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface AutoPricingCurrentParticipationAvarageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        averageCurrentAmount?: number;
        averageParticipationAmunt?: number;
        currentCashLoansRisk?: number;
    }
    interface AutoPricingCustomerCommitmentContract extends BOA.Common.Types.ContractBase {
        autoPricingProductCommitmentList?: BOA.Types.Kernel.FundUtilization.AutoPricingProductCommitmentContract[];
        averageCurrentAmount?: number;
        averageParticipationAmunt?: number;
        cashLoans1Amount?: number;
        cashLoans2Amount?: number;
        cashLoans3Amount?: number;
        current1Amount?: number;
        current2Amount?: number;
        current3Amount?: number;
        currentAmountCommitment?: number;
        currentAmountCommitmentFec?: number;
        currentCashLoansRisk?: number;
        expectedProfitRate?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        nonCashLoans1Amount?: number;
        nonCashLoans2Amount?: number;
        nonCashLoans3Amount?: number;
        participation1Amount?: number;
        participation2Amount?: number;
        participation3Amount?: number;
        participationAmuntCommitment?: number;
        participationAmuntCommitmentFec?: number;
        payBackPlanId?: number;
        projectId?: number;
        proposalId?: number;
        requestedCurrentCommitment?: number;
        requestedParticipationCommitment?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AutoPricingCustomerCommitmentProposalListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        insuranceExpirationCount?: number;
        insuranceExpirationDate?: Date;
        proposal?: string;
        sector?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface AutoPricingCustomerCommitmentRiseInSegmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cashLoan1MAmountDue?: number;
        cashLoan2MAmountDue?: number;
        cashLoan3MAmountDue?: number;
        current1MAmountDue?: number;
        current2MAmountDue?: number;
        current3MAmountDue?: number;
        maturity1MAmountDue?: number;
        maturity2MAmountDue?: number;
        maturity3MAmountDue?: number;
        nonCashLoan1MAmountDue?: number;
        nonCashLoan2MAmountDue?: number;
        nonCashLoan3MAmountDue?: number;
    }
    interface AutoPricingProductCommitmentContract extends BOA.Common.Types.ContractBase {
        customerCommitmentId?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        isValidation?: boolean;
        productCode?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AutoPricingProductUsageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        channelId?: number;
        closeDate?: Date;
        isActive?: number;
        openDate?: Date;
        productCode?: string;
        sourceTableId?: number;
        userName?: string;
    }
    interface AutoPricingProposalCrossSellingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        advantagePackageName?: string;
        advantagePriceRate?: number;
        autoPricingCrossSellingId?: number;
        conditionalProductMargin?: number;
        customerCommitmentId?: number;
        dayLeft?: number;
        discountMethod?: number;
        discountValue?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        isUsed?: boolean;
        minOrderCount?: number;
        neglectType?: number;
        obligatory?: boolean;
        payBackPlanId?: number;
        productCode?: string;
        projectId?: number;
        proposalId?: number;
        screenType?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validationDate?: Date;
    }
    interface BooleanStatic {
    }
    interface BranchClassificationSimulationAndCurrentInfoContract extends BOA.Common.Types.ContractBase {
        anaPorfoySorumluSicil?: number;
        anaPortfoySorumluAdi?: string;
        anaPortfoySorumluUnvan?: string;
        bolge?: string;
        bolgeKodu?: number;
        branchId?: number;
        iBG_GM?: number;
        iBG_Sube?: number;
        iBGO_GM?: number;
        iBGO_Sube?: number;
        iBGO_Toplam_Sinif?: string;
        iBGOSube_IBGOGM_Sinif?: string;
        iBT_GM?: number;
        iBT_Sube?: number;
        iDG_GM?: number;
        iDG_Sube?: number;
        iDGO_AO?: number;
        iDGO_GM?: number;
        iDGO_Sube?: number;
        iDRB_GM?: number;
        iDRB_Sube?: number;
        iDRB_Sube_?: number;
        iDRB_Toplam?: number;
        iDT_AO?: number;
        iDT_GM?: number;
        iDT_Sube?: number;
        kefaletGecikme?: number;
        kefaletOran?: number;
        mudurAdi?: string;
        mudurSicilNo?: number;
        nihaiSinif?: string;
        oncekiAyDagilim?: number;
        oncekiAySinif?: string;
        personId?: number;
        personType?: number;
        porfoySorumluSicil?: number;
        portfoySorumluAdi?: string;
        portfoySorumluUnvan?: string;
        raporTarihi?: Date;
        reginalOffice?: number;
        sinifDagilim?: number;
        sube?: string;
        subeKodu?: number;
        takipOran?: number;
        takipRisk?: number;
        teverrukRisk?: number;
        toplamKarsizRisk?: number;
        tranDate?: Date;
    }
    interface BranchClassRuleContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        reportTypeId?: number;
        reportTypeName?: string;
        ruleClass?: string;
        ruleCriteria?: string;
        ruleGroupNumber?: number;
        ruleId?: number;
        ruleNumber?: number;
        ruleOperator?: string;
        ruleReference?: string;
        ruleValue?: number;
        ruleValueOperator?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BranchClassUpdateContract extends BOA.Common.Types.ContractBase {
        branchClassId?: number;
        branchId?: number;
        branchName?: string;
        currentClassCode?: string;
        currentClassDate?: Date;
        description?: string;
        hostIP?: string;
        hostName?: string;
        newClassCode?: string;
        newClassDate?: Date;
        personelName?: string;
        personelRegistryId?: number;
        previousClassCode?: string;
        regionId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BranchManagerNotifyDelegationContract extends BOA.Common.Types.ContractBase {
        absenceEndDate?: Date;
        absenceStartDate?: Date;
        delegationEndDate?: Date;
        delegationStartDate?: Date;
        email?: string;
        userCode?: string;
        userId?: number;
        userName?: string;
    }
    interface BranchPersonnelContract extends BOA.Common.Types.ContractBase {
        adiSoyadi?: string;
        bas_Tarih?: Date;
        bit_Tarih?: Date;
        bolge?: string;
        bolgeKodu?: number;
        personType?: number;
        sicilNo?: number;
        sube?: string;
        subeKodu?: number;
        unvani?: string;
    }
    interface BusinessPricingAuthorizationTargetContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        authorizationAnnualRate?: number;
        authorizationMonthlyRate?: number;
        authorizationPoint?: number;
        businessPricingId?: number;
        customerClassName?: string;
        customerClassParamCode?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isEarlyClosure?: number;
        isTargetControl?: number;
        isTemp?: boolean;
        maturity?: number;
        maturityDescription?: string;
        maxAuthorizationAnnualRate?: number;
        maxAuthorizationMonthlyRate?: number;
        maxAuthorizationPoint?: number;
        parentProductNodes?: string;
        productCode?: string;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        targetAnnualRate?: number;
        targetMonthlyRate?: number;
        targetPoint?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        workgroupName?: string;
    }
    interface BusinessPricingGeneralContract extends BOA.Common.Types.ContractBase {
        annualRate?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        businessPricingId?: number;
        ceilingRatePricingChangeType?: number;
        ceilingRatePricingMethodType?: number;
        customerClassName?: string;
        customerClassParamCode?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isEarlyClosure?: number;
        isTemp?: boolean;
        isTTK?: boolean;
        maturity?: number;
        maturityDescription?: string;
        monthlyCeilingRate?: number;
        monthlyRate?: number;
        parentProductNodes?: string;
        productCode?: string;
        ratePricingChangeType?: number;
        ratePricingMethodType?: number;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        yearlyCeilingRate?: number;
    }
    interface CallCenterDelegationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        callCenterAssignedUserName?: string;
        callCount?: number;
        channelId?: number;
        customerName?: string;
        delegationId?: number;
        delegationStatusCode?: string;
        delegationStatusName?: string;
        detailContract?: BOA.Types.Kernel.FundUtilization.CallCenterDelegationDetailContract[];
        fIANumber?: number;
        iD?: number;
        productTypeName?: string;
        recordDate?: Date;
        starterUser?: string;
        starterUserEmail?: string;
        systemDate?: Date;
        xTMUserEmail?: string;
    }
    interface CallCenterDelegationDetailContract extends BOA.Common.Types.ContractBase {
        attemptResult?: string;
        callCenterUserName?: string;
        callCount?: number;
        callResultType?: string;
        callTime?: Date;
        phoneNumber?: string;
        scheduleTime?: Date;
    }
    interface CampaignDetailContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        averageWithHoldMaturity?: number;
        campaignDetailId?: number;
        campaignId?: number;
        commissionAmount?: number;
        commissionRate?: number;
        commissionRateNotAddingToReturn?: number;
        concentrationAmount?: number;
        concentrationCommissionAmount?: number;
        concentrationCommissionRate?: number;
        concentrationProfitRate?: number;
        concentrationRate?: number;
        constantContributionAmount?: number;
        contributionCommissionRate?: number;
        contributionRate?: number;
        customerAccountNumber?: number;
        customerAccountSuffix?: number;
        internalReturnRate?: number;
        isActive?: number;
        isBSMVAdd?: number;
        isContributionCollectManually?: number;
        loanConditionName?: string;
        loanFECCode?: string;
        loanFECId?: number;
        maturity?: string;
        maxLoanAmount?: number;
        maxMaturity?: number;
        minLoanAmount?: number;
        minMaturity?: number;
        productCode?: string;
        productName?: string;
        profitRate?: number;
        sellerConditionName?: string;
        statusName?: string;
        withholdingId?: number;
    }
    interface CampaignListContract extends BOA.Common.Types.ContractBase {
        averageWithHoldMaturity?: number;
        branchId?: number;
        branchName?: string;
        bSMV?: number;
        campaignAmount?: number;
        campaignDetailId?: number;
        campaignDetailList?: BOA.Types.Kernel.FundUtilization.CampaignDetailContract[];
        campaignFEC?: number;
        campaignId?: number;
        campaignName?: string;
        commissionAmount?: number;
        commissionRate?: number;
        commissionRateNotAddingToReturn?: number;
        concentrationAmount?: number;
        concentrationCommissionAmount?: number;
        concentrationCommissionRate?: number;
        concentrationProfitRate?: number;
        concentrationRate?: number;
        constantContributionAmount?: number;
        contributionCommissionRate?: number;
        contributionRate?: number;
        contributionRateAmount?: number;
        contributionType?: number;
        customerAccountNumber?: number;
        customerAccountSuffix?: number;
        customerId?: number;
        customerWithholdAccountNumber?: number;
        customerWithholdAccountSuffix?: number;
        endDate?: Date;
        estimatedSalesAmount?: number;
        estimatedSalesCount?: number;
        internalReturnRate?: number;
        isActive?: number;
        isBSMVAdd?: number;
        isContributionCollectManually?: number;
        kKDF?: number;
        loanConditionName?: string;
        loanFECCode?: string;
        maximumAmount?: number;
        maximumMaturity?: number;
        maxLoanAmount?: number;
        maxMaturity?: number;
        minimumAmount?: number;
        minimumMaturity?: number;
        minLoanAmount?: number;
        minMaturity?: number;
        productCode?: string;
        productId?: number;
        profitRate?: number;
        sellerAccountNumber?: number;
        sellerConditionName?: string;
        startDate?: Date;
        status?: number;
        statusName?: string;
        timeNotToBeReleasedWithholding?: number;
        withholdingReleasingNumber?: number;
    }
    interface CampaignListParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        campaignDetailId?: number;
        campaignName?: string;
        campaignType?: number;
    }
    interface CampaignWithholdingCalendarContract extends BOA.Common.Types.ContractBase {
        campaignId?: number;
        campaignWithholdingCalendarId?: number;
        customerAccountNumber?: number;
        customerAccountSuffix?: number;
        customerWithholdAccountNumber?: number;
        customerWithholdAccountSuffix?: number;
        hostName?: string;
        isReleased?: boolean;
        isTransfered?: boolean;
        paymentId?: number;
        releaseAmount?: number;
        releaseDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withholdingId?: number;
    }
    interface CanceledProjectDocumentsContract extends BOA.Common.Types.ContractBase {
        canceledProjectDocumentsId?: number;
        customDirector?: string;
        documentAmount?: number;
        documentDate?: Date;
        documentNumber?: string;
        documentOwner?: string;
        documentState?: number;
        documentStateDescription?: string;
        documentType?: number;
        documentTypeDescription?: string;
        endDocumentAmount?: number;
        endDocumentDate?: Date;
        fec?: number;
        fecTypeDescription?: string;
        hostIP?: string;
        hostName?: string;
        organizerBank?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CCPReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        campaignId?: number;
        cCPReportId?: number;
        dipLimit?: number;
        mTRNo?: number;
        projectName?: string;
        statusCode?: number;
        statusCodeDesc?: string;
        totalLoansLimit?: number;
    }
    interface ClassDistributionInfoContract extends BOA.Common.Types.ContractBase {
        aciklama?: string;
        kod?: number;
    }
    interface CommissionLimitAndBudgetContract extends BOA.Common.Types.ContractBase {
        budgetRate?: number;
        commissionRateAvarage?: number;
        customerSegment?: number;
        customerSegmentDesc?: string;
        hostIP?: string;
        hostName?: string;
        id?: number;
        minimumRate?: number;
        productCode?: string;
        productCodeList?: string[];
        segment?: number;
        segmentDesc?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface Common {
    }
    interface CommonStatics {
        projectForeignPaymentIncoTermsList?: any;
    }
    interface CorporateCustomerScoringContract extends BOA.Common.Types.ContractBase {
        corporateRatingScore?: string;
        corporateRatingValue?: number;
    }
    interface CorporatePricingAuthorizationTargetContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        authorizationAnnualRate?: number;
        authorizationMonthlyRate?: number;
        authorizationPoint?: number;
        corporatePricingId?: number;
        customerClassName?: string;
        customerClassParamCode?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isEarlyClosure?: number;
        isTargetControl?: number;
        isTemp?: boolean;
        maturity?: number;
        maturityDescription?: string;
        maxAuthorizationAnnualRate?: number;
        maxAuthorizationMonthlyRate?: number;
        maxAuthorizationPoint?: number;
        parentProductNodes?: string;
        productCode?: string;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        targetAnnualRate?: number;
        targetMonthlyRate?: number;
        targetPoint?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        workgroupName?: string;
    }
    interface CorporatePricingGeneralContract extends BOA.Common.Types.ContractBase {
        annualRate?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        corporatePricingId?: number;
        customerClassName?: string;
        customerClassParamCode?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isEarlyClosure?: number;
        isTemp?: boolean;
        maturity?: number;
        maturityDescription?: string;
        monthlyRate?: number;
        parentProductNodes?: string;
        productCode?: string;
        ratePricingChangeType?: number;
        ratePricingMethodType?: number;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface CorporateProposalContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountNumber?: number;
        advancePayment?: number;
        advancePaymentFEC?: number;
        advancePaymentRate?: number;
        aggreementTpye?: BOA.Types.Kernel.Product.ProductLoanAgreementTypeContract;
        aggreementTpyeId?: number;
        branchId?: number;
        campaignContract?: BOA.Types.Kernel.FundUtilization.CampaignListContract;
        campaignDetailId?: number;
        citizenship?: number;
        customerName?: string;
        customerTCKN?: string;
        debtFEC?: number;
        estateInfoList?: BOA.Types.Kernel.FundUtilization.EstateInfoContract[];
        estimatedPaymentDate?: Date;
        fecName?: string;
        fecType?: number;
        fecTypeContract?: BOA.Types.Kernel.Product.ProductLoanFECTypeContract;
        financingNeedsList?: BOA.Types.Kernel.FundUtilization.FinancingNeedsInfoContract[];
        fundingAmount?: number;
        fundingFEC?: number;
        goodsCollateralKind?: number;
        goodsCollateralKindName?: string;
        importSumExpense?: number;
        incentiveId?: number;
        isAlreadyCustomer?: boolean;
        isMortgage?: number;
        isNewCustomer?: boolean;
        isNotACustomer?: boolean;
        kdvCompensateType?: number;
        leasingAdvancePayment?: number;
        leasingAdvancePaymentDate?: Date;
        leasingProductGroup?: number;
        loanProductDesc?: string;
        marginRate?: number;
        mortgageType?: number;
        payBackPlanList?: BOA.Types.Kernel.FundUtilization.PayBackPlanContract[];
        personId?: number;
        portfolioClass?: number;
        productCode?: string;
        projectPlace?: BOA.Types.Kernel.Product.ProductLoanProjectPlaceContract;
        projectPlaceId?: number;
        proposalEvaulateList?: BOA.Types.Kernel.FundUtilization.ProposalRejectReasonsContract[];
        proposalId?: number;
        proposalState?: number;
        proposalTran?: BOA.Types.Kernel.FundUtilization.ProposalTranContract;
        statusName?: string;
        systemDate?: Date;
        transferTime?: number;
        userName?: string;
        vatExchangeRate?: number;
        vehicleInfoList?: BOA.Types.Kernel.FundUtilization.VehicleInfoContract[];
    }
    interface CostAnalysisDataContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        difference?: number;
        hostIP?: string;
        hostName?: string;
        leasingTransferDate?: Date;
        operationForwardDate?: Date;
        projectDate?: Date;
        projectId?: number;
        projectStatus?: number;
        projectUserName?: string;
        systemDate?: Date;
        totalDocumentAmount?: number;
        totalPaymentAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CostAnalysisPaymentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        amountCorrespond?: number;
        debitAmount?: number;
        fec?: number;
        fecCode?: string;
        fXRate?: number;
        paymentDate?: Date;
        paymentDesc?: string;
        paymentId?: number;
        paymentType?: number;
        vendorId?: number;
        vendorTitle?: string;
    }
    interface CostAnalysisPaymentDocumentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        fec?: number;
        fecCode?: string;
        totalAmount?: number;
        totalAmountCorrespond?: number;
        vATAmount?: number;
        vATRate?: number;
        vendorId?: number;
        vendorTitle?: string;
    }
    interface CostAnalysisPaymentInfoContract extends BOA.Common.Types.ContractBase {
        documentList?: BOA.Types.Kernel.FundUtilization.CostAnalysisPaymentDocumentContract[];
        paymentList?: BOA.Types.Kernel.FundUtilization.CostAnalysisPaymentContract[];
        totalDocumentCorrespondAmount?: number;
        totalPaymentCorrespondAmount?: number;
        vendorId?: number;
        vendorTitle?: string;
    }
    interface CustomerAllotmentContract extends BOA.Common.Types.ContractBase {
        allotmentApproveChair?: string;
        allotmentDate?: Date;
        allotmentMaturityDate?: Date;
        allotmentNumber?: string;
        allotmentOid?: string;
        allotmentState?: string;
        allotmentSubState?: string;
        approveDate?: Date;
        approveNumber?: string;
        authorityType?: string;
        branchId?: number;
        cashLimit?: number;
        customerGroupOid?: string;
        customerType?: string;
        financialAnalysisReportNumber?: string;
        isCollateralBondNotDesired?: boolean;
        nonCashLimit?: number;
        sectorCode?: string;
        totalLimit?: number;
        usableCashLimit?: number;
        usableNonCashLimit?: number;
        usableTotalLimit?: number;
    }
    interface CustomerClassGeneralContract extends BOA.Common.Types.ContractBase {
        customerClassCode?: string;
        customerClassName?: string;
        customerClassParamCode?: number;
        portfolioClass?: number;
    }
    interface CustomerExemptionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        control?: boolean;
        controlNo?: number;
        exemptionCompleteDate?: Date;
        exemptionControlId?: number;
        exemptionControlNo?: number;
        exemptionDate?: Date;
        operationForwardDate?: Date;
        projectNo?: number;
        projectType?: number;
    }
    interface CustomerVendorBanContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        customerName?: string;
        customerVendorBanId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        operationInquiryTypeId?: number;
        recordStatus?: number;
        recordStatusName?: string;
        sEndDate?: Date;
        sStartDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
        vendorName?: string;
    }
    interface CustomsDeclarationContract extends BOA.Common.Types.ContractBase {
        customsDeclarationId?: number;
        customsHeadOfficeId?: number;
        customsOfficeId?: number;
        declarationAmount?: number;
        declarationDate?: Date;
        declarationNumber?: string;
        declarationType?: number;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        releaseDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DealContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressText?: string;
        bankEFTCode?: number;
        bankName?: string;
        branchId?: number;
        branchName?: string;
        companyTitle?: string;
        creditAccountSuffix?: number;
        creditBalance?: number;
        email?: string;
        faxNumber?: string;
        firstPaymentFundingAmountDate?: Date;
        firstProfitSharePaymentDate?: Date;
        fundingFrequency?: number;
        ibanOrReferenceNumber?: string;
        incentiveDocumentDate?: Date;
        incentiveDocumentNo?: string;
        lastPaymentFundingAmountDate?: Date;
        lastProfitSharePaymentDate?: Date;
        phoneNumber?: string;
        profitShareBeginDate?: Date;
        profitShareFrequency?: number;
        profitShareRate?: number;
        profitShareSupportScore?: number;
        taxNumber?: string;
        taxOffice?: string;
        usageAmount?: number;
        usageDate?: Date;
    }
    interface DealSummaryContract extends BOA.Common.Types.ContractBase {
        creditAmountForProfitShareSupport?: number;
        creditUsageDate?: Date;
        fecCode?: string;
        installmentAmount?: number;
        openedCreditAmount?: number;
        principalAmount?: number;
        profitShareRate?: number;
        profitShareSupportBeginDate?: Date;
        profitShareSupportRate?: number;
        totalCreditAmount?: number;
    }
    interface DeedInfoContract extends BOA.Common.Types.ContractBase {
        deedCode?: number;
        deedDescription?: string;
    }
    interface DocumentContract extends BOA.Common.Types.ContractBase {
        amountWillBeClosed?: number;
        closedAmount?: number;
        commitmentAmount?: number;
        documentAmount?: number;
        documentDate?: Date;
        documentName?: string;
        documentNumber?: string;
        documentParamCode?: number;
        documentWritter?: string;
        firstRecord?: boolean;
        incentiveDate?: Date;
        incentiveId?: number;
        statisticalAmount?: number;
        systemDate?: Date;
    }
    interface EasyLoanCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        branchId?: number;
        branchName?: string;
        channelClosingDate?: Date;
        channelOpeningDate?: Date;
        customerChannelFECType?: number;
        customerChannelStatus?: number;
        customerName?: string;
        customerProjectFECType?: number;
        customerProjectMaxAmount?: number;
        customerSectorList?: BOA.Types.Kernel.FundUtilization.EasyLoanSectorContract[];
        easyLoanCustomerId?: number;
        hostIP?: string;
        hostName?: string;
        personId?: number;
        portfolioOwnerMail?: string;
        sectors?: BOA.Types.Kernel.FundUtilization.EasyLoanSectors[];
        selectedSector?: number;
        subSectors?: BOA.Types.Kernel.FundUtilization.EasyLoanSubSectors[];
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface EasyLoanCustomerLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        balance?: number;
        projectMaxLimit?: number;
        totalMaxLimit?: number;
        usedAmount?: number;
    }
    interface EasyLoanDocumentControlContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        branchId?: number;
        branchName?: string;
        customerSectorList?: BOA.Types.Kernel.FundUtilization.EasyLoanSectorContract[];
        delagationDate?: Date;
        easyLoanDocumentFlowStartInfoId?: number;
        easyLoanDocumentList?: BOA.Types.Kernel.FundUtilization.EasyLoanDocumentsContract[];
        easyLoanDraftDocumentList?: BOA.Types.Kernel.FundUtilization.EasyLoanDraftDocumentContract[];
        emailAddress?: string;
        flowEndDate?: Date;
        flowStartDate?: Date;
        flowState?: number;
        fundingAmount?: number;
        hostIP?: string;
        hostName?: string;
        isPartialAcceptance?: boolean;
        paymentApproveDate?: Date;
        portfolioClass?: number;
        projectId?: number;
        proposalId?: number;
        resourceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
        wFInstanceId?: number;
    }
    interface EasyLoanDocumentPartialAcceptanceDetailContract extends BOA.Common.Types.ContractBase {
        documentPartialAcceptanceDetailDescription?: string;
        documentPartialAcceptanceDetailId?: number;
        paymentDocumentId?: number;
    }
    interface EasyLoanDocumentRejectContract extends BOA.Common.Types.ContractBase {
        documentRejectReasonId?: number;
        documentRejectReasonName?: string;
        isDocumentRejectFixed?: boolean;
        paymentDocumentId?: number;
    }
    interface EasyLoanDocumentsContract extends BOA.Common.Types.ContractBase {
        acceptedDocumentAmount?: number;
        additionalDocState?: number;
        approveStatus?: number;
        dispatchDate?: Date;
        divitId?: string;
        divitInstanceId?: string;
        docAmount?: number;
        docDate?: Date;
        docId?: number;
        docName?: string;
        docNo?: number;
        docSerialNo?: string;
        documentRejectReason?: number;
        easyLoanDocumentPartialAcceptanceDetailList?: BOA.Types.Kernel.FundUtilization.EasyLoanDocumentPartialAcceptanceDetailContract[];
        easyLoanDocumentRejectList?: BOA.Types.Kernel.FundUtilization.EasyLoanDocumentRejectContract[];
        easyLoanDraftDocumentId?: number;
        fec?: number;
        fecCode?: string;
        fer?: number;
        fileName?: string;
        flowId?: string;
        flowName?: string;
        fullFileName?: string;
        irsNo?: number;
        irsSerialNo?: string;
        keyValue?: number;
        objectId?: string;
        paymentDocumentEasyInfoId?: number;
        paymentDocumentId?: number;
        paymentDocumentType?: number;
        product?: string;
        projectId?: number;
        relatedDocumentFileName?: string;
        relatedDocumentId?: number;
        relatedDocumentPath?: string;
        relatedObjectId?: string;
        strDocNo?: string;
    }
    interface EasyLoanDraftDocumentContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        divitTransferDate?: Date;
        documentContent?: number[];
        documentDeletedDate?: Date;
        documentPath?: string;
        easyLoanDraftDocumentId?: number;
        hostIP?: string;
        hostName?: string;
        isDeletedByCustomer?: boolean;
        isSuccesful?: boolean;
        projectId?: number;
        sFTPHost?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorBankAccountId?: number;
        vendorIBAN?: string;
        vendorId?: number;
        vendorIdentity?: string;
        vendorName?: string;
        vendorTitle?: string;
    }
    interface EasyLoanDraftVendorContract extends BOA.Common.Types.ContractBase {
        vendorBankAccountId?: number;
        vendorIBAN?: string;
        vendorId?: number;
        vendorIdentity?: string;
        vendorName?: string;
        vendorTitle?: string;
    }
    interface EasyLoanEODInfoContract extends BOA.Common.Types.ContractBase {
        easyLoanEODInfoId?: number;
        eODErrorMessage?: string;
        eODInfoMessage?: string;
        eODProcessId?: number;
        eODSuccessStatus?: number;
        hostIP?: string;
        hostName?: string;
        projectId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface EasyLoanMoneyTransferStateInfo extends BOA.Common.Types.ContractBase {
        errorCode?: number;
        transferState?: number;
        transferType?: number;
    }
    interface EasyLoanProjectStatusContract extends BOA.Common.Types.ContractBase {
        status?: number;
        statusName?: string;
    }
    interface EasyLoanSectorContract extends BOA.Common.Types.ContractBase {
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        easyLoanSectorId?: number;
        hostIP?: string;
        hostName?: string;
        mainSectorId?: number;
        mainSectorName?: string;
        subSectorId?: number;
        subSectorName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface EasyLoanSectors extends BOA.Common.Types.ContractBase {
        sectorName?: string;
        sectorNo?: number;
    }
    interface EasyLoanSubSectors extends BOA.Common.Types.ContractBase {
        subSectorName?: string;
        subSectorNo?: number;
    }
    interface EasyLoanVendorInfoContract extends BOA.Common.Types.ContractBase {
        customerNumber?: number;
        vendorAlias?: string;
        vendorBankAccountId?: number;
        vendorId?: number;
    }
    interface EconomyMinistryCollectionContract extends BOA.Common.Types.ContractBase {
        childPartNo?: number;
        conditionQueueNo?: number;
        fecCode?: string;
        incentiveDocumentNumber?: string;
        installmentQueueNo?: number;
        partNo?: number;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentQueueNo?: number;
        processType?: number;
        processTypeGroup?: number;
        projectAgreementType?: number;
    }
    interface EconomyMinistryVendorPaymentContract extends BOA.Common.Types.ContractBase {
        deal?: BOA.Types.Kernel.FundUtilization.DealContract;
        dealSummary?: BOA.Types.Kernel.FundUtilization.DealSummaryContract;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        redemptionPlanList?: BOA.Types.Kernel.FundUtilization.RedemptionPlanContract[];
        redemptionPlanSummaryList?: BOA.Types.Kernel.FundUtilization.RedemptionPlanSummaryContract[];
    }
    interface EditInstallmentAmountContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        finalInstallmentNumber?: number;
        frequency?: number;
        startInstallmentNumber?: number;
    }
    interface EmployeeAvailableLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        applicationId?: number;
        applicationProductInfoContract?: BOA.Types.Kernel.FundUtilization.ApplicationProductInfoContract[];
        availableAmount?: number;
        currentTotalQard?: number;
        currentTotalRisk?: number;
        demandAmount?: number;
        employeeAvailableLimitId?: number;
        hostIP?: string;
        hostName?: string;
        jobName?: string;
        position?: string;
        productCode?: string;
        productCodeList?: string[];
        productType?: number;
        productTypeName?: string;
        qardAmount?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
    }
    interface EstateInfoContract extends BOA.Common.Types.ContractBase {
        approximateValue?: number;
        cityName?: string;
        deedCode?: number;
        deedDescription?: string;
        estateAdres?: string;
        estateCity?: string;
        estateId?: number;
        estatePrice?: number;
        estateTown?: string;
        estateType?: string;
        estateTypeName?: string;
        hasRentalIncome?: number;
        proposalId?: number;
        townName?: string;
    }
    interface ExternalCostContract extends BOA.Common.Types.ContractBase {
        commissionAmount?: number;
        commissionFEC?: number;
        expertiseAmount?: number;
        expertiseFEC?: number;
        externalCostId?: number;
        fundingAmount?: number;
        fundingFEC?: number;
        hostIP?: string;
        hostName?: string;
        hypothecAmount?: number;
        hypothecFEC?: number;
        proposalId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialAnalysisReportContract extends BOA.Common.Types.ContractBase {
        authorizationType?: string;
        branchId?: number;
        eval?: string;
        reportDate?: Date;
        reportNumber?: string;
        reportOid?: string;
        reportSector?: string;
        reportValidDate?: Date;
        reportValue?: number;
    }
    interface FinancingNeedsInfoContract extends BOA.Common.Types.ContractBase {
        financingNeedsDetails?: string;
        financingNeedsId?: number;
        financingNeedsPrice?: number;
        proposalId?: number;
    }
    interface FixedDecreasingProfitContract extends BOA.Common.Types.ContractBase {
        profitRate?: number;
        year?: number;
    }
    interface FranchiserListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerName?: string;
        franchiserId?: number;
        limit?: number;
        validationDate?: Date;
    }
    interface FranchiserListParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        franchiserId?: number;
    }
    interface GeneralLedgerPaymentContract extends BOA.Common.Types.ContractBase {
        accountingSafeNumber?: number;
        advanceAccountBalance?: number;
        advanceAccountBranchId?: number;
        advanceAccountSuffix?: number;
        advancePaymentAmount?: number;
        balance?: number;
        businessKey?: number;
        comment?: string;
        exchangeReference?: string;
        fec?: number;
        fecCode?: string;
        generalLedgerPaymentId?: number;
        hostIP?: string;
        hostName?: string;
        ledgerId?: number;
        ledgerType?: number;
        ledgerTypeName?: string;
        paymentAmount?: number;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        receiverAccountBranchId?: number;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverAdress?: string;
        receiverBankId?: string;
        receiverBirthDate?: Date;
        receiverBranchId?: string;
        receiverCityId?: string;
        receiverFatherName?: string;
        receiverIdentity?: string;
        receiverKTBranchId?: number;
        receiverName?: string;
        receiverPhone?: string;
        state?: number;
        stateName?: string;
        systemDate?: Date;
        totalAmount?: number;
        transferBusinessKey?: number;
        transferDate?: Date;
        transferDetailType?: number;
        transferType?: number;
        transferTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendor?: BOA.Types.Kernel.FundUtilization.VendorContract;
        vendorAccount?: BOA.Types.Kernel.FundUtilization.VendorBankAccountContract;
        vendorBankAccountId?: number;
        vendorId?: number;
        vendorName?: string;
        wFInstanceId?: number;
    }
    interface GoodsOrServiceDeliveryInfoContract extends BOA.Common.Types.ContractBase {
        deliveryAddress?: string;
        deliveryDate?: Date;
        description?: string;
        hostIP?: string;
        hostName?: string;
        invoiceDate?: Date;
        invoiceNumber?: string;
        loanGoodCode?: string;
        loanGoodName?: string;
        loanGoodOtherName?: string;
        orderDelegationId?: number;
        quantity?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GroupAllotmentContract extends BOA.Common.Types.ContractBase {
        allotmentOid?: string;
        cashLimit?: number;
        customerGroupOid?: string;
        nonCashLimit?: number;
        totalLimit?: number;
        usableCashLimit?: number;
        usableNonCashLimit?: number;
        usableTotalLimit?: number;
    }
    interface IncentiveBankClosureLetterContract extends BOA.Common.Types.ContractBase {
        bankId?: number;
        bankName?: string;
        branchId?: number;
        branchName?: string;
        documentDate?: Date;
        documentName?: string;
        documentNumber?: string;
        documentParamCode?: number;
        documentWritter?: string;
        incentiveId?: number;
        incentiveStartDate?: Date;
    }
    interface IncentiveBuyForeignExchangeDocContract extends BOA.Common.Types.ContractBase {
        bankName?: string;
        billUSDAmount?: number;
        branchName?: string;
        commitmentAmount?: number;
        commitmentCurrentAmount?: number;
        documentAmount?: number;
        documentAmountUSDCurrency?: number;
        documentBankId?: number;
        documentBranchId?: number;
        documentDate?: Date;
        documentFEC?: number;
        documentName?: string;
        documentNumber?: string;
        documentParamCode?: number;
        firstIncentiveId?: number;
        incentiveId?: number;
        lastIncentiveId?: number;
        oldCommitmentAmount?: number;
        oldCommitmentCurrentAmount?: number;
        oldRemainingAmount?: number;
        remainingAmount?: number;
        systemDate?: Date;
    }
    interface IncentiveClosureLetterContract extends BOA.Common.Types.ContractBase {
        documentDate?: Date;
        documentName?: string;
        documentNumber?: string;
        documentParamCode?: number;
        documentWritter?: string;
        incentiveId?: number;
        incentiveStartDate?: Date;
    }
    interface IncentiveContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        bankClosureLetterDocList?: BOA.Types.Kernel.FundUtilization.IncentiveBankClosureLetterContract[];
        branchId?: number;
        branchName?: string;
        closureLetterDocList?: BOA.Types.Kernel.FundUtilization.IncentiveClosureLetterContract[];
        companyNumber?: string;
        completionRate?: string;
        customBillingDocList?: BOA.Types.Kernel.FundUtilization.IncentiveCustomBillingContract[];
        customerName?: string;
        declarationDocumentDocList?: BOA.Types.Kernel.FundUtilization.IncentiveCustomsDeclarationDocumentContract[];
        divitInstanceId?: any;
        documentAmount?: number;
        documentClosureDate?: Date;
        documentDate?: Date;
        documentList?: BOA.Types.Kernel.FundUtilization.DocumentContract[];
        documentNumber?: string;
        documentPenaltyAmount?: number;
        documentPenaltyDate?: Date;
        documentPenaltyFEC?: number;
        documentPenaltyInterestAmount?: number;
        documentPenaltyTotalAmount?: number;
        documentUsableAmount?: number;
        documentUsedAmount?: number;
        exceptionItem?: BOA.Types.Kernel.FundUtilization.IncentiveExceptionContract;
        exportersAssoLetterDocList?: BOA.Types.Kernel.FundUtilization.IncentiveExportersAssoLetterContract[];
        fecName?: string;
        foreignExchangeDocList?: BOA.Types.Kernel.FundUtilization.IncentiveBuyForeignExchangeDocContract[];
        hasDocument?: number;
        hasProfitSupport?: string;
        hostIP?: string;
        hostName?: string;
        incentiveBeginDate?: Date;
        incentiveClosureComitmentAmount?: number;
        incentiveCommitmentAmount?: number;
        incentiveExpireDate?: Date;
        incentiveFEC?: number;
        incentiveId?: number;
        incentiveSegmentInformation?: BOA.Types.Kernel.FundUtilization.IncentiveSegmentInformationContract;
        incentiveState?: number;
        incentiveStateName?: string;
        incentiveType?: number;
        incentiveTypeName?: string;
        loanReferanceNumber?: string;
        parameterIncentiveExpireDate?: number;
        profitSupportRate?: number;
        purchaseBillsDocList?: BOA.Types.Kernel.FundUtilization.IncentivePurchaseBillsContract[];
        saleBillsDocList?: BOA.Types.Kernel.FundUtilization.IncentiveSaleBillsContract[];
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IncentiveCustomBillingContract extends BOA.Common.Types.ContractBase {
        allCommitmentAmount?: number;
        billAmount?: number;
        billAmountUSDCurrency?: number;
        billFEC?: number;
        billNumber?: string;
        billUSDAmount?: number;
        commitmentAmount?: number;
        dBillDate?: Date;
        documentName?: string;
        documentParamCode?: number;
        documentWriter?: string;
        firstIncentiveId?: number;
        incentiveId?: number;
        lastIncentiveId?: number;
        oldAllCommitmentAmount?: number;
        oldBillUSDAmount?: number;
        oldCommitmentAmount?: number;
        oldRemainingAmount?: number;
        remainingAmount?: number;
        systemDate?: Date;
    }
    interface IncentiveCustomsDeclarationDocumentContract extends BOA.Common.Types.ContractBase {
        amountWillBeClosed?: number;
        anotherUsedValue?: number;
        availableStatisticalAmount?: number;
        closedAmount?: number;
        commitmentAmount?: number;
        customsHeadOfficeId?: number;
        customsOfficeId?: number;
        declarationAmount?: number;
        declarationAmountFEC?: number;
        declarationDate?: Date;
        declarationNumber?: string;
        documentName?: string;
        documentParamCode?: number;
        firstIncentiveId?: number;
        incentiveId?: number;
        lastIncentiveId?: number;
        oldAmountWillBeClosed?: number;
        oldAvailableStatisticalAmount?: number;
        oldClosedAmount?: number;
        oldCommitmentAmount?: number;
        projectNo?: string;
        statisticalAmount?: number;
        systemDate?: Date;
    }
    interface IncentiveExceptionContract extends BOA.Common.Types.ContractBase {
        bITTRate?: number;
        exceptionId?: number;
        fETTRate?: number;
        hostName?: string;
        incentiveId?: number;
        rUSFRate?: number;
        sTAMP?: number;
        systemDate?: Date;
        userName?: string;
        vATRate?: number;
    }
    interface IncentiveExpireMailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amountWillBeClosed?: number;
        branchId?: number;
        customerName?: string;
        documentNumber?: string;
        incentiveBeginDate?: Date;
        incentiveExpireDate?: Date;
        incentiveState?: number;
        incentiveType?: number;
        incentiveTypeDescription?: string;
        incentiveTypeName?: string;
        projectNo?: string;
        tranDate?: Date;
    }
    interface IncentiveExportersAssoLetterContract extends BOA.Common.Types.ContractBase {
        documentDate?: Date;
        documentName?: string;
        documentNumber?: string;
        documentParamCode?: number;
        documentWriter?: string;
        incentiveId?: number;
        incentiveStartDate?: Date;
    }
    interface IncentivePurchaseBillsContract extends BOA.Common.Types.ContractBase {
        billAmount?: number;
        billAmountUSDCurrency?: number;
        billDate?: Date;
        billFEC?: number;
        billNumber?: string;
        billUSDAmount?: number;
        commitmentAmount?: number;
        commitmentCurrentAmount?: number;
        documentName?: string;
        documentParamCode?: number;
        documentWriter?: string;
        firstIncentiveId?: number;
        incentiveId?: number;
        lastIncentiveId?: number;
        oldCommitmentAmount?: number;
        oldCommitmentCurrentAmount?: number;
        oldRemainingAmount?: number;
        remainingAmount?: number;
        systemDate?: Date;
    }
    interface IncentiveSaleBillsContract extends BOA.Common.Types.ContractBase {
        billAmount?: number;
        billAmountUSDCurrency?: number;
        billDate?: Date;
        billFEC?: number;
        billNumber?: string;
        billUSDAmount?: number;
        commitmentAmount?: number;
        commitmentCurrentAmount?: number;
        documentName?: string;
        documentParamCode?: number;
        documentWriter?: string;
        firstIncentiveId?: number;
        incentiveId?: number;
        lastIncentiveId?: number;
        oldCommitmentAmount?: number;
        oldCommitmentCurrentAmount?: number;
        oldRemainingAmount?: number;
        remainingAmount?: number;
        systemDate?: Date;
    }
    interface IncentiveSegmentInformationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        hostIP?: string;
        hostName?: string;
        incentiveId?: number;
        incentiveSegmentInformationId?: number;
        segmentNumber?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IncentiveTaxDelayFineContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        punishmentRate?: number;
        startingDate?: Date;
        systemDate?: Date;
        taxId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validityDate?: Date;
    }
    interface IncreasingDecreasingPaymentContract extends BOA.Common.Types.ContractBase {
        finalInstallmentNumber?: number;
        frequency?: number;
        rate?: number;
        startInstallmentNumber?: number;
    }
    interface InquiryAccountInfoContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        fec?: number;
        fecCode?: string;
        inquiryAccountInfoId?: number;
        productType?: number;
        productTypeDescription?: string;
        sourceId?: number;
        sourceType?: number;
    }
    interface InquiryBlackListContract extends BOA.Common.Types.ContractBase {
        blackListTypeId?: number;
        blackListTypeName?: string;
        inquiryBlackListId?: number;
        personId?: number;
        personName?: string;
        sourceId?: number;
        sourceType?: number;
    }
    interface InquiryBouncedChequeContract extends BOA.Common.Types.ContractBase {
        adjustmentCount?: number;
        chequeAmount?: number;
        chequeCount?: number;
        foreignExchangeType?: string;
        foreignExchangeTypeName?: string;
        inquiryBouncedChequeId?: number;
        personId?: number;
        personName?: string;
        sourceId?: number;
        sourceType?: number;
        status?: number;
    }
    interface InquiryChequeBookCashFlowContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        averageMonthlyAmount?: number;
        inquiryChequeBookCashFlowId?: number;
        sourceId?: number;
        sourceType?: number;
    }
    interface InquiryChequeBookContract extends BOA.Common.Types.ContractBase {
        chequeCount?: number;
        inquiryChequeBookId?: number;
        sourceId?: number;
        sourceType?: number;
        status?: number;
        statusDescription?: string;
    }
    interface InquiryCollateralChequeContract extends BOA.Common.Types.ContractBase {
        chequeCount?: number;
        chequeRatio?: number;
        inquiryCollateralChequeId?: number;
        inquiryType?: number;
        sourceId?: number;
        sourceType?: number;
        status?: number;
        statusDescription?: string;
    }
    interface InquiryKKBCalculatedInfoContract extends BOA.Common.Types.ContractBase {
        allDebtAmount?: number;
        closedAllAccountAmount?: number;
        closedCreditCardAmount?: number;
        closedMortgageAmount?: number;
        closedOverDraftAmount?: number;
        closedPersonelLoanAmount?: number;
        creditCardDebtAmount?: number;
        customerHasRelationWithEmployee?: boolean;
        householdTotalDebt?: number;
        last24MonthLegalProceedingsBalanceSum?: number;
        last2MonthApplication?: number;
        openAllAccountAmount?: number;
        openCreditCardAmount?: number;
        openMortgageAmount?: number;
        openOrLast2YearClosedCreditPayment?: number;
        openOrLast2YearClosedCreditPaymentPerformansOver1In3Months?: number;
        openOrLast2YearClosedCreditPaymentPerformansOver1In6Months?: number;
        openOrLast2YearClosedCreditPaymentPerformansOver2In6Months?: number;
        openOrLast2YearClosedCreditPaymentPerformansWorstIn1Months?: number;
        openOrLast6MonthClosedCreditPaymentPerformansOver1In3Months?: boolean;
        openOrLast6MonthClosedCreditPaymentPerformansOver1In3MonthsCount?: number;
        openOrLast6MonthClosedCreditPaymentPerformansOver1In6Months?: boolean;
        openOrLast6MonthClosedCreditPaymentPerformansOver1In6MonthsCount?: number;
        openOrLast6MonthClosedCreditPaymentPerformansOver2In6Months?: boolean;
        openOrLast6MonthClosedCreditPaymentPerformansOver2In6MonthsCount?: number;
        openOrLast6MonthClosedCreditPaymentPerformansWorstIn1Months?: boolean;
        openOrLast6MonthClosedCreditPaymentPerformansWorstIn1MonthsCount?: number;
        openOverDraftAmount?: number;
        openPersonelLoandAmount?: number;
        totalCreditPaymentPerformansOver0In6Months?: number;
        worstPaymentStatusIn1Months?: boolean;
        worstPaymentStatusIn24Months?: number;
    }
    interface InquiryKKBInfoContract extends BOA.Common.Types.ContractBase {
        inquiryKKBInfoId?: number;
        kkbCalculatedInfoContract?: BOA.Types.Kernel.FundUtilization.InquiryKKBCalculatedInfoContract;
        kkbContract?: BOA.Types.Kernel.KKB.IndividualResponseViewContract;
        logId?: number;
        personId?: number;
        personName?: string;
        score?: number;
        sourceId?: number;
        sourceType?: number;
        taxNumber?: string;
    }
    interface InquiryLevyRecordsContract extends BOA.Common.Types.ContractBase {
        inquiryLevyRecordsId?: number;
        personId?: number;
        personName?: string;
        sourceId?: number;
        sourceType?: number;
    }
    interface InquiryLoanStateContract extends BOA.Common.Types.ContractBase {
        capacityRate?: number;
        cashLoanLimitCapacityRate?: number;
        inquiryLoanStateId?: number;
        inquiryLoanStateTypeId?: number;
        loanTerm?: number;
        loanYear?: number;
        nonCashLoanLimitCapacityRate?: number;
        personId?: number;
        personName?: string;
        risk?: number;
        riskCode?: string;
        sourceId?: number;
        sourceType?: number;
        taxNumber?: string;
        totalCashLoanAmount?: number;
        totalDefaultRiskAmount?: number;
        totalNonCashLoanAmount?: number;
    }
    interface InquiryPersonContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        birthDate?: Date;
        channelId?: number;
        fathersName?: string;
        hostIP?: string;
        hostName?: string;
        inquiryPersonId?: number;
        insideInquiryId?: number;
        kKBQueryType?: number;
        outsideInquiryId?: number;
        personId?: number;
        personName?: string;
        relationshipTypeDescription?: string;
        relationshipTypeId?: number;
        resourceCode?: string;
        sourceId?: number;
        sourceType?: number;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InquiryProductivityContract extends BOA.Common.Types.ContractBase {
        expenseAmount?: number;
        incomeAmount?: number;
        inquiryProductivityId?: number;
        productivityType?: number;
        productivityTypeDescription?: string;
        profitLossAmount?: number;
        sourceId?: number;
        sourceType?: number;
    }
    interface InquiryProtestedBillsContract extends BOA.Common.Types.ContractBase {
        adjustmentCount?: number;
        billAmount?: number;
        billCount?: number;
        inquiryProtestedBillsId?: number;
        personId?: number;
        personName?: string;
        sourceId?: number;
        sourceType?: number;
        status?: number;
    }
    interface InstallmentContract extends BOA.Common.Types.ContractBase {
        accrualFer?: number;
        accrualStatus?: number;
        accruedExcDiffBITTAmount?: number;
        accruedExcDiffRUSFAmount?: number;
        amount?: number;
        bITTAmount?: number;
        bITTRate?: number;
        collectedAccrualFerDifferenceTax?: number;
        collectionStatus?: number;
        dayCount?: number;
        dayDifferenceProfitAmount?: number;
        hostIP?: string;
        hostName?: string;
        incentiveProfitSupportAmount?: number;
        incentiveProfitSupportRate?: number;
        incentiveType?: number;
        increasingDecreasingRate?: number;
        installmentId?: number;
        installmentKind?: number;
        isManuel?: boolean;
        isProfitless?: boolean;
        maturityDate?: Date;
        monthlyProfitRate?: number;
        notIncludePrincipalAmount?: boolean;
        orderNumber?: number;
        payBackPlanId?: number;
        principalAmount?: number;
        profitAmount?: number;
        readOnlyAmount?: boolean;
        readOnlyIsManuel?: boolean;
        readOnlyMaturityDate?: boolean;
        remainingPrincipalAmount?: number;
        remainingVATAmount?: number;
        rUSFAmount?: number;
        rUSFRate?: number;
        surplusProfitAmount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vATAmount?: number;
        vATRate?: number;
        wasMaturityDateModified?: boolean;
    }
    interface InterimPaymentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        frequency?: number;
    }
    interface KarzProjectContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        approveUnit?: string;
        branchId?: number;
        channelId?: number;
        channelName?: string;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        customerName?: string;
        delayPenaltyRate?: number;
        description?: string;
        endTransactionDate?: Date;
        expirationDate?: Date;
        fecCode?: string;
        fecId?: number;
        fundPool?: number;
        hostIP?: string;
        hostName?: string;
        installmentDate?: Date;
        isMortgage?: number;
        karzProjectId?: number;
        maturityDayCount?: number;
        paymentAccountSuffix?: number;
        paymentBranchId?: number;
        paymentDate?: Date;
        paymentFER?: number;
        portfolioClass?: number;
        productCode?: string;
        reasonCode?: string;
        startTransactionDate?: Date;
        status?: number;
        statusDesc?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KarzProjectTranContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        karzProjectId?: number;
        karzProjectTranId?: number;
        status?: number;
        systemDate?: Date;
        tranType?: number;
        userName?: string;
        wFInstanceId?: number;
    }
    interface LeasingAgreementAmendmentContract extends BOA.Common.Types.ContractBase {
        amendmentTypeId?: number;
        amendmentTypeName?: string;
        leasingAgreementAmendmentId?: number;
        leasingAgreementId?: number;
    }
    interface LeasingAgreementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agreementDate?: Date;
        amendmentNoteryAddress?: string;
        amendmentNoteryAuthorized?: string;
        amendmentNoteryJournalNumber?: string;
        amendmentNoteryName?: string;
        amendmentSigningPlaceId?: number;
        channelId?: number;
        hostIP?: string;
        hostName?: string;
        leasingAgreementId?: number;
        leasingAgreementTypeId?: number;
        leasingNoteryAddress?: string;
        leasingNoteryAuthorized?: string;
        leasingNoteryJournalNumber?: string;
        leasingNoteryName?: string;
        leasingSigningPlaceId?: number;
        resourceCode?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LeasingAgreementGoodsContract extends BOA.Common.Types.ContractBase {
        brandName?: string;
        className?: string;
        goodsCount?: number;
        leasingAgreementGoodsId?: number;
        leasingAgreementId?: number;
    }
    interface LeasingAgreementListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agreementDate?: Date;
        leasingAgreementId?: number;
        leasingAgreementTypeId?: number;
        leasingAgreementTypeName?: string;
        projectId?: number;
        projectStatusName?: string;
        status?: number;
        statusName?: string;
    }
    interface LeasingAgreementReferenceContract extends BOA.Common.Types.ContractBase {
        leasingAgreementId?: number;
        leasingAgreementReferenceId?: number;
        noteryDate?: Date;
        noteryJournalNumber?: string;
        noteryName?: string;
        referenceTypeId?: number;
    }
    interface LeasingAgreementRepresentativeContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        brandName?: string;
        city?: string;
        className?: string;
        county?: string;
        deliveryDate?: Date;
        deliveryPlace?: string;
        district?: string;
        districtCode?: number;
        familyOrder?: number;
        fatherName?: string;
        gender?: number;
        genderName?: string;
        goodsCount?: number;
        identityCardNumber?: number;
        identityCardSerial?: string;
        identityNumber?: string;
        leasingAgreementId?: number;
        leasingAgreementRepresentativeId?: number;
        motherName?: string;
        nameSurname?: string;
        noteryDate?: Date;
        noteryJournalNumber?: string;
        noteryName?: string;
        registryNo?: number;
        representativeClassId?: number;
        representativeClassName?: string;
        representativeTypeId?: number;
        userId?: number;
    }
    interface LeasingAgreementToProjectContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        advancePaymentAmount?: number;
        annualProfitRate?: number;
        debtFEC?: number;
        debtFER?: number;
        fundingFecCode?: string;
        fundingFER?: number;
        leasingAgreementId?: number;
        leasingAgreementToProjectId?: number;
        leasingTransferDate?: Date;
        leasingTransferTime?: number;
        monthlyProfitRate?: number;
        operationForwardDate?: Date;
        projectDate?: Date;
        projectId?: number;
        rentalAmount?: number;
        totalCost?: number;
        transferPrice?: number;
    }
    interface LeasingAgreementVendorFirmContract extends BOA.Common.Types.ContractBase {
        leasingAgreementId?: number;
        leasingAgreementVendorFirmId?: number;
        vendorFirmAddress?: string;
        vendorFirmName?: string;
    }
    interface LeasingDocumentVatAmountContract extends BOA.Common.Types.ContractBase {
        documentAmount?: number;
        fec?: number;
        fer?: number;
        vatAmount?: number;
        vatRate?: number;
    }
    interface LeasingReturnInvoiceContract extends BOA.Common.Types.ContractBase {
        returnInvoiceAmount?: number;
        returnInvoiceBody?: string;
        returnInvoiceBranch?: string;
        returnInvoiceDate?: Date;
        returnInvoiceeAddress?: string;
        returnInvoiceeIdentity?: string;
        returnInvoiceeTitle?: string;
        returnInvoiceNumber?: string;
        returnInvoiceTotalAmount?: number;
        returnInvoiceTotalAmountDescription?: string;
        returnInvoiceVatAmount?: number;
    }
    interface LeasingVendorAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        projectPaymentId?: number;
    }
    interface LeasingVendorAccountingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        projectPaymentId?: number;
    }
    interface LetterOfIntentContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        amountOfLetter?: number;
        amountOfLetterStr?: string;
        approvementLetterStateString?: string;
        approvementState?: number;
        authorizedPerson1?: number;
        authorizedPerson1Name?: string;
        authorizedPerson2?: number;
        authorizedPerson2Name?: string;
        authorizedPersonConfirmLetter1?: number;
        authorizedPersonConfirmLetter2?: number;
        authorizedPersonJob1?: string;
        authorizedPersonJob2?: string;
        balance?: number;
        bankName?: string;
        bankReferenceNumber?: string;
        branchName?: string;
        businessKey?: number;
        commissionAmount?: number;
        commissionSerializeId?: number;
        confirmApprovementState?: number;
        confirmLetterBranch?: string;
        confirmLetterCustomerName?: string;
        confirmLetterDate?: Date;
        confirmLetterNo?: string;
        confirmLetterResult?: string;
        confirmLetterStateString?: string;
        confirmPersonName?: string;
        confirmPrintedDate?: Date;
        confirmResultCode?: number;
        confirmSubject?: string;
        confirmWorkFlowInstanceId?: number;
        customerClassName?: string;
        customerId?: number;
        customerIdStr?: string;
        customerName?: string;
        customerTitle?: string;
        divitId?: string;
        equivalentCommissionAmount?: number;
        estimatedMaturityPeriod?: number;
        estimatedMaturityPeriodStr?: string;
        fecId?: number;
        fecName?: string;
        formattedDate?: string;
        fromFEC?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isLetterTemplateEnabled?: boolean;
        isTemplateEdited?: number;
        jobName?: string;
        letterNumber?: string;
        letterOfIntentId?: number;
        letterOfIntentIdMax?: number;
        letterOfIntentIdMin?: number;
        letterPrintDate?: Date;
        letterState?: number;
        letterSubject?: string;
        nameOfBusiness?: string;
        officalBranchId?: number;
        organizationId?: number;
        paramCodeParameter?: string;
        paramDescriptionParameter?: string;
        parameterContractList?: BOA.Types.Kernel.FundUtilization.ParameterContractLTR[];
        paramValue2Parameter?: string;
        paramValue3Parameter?: string;
        paramValueParameter?: string;
        parentProductCode?: string;
        patternDefinition?: string;
        patternText?: string;
        personId?: number;
        personName?: string;
        printedConfirmText?: string;
        printedDate?: Date;
        printedDateMax?: Date;
        printedDateMin?: Date;
        printedText?: string;
        productCode?: string;
        profitRate?: number;
        profitRateStr?: string;
        recordDate?: Date;
        selectedCustomer?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        systemDate?: Date;
        systemDateMax?: Date;
        systemDateMin?: Date;
        templateDefinition?: string;
        templateId?: number;
        templateIdConfirm?: number;
        textOfLetter?: string;
        textOfLetterConfirm?: string;
        textOfTemplate?: string;
        textOfTemplateConfirm?: string;
        tKDKCustomerTCKN?: string;
        toFEC?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface LoanBorrowedDefinitionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountProductCode?: string;
        accountSuffix?: number;
        accountSuffixEURO?: number;
        accountSuffixTL?: number;
        bankName?: string;
        beneficiaryAccountIdentifierCode?: string;
        beneficiaryBankIdentifierCode?: string;
        beneficiaryCorrespondingBankIdentifierCode?: string;
        branchId?: number;
        description?: string;
        fundSource?: number;
        hostName?: string;
        loanBorrowedDefinitionId?: number;
        productCode?: string;
        receiverBankIdentifierCode?: string;
        receiverBankIdentifierCodeEURO?: string;
        referenceNumberPrefix?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LoanBorrowedOutgoingTransferContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        beneficiaryAccountIdentifierCode?: string;
        beneficiaryBankIdentifierCode?: string;
        beneficiaryCorrespondingBankIdentifierCode?: string;
        businesskey?: number;
        correspondentContract?: BOA.Types.Kernel.Account.AccountCorrespondentContract;
        definitionContract?: BOA.Types.Kernel.FundUtilization.LoanBorrowedDefinitionContract;
        fec?: number;
        fecCode?: string;
        hostName?: string;
        instanceId?: number;
        loanBorrowedDefinitionDescription?: string;
        loanBorrowedDefinitionId?: number;
        loanBorrowedOutgoingTransferId?: number;
        outgoingEFTId?: number;
        receiverBankIdentifierCode?: string;
        swiftId?: number;
        swiftStatus?: string;
        systemDate?: Date;
        transactionReferenceNumber?: string;
        transferDetailList?: BOA.Types.Kernel.FundUtilization.LoanBorrowedOutgoingTransferDetailContract[];
        transferStatus?: number;
        transferStatusDescription?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
    }
    interface LoanBorrowedOutgoingTransferDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        borrowedAccountNumber?: number;
        borrowedAccountSuffix?: number;
        borrowedBranchId?: number;
        borrowedLedgerId?: number;
        businesskey?: number;
        customerName?: string;
        fec?: number;
        fecCode?: string;
        hostName?: string;
        loanBorrowedOutgoingTransferDetailId?: number;
        loanBorrowedOutgoingTransferId?: number;
        principalAmount?: number;
        profitAmount?: number;
        profitLedgerId?: number;
        projectPaybackPlanInstallmentId?: number;
        systemDate?: Date;
        totalAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LoanBorrowedOutgoingTransferEODContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        fec?: number;
        loanBorrowedDefinitionId?: number;
        maturityDate?: Date;
        principalAmount?: number;
        profitAmount?: number;
        projectPayBackPlanInstallmentId?: number;
    }
    interface LoanBorrowedOutgoingTransferListContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        definitionContract?: BOA.Types.Kernel.FundUtilization.LoanBorrowedDefinitionContract;
        endDate?: Date;
        fec?: number;
    }
    interface LoanGoods extends BOA.Common.Types.ContractBase {
        isLeafLevel?: boolean;
        loanGoodCode?: string;
        loanGoodGroupCode?: string;
        name?: string;
    }
    interface LoanGoodsNode extends BOA.Common.Types.GenericNode<BOA.Types.Kernel.FundUtilization.LoanGoodsNode> {
        iconPath?: string;
        loanGoodInfo?: BOA.Types.Kernel.FundUtilization.LoanGoods;
    }
    interface LoanProfitShareContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        newProjectType?: number;
        tranDate?: Date;
    }
    interface LoansToBeIndexedTLContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountTL?: number;
        bITTAmount?: number;
        branchId?: number;
        businessKey?: number;
        customerType?: string;
        debtAmount?: number;
        fec?: number;
        fer?: number;
        installmentId?: number;
        isLeasing?: number;
        isOverdueReceivables?: boolean;
        ledgerId?: number;
        maturityDate?: Date;
        principalAmount?: number;
        processDate?: Date;
        profitAmount?: number;
        projectPayBackPlanInstallmentId?: number;
        projectStarDate?: Date;
        resourceCode?: string;
        rUSFAmount?: number;
        taxAmount?: number;
        tranDate?: Date;
        vATAmount?: number;
    }
    interface LoansToBeIndexedTLRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.FundUtilization.LoansToBeIndexedTLContract;
        reverseDataContract?: BOA.Types.Kernel.FundUtilization.TLLoansToBeIndexedReverseContract;
    }
    interface MessageReflectionCommonContract extends BOA.Common.Types.ContractBase {
        canBeProceeded?: boolean;
        isDefinedErrorMessage?: boolean;
        messageDescription?: string;
    }
    interface MobileApproveInfoContract extends BOA.Common.Types.ContractBase {
        averageMaturityCommissionRates?: string;
        averageMaturityDayCounts?: string;
        commissionAmounts?: string;
        commissionRates?: string;
        debtFECCode?: string;
        fundingFECCode?: string;
        installmentCounts?: string;
        monthlyProfitRates?: string;
    }
    interface NameValue extends BOA.Common.Types.ContractBase {
        itemValue?: number;
        name?: string;
    }
    interface OldReferenceContract extends BOA.Common.Types.ContractBase {
        aciklama?: string;
        altDeger?: number;
        degerTip?: number;
        ekKodu?: string;
        kodu?: string;
        simulasyon?: number;
        sira?: number;
        turu?: string;
        ustDeger?: number;
    }
    interface OperationCommon {
    }
    interface OperationInquiryContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        customerName?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        operationInquiryId?: number;
        operationInquiryTypeId?: number;
        operationInquiryTypeName?: string;
        personelName?: string;
        recordStatus?: number;
        recordStatusName?: string;
        sEndDate?: Date;
        sStartDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userId?: number;
        userName?: string;
        vendorId?: number;
        vendorName?: string;
        workgroupId?: number;
        workgroupName?: string;
    }
    interface OrderDelegationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        advertUrl?: string;
        amount?: number;
        amountCorrespond?: number;
        amountForProject?: number;
        approveActionDate?: Date;
        approveActionUserName?: string;
        approveMode?: BOA.Types.Kernel.FundUtilization.DelegationApprovePlace;
        authorizedPersonName?: string;
        branchName?: string;
        canAllowComponent?: boolean;
        delegatedCustomerName?: string;
        delegatedPerson?: string;
        delegationBeginDate?: Date;
        delegationBranchId?: number;
        delegationEndDate?: Date;
        delegationReadingType?: BOA.Types.Kernel.FundUtilization.DelegationReadingType;
        email?: string;
        faxNumber?: string;
        fec?: number;
        fecCode?: string;
        formNumber?: number;
        formType?: BOA.Types.Kernel.FundUtilization.FormType;
        formTypeName?: string;
        goodsOrServiceDeliveryInfoList?: BOA.Types.Kernel.FundUtilization.GoodsOrServiceDeliveryInfoContract[];
        hostIP?: string;
        hostName?: string;
        isUnProjectDelegation?: boolean;
        mobilePhoneNumber?: string;
        orderDelegationId?: number;
        orderDelegationType?: BOA.Types.Kernel.FundUtilization.OrderDelegationType;
        orderDelegationTypeName?: string;
        parolDelUserName?: string;
        paymentType?: number;
        phoneNumber?: string;
        projectAmount?: number;
        projectBranchId?: number;
        projectBranchName?: string;
        projectFecCode?: string;
        projectId?: number;
        projectUserEmail?: string;
        proposalUserEmail?: string;
        sentToAproveActionUserId?: number;
        specialConditions?: string;
        status?: BOA.Types.Kernel.FundUtilization.OrderDelegationStatus;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userEmail?: string;
        userName?: string;
        vendorId?: number;
        vendorName?: string;
        vendorPaymentInfoList?: BOA.Types.Kernel.FundUtilization.VendorPaymentInfoContract[];
        wFInstanceId?: number;
    }
    interface OrderDelegationLoadContract extends BOA.Common.Types.ContractBase {
        campaingVendorId?: number;
        commitmentDate?: Date;
        fXRateList?: BOA.Types.Kernel.FX.FXRateContract[];
        isCommitment?: boolean;
        isRevise?: boolean;
        loanGoodsTree?: BOA.Types.Kernel.FundUtilization.LoanGoodsNode[];
        orderDelagationInfo?: BOA.Types.Kernel.FundUtilization.OrderDelegationContract;
        projectAdvanceClosingDate?: Date;
        projectAgreementType?: number;
        projectDebtFecType?: number;
        projectDefiniteDate?: Date;
        projectFinishDate?: Date;
        projectFundAmount?: number;
        projectFundFEC?: number;
        projectPaymentType?: number;
        totalAmountForProject?: number;
    }
    interface ParameterContractLTR extends BOA.Common.Types.ContractBase {
        error?: BOA.Common.Types.Result;
        parameter?: string;
        parameterDateValue?: Date;
        parameterDateValue2?: Date;
        parameterDecimalValue?: number;
        parameterDecimalValue2?: number;
        parameterDecimalValue3?: number;
        parameterDecimalValue4?: number;
        parameterDescription?: string;
        parameterId?: number;
        parameterIntValue?: number;
        parameterValue?: string;
        parameterValue2?: string;
        parameterValue3?: string;
        parameterValue4?: string;
        parameterValue5?: string;
        parameterVisibilityValue?: any;
    }
    interface PayBackPlanBaseContract extends BOA.Common.Types.ContractBase {
        annualCompoundProfitRate?: number;
        annualSimpleProfitRate?: number;
        averageMaturityDate?: Date;
        averageMaturityDayCount?: number;
        averagePaymentDate?: Date;
        bITTRate?: number;
        calculationMethod?: number;
        commission?: BOA.Common.Types.CommissionContract;
        dailyIRR?: number;
        dayDifference?: number;
        dayDifferenceProfitDistribution?: BOA.Types.Kernel.FundUtilization.PayBackPlanCommon.DayDifferenceProfitDistribution;
        documentedAmount?: number;
        fundingAmount?: number;
        fundingDateType?: number;
        installmentContractList?: BOA.Types.Kernel.FundUtilization.InstallmentContract[];
        installmentCount?: number;
        installmentCountMax?: number;
        installmentCountMin?: number;
        installmentType?: BOA.Types.Kernel.FundUtilization.PayBackPlanCommon.InstallmentType;
        iRR?: number;
        isCalculateByPrincipalAmount?: boolean;
        isEconomyMinistryIncentive?: boolean;
        isRevise?: boolean;
        isVATIncluded?: boolean;
        leasingAdvanceVATAmount?: number;
        monthlyProfitRate?: number;
        nonPaymentPeriod?: number;
        nonPaymentPeriodCount?: number;
        period?: number;
        periodCount?: number;
        personType?: number;
        profitCalculationMode?: BOA.Types.Kernel.FundUtilization.PayBackPlanCommon.ProfitCalculationMode;
        projectDayCount?: number;
        projectEndDate?: Date;
        rateOfReturn?: number;
        rUSFAmount?: number;
        rUSFRate?: number;
        salesVATRate?: number;
        totalAmount?: number;
        totalBITTAmount?: number;
        totalCost?: number;
        totalInstallmentAmount?: number;
        totalPrincipalAmount?: number;
        totalProfitAmount?: number;
        totalRUSFAmount?: number;
        totalVATAmount?: number;
        vATAmount?: number;
        vATRate?: number;
    }
    interface PayBackPlanCalculationContract extends BOA.Types.Kernel.FundUtilization.PayBackPlanContract {
        bsmv?: number;
        calculatedAmount?: number;
        installmentAmount?: number;
        kkdf?: number;
        pricingInstallmentCount?: number;
        pricingProfitRate?: number;
        suggestedInstallmentCount?: number;
        suggestedProfitRate?: number;
    }
    interface PayBackPlanChequeContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        amount?: number;
        bankName?: string;
        branchName?: string;
        chequeId?: number;
        chequeNumber?: number;
        clearenceDate?: Date;
        drawDate?: Date;
        isSelectedCheque?: boolean;
        orderNumber?: number;
        payBackPlanId?: number;
        payBackPlanType?: number;
        usableAmount?: number;
    }
    interface PayBackPlanCommon {
    }
    interface PayBackPlanContract extends BOA.Types.Kernel.FundUtilization.PayBackPlanBaseContract {
        accountName?: string;
        accountNumber?: number;
        approveUnit?: number;
        authorizationPoint?: number;
        authorizationTarget?: number;
        automaticPriceRate?: number;
        automaticPricingRuleInstanceId?: number;
        autoPricingCustomerCommitmentInfo?: BOA.Types.Kernel.FundUtilization.AutoPricingCustomerCommitmentContract;
        averageMaturityCommissionRate?: number;
        branchId?: number;
        campaignDetailId?: number;
        cancelCommitment?: boolean;
        chequeContractList?: BOA.Types.Kernel.FundUtilization.PayBackPlanChequeContract[];
        commissionJournalBusinessKey?: number;
        commissionKey?: string;
        commissionRate?: number;
        commissionSerializeId?: number;
        controlId?: number;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        creditGuaranteeFundCommissionContract?: BOA.Types.Kernel.CreditGuaranteeFund.CreditGuaranteeFundCommissionContract;
        customerClassCode?: string;
        customerClassCodeForEngine?: string;
        customerClassId?: number;
        customerClassName?: string;
        fecCode?: string;
        fecId?: number;
        firmId?: number;
        firstInstallmentDate?: Date;
        fixedDecreasingProfitList?: BOA.Types.Kernel.FundUtilization.FixedDecreasingProfitContract[];
        fundingDateType?: number;
        hostIP?: string;
        hostName?: string;
        incentiveId?: number;
        increasingDecreasingPaymentInfo?: BOA.Types.Kernel.FundUtilization.IncreasingDecreasingPaymentContract;
        interimPaymentInfo?: BOA.Types.Kernel.FundUtilization.InterimPaymentContract;
        isEarlyClosure?: boolean;
        isIncentive?: boolean;
        isLeasing?: boolean;
        isMortgage?: boolean;
        isPaybackPlanByPaymentAmount?: boolean;
        isProjectFinance?: number;
        isSelectedPlan?: boolean;
        isTargetControl?: number;
        keepCommissionFixed?: boolean;
        lastPaymentDate?: Date;
        leasingAdvanceAmount?: number;
        leasingAdvanceDate?: Date;
        leasingAdvancePayment?: number;
        leasingTransferDate?: Date;
        leasingTransferPriceRate?: number;
        lifePolicyCollateralAmount?: number;
        lifePolicyCommission?: number;
        lifePolicyPremium?: number;
        listPriceRate?: number;
        loanMaturityType?: number;
        loanType?: number;
        maxAuthorizationPoint?: number;
        maximumMaturityCount?: number;
        nonPaymentPeriod?: number;
        nonPaymentPeriodCount?: number;
        notIncludePrincipalInstallmentCount?: number;
        parent?: BOA.Types.Kernel.FundUtilization.PayBackPlanCommon.PayBackPlanParent;
        parentPayBackPlanId?: number;
        payBackPlanId?: number;
        personType?: number;
        portfolioClass?: number;
        pricingGeneral?: number;
        productCode?: string;
        productLoanPropertyId?: number;
        projectFinanceId?: number;
        projectPlace?: number;
        projectReviseInfo?: BOA.Types.Kernel.FundUtilization.ProjectReviseInfoContract;
        proposalCrossSellingContractList?: BOA.Types.Kernel.FundUtilization.AutoPricingProposalCrossSellingContract[];
        proposalId?: number;
        proposalOrProjectId?: number;
        proposalPayBackPlanApproveDetailContractList?: BOA.Types.Kernel.FundUtilization.ProposalPayBackPlanApproveDetailContract[];
        realizedProfitRate?: number;
        referenceMaxValue?: number;
        referenceValue?: number;
        regionAuthorizationPoint?: number;
        status?: number;
        systemDate?: Date;
        targetProfitRate?: number;
        tempControlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentDocumentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        averagePaymentFER?: number;
        businessKey?: number;
        cc?: string;
        debtFER?: number;
        dispatchDate?: Date;
        divitMailCode?: string;
        documentAmount?: number;
        documentCurrencyType?: number;
        documentDate?: Date;
        documentDebtAmount?: number;
        documentLcAmount?: number;
        documentOrderNumber?: string;
        documentOrganizer?: string;
        documentOrganizerIdentity?: string;
        documentSerialNumber?: string;
        documentType?: number;
        errorDesc?: string;
        errorStatus?: number;
        fec?: number;
        fecCoinCode?: string;
        fecName?: string;
        fer?: number;
        goodsAmount?: number;
        hasAccounting?: boolean;
        hostIP?: string;
        hostName?: string;
        isExcelRecord?: boolean;
        parentPaymentDocumentId?: number;
        parentPaymentDocumentInvoiceNumber?: string;
        paymentDocumentId?: number;
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        projectBranchId?: number;
        returnInvoicee?: string;
        returnInvoiceeAddress?: string;
        returnInvoiceeIdentity?: string;
        returnInvoiceOrganizer?: string;
        returnInvoiceRecordType?: number;
        serviceOwner?: string;
        serviceOwnerIdentity?: string;
        systemDate?: Date;
        to?: string;
        tranBranchName?: string;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vatAmount?: number;
        vendorId?: number;
    }
    interface PaymentDocumentExcelContract extends BOA.Common.Types.ContractBase {
        errorDesc?: string;
        paymentDocumentExcelList?: BOA.Types.Kernel.FundUtilization.PaymentDocumentContract[];
        projectPaymentDocumentExcelList?: BOA.Types.Kernel.FundUtilization.ProjectPaymentDocumentContract[];
    }
    interface PaymentDocumentInfoContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        canAccounting?: boolean;
        description?: string;
        estateContract?: BOA.Types.Kernel.FundUtilization.PaymentDocumentRealEstateInfoContract;
        expenseDetailAmount?: number;
        expenseDetailType?: number;
        goodNewCost?: number;
        goodsDefinition?: number;
        goodsDefinitionDesc?: string;
        goodsUsageStatus?: number;
        gTIP?: string;
        hasAccounting?: boolean;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isTemp?: boolean;
        paymentDocumentId?: number;
        paymentDocumentInfoId?: number;
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        projectBranchId?: number;
        quantity?: number;
        recordDetailDescription?: string;
        recordDetailType?: number;
        recordType?: number;
        recordTypeDesc?: string;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        taxPeriod?: number;
        totalAmount?: number;
        unitPrice?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vATAmount?: number;
        vATRate?: number;
        vehicleContract?: BOA.Types.Kernel.FundUtilization.PaymentDocumentVehicleInfoContract;
    }
    interface PaymentDocumentRealEstateInfoContract extends BOA.Common.Types.ContractBase {
        area?: number;
        block?: string;
        buildingBlock?: string;
        city?: string;
        country?: number;
        county?: string;
        district?: string;
        estateType?: number;
        hostIP?: string;
        hostName?: string;
        independentSection?: number;
        layout?: string;
        parcel?: string;
        paymentDocumentInfoId?: number;
        paymentDocumentRealEstateInfoId?: number;
        shareNumerator?: string;
        site?: string;
        street?: string;
        systemDate?: Date;
        township?: string;
        transferStatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        village?: string;
    }
    interface PaymentDocumentVehicleInfoContract extends BOA.Common.Types.ContractBase {
        asbisRegistrationReferenceNumber?: string;
        brand?: string;
        certificateNumber?: string;
        chassisNumber?: string;
        color?: string;
        cylinderVolume?: string;
        deadWeightTon?: number;
        dependentHarbour?: string;
        engineNumber?: string;
        fuelType?: string;
        grosTon?: number;
        hostIP?: string;
        hostName?: string;
        identityTaxNumber?: string;
        industrialVehicleTypeName?: string;
        inquiryResponse?: string;
        licensePlate?: string;
        manufactureDate?: Date;
        model?: string;
        modelNo?: string;
        modelYear?: number;
        name?: string;
        ownerName?: string;
        paymentDocumentInfoId?: number;
        paymentDocumentVehicleInfoId?: number;
        planeClass?: string;
        registrationDate?: Date;
        registrationNo?: string;
        registrationNumber?: string;
        registrationSerialNumber?: string;
        riskAddress?: string;
        serialNo?: string;
        signalLetters?: string;
        systemDate?: Date;
        transferStatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usagePurpose?: string;
        usageType?: string;
        usefulLoad?: number;
        usefulLoadUnit?: number;
        userName?: string;
        vehicleClass?: string;
        vehicleType?: string;
    }
    interface PaymentInfoCommonContract extends BOA.Common.Types.ContractBase {
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        proposal?: BOA.Types.Kernel.FundUtilization.ProposalContract;
    }
    interface PaymentListContract extends BOA.Common.Types.ContractBase {
        accBusinessKey?: number;
        accountNumber?: number;
        accountSuffix?: number;
        accTranDescription?: string;
        accTranRef?: string;
        amount?: number;
        branchCode?: number;
        branchName?: string;
        businessKey?: number;
        controlInfoId?: number;
        countryName?: string;
        customerClassName?: string;
        customerName?: string;
        customerPaymentAmount?: number;
        debtAmount?: number;
        debtAmountCorrespondTL?: number;
        debtFECCode?: string;
        demandAmount?: number;
        demandAmountCorrespond?: number;
        demandFECCode?: string;
        differentDays?: number;
        exchangeReference?: string;
        foreignTransferTypeName?: string;
        goodsorServiceTypeName?: string;
        importLCExpireDate?: Date;
        incoTerms?: string;
        insuredBy?: string;
        isConfirmed?: string;
        latestShippmentDate?: Date;
        operationDate?: Date;
        operationLocation?: string;
        operationUser?: string;
        orderDelegitionSystemDate?: Date;
        paymentDate?: Date;
        paymentId?: number;
        paymentOperationDate?: Date;
        paymentPlace?: number;
        paymentPlaceName?: string;
        paymentState?: string;
        paymentTypeName?: string;
        personTypeName?: string;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectBeginDate?: Date;
        projectId?: number;
        projectPaymentId?: number;
        projectStatus?: number;
        projectStatusName?: string;
        reference?: string;
        reginalOffice?: string;
        selectedIncentiveState?: string;
        state?: number;
        stateName?: string;
        systemDate?: Date;
        tolerance?: string;
        transactionType?: number;
        transactionTypeName?: string;
        transferType?: number;
        transferTypeName?: string;
        transTypeName?: string;
        updateUserName?: string;
        userName?: string;
        vendorAccountNumber?: number;
        vendorNameOrTitle?: string;
        wFInstanceId?: number;
    }
    interface PaymentParameterContract extends BOA.Common.Types.ContractBase {
        criterionPersonType?: number;
        customerClassId?: number;
        debtFEC?: number;
        demandFEC?: number;
        exchangeReference?: string;
        goodsServices?: number;
        incoTerms?: number;
        insuredBy?: number;
        isConfirmed?: number;
        maxAmount?: number;
        maxImportLCExpireDate?: Date;
        maxLatestShipmentDate?: Date;
        maxProjectLoginDate?: Date;
        maxTranDate?: Date;
        minAmount?: number;
        minImportLCExpireDate?: Date;
        minLatestShipmentDate?: Date;
        minProjectLoginDate?: Date;
        minTranDate?: Date;
        operationLocation?: number;
        paymentDetailType?: number;
        paymentId?: number;
        paymentPlace?: number;
        paymentType?: number;
        product?: string;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectId?: number;
        projectStatus?: number;
        regionalOffice?: number;
        selectedBeneficiaryCountry?: number;
        selectedIncentiveState?: number;
        selectedOperationUserList?: number[];
        selectedProjectStatusList?: string[];
        state?: number;
        toleranceRate?: number;
        transactionType?: number;
        transferDetailType?: number;
        transferType?: number;
        vendorIdentityNumber?: string;
        vendorNameOrTitle?: string;
    }
    interface PersonalPricingAuthorizationTargetContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        authorizationAnnualRate?: number;
        authorizationMonthlyRate?: number;
        authorizationPoint?: number;
        customerClassName?: string;
        customerClassParamCode?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isEarlyClosure?: number;
        isTargetControl?: number;
        isTemp?: boolean;
        maturity?: number;
        maturityDescription?: string;
        maxAuthorizationAnnualRate?: number;
        maxAuthorizationMonthlyRate?: number;
        maxAuthorizationPoint?: number;
        parentProductNodes?: string;
        personalPricingId?: number;
        productCode?: string;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        targetAnnualRate?: number;
        targetMonthlyRate?: number;
        targetPoint?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        workgroupName?: string;
    }
    interface PersonalPricingGeneralContract extends BOA.Common.Types.ContractBase {
        annualRate?: number;
        approvedDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        ceilingRatePricingChangeType?: number;
        ceilingRatePricingMethodType?: number;
        customerClassName?: string;
        customerClassParamCode?: number;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isEarlyClosure?: number;
        isTemp?: boolean;
        maturity?: number;
        maturityDescription?: string;
        monthlyCeilingRate?: number;
        monthlyRate?: number;
        parentProductNodes?: string;
        personalPricingId?: number;
        productCode?: string;
        ratePricingChangeType?: number;
        ratePricingMethodType?: number;
        resourceCode?: string;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        yearlyCeilingRate?: number;
    }
    interface PersonelContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        personnelId?: number;
        personnelName?: string;
    }
    interface PersonnelHistoryContract extends BOA.Common.Types.ContractBase {
        adiSoyadi?: string;
        bas_Tarih?: Date;
        bit_Tarih?: Date;
        bolge?: string;
        bolgeKodu?: number;
        personType?: number;
        sicilNo?: number;
        sube?: string;
        subeAcilisTarihi?: Date;
        subeKodu?: number;
        unvanBaslangicTarihi?: Date;
        unvani?: string;
    }
    interface PPCommon {
        callCenterDelegationPositiveStatus?: string;
        callCenterNegativeNotificationCode?: string;
        callCenterPositiveNotificationCode?: string;
        cancelPaymentByPOSStatusNotificationCode?: string;
        paymentEmailNotificationCode?: string;
        paymentSMSNotificationCode?: string;
        pOSErrorActionReasonCode?: string;
        projectPaymentInfo?: string;
        stateMap?: any;
    }
    interface PPRCommon {
    }
    interface PreciousMetalSupportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        allocationCashWithHoldRate?: number;
        averageMaturity?: number;
        branchId?: number;
        branchName?: string;
        cashWithHoldAmount?: number;
        cashWithHoldRate?: number;
        channelId?: number;
        channelName?: string;
        controlId?: number;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        currentAccountSuffix?: number;
        currentBalance?: number;
        currentBranchId?: number;
        currentWithHoldRate?: number;
        customerName?: string;
        deliveryDate?: Date;
        deliveryPlace?: number;
        deliveryPlaceName?: string;
        effectOnDecision?: number;
        estimatedDeliveryDate?: Date;
        extendedInstallmentList?: BOA.Types.Kernel.FundUtilization.PreciousMetalSupportInstallmentContract[];
        extensionCashWithHoldRate?: number;
        firstInstallmentDate?: Date;
        fundingAmount?: number;
        fundingAmountCorrespond?: number;
        fundingFEC?: number;
        fundingFECCode?: string;
        fundingFER?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        installmentCount?: number;
        installmentList?: BOA.Types.Kernel.FundUtilization.PreciousMetalSupportInstallmentContract[];
        isMaturityExtended?: boolean;
        maxInstallmentCount?: number;
        maxTranDate?: Date;
        minInstallmentCount?: number;
        minTranDate?: Date;
        parentId?: number;
        period?: number;
        periodCount?: number;
        personType?: number;
        personTypeName?: string;
        portfolioClass?: number;
        portfolioClassName?: string;
        preciousMetalSupportList?: BOA.Types.Kernel.FundUtilization.PreciousMetalSupportWithholdingFecTypeContract[];
        preciousMetalSupportWithholdingFecTypeId?: number;
        productCode?: string;
        productName?: string;
        proposalMaturityDate?: Date;
        recomendedCashWithHoldRate?: number;
        recomendedInstallmentCount?: number;
        restartFlow?: boolean;
        selectedStatusList?: number[];
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableBalance?: number;
        userCashWithHoldRate?: number;
        userFullName?: string;
        userName?: string;
        wFInstanceId?: number;
        withHoldAccountDetailList?: BOA.Types.Kernel.FundUtilization.PreciousMetalSupportWithholdingFecTypeContract[];
        withHoldAccountSuffix?: number;
        withHoldFEC?: number;
        withHoldFECCode?: string;
        withHoldFECType?: number;
        withholdingId?: number;
    }
    interface PreciousMetalSupportFERContract extends BOA.Common.Types.ContractBase {
        baseFEC?: number;
        fec?: number;
        fer?: number;
    }
    interface PreciousMetalSupportInstallmentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        id?: number;
        isMaturityExtended?: boolean;
        isPaid?: boolean;
        maturityDate?: Date;
        orderNumber?: number;
        remainingPrincipalAmount?: number;
        remainingWithHoldAmount?: number;
        removingWithHoldAmount?: number;
        supportId?: number;
    }
    interface PreciousMetalSupportMailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        customerName?: string;
        fecCode?: string;
        id?: number;
        installmentCount?: number;
        maturityDate?: Date;
        orderNumber?: number;
        productName?: string;
    }
    interface PreciousMetalSupportParameter extends BOA.Common.Types.ContractBase {
        accountProductTypeList?: any;
        debtFECFilterIdList?: number[];
        fecFilterIdList?: number[];
        fecGroupList?: number[];
        fecProductList?: any;
        tLCashWithHoldRate?: number;
        yPCashWithHoldRate?: number;
    }
    interface PreciousMetalSupportTranContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        status?: number;
        statusName?: string;
        supportId?: number;
        systemDate?: Date;
        tranId?: number;
        userName?: string;
        wFInstanceId?: number;
    }
    interface PreciousMetalSupportWithholdingFecTypeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        allocationCashWithHoldRate?: number;
        averageMaturity?: number;
        branchId?: number;
        branchName?: string;
        cashWithHoldAmount?: number;
        cashWithHoldRate?: number;
        channelId?: number;
        channelName?: string;
        collateralId?: number;
        controlId?: number;
        controlInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        currentAccountSuffix?: number;
        currentBalance?: number;
        currentBranchId?: number;
        currentWithHoldRate?: number;
        customerName?: string;
        deliveryDate?: Date;
        deliveryPlace?: number;
        deliveryPlaceName?: string;
        effectOnDecision?: number;
        estimatedDeliveryDate?: Date;
        extendedInstallmentList?: BOA.Types.Kernel.FundUtilization.PreciousMetalSupportInstallmentContract[];
        extensionCashWithHoldRate?: number;
        firstInstallmentDate?: Date;
        fundingAmount?: number;
        fundingAmountCorrespond?: number;
        fundingFEC?: number;
        fundingFECCode?: string;
        fundingFER?: number;
        hostIP?: string;
        hostName?: string;
        id?: number;
        installmentCount?: number;
        installmentList?: BOA.Types.Kernel.FundUtilization.PreciousMetalSupportInstallmentContract[];
        isMaturityExtended?: boolean;
        maxInstallmentCount?: number;
        maxTranDate?: Date;
        minInstallmentCount?: number;
        minTranDate?: Date;
        parentId?: number;
        period?: number;
        periodCount?: number;
        personType?: number;
        personTypeName?: string;
        portfolioClass?: number;
        portfolioClassName?: string;
        preciousMetalSupportWithholdingFecTypeId?: number;
        productCode?: string;
        productName?: string;
        proposalMaturityDate?: Date;
        recomendedCashWithHoldRate?: number;
        recomendedInstallmentCount?: number;
        selectedStatusList?: number[];
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableBalance?: number;
        userCashWithHoldAmount?: number;
        userCashWithHoldRate?: number;
        userFullName?: string;
        userName?: string;
        wFInstanceId?: number;
        withHoldAccountSuffix?: number;
        withHoldFEC?: number;
        withHoldFECCode?: string;
        withHoldFECType?: number;
        withholdingId?: number;
    }
    interface PricingCommon {
    }
    interface PricingInfoContract extends BOA.Common.Types.ContractBase {
        authorizationPoint?: number;
        isTargetControl?: number;
        listPriceRate?: number;
        maxAuthorizationPoint?: number;
        realizedProfitRate?: number;
        regionAuthorizationPoint?: number;
        targetProfitRate?: number;
    }
    interface ProfitShareSupportContract extends BOA.Common.Types.ContractBase {
        creditAmount?: number;
        creditUsageDate?: Date;
        customerName?: string;
        fecCode?: string;
        incentiveDocumentCount?: string;
        incentiveDocumentDate?: Date;
        installmentAmount?: number;
        installmentBalance?: number;
        maturityDate?: Date;
        paidTotalProfitRate?: number;
        paidTotalProfitRateFromMinistryEconomy?: number;
        paymentDate?: Date;
        principal?: number;
        profitRate?: number;
        projectAgreementType?: number;
        segmentNumber?: number;
        taxNumber?: string;
        taxOffice?: string;
    }
    interface Project360Contract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        advancePaymentAmount?: number;
        advancePaymentRate?: number;
        advancePaymentType?: number;
        agreementType?: number;
        agreementTypeDesc?: string;
        annualProfitRate?: number;
        automaticPriceRate?: number;
        averageMaturityCommissionRate?: number;
        averageMaturityDate?: Date;
        bITTRate?: number;
        campaignDetailId?: number;
        campaignName?: string;
        commissionRate?: number;
        confirmDate?: Date;
        debtAmount?: number;
        debtFEC?: number;
        debtFECName?: string;
        debtFECTypeDesc?: string;
        debtFER?: number;
        delayStatus?: string;
        franchiserId?: number;
        fundingAmount?: number;
        fundingAmountTL?: number;
        fundingFEC?: number;
        fundingFECName?: string;
        fundingFER?: number;
        fundPool?: number;
        fundPoolDesc?: string;
        isLeasing?: string;
        isLifeInsurance?: string;
        isRevise?: boolean;
        listPriceRate?: number;
        monthlyProfitRate?: number;
        operationLocation?: number;
        operationLocationDesc?: string;
        paymentDate?: Date;
        personType?: number;
        personTypeDesc?: string;
        portfolioClass?: number;
        portfolioClassDesc?: string;
        productCode?: string;
        productName?: string;
        proformaInvoiceAmount?: number;
        projectId?: number;
        rUSFRate?: number;
        totalImportCost?: number;
        vATRate?: number;
    }
    interface ProjectAccountingForBahrainRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        bahrainAccountNumber?: number;
        bahrainAccountSuffix?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.FundUtilization.ProjectPaymentProcessContract;
        fXJournalDataForDebit?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForDemand?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForPayment?: BOA.Types.Kernel.FX.FXJournalContract;
    }
    interface ProjectAccountingPropertiesContract extends BOA.Common.Types.ContractBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        businessKey?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        customerName?: string;
        fXJournalDataForDebit?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForDemand?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForPayment?: BOA.Types.Kernel.FX.FXJournalContract;
        hasCommission?: boolean;
        resourceCode?: string;
        tranBranchId?: number;
        tranDate?: Date;
    }
    interface ProjectAccountingReconciliationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        bITTAmount?: number;
        bITTBalance?: number;
        isThereDifference?: number;
        principalAmount?: number;
        principalBalance?: number;
        profitAmount?: number;
        profitBalance?: number;
        rUSFAmount?: number;
        rUSFBalance?: number;
        vATAmount?: number;
        vATBalance?: number;
    }
    interface ProjectAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.FundUtilization.ProjectPaymentProcessContract;
        fXJournalDataForDebit?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForDemand?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForPayment?: BOA.Types.Kernel.FX.FXJournalContract;
    }
    interface ProjectAgreementsContract extends BOA.Common.Types.ContractBase {
        choose?: boolean;
        name?: string;
        projectAgreementId?: number;
    }
    interface ProjectCallCenterDelegateContract extends BOA.Common.Types.ContractBase {
        approveDate?: Date;
        customerId?: number;
        result?: number;
        resultDescription?: string;
        stateDescription?: string;
    }
    interface ProjectCallHistoryContract extends BOA.Common.Types.ContractBase {
        callDuration?: number;
        calledNo?: string;
        callerNo?: string;
        callId?: number;
        callTime?: Date;
        callType?: string;
        hostIP?: string;
        hostName?: string;
        isWarningCall?: boolean;
        projectId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectClosingInfoForPenaltyContract extends BOA.Common.Types.ContractBase {
        percentageOfReceivedDocument?: number;
        totalDocumentAmountCorrespond?: number;
        totalPaymentAmountCorrespond?: number;
        totalPrincipalAmount?: number;
        totalProfitAmount?: number;
    }
    interface ProjectCollateralRelationContract extends BOA.Types.Kernel.FundUtilization.ProjectContract {
        collateralAmount?: number;
        collateralAmountOld?: number;
        collateralDate?: Date;
        collateralDefinitionId?: number;
        collateralId?: number;
        collateralName?: string;
        description?: string;
        divitInstanceId?: string;
        expiryDate?: Date;
        fec?: number;
        fecCode?: string;
        fecCodeOld?: string;
        fecOld?: number;
        hasOPMApproval?: boolean;
        hasRelation?: boolean;
        initialCollateralAmount?: number;
        initialFEC?: number;
        initialFECCode?: string;
        isActive?: boolean;
        isCollateralDataToBeShown?: boolean;
        isFromBranch?: boolean;
        projectCollateralRelationId?: number;
        state?: number;
        stateName?: string;
        usableAmountUSD?: number;
    }
    interface ProjectCollectionDetailMContract extends BOA.Common.Types.ContractBase {
        collectionAmount?: number;
        collectionDate?: Date;
        collectionStatus?: number;
        collectionStatusDesc?: string;
        installmentAmount?: number;
        installmentCount?: number;
        lastInstallmentAmount?: number;
        lastInstallmentDate?: Date;
        lastInstallmentOrderNumber?: number;
        maturityDate?: Date;
        orderNumber?: number;
        remainingAmount?: number;
        totalAmount?: number;
        totalCollectionAmount?: number;
        totalRemainingAmount?: number;
    }
    interface ProjectConfirmContract extends BOA.Common.Types.ContractBase {
        reconciliation?: BOA.Types.Kernel.FundUtilization.ProjectAccountingReconciliationContract;
        returnFlag?: boolean;
    }
    interface ProjectConfirmingInfoContract extends BOA.Common.Types.ContractBase {
        averagePaymentDate?: Date;
        averagePaymentFER?: number;
        debtFer?: number;
        fundingAmount?: number;
        fundingFer?: number;
        leasingAdvanceAmount?: number;
        totalImportCost?: number;
        totalPaymentAmount?: number;
        totalPaymentAmountTL?: number;
    }
    interface ProjectConfirmingNotificationContract extends BOA.Common.Types.ContractBase {
        cC?: string;
        emailBody?: string;
        emailSubject?: string;
        from?: string;
        gsmNumber?: string;
        query?: string;
        smsBody?: string;
        templateId?: number;
        to?: string;
    }
    interface ProjectContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        advance?: number;
        advanceClosingDate?: Date;
        advanceCollateralClosingDate?: Date;
        advanceCollateralClosingDateIsNull?: boolean;
        advancePaymentAmount?: number;
        advancePaymentCollectionDate?: Date;
        advancePaymentFEC?: number;
        advancePaymentRate?: number;
        advancePaymentType?: number;
        agreementType?: number;
        agreementTypeName?: string;
        allotmentProductDetailGroup?: string;
        allotmentProductMainGroup?: string;
        allotmentProductSubGroup?: string;
        averagePaymentDate?: Date;
        branchId?: number;
        branchName?: string;
        campaignDetailId?: number;
        campaignSellerAccountNumber?: number;
        channelId?: number;
        channelName?: string;
        childProjectId?: number;
        closingType?: number;
        collateralCopmletionDate?: Date;
        collateralRequestType?: number;
        collateralType?: number;
        collateralTypeName?: string;
        commitmentDate?: Date;
        controlRenounceForCampaignDipProject?: boolean;
        creditRiskGroupId?: number;
        criterionCustomerName?: string;
        criterionHasCampaign?: number;
        criterionIsCommitment?: number;
        criterionIsEarlyClosure?: number;
        criterionPersonType?: number;
        criterionProjectId?: number;
        criterionProposalId?: number;
        criterionSaleNotification?: number;
        customerCitizenType?: number;
        customerClassCode?: string;
        customerClassId?: number;
        customerClassName?: string;
        customerName?: string;
        customerNewClassification?: number;
        customerOldClassification?: number;
        customsDeclaration?: number;
        customTakeOver?: boolean;
        debtFEC?: number;
        debtFecBusinessKey?: number;
        debtFECCode?: string;
        debtFECNullable?: number;
        debtFECType?: number;
        debtFECTypeName?: string;
        debtFECTypeShort?: number;
        debtFER?: number;
        demandAmount?: number;
        divitId?: string;
        documentedAmount?: number;
        documentType?: string;
        estateInfoList?: BOA.Types.Kernel.FundUtilization.ProjectEstateInfoContract[];
        exemptionFinishDate?: Date;
        extensionInfo?: BOA.Types.Kernel.FundUtilization.ProposalAndProject.ProposalAndProjectExtensionInfoContract;
        financingNeedsInfoList?: BOA.Types.Kernel.FundUtilization.ProjectFinancingNeedsInfoContract[];
        firstInstallmentDate?: Date;
        flowId?: string;
        franchiserAccountNumber?: number;
        franchiserId?: number;
        fundingAmount?: number;
        fundingAmountCorrespond?: number;
        fundingAmountCorrespondFEC?: number;
        fundingAmountDebitCorrespond?: number;
        fundingFEC?: number;
        fundingFecBusinessKey?: number;
        fundingFECCode?: string;
        fundingFER?: number;
        fundingFXRateTrandate?: Date;
        fundPool?: number;
        fXJournalDataForDebit?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForFunding?: BOA.Types.Kernel.FX.FXJournalContract;
        fXStatus?: number;
        goodsOrServiceType?: number;
        goodsOrServiceTypeName?: string;
        hasCampaign?: boolean;
        hasDebtSpesificExchangeRate?: boolean;
        hostIP?: string;
        hostName?: string;
        importRateMargin?: number;
        incentiveId?: number;
        incentiveType?: string;
        instanceId?: string;
        insuranceCostAmount?: number;
        insuranceForm?: string;
        insuranceType?: string;
        isAdvanceAvailableWithCollateral?: number;
        isApproveDispacthWithoutWitholding?: boolean;
        isBahreynProposal?: boolean;
        isCommitment?: boolean;
        isCorAccountActive?: boolean;
        isEarlyClosure?: boolean;
        isExpertReportMandatory?: number;
        isFirstPayment?: boolean;
        isLifeInsurance?: number;
        isMortgage?: number;
        isPaymentDateApproveRequired?: boolean;
        isPrivateCustomer?: boolean;
        isProjectFinance?: number;
        isRevise?: boolean;
        isTranFXRateFixedForDebit?: boolean;
        isWarningRelatedProject?: string;
        lastPaymentDate?: Date;
        leasingGoodsOrServiceGroup?: number;
        leasingPurchasingSalesVATRate?: number;
        leasingPurchasingVATAmount?: number;
        leasingPurchasingVATRate?: number;
        leasingTransferDate?: Date;
        leasingTransferTime?: number;
        maxAdvanceClosingDate?: Date;
        maxCollateralCopmletionDate?: Date;
        maxOperationAssignDate?: Date;
        maxOperationForwardDate?: Date;
        maxProjectDate?: Date;
        minAdvanceClosingDate?: Date;
        minCollateralCopmletionDate?: Date;
        minOperationAssignDate?: Date;
        minOperationForwardDate?: Date;
        minProjectDate?: Date;
        mortgageType?: number;
        name?: string;
        notIncludedCollateralRiskBalance?: boolean;
        notificationEmail?: string;
        notificationMobilePhoneNumber?: string;
        notificationTypeId?: number;
        operationAssignDate?: Date;
        operationForwardDate?: Date;
        operationLocation?: number;
        operationLocationName?: string;
        operationProcessDate?: Date;
        operationUserId?: number;
        operationUserMail?: string;
        operationUserName?: string;
        operationUserSuperVisorId?: number;
        orderDelagationAmountStatus?: number;
        orderDelagationApprovalStatus?: number;
        ownerUser?: string;
        paramDescription?: string;
        parentProjectId?: number;
        payBackPlan?: BOA.Types.Kernel.FundUtilization.PayBackPlanContract;
        paymentDate?: Date;
        paymentInfoList?: BOA.Types.Kernel.FundUtilization.ProposalPaymentInfoContract[];
        paymentType?: number;
        paymentTypeName?: string;
        personType?: number;
        personTypeName?: string;
        portfolioClass?: number;
        portfolioClassName?: string;
        portfolioCode?: string;
        portfolioId?: number;
        portfolioOwnerMail?: string;
        privateBankingCustomerId?: number;
        productCode?: string;
        productName?: string;
        proformaInvoiceAmount?: number;
        projectCallList?: BOA.Types.Kernel.FundUtilization.ProjectCallHistoryContract;
        projectCollateralStatus?: number;
        projectDate?: Date;
        projectFinanceId?: number;
        projectId?: number;
        projectPaymentAmountStatus?: number;
        projectPaymentApprovalStatus?: number;
        projectPaymentDocumentStatus?: number;
        proposalDate?: Date;
        proposalId?: number;
        regionalOffice?: number;
        regionalOfficeName?: string;
        registryDate?: Date;
        relatedCommitmentDate?: Date;
        relatedProjectAccountSuffix?: number;
        relatedProjectAverageMaturityDayCount?: number;
        relatedProjectFECType?: number;
        relatedProjectMonthlyProfitRate?: number;
        relatedProjectSelect?: number;
        relationshipGroupId?: number;
        remainingFundingAmount?: number;
        resourceCode?: string;
        saleNotification?: boolean;
        savedUser?: string;
        selectedCustomerId?: number;
        selectedForeignPaymentTypeList?: string[];
        selectedImportProject?: number;
        selectedImportProjectText?: string;
        selectedIncentiveDocumentTypeList?: string[];
        selectedInsuranceFormTypeList?: string[];
        selectedInsuranceTypeList?: string[];
        selectedOperationUserList?: number[];
        selectedProjectStatusList?: string[];
        shippingDate?: Date;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        totalImportCost?: number;
        tranDate?: Date;
        tranList?: BOA.Types.Kernel.FundUtilization.ProjectTranContract[];
        transactionDate?: Date;
        transferType?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usedAmount?: number;
        userCode?: string;
        userName?: string;
        vehicleInfoList?: BOA.Types.Kernel.FundUtilization.ProjectVehicleInfoContract[];
        vIFAccountSuffix?: number;
        whoSatisfyFixedAssetInsurance?: number;
        whoSatisfyPurchasingVAT?: number;
        xtmUserEmail?: string;
    }
    interface ProjectCustomerTranferRequest extends BOA.Common.Types.TransactionRequestBase {
        agreementType?: number;
        dataContract?: BOA.Types.Kernel.FundUtilization.ProjectCustomerTransferContract;
        debtFEC?: number;
        debtFECType?: number;
        debtFER?: number;
        isLeasing?: boolean;
        newAccountBranchId?: number;
        newAccountMainODRLedgerId?: number;
        newAccountNumber?: number;
        newAccountOverdueLedgerIdFX?: number;
        newAccountOverdueLedgerIdTL?: number;
        newAccountSuffix?: number;
        newBITTAmount?: number;
        newCustomerAccountStatus?: number;
        newProfitAmount?: number;
        newRUSFAmount?: number;
        newVATAmount?: number;
        oldAccountBranchId?: number;
        oldAccountMainODRLedgerId?: number;
        oldAccountNumber?: number;
        oldAccountOverdueLedgerIdFX?: number;
        oldAccountOverdueLedgerIdTL?: number;
        oldAccountSuffix?: number;
        oldCustomerAccountStatus?: number;
        operationLocation?: number;
        parentProject?: BOA.Types.Kernel.FundUtilization.ProjectContract;
    }
    interface ProjectCustomerTransferContract extends BOA.Common.Types.ContractBase {
        accountStatusOverdue?: number;
        accrualBITT?: number;
        accrualBITTTL?: number;
        accrualExcDiffBITT?: number;
        accrualExcDiffRUSF?: number;
        accrualPrincipalAmount?: number;
        accrualPrincipalAmountTL?: number;
        accrualProfitAmount?: number;
        accrualProfitAmountTL?: number;
        accrualRUSF?: number;
        accrualRUSFTL?: number;
        accrualTotalAmount?: number;
        accrualTotalAmountTL?: number;
        accrualVAT?: number;
        accrualVATTL?: number;
        averageAccrualFer?: number;
        averageMaturityDifference?: number;
        collectedAccrualFerDifferenceTax?: number;
        description?: string;
        fixedPaymentFER?: number;
        hostName?: string;
        lossAmount?: number;
        lossRate?: number;
        parentProjectAvgMaturityDateOfRemaining?: Date;
        parentProjectBITTRate?: number;
        parentProjectId?: number;
        parentProjectRUSFRate?: number;
        parentProjectStatusBeforeRevise?: number;
        parentProjectTotalRemainingAmount?: number;
        parentProjectTotalRemainingBITT?: number;
        parentProjectTotalRemainingPrincipalAmount?: number;
        parentProjectTotalRemainingProfitAmount?: number;
        parentProjectTotalRemainingRUSF?: number;
        parentProjectTotalRemainingVAT?: number;
        parentProjectVATRate?: number;
        projectId?: number;
        projectPayBackPlanId?: number;
        projectReviseInfoId?: number;
        rediscountAmountTRY?: number;
        reviseProjectCalculationCorrespondentAmount?: number;
        reviseReasonId?: number;
        surPlusProfitAmountToTransfer?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectCustomsDeclarationContract extends BOA.Common.Types.ContractBase {
        customsDeclarationId?: number;
        hostIP?: string;
        hostName?: string;
        projectCustomsDeclarationId?: number;
        projectId?: number;
        projectPaymentDocumentId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usedAmount?: number;
        userName?: string;
    }
    interface ProjectDeclarationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSufix?: number;
        customsDeclarationId?: number;
        customsHeadOfficeId?: number;
        customsHeadOfficeName?: string;
        customsOfficeId?: number;
        customsOfficeName?: string;
        declarationAmount?: number;
        declarationDate?: Date;
        declarationNumber?: string;
        declarationType?: number;
        declarationTypeName?: string;
        fec?: number;
        fecDesc?: string;
        hostIP?: string;
        hostName?: string;
        projectCustomsDeclarationId?: number;
        projectId?: number;
        projectPaymentDocumentId?: number;
        projectRemainingAmount?: number;
        projectSystemDate?: Date;
        projectUpdateSystemDate?: Date;
        projectUpdateUserName?: string;
        projectUserName?: string;
        releaseDate?: Date;
        remainingAmount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usedAmount?: number;
        usedAmountTotal?: number;
        userName?: string;
        vendorName?: string;
    }
    interface ProjectDocumentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSufix?: number;
        branchName?: string;
        buildingBlock?: string;
        businessKey?: number;
        cityName?: string;
        county?: string;
        customerName?: string;
        delegationBeginDate?: Date;
        delegationDate?: Date;
        dispatchDate?: Date;
        documentAmount?: number;
        documentDate?: Date;
        documentOrderNumber?: string;
        documentOrganizer?: string;
        documentSerialNumber?: string;
        documentSummaryDescription?: string;
        documentType?: number;
        documentTypeName?: string;
        fec?: number;
        fecDesc?: string;
        fer?: number;
        hasDocumentAccounting?: boolean;
        hostIP?: string;
        hostName?: string;
        independentSection?: number;
        itemSelected?: boolean;
        layout?: string;
        lisencePlate?: string;
        parcel?: string;
        paymentDocumentId?: number;
        pojectPaymentDocumentId?: number;
        productName?: string;
        projectAgreementType?: number;
        projectAmount?: number;
        projectId?: number;
        projectRemainingAmount?: number;
        projectSystemDate?: Date;
        projectUpdateSystemDate?: Date;
        projectUpdateUserName?: string;
        projectUserName?: string;
        reginalOffice?: string;
        remainingAmount?: number;
        serviceOwner?: string;
        serviceOwnerIdentity?: string;
        systemDate?: Date;
        taxPeriod?: string;
        transferStatus?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usedAmount?: number;
        usedAmountTotal?: number;
        userName?: string;
        vendorId?: number;
        vendorName?: string;
        vendorOrderAmount?: number;
    }
    interface ProjectDocumentControlContract extends BOA.Common.Types.ContractBase {
        controlCriteriaType?: number;
        controlDescription?: string;
        controlScreenType?: number;
        controlSuitable?: number;
        fecId?: number;
        hostIP?: string;
        hostName?: string;
        projectDocumentControlId?: number;
        projectId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectDocumentVendorExceptionContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        id?: number;
        maxDate?: Date;
        minDate?: Date;
        projectId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface ProjectEmailHistoryContract extends BOA.Common.Types.ContractBase {
        customerAccountNumber?: number;
        eMailCc?: string;
        emailId?: number;
        eMailTo?: string;
        hostIP?: string;
        hostName?: string;
        name?: string;
        notificationCode?: string;
        notificationType?: string;
        notificationTypeName?: string;
        projectId?: number;
        receiverType?: number;
        receiverTypeName?: string;
        sendDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
    }
    interface ProjectEstateInfoContract extends BOA.Common.Types.ContractBase {
        cityId?: number;
        cityName?: string;
        countyId?: number;
        countyName?: string;
        deedCode?: number;
        deedDescription?: string;
        estateType?: number;
        estateTypeName?: string;
        locationAndPosition?: string;
        projectEstateInfoId?: number;
        projectId?: number;
        salePrice?: number;
    }
    interface ProjectFaxContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        customerName?: string;
        faxFileName?: string;
        faxId?: number;
        faxNumber?: string;
        hostIP?: string;
        hostName?: string;
        projectId?: number;
        roleType?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ProjectFinancingNeedsInfoContract extends BOA.Common.Types.ContractBase {
        goodsOrServiceInfo?: string;
        projectFinancingNeedsInfoId?: number;
        projectId?: number;
        salePrice?: number;
    }
    interface ProjectForeignPaymentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        advancePaymentAmount?: number;
        advancePaymentBranchId?: number;
        advancePaymentSuffix?: number;
        agreedPaymentAmount?: number;
        agreedPaymentDate?: Date;
        beneficiaryCountryId?: number;
        branchId?: number;
        businessKey?: number;
        changeRangeUp?: number;
        channelId?: number;
        commissionSerializeId?: number;
        conditionalDelegationBeginDate?: Date;
        conditionalDelegationEndDate?: Date;
        confirmingBank?: string;
        confirmingBankName?: string;
        controlId?: number;
        debtAmount?: number;
        debtFEC?: number;
        debtFECType?: number;
        debtTransferType?: number;
        deferredPaymentAmount?: number;
        deferredPaymentDayNumber?: number;
        demandFundingAmount?: number;
        demandFundingAmountTL?: number;
        dischargePlace?: string;
        divitId?: string;
        exchangeContract?: BOA.Types.Kernel.Exchange.ExchangeContract;
        exchangeListContract?: BOA.Types.Kernel.Exchange.ExchangeListContract;
        exchangeReference?: string;
        exchangeSequenceNumber?: number;
        fXAskTransferBusinessKey?: number;
        fXAskTransferBusinessKeyForReference?: number;
        fXAskTransferTranRate?: number;
        fXProjectDebtBusinessKey?: number;
        fXProjectDebtBusinessKeyForReference?: number;
        fXProjectDebtTranRate?: number;
        fxState?: number;
        goodsDescription?: string;
        hostIP?: string;
        hostName?: string;
        importLCAdvancePaymentAmount?: number;
        importLCContract?: BOA.Types.Kernel.Exchange.ImportLCContract;
        importLCExpireDate?: Date;
        incentiveId?: number;
        incentiveType?: number;
        incoTerms?: number;
        inFreeZoneBranch?: number;
        insuredBy?: number;
        isAccounting?: number;
        isBoa?: number;
        isConfirmed?: number;
        isEOD?: boolean;
        isExchangeDispatch?: number;
        isFXReferenceForAskTransferUsed?: number;
        isFXReferenceForProjectDebtUsed?: number;
        isReturnedToSpecialist?: boolean;
        latestShipmentDate?: Date;
        leasingVendorAccountNumber?: number;
        leasingVendorAccountSuffix?: number;
        loadingPlace?: string;
        projectForeignPaymentId?: number;
        projectId?: number;
        receiverCountryId?: number;
        recordAdvancePaymentAmount?: number;
        recordDemandFundingAmount?: number;
        recordTotalAmount?: number;
        referenceState?: number;
        resourceCode?: string;
        sightPaymentAmount?: number;
        state?: number;
        suspenseAccountBalance?: number;
        systemDate?: Date;
        toleranceRate?: number;
        totaltDebtAmount?: number;
        transactionDate?: Date;
        transactionGroup?: number;
        transactionType?: number;
        transferAmount?: number;
        transferDate?: Date;
        transferDetailType?: number;
        transferFEC?: number;
        transferType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userComment?: string;
        userName?: string;
        vendorBankAccount?: string;
        vendorBankAccountId?: number;
        vendorBankCode?: string;
        vendorId?: number;
        wFInstanceId?: number;
    }
    interface ProjectForeignPaymentReturnContract extends BOA.Common.Types.ContractBase {
        avgPaymentDateWillAffect?: BOA.Types.Kernel.FundUtilization.PPRCommon.AvgPaymentDateChanges;
        businessKey?: number;
        description?: string;
        fecType?: BOA.Types.Kernel.FundUtilization.PPRCommon.FECType;
        hostIP?: string;
        hostName?: string;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectForeignPayment?: BOA.Types.Kernel.FundUtilization.ProjectForeignPaymentContract;
        projectForeignPaymentId?: number;
        projectForeignPaymentReturnId?: number;
        returnAccountBranchId?: number;
        returnAccountNumber?: number;
        returnAccountSuffix?: number;
        returnAmount?: number;
        returnAmountCorrespond?: number;
        returnAmountDebitCorrespond?: number;
        returnDate?: Date;
        returnSource?: BOA.Types.Kernel.FundUtilization.PPRCommon.ReturnSource;
        returnType?: BOA.Types.Kernel.FundUtilization.PPRCommon.ReturnType;
        state?: BOA.Types.Kernel.FundUtilization.PPRCommon.State;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ProjectInsuranceConstants {
        additionalPolicyRequestMailTemplateCode?: string;
        cancelMailTemplateCode?: string;
        convertToFreightMailTemplateCode?: string;
        divitFlowId?: string;
        divitIdFixtureElectronic?: string;
        divitIdFixtureMachine?: string;
        divitIdFixtureRealEstate?: string;
        divitIdTransportationFloating?: string;
        divitIdTransportationFreight?: string;
        docIdTalepFormu?: number;
        fixtureInsuranceFormCode?: string;
        fixtureMailTemplateCode?: string;
        floatingMailTemplateCode?: string;
        freightMailTemplateCode?: string;
        leasingInsuranceFormCode?: string;
        maxDate?: string;
        notificationMsgFixtureElectronic?: string;
        notificationMsgFixtureMachine?: string;
        notificationMsgFixtureRealEstate?: string;
        notificationMsgTransportationFloating?: string;
        notificationMsgTransportationFreight?: string;
        otherInsuranceFormCode?: string;
        projectInsuranceTransportationType?: any;
        tLFecId?: number;
    }
    interface ProjectInsuranceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        additionalPolicyNumber?: number;
        branch?: string;
        branchId?: number;
        costOfGoodsAmount?: number;
        costOfGoodsAmountBegin?: number;
        costOfGoodsAmountEnd?: number;
        costOfGoodsFecId?: number;
        customerName?: string;
        description?: string;
        dischargePlace?: string;
        divitInstanceId?: string;
        fecName?: string;
        floatingNo?: number;
        formState?: BOA.Types.Kernel.FundUtilization.ProjectInsuranceFormState;
        goodsType?: string;
        insuranceBeginDate?: Date;
        insuranceDetailType?: string;
        insuranceDetailTypeId?: number;
        insuranceEndDate?: Date;
        insuranceForm?: string;
        insuranceFormId?: number;
        insuranceType?: string;
        insuranceTypeId?: number;
        isTransshipped?: boolean;
        loadingDate?: Date;
        loadingPlace?: string;
        operationLocation?: number;
        packingDetail?: string;
        parentId?: number;
        paymentDocumentInfoId?: number;
        paymentDocumentInfoRecordType?: number;
        personId?: number;
        policyAmount?: number;
        policyRenewalNumber?: number;
        productCode?: string;
        projectAgreementType?: number;
        projectFlowId?: string;
        projectId?: number;
        projectInsuranceId?: number;
        recordingTimeBegin?: Date;
        recordingTimeEnd?: Date;
        riskAddress?: string;
        status?: string;
        statusId?: number;
        transportationList?: BOA.Types.Kernel.FundUtilization.ProjectInsuranceTransportationContract[];
        transshipmentPort?: string;
    }
    interface ProjectInsuranceTransportationContract extends BOA.Common.Types.ContractBase {
        projectInsuranceId?: number;
        transportationTypeId?: number;
        vehicleNo?: string;
        vehicleNo1?: string;
        vehicleNo2?: string;
        vehicleNo3?: string;
        vehicleNo4?: string;
    }
    interface ProjectInsuranceTransportationTypeContract extends BOA.Common.Types.ContractBase {
        transportationType?: string;
        transportationTypeId?: number;
    }
    interface ProjectLedgerChangeAccountingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        currentLedgerId?: number;
        currentRegulatoryContraLedgerId?: number;
        currentRegulatoryLedgerId?: number;
        fec?: number;
        fecType?: number;
        ledgerBalance?: number;
        newLedgerId?: number;
        newRegulatoryContraLedgerId?: number;
        newRegulatoryLedgerId?: number;
        regulatoryLedgerBalance?: number;
    }
    interface ProjectLedgerChangeAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.FundUtilization.ProjectLedgerChangeAccountingContract;
    }
    interface ProjectNoteContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        customerId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        isRevise?: boolean;
        noteAuthority?: number;
        noteAuthorityName?: string;
        noteId?: number;
        noteType?: number;
        noteTypeName?: string;
        projectId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
        vendorName?: string;
    }
    interface ProjectPaymentContract extends BOA.Common.Types.ContractBase {
        behaviourType?: BOA.Types.Kernel.FundUtilization.PPCommon.BehaviorType;
        businessKey?: number;
        comment?: string;
        commissionAmount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        controlContractInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        controlInfoId?: number;
        controlRatioInMargin?: number;
        controlRatioNoMargin?: number;
        customerPaymentAmount?: number;
        customerPaymentBranchId?: number;
        customerPaymentSuffix?: number;
        debitAmount?: number;
        debitFecBusinessKey?: number;
        debitFECBusinessKeyForReference?: number;
        debitTranRate?: number;
        delegation?: BOA.Types.Kernel.FundUtilization.OrderDelegationContract;
        demandAmount?: number;
        demandAmountCorrespond?: number;
        demandAmountCorrespondFEC?: number;
        demandFEC?: number;
        demandFecBusinessKey?: number;
        demandFECBusinessKeyForReference?: number;
        demandFECCode?: string;
        demandTranRate?: number;
        divitId?: string;
        errorDesc?: string;
        errorStatus?: number;
        exchangeDifferenceAmount?: number;
        exchangeReference?: string;
        hasCommission?: boolean;
        hostName?: string;
        isAccountingWorked?: boolean;
        isCustomerDirectTransfer?: boolean;
        isDebitFECWithReference?: boolean;
        isOrder?: boolean;
        isPaymentFECWithReference?: boolean;
        isTransferSucceed?: boolean;
        leasingVendorAccount?: BOA.Types.Kernel.FundUtilization.LeasingVendorAccountContract;
        loanCustomer?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        mainAmount?: number;
        mainAmountCorrespond?: number;
        mainFEC?: number;
        operationLocation?: number;
        operationManagerEmail?: string;
        operationUserEmail?: string;
        order?: BOA.Types.Kernel.FundUtilization.OrderDelegationContract;
        orderDelegationBeginDate?: Date;
        orderDelegationDateLabel?: string;
        orderDelegationEndDate?: Date;
        orderDelegationId?: number;
        paymentAmount?: number;
        paymentDetailType?: BOA.Types.Kernel.FundUtilization.PPCommon.PaymentDetailType;
        paymentFixAmountType?: BOA.Types.Kernel.FundUtilization.PPCommon.PaymentFixAmountType;
        paymentTranRate?: number;
        paymentType?: BOA.Types.Kernel.FundUtilization.PPCommon.PaymentType;
        posOutgoingId?: number;
        posQueryToken?: number;
        posStatus?: number;
        posStatusDescription?: string;
        previousState?: BOA.Types.Kernel.FundUtilization.PPCommon.State;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        projectId?: number;
        projectPaymentId?: number;
        projectState?: number;
        receiverAdress?: string;
        receiverBankId?: string;
        receiverBirthDate?: Date;
        receiverBranchId?: string;
        receiverCityId?: string;
        receiverFatherName?: string;
        receiverIdentity?: string;
        receiverKTBranchId?: number;
        receiverName?: string;
        receiverPhone?: string;
        sourceCode?: string;
        state?: BOA.Types.Kernel.FundUtilization.PPCommon.State;
        systemDate?: Date;
        tawarrukSuffix?: number;
        totalAmount?: number;
        totalDocumentAmount?: number;
        transferBusinessKey?: number;
        transferDate?: Date;
        transferDetailType?: BOA.Types.Kernel.FundUtilization.PPCommon.TransferDetailType;
        transferType?: BOA.Types.Kernel.FundUtilization.PPCommon.TransferType;
        transferTypeDesc?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableDocumentAmount?: number;
        usableDocumentAmountOld?: number;
        useableProjectAmount?: number;
        userName?: string;
        vendor?: BOA.Types.Kernel.FundUtilization.VendorContract;
        vendorAccount?: BOA.Types.Kernel.FundUtilization.VendorBankAccountContract;
        vendorBankAccountId?: number;
        vendorId?: number;
        wFInstanceId?: number;
        xtmUserEmail?: string;
    }
    interface ProjectPaymentDocumentContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        hostIP?: string;
        hostName?: string;
        paymentDocumentId?: number;
        projectId?: number;
        projectPaymentDocumentId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usedAmount?: number;
        userName?: string;
    }
    interface ProjectPaymentListContract extends BOA.Common.Types.ContractBase {
        amountCorrespond?: number;
        amountCorrespondCopy?: number;
        amountCorrespondFEC?: number;
        businessKey?: number;
        comment?: string;
        commissionAmount?: number;
        customerPaymentAmount?: number;
        customerPaymentSuffix?: number;
        debitAmount?: number;
        debitFecBusinessKey?: number;
        debitTranRate?: number;
        debtFER?: number;
        demandAmount?: number;
        demandAmountCopy?: number;
        demandAmountCorrespond?: number;
        demandFEC?: number;
        demandFecBusinessKey?: number;
        demandFECCode?: string;
        exchangeDifferenceAmount?: number;
        exchangeReference?: string;
        fXAskTransferBusinessKey?: number;
        fXProjectDebtBusinessKey?: number;
        hostName?: string;
        isAccountingWorked?: boolean;
        isDebitFECWithReference?: boolean;
        isPaymentFECWithReference?: boolean;
        mainAmount?: number;
        orderDelegationId?: number;
        paymentAmount?: number;
        paymentDetailType?: BOA.Types.Kernel.FundUtilization.PPCommon.PaymentDetailType;
        paymentDetailTypeName?: string;
        paymentTranRate?: number;
        paymentType?: BOA.Types.Kernel.FundUtilization.PPCommon.PaymentType;
        paymentTypeName?: string;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectId?: number;
        projectPaymentId?: number;
        projectPaymentType?: BOA.Types.Kernel.FundUtilization.CommonStatics.ProjectPaymentType;
        projectPaymentTypeName?: string;
        receiverAdress?: string;
        receiverBankId?: string;
        receiverBirthDate?: Date;
        receiverBranchId?: string;
        receiverCityId?: string;
        receiverFatherName?: string;
        receiverIdentity?: string;
        receiverKTBranchId?: number;
        receiverName?: string;
        receiverPhone?: string;
        state?: BOA.Types.Kernel.FundUtilization.PPCommon.State;
        stateName?: string;
        systemDate?: Date;
        totalAmount?: number;
        transactionType?: number;
        transactionTypeName?: string;
        transferBusinessKey?: number;
        transferDate?: Date;
        transferDetailType?: BOA.Types.Kernel.FundUtilization.PPCommon.TransferDetailType;
        transferDetailTypeName?: string;
        transferId?: number;
        transferType?: BOA.Types.Kernel.FundUtilization.PPCommon.TransferType;
        transferTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableDocumentAmount?: number;
        userName?: string;
        vendorBankAccountId?: number;
        vendorId?: number;
        vendorName?: string;
        wFInstanceId?: number;
    }
    interface ProjectPaymentPackContract extends BOA.Common.Types.ContractBase {
        customer?: BOA.Types.Kernel.Customer.CustomerContract;
        orderDelegation?: BOA.Types.Kernel.FundUtilization.OrderDelegationContract;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        proposal?: BOA.Types.Kernel.FundUtilization.ProposalContract;
    }
    interface ProjectPaymentProcessContract extends BOA.Common.Types.ContractBase {
        behaviourType?: number;
        businessKey?: number;
        comment?: string;
        commissionAmount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        controlContractInfo?: BOA.Types.Kernel.CustomerControl.ControlContract;
        controlRatioInMargin?: number;
        controlRatioNoMargin?: number;
        customerPaymentAmount?: number;
        customerPaymentBranchId?: number;
        customerPaymentSuffix?: number;
        debitAmount?: number;
        debitFecBusinessKey?: number;
        debitFECBusinessKeyForReference?: number;
        debitTranRate?: number;
        demandAmount?: number;
        demandAmountCorrespond?: number;
        demandAmountCorrespondFEC?: number;
        demandFEC?: number;
        demandFecBusinessKey?: number;
        demandFECBusinessKeyForReference?: number;
        demandFECCode?: string;
        demandTranRate?: number;
        divitId?: string;
        domestic?: string;
        errorDesc?: string;
        errorStatus?: number;
        exchangeDifferenceAmount?: number;
        exchangeReference?: string;
        hasCommission?: boolean;
        hostName?: string;
        isAccountingWorked?: boolean;
        isCustomerDirectTransfer?: boolean;
        isDebitFECWithReference?: boolean;
        isOrder?: boolean;
        isPaymentFECWithReference?: boolean;
        isTransferSucceed?: boolean;
        leasingVendorAccount?: BOA.Types.Kernel.FundUtilization.LeasingVendorAccountingContract;
        loanCustomer?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        mainAmount?: number;
        mainAmountCorrespond?: number;
        mainFEC?: number;
        operationLocation?: number;
        operationManagerEmail?: string;
        operationUserEmail?: string;
        orderDelegationBeginDate?: Date;
        orderDelegationDateLabel?: string;
        orderDelegationEndDate?: Date;
        orderDelegationId?: number;
        paymentAmount?: number;
        paymentDetailType?: number;
        paymentFixAmountType?: number;
        paymentTranRate?: number;
        paymentType?: number;
        posOutgoingId?: number;
        posQueryToken?: number;
        posStatus?: number;
        posStatusDescription?: string;
        previousState?: number;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectAccountingProperties?: BOA.Types.Kernel.FundUtilization.ProjectAccountingPropertiesContract;
        projectAccountNumber?: number;
        projectAccountSuffix?: number;
        projectId?: number;
        projectPaymentId?: number;
        projectState?: number;
        receiverAdress?: string;
        receiverBankId?: string;
        receiverBirthDate?: Date;
        receiverBranchId?: string;
        receiverCityId?: string;
        receiverFatherName?: string;
        receiverIdentity?: string;
        receiverKTBranchId?: number;
        receiverName?: string;
        receiverPhone?: string;
        sourceCode?: string;
        state?: number;
        systemDate?: Date;
        totalAmount?: number;
        transferBusinessKey?: number;
        transferDate?: Date;
        transferDetailType?: number;
        transferType?: number;
        transferTypeDesc?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableDocumentAmount?: number;
        usableDocumentAmountOld?: number;
        useableProjectAmount?: number;
        userName?: string;
        vendor?: BOA.Types.Kernel.FundUtilization.VendorAccountingContract;
        vendorBankAccountId?: number;
        vendorId?: number;
        wFInstanceId?: number;
    }
    interface ProjectPaymentReturnContract extends BOA.Common.Types.ContractBase {
        avgPaymentDateWillAffect?: BOA.Types.Kernel.FundUtilization.PPRCommon.AvgPaymentDateChanges;
        businessKey?: number;
        description?: string;
        domestic?: string;
        fecType?: BOA.Types.Kernel.FundUtilization.PPRCommon.FECType;
        hostIP?: string;
        hostName?: string;
        previousState?: BOA.Types.Kernel.FundUtilization.PPRCommon.State;
        projectPayment?: BOA.Types.Kernel.FundUtilization.ProjectPaymentContract;
        projectPaymentId?: number;
        projectPaymentReturnId?: number;
        returnAccountBranchId?: number;
        returnAccountNumber?: number;
        returnAccountSuffix?: number;
        returnAmount?: number;
        returnAmountCorrespond?: number;
        returnAmountDebitCorrespond?: number;
        returnDate?: Date;
        returnSource?: BOA.Types.Kernel.FundUtilization.PPRCommon.ReturnSource;
        returnType?: BOA.Types.Kernel.FundUtilization.PPRCommon.ReturnType;
        sourceCode?: string;
        state?: BOA.Types.Kernel.FundUtilization.PPRCommon.State;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ProjectPaymentTotalBalanceContract extends BOA.Common.Types.ContractBase {
        totalAmount?: number;
        totalDebtAmount?: number;
        totalDebtAmountCorrespondTL?: number;
    }
    interface ProjectPaymentTransactionCorrectionAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.FundUtilization.ProjectPaymentTransactionCorrectionContract;
    }
    interface ProjectPaymentTransactionCorrectionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        behaviourType?: BOA.Types.Kernel.FundUtilization.PPCommon.BehaviorType;
        branchId?: number;
        businessKey?: number;
        customerName?: string;
        debitFEC?: number;
        debitFECCode?: string;
        demandAmount?: number;
        demandFEC?: number;
        demandFECCode?: string;
        description?: string;
        fXJournalDataForDebit?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForDemand?: BOA.Types.Kernel.FX.FXJournalContract;
        fXStatus?: number;
        hostIP?: string;
        hostName?: string;
        importRateMargin?: number;
        newDebitAmount?: number;
        newDebitFECBusinessKey?: number;
        newDebitFER?: number;
        newDemandAmountCorrespond?: number;
        newDemandFECBusinessKey?: number;
        newFundingFER?: number;
        newProfitLossAmount?: number;
        oldDebitAmount?: number;
        oldDebitFECBusinessKey?: number;
        oldDebitFER?: number;
        oldDemandAmountCorrespond?: number;
        oldDemandFECBusinessKey?: number;
        oldFundingFER?: number;
        oldProfitLossAmount?: number;
        project?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectForeignPayment?: BOA.Types.Kernel.FundUtilization.ProjectForeignPaymentContract;
        projectForeignPaymentId?: number;
        projectId?: number;
        projectInternalPayment?: BOA.Types.Kernel.FundUtilization.ProjectPaymentContract;
        projectPaymentId?: number;
        projectPaymentTransactionCorrectionId?: number;
        projectPaymentType?: number;
        resourceCode?: string;
        resourceId?: number;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ProjectPenaltyPoolContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amountOfPaymentTl?: number;
        amountOfReceivedDocumentTl?: number;
        closingType?: number;
        descriptionForPenalty?: string;
        hostName?: string;
        inputDateForPenalty?: Date;
        isRejected?: boolean;
        percentageOfReceivedDocument?: number;
        principalAmountForPenalty?: number;
        profitAmountForPenalty?: number;
        projectId?: number;
        projectPenaltyPoolId?: number;
        reasonForPenalty?: number;
        state?: number;
        systemDate?: Date;
        totalPrincipalAmount?: number;
        totalProfitAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
    }
    interface ProjectPenaltyPoolListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountSuffixTotalRisk?: number;
        averageMaturityDate?: Date;
        branchId?: number;
        branchName?: string;
        customerClass?: string;
        customerName?: string;
        debtFecName?: string;
        debtFer?: number;
        descriptionForPenalty?: string;
        firstInstallmentDate?: Date;
        inputDateForPenalty?: Date;
        lastInstallmentDate?: Date;
        monthlyProfitRate?: number;
        operationLocation?: string;
        operationUser?: string;
        portfolioClassName?: string;
        portfolioOwner?: string;
        principalAmountForPenalty?: number;
        profitAmountForPenalty?: number;
        projectEntryDate?: Date;
        projectId?: number;
        projectPenaltyPoolId?: number;
        reasonForPenalty?: number;
        reasonForPenaltyDescription?: string;
        regionName?: string;
        state?: number;
        stateDescription?: string;
        systemDate?: Date;
        totalPrincipalAmount?: number;
        totalProfitAmount?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
        vendorName?: string;
    }
    interface ProjectReviseInfoContract extends BOA.Common.Types.ContractBase {
        accountStatusOverdue?: number;
        accrualBITT?: number;
        accrualBITTTL?: number;
        accrualExcDiffBITT?: number;
        accrualExcDiffRUSF?: number;
        accrualPrincipalAmount?: number;
        accrualPrincipalAmountTL?: number;
        accrualProfitAmount?: number;
        accrualProfitAmountTL?: number;
        accrualRUSF?: number;
        accrualRUSFTL?: number;
        accrualTotalAmount?: number;
        accrualTotalAmountTL?: number;
        accrualVAT?: number;
        accrualVATTL?: number;
        averageAccrualFer?: number;
        averageMaturityDifference?: number;
        collectedAccrualFerDifferenceTax?: number;
        description?: string;
        fixedPaymentFER?: number;
        hostName?: string;
        lossAmount?: number;
        lossRate?: number;
        parentProjectAvgMaturityDateOfRemaining?: Date;
        parentProjectBITTRate?: number;
        parentProjectId?: number;
        parentProjectRUSFRate?: number;
        parentProjectStatusBeforeRevise?: number;
        parentProjectTotalRemainingAmount?: number;
        parentProjectTotalRemainingBITT?: number;
        parentProjectTotalRemainingPrincipalAmount?: number;
        parentProjectTotalRemainingProfitAmount?: number;
        parentProjectTotalRemainingRUSF?: number;
        parentProjectTotalRemainingVAT?: number;
        parentProjectVATRate?: number;
        projectId?: number;
        projectPayBackPlanId?: number;
        projectReviseInfoId?: number;
        rediscountAmountTRY?: number;
        reviseProjectCalculationCorrespondentAmount?: number;
        reviseReasonId?: number;
        reviseTypeId?: number;
        surPlusProfitAmountToTransfer?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectSmsHistoryContract extends BOA.Common.Types.ContractBase {
        customerAccountNumber?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        notificationCode?: string;
        notificationType?: string;
        notificationTypeName?: string;
        projectId?: number;
        receiverType?: number;
        receiverTypeName?: string;
        sendDate?: Date;
        smsId?: number;
        smsTo?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
    }
    interface ProjectTranContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        projectId?: number;
        projectTranId?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranType?: number;
        tranTypeName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ProjectVehicleInfoContract extends BOA.Common.Types.ContractBase {
        brandId?: number;
        brandName?: string;
        insurancePrice?: number;
        isPert?: boolean;
        isSecondHand?: boolean;
        modelId?: number;
        modelName?: string;
        projectId?: number;
        projectVehicleInfoId?: number;
        purposeOfUseId?: number;
        salePrice?: number;
        vehicleIdNumber?: string;
        year?: number;
    }
    interface ProposalApplicationControl extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        isAllProposalActive?: number;
        isApplicationApproveCompleted?: number;
    }
    interface ProposalContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountNumber?: number;
        activePayBackPlan?: BOA.Types.Kernel.FundUtilization.PayBackPlanContract;
        advancePayment?: number;
        advancePaymentFEC?: number;
        advancePaymentRate?: number;
        aggreementTpye?: BOA.Types.Kernel.Product.ProductLoanAgreementTypeContract;
        aggreementTpyeId?: number;
        allotmentProductDetailGroup?: string;
        allotmentProductMainGroup?: string;
        allotmentProductSubGroup?: string;
        branchCode?: string;
        branchCurrentRateContract?: BOA.Types.Kernel.FundUtilization.AutoPricingBranchCurrentRateContract;
        branchId?: number;
        branchName?: string;
        campaignContract?: BOA.Types.Kernel.FundUtilization.CampaignListContract;
        campaignDetailId?: number;
        channelId?: number;
        channelName?: string;
        citizenship?: number;
        commitmentDate?: Date;
        creditRiskGroupId?: number;
        customerAdvancePayment?: number;
        customerAge?: number;
        customerClassCode?: string;
        customerClassId?: number;
        customerClassName?: string;
        customerId?: number;
        customerName?: string;
        customerOldClassification?: number;
        customerTCKN?: string;
        debtFEC?: number;
        debtFecBusinessKey?: number;
        debtFER?: number;
        divitId?: string;
        divitInstanceId?: string;
        documentedAmount?: number;
        estateInfoList?: BOA.Types.Kernel.FundUtilization.EstateInfoContract[];
        estimatedPaymentDate?: Date;
        extensionInfo?: BOA.Types.Kernel.FundUtilization.ProposalAndProject.ProposalAndProjectExtensionInfoContract;
        fecName?: string;
        fecType?: number;
        fecTypeContract?: BOA.Types.Kernel.Product.ProductLoanFECTypeContract;
        financingNeedsList?: BOA.Types.Kernel.FundUtilization.FinancingNeedsInfoContract[];
        firmId?: number;
        fundingAmount?: number;
        fundingAmountCorrespond?: number;
        fundingAmountCorrespondFEC?: number;
        fundingAmountDebitCorrespond?: number;
        fundingFEC?: number;
        fundingFecBusinessKey?: number;
        fundingFER?: number;
        fundingFXRateTrandate?: Date;
        fXJournalDataForDebit?: BOA.Types.Kernel.FX.FXJournalContract;
        fXJournalDataForFunding?: BOA.Types.Kernel.FX.FXJournalContract;
        fXStatus?: number;
        goodsCollateralKind?: number;
        goodsCollateralKindName?: string;
        goodsOrServiceType?: number;
        hasDebtSpesificExchangeRate?: boolean;
        hasGuarantor?: boolean;
        hostIP?: string;
        importSumExpense?: number;
        incentiveDocumentNumber?: string;
        incentiveId?: number;
        incentiveItem?: BOA.Types.Kernel.FundUtilization.IncentiveContract;
        insuranceCostAmount?: number;
        isAlreadyCustomer?: boolean;
        isBahreynProposal?: boolean;
        isCommitment?: number;
        isCopy?: boolean;
        isCorporate?: boolean;
        isForeignCustomer?: boolean;
        isImportProject?: string;
        isIncentive?: number;
        isLifeInsurance?: number;
        isMortgage?: number;
        isNewCustomer?: boolean;
        isNewCustomerClassification?: boolean;
        isNotACustomer?: boolean;
        isPreferredProfession?: boolean;
        isPrivateCustomer?: boolean;
        isProjectFinance?: number;
        isTKDKLetter?: boolean;
        kdvCompensateType?: number;
        kullaniciText?: string;
        lastPaymentDate?: Date;
        leasingAdvancePayment?: number;
        leasingAdvancePaymentDate?: Date;
        leasingProductGroup?: number;
        loanProductDesc?: string;
        loanProductDetailDesc?: string;
        marginRate?: number;
        mobileApproveInfo?: BOA.Types.Kernel.FundUtilization.MobileApproveInfoContract;
        mortgageType?: number;
        payBackPlanList?: BOA.Types.Kernel.FundUtilization.PayBackPlanContract[];
        paymentList?: BOA.Types.Kernel.FundUtilization.ProposalPaymentInfoContract[];
        personAddress?: string;
        personId?: number;
        personName?: string;
        personPhone?: string;
        personType?: number;
        portfolioClass?: number;
        portfolioCode?: string;
        portfolioId?: number;
        processDate1?: Date;
        processDate2?: Date;
        productCode?: string;
        productName?: string;
        proformaInvoiceAmount?: number;
        projectFinanceId?: number;
        projectPlace?: BOA.Types.Kernel.Product.ProductLoanProjectPlaceContract;
        projectPlaceId?: number;
        proposalAmountTL?: number;
        proposalEvaulateList?: BOA.Types.Kernel.FundUtilization.ProposalRejectReasonsContract[];
        proposalId?: number;
        proposalState?: number;
        proposalTran?: BOA.Types.Kernel.FundUtilization.ProposalTranContract;
        proposalValidityDate?: Date;
        relatedCommitment?: number;
        relatedImportId?: number;
        relatedProjectAverageMaturityDayCount?: number;
        relatedProjectFECType?: number;
        relatedProjectMonthlyProfitRate?: number;
        relatedProjectSelect?: number;
        relatedUserCode?: string;
        relationshipGroupId?: number;
        remainingFundingAmount?: number;
        resourceCode?: string;
        salesVatExchangeRate?: number;
        selectedImportProject?: number;
        selectedImportProjectText?: string;
        selectedLoanProductType?: number;
        selectedProposalStatus?: number;
        shippingDate?: Date;
        statusName?: string;
        systemDate?: Date;
        tKDKLetterNumber?: number;
        transferTime?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vatExchangeRate?: number;
        vehicleInfoList?: BOA.Types.Kernel.FundUtilization.VehicleInfoContract[];
        vIFAccountSuffix?: number;
    }
    interface ProposalInfoReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        advancePaymentAmount?: string;
        agreementType?: number;
        averageMaturityDayCount?: string;
        branchAddress?: string;
        branchFaxNumber?: string;
        branchName?: string;
        branchPhoneNumber?: string;
        customerName?: string;
        customerTckn?: string;
        debtFEC?: number;
        debtFECCode?: string;
        debtFecTypeName?: string;
        debtFERName?: string;
        fundingAmount?: string;
        fundingAmountDebitCorrespond?: string;
        fundingFecName?: string;
        goodsOrServicePrice?: string;
        goodsOrServiceType?: number;
        isCorporate?: number;
        isVisibleTckn?: boolean;
        labelName?: string;
        personType?: number;
        productName?: string;
        proposalDate?: Date;
        proposalDocList?: string;
        proposalExpireDate?: string;
        proposalId?: number;
        proposalNotes?: string;
        proposalOwnerName?: string;
        salesAmount?: string;
    }
    interface ProposalPayBackPlanApproveDetailContract extends BOA.Common.Types.ContractBase {
        approveParamCode?: string;
        approveParamType?: string;
        approveParamValue?: string;
        hostName?: string;
        proposalPayBackPlanId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface ProposalPaymentInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        advancePaymentAccountSuffix?: number;
        advancePaymentAmount?: number;
        cashAgainstDocumentStatus?: number;
        estimatedPaymentDate?: Date;
        exchangeReference?: string;
        exchangeSequenceNumber?: number;
        parentAccountNumber?: number;
        parentFundingFEC?: number;
        paymentAmount?: number;
        paymentBalance?: number;
        paymentFEC?: number;
        paymentType?: number;
        paymentTypeName?: string;
        projectPlace?: number;
        proposalId?: number;
        proposalPaymentInfoId?: number;
        sellerAccountId?: number;
        sellerId?: number;
        sellerName?: string;
    }
    interface ProposalPlanListContract extends BOA.Common.Types.ContractBase {
        bsmv?: string;
        incentiveAmount?: string;
        installmentKind?: number;
        installmentKindDesc?: string;
        instalmentAmount?: string;
        instalmentDate?: Date;
        intallmentAmountWithoutIncentive?: string;
        intalmentNumber?: number;
        kkdf?: string;
        mainAmount?: string;
        profit?: string;
        profitAmountWithoutIncentive?: string;
        remainAmount?: string;
        surplusProfitAmount?: string;
        vATAmount?: string;
    }
    interface ProposalPlanReportContract extends BOA.Common.Types.ContractBase {
        annualSimpleProfitRate?: string;
        commissionAmount?: string;
        fecName?: string;
        fundingAmount?: string;
        fundingAmountWithoutAdvancePaymentAmount?: string;
        instalmentAmount?: string;
        instalmentBeginDate?: Date;
        instalmentCount?: number;
        instalmentEndDate?: Date;
        leasingAdvancePaymentAmount?: string;
        leasingPurchasingVATAmount?: string;
        lifePolicyPremium?: string;
        profitPenaltyRate?: string;
        profitRate?: string;
        profitRateYear?: string;
        taxTotal?: string;
        totalBsmvAmount?: string;
        totalCost?: string;
        totalDebtAmount?: string;
        totalIncentiveAmount?: string;
        totalInstalmentAmount?: string;
        totalInstalmentAmountFec?: string;
        totalIntallmentAmountWithoutIncentive?: string;
        totalKkdfAmount?: string;
        totalMainAmount?: string;
        totalProfit?: string;
        totalProfitAmountWithoutIncentive?: string;
        totalVATAmount?: string;
    }
    interface ProposalRejectReasonsContract extends BOA.Common.Types.ContractBase {
        proposalId?: number;
        proposalRejectReasonsId?: number;
        rejectReasonCode?: number;
        rejectType?: number;
    }
    interface ProposalTranContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        proposalId?: number;
        proposalTranId?: number;
        status?: number;
        systemDate?: Date;
        tranType?: number;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ProposalTransmissionProjectWFInfoContract extends BOA.Common.Types.ContractBase {
        commandName?: string;
        stateId?: number;
        workflowId?: number;
    }
    interface ProposalVehicleTempTableContract extends BOA.Common.Types.ContractBase {
        isPert?: number;
        purposeOfUseId?: number;
        purposeOfUseName?: string;
        vehicleBrandId?: number;
        vehicleBrandName?: string;
        vehicleIdNumber?: string;
        vehicleInsuarancePrice?: number;
        vehicleModelId?: number;
        vehicleModelName?: string;
        vehicleYear?: number;
    }
    interface RedemptionPlanContract extends BOA.Common.Types.ContractBase {
        beginPeriodPrincipalAmount?: number;
        bsmv?: number;
        dayCount?: number;
        endPeriodPrincipalAmount?: number;
        maturityDate?: Date;
        principalInstallmentAmount?: number;
        profitShareAmount?: number;
        profitShareBeginDate?: Date;
        supportAmount?: number;
        totalAmount?: number;
        valueDate?: Date;
    }
    interface RedemptionPlanSummaryContract extends BOA.Common.Types.ContractBase {
        fecCode?: string;
        maturityDate?: Date;
        principal?: number;
        principalInstallmentAmount?: number;
        profitShare?: number;
        profitShareSupportAmount?: number;
        totalProfitShareAmount?: number;
    }
    interface RediscountAdvanceBatchContract extends BOA.Common.Types.ContractBase {
        accountingList?: BOA.Types.Kernel.FundUtilization.RediscountAdvanceBatchContract[];
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        currencyBid?: number;
        dayCount?: number;
        debtFECType?: number;
        debtFECTypeDesc?: string;
        debtFER?: number;
        disscountTranNo?: number;
        eurFec?: number;
        fec?: number;
        fundPool?: number;
        giv?: number;
        isLeasing?: number;
        ledgerId?: number;
        loanMaturityType?: number;
        loanType?: string;
        newRediscount?: number;
        paidAmount?: number;
        profitRate?: number;
        projectFECType?: number;
        rediscountAmount?: number;
        rediscountAmountTL?: number;
        sumrediscountList?: BOA.Types.Kernel.FundUtilization.RediscountAdvanceBatchContract[];
        tranDate?: Date;
        tranRef?: string;
        transferDate?: Date;
        unitID?: number;
        usdFec?: number;
    }
    interface RediscountBatchContract extends BOA.Common.Types.ContractBase {
        accountingList?: BOA.Types.Kernel.FundUtilization.RediscountBatchContract[];
        accrualFER?: number;
        acrualAmount?: number;
        availablePrincipal?: number;
        branchId?: number;
        businessKey?: number;
        currencyBid?: number;
        debitCreditCode?: number;
        debitFD?: number;
        debtFECType?: number;
        debtFECTypeDesc?: string;
        debtFER?: number;
        discountAmount?: number;
        discountAmountTL?: number;
        disscountTranNo?: number;
        eurFec?: number;
        fec?: number;
        fundPool?: number;
        id?: number;
        installmentId?: number;
        isLeasing?: number;
        ledgerId?: number;
        loanMaturityType?: number;
        mainBusinessKey?: number;
        principalFD?: number;
        principalFECdiff?: number;
        rediscountAmount?: number;
        rediscountAmountTL?: number;
        reverseBusinessKey?: number;
        reverseTranRef?: string;
        sumrediscountList?: BOA.Types.Kernel.FundUtilization.RediscountBatchContract[];
        tranDate?: Date;
        tranRef?: string;
        unitID?: number;
        usdFec?: number;
    }
    interface RelatedDivitAndInstanceUsersContract extends BOA.Common.Types.ContractBase {
        alertUserList?: number[];
        branchName?: string;
        customerName?: string;
        divitId?: string;
        divitParameterList?: BOA.Types.Kernel.BusinessHelper.DivitParametersContract[];
        instanceUserIdList?: string[];
        personId?: number;
    }
    interface RestructuringConstants {
    }
    interface RestructuringContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        allotmentId?: string;
        branchId?: number;
        costFecId?: number;
        costFXData?: BOA.Types.Kernel.FundUtilization.RestructuringFXContract;
        costFXJournal?: number;
        date?: Date;
        debtGroupList?: BOA.Types.Kernel.FundUtilization.RestructuringDebtGroupContract[];
        exchangeReference?: string;
        fecBusinessKey?: number;
        fecId?: number;
        fXRateMargin?: number;
        fxStatus?: number;
        hostIP?: string;
        hostName?: string;
        portfolioClass?: number;
        productCode?: string;
        projectList?: BOA.Types.Kernel.FundUtilization.RestructuringProjectContract[];
        restructuringCost?: number;
        restructuringId?: number;
        restructuringTranContractList?: BOA.Types.Kernel.FundUtilization.RestructuringTranContract[];
        restructuringType?: number;
        status?: number;
        systemDate?: Date;
        transferBusinessKey?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RestructuringDebtContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        debtId?: number;
        debtType?: number;
        debtTypeDescription?: string;
        dueDate?: Date;
        fecCode?: string;
        fecId?: number;
        fundPool?: number;
        fundPoolDescription?: string;
        orderNumber?: number;
        paymentStatus?: number;
        paymentStatusDescription?: string;
        restructuringDebtGroupId?: number;
        restructuringDebtId?: number;
        restructuringId?: number;
        totalAmount?: number;
    }
    interface RestructuringDebtCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerClassId?: number;
        customerName?: string;
        isGroupRiskIncluded?: boolean;
        personType?: number;
        personTypeText?: string;
        portfolioClass?: number;
        portfolioClassText?: string;
    }
    interface RestructuringDebtGroupContract extends BOA.Common.Types.ContractBase {
        askRate?: number;
        bidRate?: number;
        businessKey?: number;
        currencyMargin?: number;
        debtList?: BOA.Types.Kernel.FundUtilization.RestructuringDebtContract[];
        debtTypeDescription?: string;
        fecCode?: string;
        fecId?: number;
        fundPool?: number;
        fundPoolDescription?: string;
        fXData?: BOA.Types.Kernel.FundUtilization.RestructuringFXContract;
        isRateFixed?: boolean;
        key?: any;
        restructuringAmount?: number;
        restructuringDebtGroupId?: number;
        restructuringFecCode?: string;
        restructuringFecId?: number;
        restructuringId?: number;
        totalAmount?: number;
        treasuryReference?: number;
    }
    interface RestructuringDebtGroupViewContract extends BOA.Common.Types.ContractBase {
        askRate?: number;
        bidRate?: number;
        businessKey?: number;
        currencyMargin?: number;
        debtList?: BOA.Types.Kernel.FundUtilization.RestructuringDebtContract[];
        debtType?: number;
        debtTypeDescription?: string;
        fecCode?: string;
        fecId?: number;
        fundPool?: number;
        fundPoolDescription?: string;
        fXData?: BOA.Types.Kernel.FundUtilization.RestructuringFXContract;
        key?: any;
        restructuringAmount?: number;
        restructuringDebtGroupId?: number;
        restructuringFecCode?: string;
        restructuringFecId?: number;
        restructuringId?: number;
        totalAmount?: number;
        treasuryReference?: number;
    }
    interface RestructuringFXContract {
        askRate?: number;
        bidRate?: number;
        businessKey?: number;
        fromAmount?: number;
        fromFecCode?: string;
        fromFecId?: number;
        fXRate?: BOA.Types.Kernel.FX.FXComponentContract;
        isReverseTransaction?: boolean;
        key?: any;
        restructuringId?: number;
        toAmount?: number;
        toFecCode?: string;
        toFecId?: number;
    }
    interface RestructuringListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchName?: string;
        costFecId?: number;
        customerName?: string;
        fecCode?: string;
        fecId?: number;
        fxRateMargin?: number;
        fxStatus?: number;
        fxStatusDescription?: string;
        hostName?: string;
        productCode?: string;
        restructuringAmount?: number;
        restructuringCost?: number;
        restructuringId?: number;
        restructuringStatus?: string;
        restructuringType?: number;
        systemDate?: Date;
        transferBusinessKey?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RestructuringProjectContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        askRate?: number;
        bidRate?: number;
        businessKey?: number;
        currencyMargin?: number;
        fecId?: number;
        fecType?: number;
        flowId?: string;
        fundPool?: number;
        fXData?: BOA.Types.Kernel.FundUtilization.RestructuringFXContract;
        isRateFixed?: boolean;
        key?: any;
        maturity?: number;
        maturityPeriod?: string;
        orderNumber?: number;
        profitRate?: number;
        projectContract?: BOA.Types.Kernel.FundUtilization.ProjectContract;
        projectDayCount?: number;
        projectId?: number;
        projectStatus?: number;
        rate?: number;
        restructuringAmount?: number;
        restructuringFecCode?: string;
        restructuringFecId?: number;
        restructuringId?: number;
        restructuringProjectId?: number;
        treasuryReference?: number;
    }
    interface RestructuringSearchContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        endDate?: Date;
        restructuringId?: number;
        startDate?: Date;
    }
    interface RestructuringTranContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        restructuringId?: number;
        restructuringTranId?: number;
        status?: number;
        systemDate?: Date;
        tranType?: number;
        userName?: string;
        wFInstanceId?: number;
    }
    interface SaveBranchClassificationSimulationContract extends BOA.Common.Types.ContractBase {
        bailRatio?: number;
        branchName?: string;
        classDistribution?: number;
        followupRatio?: number;
        ibgoBranch?: number;
        ibgoBranchAndHq?: string;
        ibgoHq?: number;
        ibgoTotal?: string;
        idgoAo?: number;
        idgoBranch?: number;
        idgoHq?: number;
        idrbTotal?: number;
        lastClass?: string;
        managerName?: string;
        managerPersonId?: number;
        propertyName?: number;
        regionId?: number;
        regionName?: string;
        reportDate?: Date;
        responsibleOfPortfolioName?: string;
        responsibleOfPortfolioPersonId?: number;
        simulationNo?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SupportTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        creditAccountSuffix?: number;
        creditNumber?: number;
        customerName?: string;
        fecCode?: string;
        fecId?: number;
        govermentAccountNumber?: number;
        govermentAccountSuffix?: number;
        govermentBranchId?: number;
        id?: number;
        incentiveProjectType?: number;
        incentiveProjectTypeName?: string;
        installmentAmount?: number;
        installmentDate?: Date;
        installmentNumber?: number;
        installmentNumbers?: string;
        installmentPaymentDate?: Date;
        maxSupportTransferDate?: Date;
        minSupportTransferDate?: Date;
        profitShareSupportRate?: number;
        queueNo?: number;
        rate?: number;
        status?: number;
        statusName?: string;
        supportAmount?: number;
        supportAmountTL?: number;
        supportTransferAmount?: number;
        supportTransferDate?: Date;
        supportTransferUserName?: string;
        tckn?: string;
        tranDate?: Date;
    }
    interface TLLoansToBeIndexedReverseContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountsuffix?: number;
        amount?: number;
        amountTL?: number;
        branchId?: number;
        businessKey?: number;
        fec?: number;
        installmentFXIndexId?: number;
        ledgerId?: number;
        processId?: number;
        resourceCode?: string;
        reverseBusinessKey?: number;
        reverseSystemDate?: Date;
        reverseUserName?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface UrbanRenewalCollectionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditAmount?: number;
        creditNumber?: number;
        creditType?: string;
        fecId?: number;
        installmentCount?: number;
        installmentPaidDate?: Date;
        montlyProfitRate?: number;
        nameSurname?: string;
        paidInstallmentAmount?: number;
        paidInstallmentNumbers?: string;
        profitShareSupportAmount?: number;
        rate?: number;
        tckn?: string;
        tranDate?: Date;
    }
    interface UrbanRenewalVendorPaymentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditAmount?: number;
        creditType?: string;
        customerName?: string;
        govermentProfitShareAmount?: number;
        installmentCount?: number;
        montlyProfitRate?: number;
        tckn?: string;
    }
    interface UsableDocumentAmountContract extends BOA.Common.Types.ContractBase {
        totalDocumentAmount?: number;
        usableDocumentAmount?: number;
    }
    interface UserImpContract extends BOA.Common.Types.UserContract {
        isSelected?: boolean;
    }
    interface UtilizationPricingParameterContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        calculationMethod?: number;
        calculationMethodDescription?: string;
        customerClassName?: string;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        isChanged?: boolean;
        isTemp?: boolean;
        maturity?: number;
        maturityDescription?: string;
        paramCode?: number;
        parameterCode?: string;
        parameterCodeDescription?: string;
        paramValue?: number;
        parentProductNodes?: string;
        portfolioClass?: number;
        portfolioClassDescription?: string;
        productCode?: string;
        productCodeDescription?: string;
        resourceCode?: string;
        screenType?: number;
        stateId?: number;
        stateName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        utilizationParameterId?: number;
        workgroupName?: string;
    }
    interface VehicleInfoContract extends BOA.Common.Types.ContractBase {
        isPert?: number;
        pertName?: string;
        proposalId?: number;
        purposeOfUseId?: number;
        purposeOfUseName?: string;
        vehicleBrandId?: number;
        vehicleBrandName?: string;
        vehicleId?: number;
        vehicleIdNumber?: string;
        vehicleInsuarancePrice?: number;
        vehicleModelId?: number;
        vehicleModelName?: string;
        vehiclePrice?: number;
        vehicleUsedOrNot?: number;
        vehicleUsedOrNotName?: string;
        vehicleYear?: number;
    }
    interface VehicleInsuaranceListContract extends BOA.Common.Types.ContractBase {
        vehicleBrandId?: number;
        vehicleBrandName?: string;
        vehicleInsuarancePrice?: number;
        vehicleInsuaranceTerm?: string;
        vehicleModelId?: number;
        vehicleModelName?: string;
        vehicleYear?: number;
    }
    interface VendorAccountingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        address?: string;
        authorizedPerson?: string;
        birthDate?: Date;
        birthPlace?: string;
        branchName?: string;
        email?: string;
        fatherName?: string;
        faxNumber?: string;
        firstName?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        lastName?: string;
        mobilePhoneNumber?: string;
        motherName?: string;
        name?: string;
        nameWithIdentity?: string;
        nationality?: number;
        nationalityName?: string;
        phoneNumber?: string;
        projectDocumentAmount?: number;
        regionName?: string;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
        vendorType?: number;
        vendorTypeName?: string;
    }
    interface VendorBankAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        bankBranchId?: number;
        bankBranchName?: string;
        bankCode?: string;
        bankId?: number;
        bankName?: string;
        bankTitle?: string;
        displayBankAccount?: string;
        displayBankName?: string;
        displayBranchName?: string;
        displayMember?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        isIBANNotDeclared?: boolean;
        kTAccountNumber?: number;
        kTAccountSuffix?: number;
        prefix?: string;
        systemDate?: Date;
        toolTip?: string;
        transferType?: BOA.Types.Kernel.FundUtilization.PPCommon.TransferDetailType;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorBankAccountId?: number;
        vendorId?: number;
    }
    interface VendorCommunicationContract extends BOA.Common.Types.ContractBase {
        channelType?: string;
        hostIP?: string;
        hostName?: string;
        info?: string;
        nameSurname?: string;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorCommunicationId?: number;
        vendorId?: number;
    }
    interface VendorContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        address?: string;
        authorizedPerson?: string;
        birthDate?: Date;
        birthPlace?: string;
        branchId?: number;
        branchName?: string;
        description?: string;
        easyLoanCustomerNumber?: number;
        easyLoanVendorAlias?: string;
        email?: string;
        fatherName?: string;
        faxNumber?: string;
        firstName?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        lastName?: string;
        mobilePhoneNumber?: string;
        motherName?: string;
        name?: string;
        nameWithIdentity?: string;
        nationality?: number;
        nationalityName?: string;
        phoneNumber?: string;
        projectDocumentAmount?: number;
        recordBeginDate?: Date;
        recordEndDate?: Date;
        regionName?: string;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorBankAccountList?: BOA.Types.Kernel.FundUtilization.VendorBankAccountContract[];
        vendorCommunicationList?: BOA.Types.Kernel.FundUtilization.VendorCommunicationContract[];
        vendorId?: number;
        vendorType?: BOA.Types.Kernel.FundUtilization.VendorType;
        vendorTypeName?: string;
    }
    interface VendorPaymentInfoContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        hostIP?: string;
        hostName?: string;
        orderDelegationId?: number;
        paymentDate?: Date;
        paymentType?: BOA.Types.Kernel.FundUtilization.PaymentType;
        paymentTypeName?: string;
        systemDate?: Date;
        taxRate?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
    }
    interface WebDialerContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configValue?: string;
        environment?: number;
        hostName?: string;
        id?: number;
        methodName?: string;
        phoneNumber?: string;
        serviceId?: number;
        systemDate?: Date;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.Common {
    export const enum AgreementType {
        Selem = 1,
        Istisna = 2,
        Icara = 3,
        Murabaha = 4,
        Teverruk = 5,
        Karz = 6,
        Icara_HizmetKiralamasi = 7,
        Musamebe = 8,
        Musareke = 9,
        YatirimVekaleti = 10,
        Isticrar = 11
    }
    export const enum AllotmentStatus {
        Active = 1,
        Passive = 2,
        Expired = 7
    }
    export const enum DocumentType {
        ForwardSerial = 1,
        BackSerial = 2
    }
    export const enum ExemptionType {
        LetterOfGuarantee = 0,
        Project = 1
    }
    export const enum GoodsOrServiceType {
        Vehicle = 1,
        Estate = 2,
        FinancingNeeds = 3,
        BusinessLoansGroup = 4,
        MachineAndEquipmentGroup = 5,
        Loan = 15,
        LetterOfGuaranty = 16,
        ChequeBook = 18,
        RateReferance = 32
    }
    export const enum InquiryLoanStateType {
        TCMB = 1,
        KT = 2
    }
    export const enum InquirySourceType {
        Application = 1,
        Proposal = 2,
        CardApplication = 3,
        CardLimitChange = 4
    }
    export const enum LifeInsuranceControlType {
        NoLifeInsurance = 0,
        LifeInsuranceOk = 1,
        LifeInsuranceCancel = 2
    }
    export const enum LoanFECType {
        TL = 0,
        ForeignExchangeLinked = 1,
        ForeignExchange = 2
    }
    export const enum PersonType {
        RealPerson = 0,
        Corporation = 1,
        Private = 5
    }
    export const enum PoolType {
        Automatic = 0,
        Equity = 2,
        Participation = 3,
        SpecialFund = 4
    }
    export const enum PortfolioClass {
        Corporate = 1,
        Retail = 2,
        SmallBusiness = 3
    }
    interface InquiryCollateralChequeInquiryType {
    }
    interface InquiryListType {
    }
    interface InquiryOutSideStateCode {
    }
    interface InquiryRelationshipTypeName {
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.CommonStatics {
    export const enum AgreementType {
        Selem = 1,
        Istisna = 2,
        Icara = 3,
        Murabaha = 4,
        Teverruk = 5,
        Karz = 6,
        HizmetIcara = 7,
        Musamebe = 8,
        Musareke = 9,
        YatirimVekaleti = 10,
        Isticrar = 11
    }
    export const enum ApplicationActionType {
        SelectType = 1,
        SaveType = 2
    }
    export const enum ApplicationExpenseType {
        Hire = 1,
        LoanDept = 3
    }
    export const enum ApplicationIncomeType {
        Salary = 1,
        Independent = 2,
        RealEstate = 4
    }
    export const enum CustomerClass {
        Corporate = 1,
        Retail = 2,
        SmallBusiness = 3,
        Commercial = 4,
        Private = 5,
        Tradesman = 14,
        Micro = 8,
        MediumLargeBusinesses = 17
    }
    export const enum DefiniteAdvance {
        Advance = 1,
        Definite = 2
    }
    export const enum DocumentCurrencyType {
        Nothing = 0,
        ContractualFER = 1,
        CentralBankFER = 2,
        PaymentFER = 3
    }
    export const enum DocumentRecordType {
        Nothing = 0,
        Estate = 1,
        Vehicle = 2,
        MovableEstate = 3,
        Cost = 4,
        ExchangeDifferenceReturn = 5,
        CostPaymentReturn = 6
    }
    export const enum DocumentType {
        CustomsDeclarationDocument = 1,
        ExportersAssoLetter = 2,
        CustomBillingDoc = 3,
        PurchaseBills = 4,
        SaleBills = 5,
        BuyForeignExchangeDoc = 6,
        ClosureLetter = 7,
        BankClosureLetter = 8
    }
    export const enum ExcelToPaymentErrorStatus {
        Succeed = 1,
        Failed = 2
    }
    export const enum FXRateSingleCurrency {
        IndexType = 5,
        Fec = 1
    }
    export const enum FxStatus {
        InstantFXRate = 1,
        Margin = 2,
        ReFerencedFXRate = 3
    }
    export const enum GeneralLedgerLedgerType {
        GeneralLedger = 1,
        CustomerLedger = 2
    }
    export const enum GeneralLedgerPaymentState {
        None = 0,
        Saved = 1,
        WaitingApproval = 2,
        Executed = 5,
        Rejected = 6,
        DispatchExchange = 7,
        ReturnedByExchange = 8
    }
    export const enum GeneralLedgerPaymentTransferType {
        EFTToSafe = 1,
        IBTToSafe = 2,
        ToAccount = 5,
        ToSafe = 6
    }
    export const enum IncentivePaymentType {
        Payable = 1,
        Paid = 2,
        UnPaid = 3
    }
    export const enum IncentiveProjectSubType {
        VendorPayment = 1,
        Payment = 2
    }
    export const enum IncentiveProjectType {
        UrbanRenewal = 1,
        EconomyMinistry = 2
    }
    export const enum IncentiveState {
        Continues = 1,
        Closed = 2,
        ClosedByPayingPenalty = 3,
        SuspenedAndClosed = 4,
        ResenClosed = 5,
        Canceled = 6
    }
    export const enum IncentiveType {
        PermitforInwardProcessing = 1,
        TaxExemptionCertificate = 2,
        InvestmentIncentive = 3,
        TransitTrade = 4,
        RegisteredLetterExportProcessing = 5,
        UrbanRenewal = 6,
        EximBankExport = 7,
        ExportFinancing = 8
    }
    export const enum KarzProjectApproveUnit {
        GM = 1,
        BOLGE = 2
    }
    export const enum KarzProjectStatus {
        Preparing = 1,
        WaitingApproval = 5,
        Approval = 4,
        Confirmed = 3,
        Cancelled = 2,
        KarzStarted = 6
    }
    export const enum LeasingAgreementReferenceType {
        Custemer = 2,
        Institution = 1
    }
    export const enum LeasingAgreementRepresentativeType {
        Custemer = 2,
        Institution = 1
    }
    export const enum LimitAndMaturityState {
        Existent = 1,
        Calculated = 2,
        SystemOffer = 3,
        Cancel = 4
    }
    export const enum LoanBorrowedTransferStatus {
        Saved = 0,
        WaitingApproval = 1,
        Rejected = 2,
        TransferCompleted = 3
    }
    export const enum LoanMaturityType {
        Leasing = 51,
        ShortTermCashLoan = 52,
        MediumAndLongTermCashLoan = 6
    }
    export const enum LoansBankType {
        KT = 1,
        Other = 2
    }
    export const enum OperationInquiryType {
        Personel = 1,
        Customer = 2,
        Vendor = 3
    }
    export const enum PayBackPlanRecalculationType {
        IncentiveProject = 1,
        IndustryProductProject = 2
    }
    export const enum PayBackPlanState {
        Approve = 1,
        OfferPrice = 2,
        Reject = 3,
        Active = 4,
        SendToHeadOffice = 5
    }
    export const enum PaymentDocumentErrorStatus {
        ReadyToSave = 1,
        HasMissingParts = 2,
        Saved = 3,
        CantSaved = 4
    }
    export const enum PaymentDocumentType {
        Billing = 1,
        ProducerReceipt = 2,
        ContractOfSale = 3,
        ExpenseBill = 4,
        Contract = 5,
        OwnershipCertificate = 6,
        Receipt = 7,
        Slip = 8,
        CustomsDeclaration = 9,
        eBilling = 10,
        ImportOfBilling = 11,
        ReturnInvoice = 12,
        ExchangeDifferenceInvoice = 13
    }
    export const enum PaymentInfoCashAgainstDocumentStatus {
        Undelivered = 1,
        Delivered = 2
    }
    export const enum PersonType {
        RealPerson = 0,
        Corporation = 1,
        All = 99
    }
    export const enum PortfolioClass {
        Corporate = 1,
        Retail = 2,
        SmallBusiness = 3
    }
    export const enum PreciousMetalSupportStatus {
        StartProposal = 1,
        ActiveProposal = 2,
        PassiveProposal = 3,
        WaitingApproval = 4,
        Approved = 5,
        PriceOffered = 6,
        Rejected = 7,
        ProjectStarted = 8,
        Delivered = 9,
        Cancel = 10,
        ExtendingMaturity = 11,
        ExtendedMaturity = 12,
        ExtendedMaturityApproved = 13,
        ExtendedMaturityRejected = 14
    }
    export const enum ProductGroup {
        InstalmentBasedCommercialLoans = 9,
        BusinessLoans = 10,
        AbroadLoans = 11,
        ConsumerLoans = 12,
        Leasing = 13,
        Restitution = 14,
        Loan = 15,
        LetterOfGuaranty = 16,
        ChequeBook = 18,
        SchoolInstallment = 31,
        RateReferance = 32
    }
    export const enum ProductLoanFECType {
        TL = 0,
        DEK = 1,
        YP = 2
    }
    export const enum ProjectDocScreenType {
        ProjectControlDoc = 1,
        ProjectPaymentDoc = 2
    }
    export const enum ProjectForeignPaymentDebtTransferType {
        None = 0,
        TLToTL = 1,
        TLToForeignFEC = 2,
        ForeignExchangeLinkedToTL = 3,
        ForeignExchangeLinkedToSameForeignFEC = 4,
        ForeignExchangeLinkedToOtherForeignFEC = 5,
        ForeignExchangeToTL = 6,
        ForeignExchangeToSameForeignFEC = 7,
        ForeignExchangeToOtherForeignFEC = 8
    }
    export const enum ProjectForeignPaymentReferenceState {
        New = 1,
        Available = 2
    }
    export const enum ProjectPaymentType {
        All = 0,
        InternalPayment = 1,
        ForeignPayment = 2,
        GeneralLedgerPayment = 3,
        InternalReturnPayment = 4,
        ForeignReturnPayment = 5
    }
    export const enum ProjectPlace {
        DomesticMarket = 1,
        Import = 2,
        Export = 3,
        Retail = 4,
        Corporate = 6,
        SmallBusiness = 5
    }
    export const enum ProjectWFCompetenceMap {
        Vehicle = 1,
        AdvancePayment = 2,
        Estate = 3,
        RealPerson = 4,
        BusinessLoansGrup = 5,
        DomesticMarket = 6,
        Business = 7,
        Import = 8,
        DefinitePayment = 9,
        Corporate = 10,
        Leasing = 11,
        NotLeasing = 12,
        MachineAndEquipmentGroup = 13,
        HasIncentive = 14,
        HasNotIncentive = 15,
        FinancingNeeds = 16,
        PilotBranch = 17
    }
    export const enum ProposalAuthorityType {
        Branch = 1,
        Region = 2,
        HeadOffice = 3
    }
    export const enum RelatedProjectType {
        ImportProject = 1,
        CommitmentProject = 2
    }
    export const enum ResponseType {
        Update = 1,
        Other = 2
    }
    export const enum RestructuringStatus {
        Started = 1,
        BranchApprove = 2,
        RiskFollowupApprove1 = 3,
        RiskFollowupApprove2 = 4,
        SendToColleteral = 5,
        ColleteralApprove = 6,
        ColleteralReject = 7,
        OPMApprove = 8,
        TransferToExchange = 9,
        PaymentApproved = 10,
        PaymentRejected = 11,
        ProjectConfirmed = 12,
        BranchUpdate = 13,
        Rejected = 14,
        Canceled = 15,
        BranchDocumentOperation = 16,
        BranchDocumentReturn = 17
    }
    export const enum VATCompensateType {
        Include = 1,
        NotInclude = 0
    }
    export const enum VehicleState {
        FirstHand = 0,
        Used = 1
    }
    export const enum WitholdingStatus {
        Passive = 0,
        Active = 1
    }
    interface ApplicationClass {
    }
    interface ApplicationControlCode {
    }
    interface ApplicationState {
    }
    interface CampaignProduct {
    }
    interface ControlPropertyParameterCode {
    }
    interface GoodsCollateralKind {
    }
    interface IncentiveConstant {
        aCCOUNT_HAS_CONSTRAINT_DO_YOU_WANT_CONTINUE?: string;
        aCCOUNT_IS_CLOSED_DO_YOU_WANT_CONTINUE?: string;
        aCCOUNT_NUMBER?: string;
        aCCOUNT_SUFFIX?: string;
        aT_CREDIT_USE_DATE?: string;
        aVAILABLE_BALANCE_IS_LESS?: string;
        bANK_AND_BRANCH_INFO?: string;
        bANK_AND_BRANCH_INFO_LEASING?: string;
        bANK_EFT_CODE?: string;
        bANK_GM_NAME?: string;
        bANK_GM_NAME_LEASING?: string;
        bANK_NAME?: string;
        bANK_NAME_LEASING?: string;
        bEGIN_PERIOD_PRINCIPAL?: string;
        bEGIN_WITH_PERCENT?: string;
        bENEFICIARY_NAME?: string;
        bRANCH_CODE_AND_NAME?: string;
        bRANCH_CODE_AND_NAME_LEASING?: string;
        bSMV?: string;
        cANNOT_GET_ACCOUNT_INFO?: string;
        cANNOT_GET_GOVERMENT_ACCOUNT_INFO?: string;
        cANNOT_GET_GOVERMENT_ACCOUNT_INFO1?: string;
        cANNOT_GET_GOVERMENT_AVAILABLE_BALANCE?: string;
        cANNOT_GET_PAYMENT_PERIODS?: string;
        cANNOT_GET_PAYMENTLIST?: string;
        cANNOT_GET_PREVIOUS_WORK_DAY?: string;
        cANNOT_GET_SUPPORT_TRANSFER_LIST?: string;
        cANNOT_TRANSFER?: string;
        cOMPANY_INFO?: string;
        cOMPANY_MESSAGING_ADDRESS?: string;
        cOMPANY_NAME?: string;
        cOMPANY_TAX_NUMBER?: string;
        cOMPANY_TAX_OFFICE?: string;
        cOMPANY_TITLE?: string;
        cOMPANY_TITLE_LEASING?: string;
        cONTACT_EMAIL?: string;
        cONTACT_FAX_NUMBER?: string;
        cONTACT_PHONE_NUMBER?: string;
        cREDIT_AMOUNT?: string;
        cREDIT_AMOUNT_FOR_PROFIT_SHARE_SUPPORT?: string;
        cREDIT_AMOUNT_FOR_PROFIT_SHARE_SUPPORT_LEASING?: string;
        cREDIT_AMOUNT_LEASING?: string;
        cREDIT_APPLIED_MONTHLY_PROFIT_RATIO?: string;
        cREDIT_BALANCE?: string;
        cREDIT_DATE?: string;
        cREDIT_MATURITY?: string;
        cREDIT_NUMBER?: string;
        cREDIT_TYPE?: string;
        cREDIT_USAGE_DATE?: string;
        cREDIT_USAGE_DATE_LEASING?: string;
        cREDIT_USE_DATE?: string;
        cREDIT_USE_DATE_LEASING?: string;
        dAY_COUNT?: string;
        dEFAULT_EXCEL_FONT_NAME?: string;
        eCONOMY_MINISTRY_COLLECTION_LEASING_TXT_REPORT_NAME_FORMAT?: string;
        eCONOMY_MINISTRY_COLLECTION_REPORT_NAME_FORMAT?: string;
        eCONOMY_MINISTRY_COLLECTION_REPORT_NAME_FORMAT_FOR_LEASING?: string;
        eCONOMY_MINISTRY_COLLECTION_TXT_REPORT_NAME_FORMAT?: string;
        eCONOMY_MINISTRY_COLLECTION_ZIPFILE_NAME_FORMAT?: string;
        eCONOMY_MINISTRY_MONEY_TRANSFER_DESCRIPTION?: string;
        eCONOMY_MINISTRY_PROFITSHARE_SUPPORT_REPORT_TEMPLATE_CODE?: string;
        eCONOMY_MINISTRY_VENDOR_PAYMENT_REPORT_NAME_FORMAT?: string;
        eCONOMY_MINISTRY_VENDOR_PAYMENT_REPORT_TEMPLATE_CODE?: string;
        eCONOMY_MINISTRY_VENDOR_PAYMENT_ZIPFILE_NAME_FORMAT?: string;
        eND_PERIOD_PRINCIPAL?: string;
        fec_CODE?: string;
        fIRST_PRINCIPAL_PAYMENT_DATE?: string;
        fIRST_PRINCIPAL_PAYMENT_DATE_LEASING?: string;
        fIRST_PROFIT_SHARE_PAYMENT_DATE?: string;
        fOREIGN_MONEY?: string;
        fOREIGN_MONEY_TYPE?: string;
        fREQUENCY?: string;
        gOVERMENT_ACCOUNT_HAS_CONSTRAINT?: string;
        iBAN_OR_REFERENCE_NUMBER?: string;
        iBAN_OR_REFERENCE_NUMBER_LEASING?: string;
        iNCENTIVE_DOCUMENT_DATE?: string;
        iNCENTIVE_DOCUMENT_DATE_AND_COUNT?: string;
        iNCENTIVE_DOCUMENT_NUMBER?: string;
        iNSTALLMENT_AMOUNT?: string;
        iNSTALLMENT_AMOUNT_2?: string;
        iNSTALLMENT_BALANCE?: string;
        iNSTALLMENT_NUMBER?: string;
        iNSTALLMENT_PAID_DATE?: string;
        iNSTALLMENT_PROFIT_SHARE?: string;
        intrabankMoneyTransferState?: number;
        kUVEYT_TURK?: string;
        lAST_PRINCIPAL_PAYMENT_DATE?: string;
        lAST_PROFIT_SHARE_PAYMENT_DATE?: string;
        lEASING_ADVANCE_PAYMENT_AMOUNT?: string;
        lEASING_AGREEMENT_AMOUNT?: string;
        lEASING_COMPANY_TITLE_LEASING?: string;
        mATURITY_DATE?: string;
        mONEY_TYPE?: string;
        mONEY_TYPE_WITHOUT_SUFFIX?: string;
        nAME_SURNAME?: string;
        nOTE1?: string;
        nOTE2?: string;
        nOTE3?: string;
        nOTE4?: string;
        nOTE5?: string;
        nOTE6?: string;
        nOTE7?: string;
        nOTE8?: string;
        nOTE9?: string;
        oPENED_CREDIT_AMOUNT?: string;
        oPENED_CREDIT_AMOUNT_LEASING?: string;
        pAID_INSTALLMENT_AMOUNT?: string;
        pAID_INSTALLMENT_NUMBER?: string;
        pAID_INSTALLMENT_PROFITSHARE_SUPPORT_AMOUNT?: string;
        pAID_PRINCIPAL_AMOUNT?: string;
        pAID_PRINCIPAL_AMOUNT_LEASING?: string;
        pAID_PROFIT_SHARE_SUPPORT_AMOUNT?: string;
        pAYABLE_PROFIT_SHARE_SUPPORT_AMOUNT?: string;
        pAYABLE_TOTAL_PROFIT_SHARE_SUPPORT_AMOUNT?: string;
        pAYMENT_DATE?: string;
        pHONE_AND_FAX_NUMBER?: string;
        pHONE_AND_FAX_NUMBER_VALUE?: any;
        pRINCIPAL?: string;
        pRINCIPAL_CONDITION?: string;
        pRINCIPAL_CONDITION_LEASING?: string;
        pRINCIPAL_INSTALLMENT_AMOUNT?: string;
        pRINCIPAL_INSTALLMENT_AMOUNT_LEASING?: string;
        pRINCIPAL_INSTALLMENT_NUMBER?: string;
        pROFIT_SHARE?: string;
        pROFIT_SHARE_AMOUNT?: string;
        pROFIT_SHARE_BEGIN_DATE?: string;
        pROFIT_SHARE_RATE?: string;
        pROFIT_SHARE_SUPPORT_BEGIN_DATE?: string;
        pROFIT_SHARE_SUPPORT_RATE?: string;
        pROFIT_SHARE_SUPPORT_SCORE?: string;
        pROFITSHARE_CONDITION?: string;
        qUEUE_NUMBER?: string;
        rATE?: string;
        rEDEMPTION_PLAN?: string;
        rEDEMPTIONPLAN_MATURITY_DATE?: string;
        rEDEMPTIONPLAN_MATURITY_DATE_LEASING?: string;
        rEDEMPTIONPLAN_NOTE1?: string;
        rEDEMPTIONPLAN_NOTE2?: string;
        rEDEMPTIONPLAN_TOTAL_CREDIT?: string;
        rEDEMPTIONPLAN_TOTAL_CREDIT_LEASING?: string;
        rEPORT_FILE_EXTENSION?: string;
        rEPORT_FOLDER?: string;
        rEPORT_NOTE?: string;
        rEPORT_TITLE_1?: string;
        rEPORT_TITLE_2?: string;
        rEPORT_TITLE_3?: string;
        rEPORT_TITLE_4?: string;
        rEPORT_TITLE_4_LEASING?: string;
        rEPORT_TITLE_5?: string;
        rEPORT_TITLE_6?: string;
        sEGMENT_NUMBER?: string;
        sEPERATOR?: string;
        sHEET_NAME_1?: string;
        sIGNATURE?: string;
        sTAR?: string;
        sUPPORT_TRANSFER_EDIT_TITLE_FORMAT?: string;
        sUPPORT_TRANSFER_RESOURCECODE?: string;
        sUPPORT_TRANSFER_SELECTBYCOLUMNS_FORMAT?: string;
        tAX_NUMBER?: string;
        tAX_OFFICE?: string;
        tCKN?: string;
        tEST_REPORT_FOLDER?: string;
        tHE_COMPANY_WILL_PAY_AT_MATURITY?: string;
        tOTAL?: string;
        tOTAL_AMOUNT?: string;
        tOTAL_AMOUNT_LEASING?: string;
        tOTAL_AMOUNT_OF_PROFITSHARE_PAID_BY_THE_GOVERNMENT_THIS_MONTH?: string;
        tOTAL_CREDIT?: string;
        tOTAL_INSTALLMENT_AMOUNT?: string;
        tOTAL_PAID_PROFIT_SHARE_IN_MATURITY?: string;
        tOTAL_PROFIT_SHARE_AMOUNT?: string;
        tOTAL_PROFIT_SHARE_AMOUNT_LEASING?: string;
        tR_COUNTRY_CODE?: string;
        tRANDATE?: string;
        tRANSFER_SUCCESSFULL?: string;
        tXT_FILE_EXTENSION?: string;
        uRBAN_RENEWAL_COLLECTION_REPORT_NAME_FORMAT?: string;
        uRBAN_RENEWAL_MONEY_TRANSFER_DESCRIPTION?: string;
        uRBAN_RENEWAL_PROFITSHARE_SUPPORT_REPORT_TEMPLATE_CODE?: string;
        uRBAN_RENEWAL_VENDOR_PAYMENT_REPORT_NAME_FORMAT?: string;
        uRBAN_RENEWAL_VENDOR_PAYMENT_REPORT_TEMPLATE_CODE?: string;
        uSE_AMOUNT?: string;
        uSE_CONDITION?: string;
        uSE_DATE?: string;
        vALUE_DATE?: string;
        wORKFLOW_USER_DESCRIPTION?: string;
        yP?: string;
        zIP_FILE_EXTENSION?: string;
    }
    interface KarzProjectBeginSubFlowActionId {
    }
    interface LeasingAgreementAmendmentType {
    }
    interface LeasingAgreementRepresentativeClass {
    }
    interface LeasingAgreementStatus {
    }
    interface LeasingAgreementType {
    }
    interface LimitAndMaturityStateName {
    }
    interface ProjectForeignPaymentTransactionGroup {
    }
    interface ProjectForeignPaymentTransactionType {
    }
    interface ProjectForeignPaymentTransferType {
    }
    interface ProjectParameters {
    }
    interface ProjectSaleNotificationType {
    }
    interface ProposalStatus {
    }
    interface ProposalWFState {
    }
    interface ReportName {
    }
    interface ScreenMode {
    }
    interface VendorDefinitionResources {
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.EasyLoan {
    export const enum EasyLoanDocumentApproveStatusEnum {
        NotChecked = 0,
        Approved = 1,
        Rejected = 2
    }
    interface EasyLoanProposalWFRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        accountNumber?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        mailSendData?: BOA.Common.Types.MailSendData;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.Leasing {
    interface LeasingImportDocumentItem extends BOA.Common.Types.ContractBase {
        itemId?: number;
        itemType?: string;
        itemValue?: string;
    }
    interface LeasingImportOrderFormContract extends BOA.Common.Types.ContractBase {
        leasingImportCheckList?: BOA.Types.Kernel.FundUtilization.Leasing.LeasingImportDocumentItem[];
        leasingImportDocumentItemList?: BOA.Types.Kernel.FundUtilization.Leasing.LeasingImportDocumentItem[];
        paymentTransactionType?: string;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.LetterOfIntentContract {
    interface CommonStateOfIntentLetter {
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.OperationCommon {
    interface State {
    }
    interface StateName {
        delete?: string;
        input?: string;
        inputVerify?: string;
        modify?: string;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.Operations {
    interface ProjectDocumentAmountContract extends BOA.Common.Types.ContractBase {
        orderDelegationAmount?: number;
        projectComingDocumentAmount?: number;
        projectFundingAmount?: number;
        projectFundingAmountCurrency?: string;
        projectPaymentAmount?: number;
        vendorComingDocumentAmount?: number;
        vendorPaymentAmount?: number;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.PayBackPlan {
    interface PaybackPlanUpdatePackage {
        accountNumber?: number;
        accountSuffix?: number;
        isManuelUpdateValue?: boolean;
        projectId?: number;
        projectPayBackPlanId?: number;
        updateIsManuel?: boolean;
        updateIsManuelFromToday?: boolean;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.PayBackPlanCommon {
    export const enum DayDifferenceCalculatable {
        No = 0,
        Yes = 1
    }
    export const enum DayDifferenceProfitDistribution {
        None = 0,
        FirstInstallment = 1,
        AllInstallments = 2
    }
    export const enum FundingDateType {
        AveragePaymentDate = 1,
        LastPaymentDate = 2,
        Manuel = 3
    }
    export const enum InstallmentCalculationMethod {
        Fixed = 1,
        FixedDecreasingProfit = 2,
        EqualInstallmentAmount = 3,
        EqualPrincipalAmount = 4,
        InterimPayment = 5,
        IncreasingPayment = 6,
        DecreasingPayment = 7,
        BalloonPayment = 8,
        IrregularPayment = 9,
        FlexibleInstallmentAmount = 10,
        FlexiblePrincipalAmount = 11,
        PeriodicPayment = 12,
        FixedWithZeroPrincipalPaymentPeriod = 13,
        Revolving = 14,
        Reverse = 15
    }
    export const enum InstallmentCalculationMode {
        CalculateByAmount = 0,
        CalculateByPrincipleAmount = 1
    }
    export const enum InstallmentKind {
        Normal = 0,
        LeasingAdvancePayment = 1,
        LeasingTransferPrice = 2,
        Accrual = 3
    }
    export const enum InstallmentPeriod {
        Daily = 1,
        Weekly = 7,
        Monthly = 30,
        Yearly = 360
    }
    export const enum InstallmentType {
        None = 0,
        Fixed = 1,
        Flexible = 2,
        Periodic = 3,
        Reverse = 4
    }
    export const enum PayBackPlanParent {
        NoParent = 0,
        Proposal = 1,
        Project = 2
    }
    export const enum PeriodicPaymentPeriods {
        First = 3,
        Second = 6,
        Third = 9,
        Fourth = 12
    }
    export const enum ProfitCalculationMode {
        Compound = 0,
        Simple = 1
    }
    export const enum Status {
        Passive = 0,
        Active = 1
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.PPCommon {
    export const enum BehaviorType {
        None = 0,
        LocalToLocal = 1,
        LocalToForeign = 2,
        ForeignToLocal = 3,
        ForeignToSameForeign = 4,
        ForeignToOtherForeign = 5
    }
    export const enum PaymentDetailType {
        None = 0,
        MalBedeli = 1,
        Gumruk_Vergisi = 2,
        Gumruk_Masrafı = 3,
        Ekspertiz = 4,
        Sigorta = 5,
        Musavirlik_Hizmeti = 6,
        Noter = 7,
        Tescil_Masrafi = 8,
        Leasing_Masrafi = 9,
        TeminatMektubu = 10,
        Exim_Masrafi = 11
    }
    export const enum PaymentFixAmountType {
        TalepTutari = 0,
        OdemeTLKarsilik = 1,
        BorclanmaTutari = 2
    }
    export const enum PaymentType {
        None = 0,
        Siparis = 1,
        Vekalet = 2,
        SozluVekalet = 3,
        SartliVekalet = 4,
        Diger = 5
    }
    export const enum State {
        None = 0,
        Saved = 1,
        WaitingApproval = 2,
        WaitingProjectApproval = 3,
        ProjectRejected = 4,
        Executed = 5,
        Rejected = 6,
        DispatchExchange = 7,
        ReturnedByExchange = 8,
        WaitProjectCollateral = 9,
        ProjectRevised = 10,
        Canceled = 11
    }
    export const enum TransferDetailType {
        None = 0,
        EFT = 1,
        IBT = 2,
        SWIFT = 3
    }
    export const enum TransferType {
        None = 0,
        EFTToSafe = 1,
        IBTToSafe = 2,
        ToGeneralLedger = 3,
        ToCustomerLedger = 4,
        ToAccount = 5
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.PPRCommon {
    export const enum AvgPaymentDateChanges {
        NoChange = 0,
        Change = 1
    }
    export const enum FECType {
        ProjectFEC = 0,
        BankFEC = 1
    }
    export const enum ReturnSource {
        None = 0,
        Customer = 1,
        Bank = 2
    }
    export const enum ReturnType {
        None = 0,
        Account = 1,
        GeneralLedger = 2
    }
    export const enum State {
        None = 0,
        Saved = 1,
        WaitingApproval = 2,
        Approved = 3,
        Rejected = 4,
        ProjectRevised = 5
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.PricingCommon {
    interface ReportName {
    }
    interface State {
    }
    interface StateName {
        delete?: string;
        input?: string;
        inputVerify?: string;
        modify?: string;
    }
    interface Status {
    }
    interface StatusDesc {
        active?: string;
        passive?: string;
        pendingApproval?: string;
        temporary?: string;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.Project {
    interface ProjectCommon {
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.Project.ProjectCommon {
    export const enum ProjectCommandType {
        Insert = 1,
        Control = 2,
        BranchProjectApprove = 3,
        ApproveDispatch = 4,
        BranchProjectReject = 5,
        ChangePayBackPlanByPayment = 6,
        SendToOperation = 7,
        SendToBranch = 8,
        SendToBranchForUpdate = 9,
        Update = 10,
        ProjectUpdate = 11,
        Import = 12,
        ReviseAuthorization = 13,
        Revise = 14,
        OPMProjectUpdate = 15,
        CancelProjectUpdate = 16,
        Divit = 17,
        ConfirmCloseDocument = 18,
        XTMProjectReject = 19,
        ProjectDocumentControl = 20,
        RestartProject = 21,
        OrderDelegation = 22,
        XTMProjectApprove = 23,
        ProjectDocument = 24,
        CloseDocumentReturnToSpecialist = 25,
        ProjectPaymentList = 26,
        NotifySale = 27,
        ProjectInsuranceList = 28,
        ExcelToPaymentDocument = 29,
        ExcelToPayment = 30,
        CustomsDeclaration = 31,
        Run = 32,
        LeasingCostAnalysis = 33,
        Confirm = 34,
        Agreement = 35,
        CloseDocument = 36,
        CancelConfirm = 37,
        Cancel = 38,
        BranchCancel = 39,
        StartProjectUpdate = 40,
        StartApprove = 41,
        Print = 42,
        OpenExternalCost = 43,
        LifeInsuranceProposal = 44,
        GetInsurancePrice = 45,
        Forward = 46,
        CloseWithPenaltyOrMissingDocumentSendToApprove = 47,
        Close = 48,
        ChangeFundPool = 49,
        CancelCloseDocument = 50,
        ApproveDispacthWithoutWitholding = 51,
        ApplicationForm = 52,
        PrintAll = 53,
        CloseWithPenaltyOrMissingDocumentApprove = 54,
        History = 55,
        CloseWithPenaltyOrMissingDocumentReject = 56,
        Past = 57,
        Form = 58,
        Contract = 59,
        Template = 60,
        CommitmentDetail = 61,
        BahrainForms = 62,
        CreditOperationApprove = 63
    }
    interface ClosingType {
    }
    interface CollectionStatus {
    }
    interface Parameters {
    }
    interface ProjectReviseReason {
    }
    interface ProjectType {
    }
    interface ProjecyPenaltyPoolState {
    }
    interface Status {
    }
    interface TranType {
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.ProposalAndProject {
    interface ProposalAndProjectExtensionInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        anyCreditGuaranteeFund?: boolean;
        anyProjectFinance?: boolean;
        extensionInfoDetailList?: BOA.Types.Kernel.FundUtilization.ProposalAndProject.ProposalAndProjectExtensionInfoDetailContract[];
        getCreditGuaranteeFund?: BOA.Types.Kernel.Collateral.LGFContract;
        getProjectFinance?: BOA.Types.Kernel.ProjectFinance.ProjectFinanceListContract;
        sourceId?: number;
        sourceType?: number;
    }
    interface ProposalAndProjectExtensionInfoDetailContract extends BOA.Common.Types.ContractBase {
        contract?: any;
        extensionId?: number;
        extensionType?: number;
        extensionTypeName?: string;
        hostName?: string;
        isActive?: number;
        referenceAmount?: number;
        referenceAmountFEC?: number;
        referenceAmountFECCode?: string;
        referenceDetail?: string;
        referenceId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProposalAndProjectExtensionInfoFilterMethodParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        extensionId?: number;
        extensionType?: BOA.Types.Kernel.FundUtilization.ProposalAndProjectExtensionTypeEnumeration;
        personType?: BOA.Types.Kernel.FundUtilization.CommonStatics.PersonType;
        referenceId?: number;
        sourceId?: number;
        sourceType?: BOA.Types.Kernel.FundUtilization.FundUtilizationProcessEnumeration;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.Report {
    interface AdditionalList {
    }
    interface ProjectDetail {
        additionNumber?: string;
        cost?: string;
        currency?: string;
        date?: string;
        kDVPrice?: string;
        nonKDVAmount?: string;
        number?: string;
        principalAmount?: string;
        profitAmount?: string;
        rentAmount?: string;
        subMoney?: string;
    }
    interface ProjectInfo {
        accountNumber?: string;
        accountSuffix?: string;
        additionNumber?: string;
        bondTime?: string;
        debtFer?: string;
        fundingFER?: string;
        operationForwardDate?: string;
        profitRateOfMonthly?: string;
        profitRateOfYearly?: string;
        projectCurrency?: string;
        projectDate?: string;
        rentPrice?: string;
        totalCostRate?: string;
        transferPrice?: string;
    }
    interface Tenancy {
        brand?: string;
        count?: string;
        type?: string;
    }
}
declare namespace BOA.Types.Kernel.FundUtilization.RestructuringConstants {
    export const enum RestructuringMetal {
        PLATIN = 2
    }
    export const enum RestructuringType {
        KlasikTeverruk = 1,
        NakitTevurruk = 2
    }
    interface ParameterTypes {
    }
    interface ResourceCodes {
    }
}
declare namespace BOA.Types.Kernel.FX {
    export const enum BankLimitProcessType {
        Teminat = 0,
        VadesizMevduat = 1,
        MurabahaSatis = 2,
        MurabahaAlis = 3,
        ExchangeOfDeposit = 4,
        FXNetting = 5,
        FXSettlement = 6,
        IhracatAkreditif = 7,
        GarantiMektubu = 8,
        LikiditeSwap = 9,
        NettingSwap = 10,
        PlasmanSwap = 11,
        Sukuk = 12
    }
    export const enum FXIndexContract {
        TellerPrice = 0,
        MarketPrice = 2,
        CentralBankPrice = 3,
        InterBankPrice = 4,
        BanksPrice = 5,
        SmallAmountRate = 7,
        RateReasonability = 10,
        MarketData = 101,
        EvaluationRate = 14
    }
    export const enum FXJournalInstrument {
        SPOT = 1,
        FORWARD = 2,
        SWAPNEAR = 3,
        SWAPFAR = 4
    }
    export const enum FXJournalStatus {
        Inactive = 0,
        Active = 1,
        Pending = 2
    }
    export const enum FXReferenceStatus {
        Draft = -1,
        WaitApprove = 0,
        Approved = 1,
        Rejected = 2,
        Used = 3,
        Unused = 4,
        Canceled = 5,
        Inactive = 6,
        Updated = 7
    }
    export const enum GoldOrderTransactionStatus {
        Fail = 1,
        Success = 2,
        Cancel = 3
    }
    interface ActiveInvestmentFundContract extends BOA.Common.Types.ContractBase {
        accretion?: boolean;
        businessKey?: number;
        cancellationLastTime?: any;
        code?: string;
        definitionDate?: Date;
        exceptionExplanation?: string;
        fDKO?: number;
        fec?: number;
        foreignNationalTransaction?: boolean;
        founderMemberCode?: string;
        founderName?: string;
        fundKind?: string;
        fundStatus?: boolean;
        fundType?: string;
        fYUO?: number;
        halfDayCancellationLastTime?: any;
        hostIp?: string;
        hostName?: string;
        internalRegulationsShareRate?: number;
        investmentFundId?: number;
        isActive?: boolean;
        isFromTEFAS?: string;
        iSIN?: string;
        isOnlyOpenToQualifiedInvestor?: boolean;
        isTEFASQuotation?: boolean;
        name?: string;
        nonWorkingDays?: string;
        notificationDate?: Date;
        notificationUser?: string;
        oldFundCode?: string;
        oldFundKind?: string;
        oldFundType?: string;
        operatorCode?: string;
        operatorName?: string;
        porfolioShareRate?: number;
        rateOfPriceMarginInPercent?: number;
        repurchaseHalfDayValueDateShiftTime?: any;
        repurchaseMaximumQuantity?: number;
        repurchaseMethodPreference?: string;
        repurchaseMinimumQuantity?: number;
        repurchasePriceValueDate?: number;
        repurchaseQuantityFactor?: number;
        repurchaseValueDate?: number;
        repurchaseValueDateShiftDays?: number;
        repurchaseValueDateShiftTime?: any;
        sellHalfDayValueDateShiftTime?: any;
        sellInitialQuantity?: number;
        sellMaximumQuantity?: number;
        sellMethodPreference?: string;
        sellMinimumQuantity?: number;
        sellPriceValueDate?: number;
        sellQuantityFactor?: number;
        sellValueDate?: number;
        sellValueDateShiftDays?: number;
        sellValueDateShiftTime?: any;
        systemDate?: Date;
        taxBaseGroup?: string;
        title?: string;
        transactionEndTime?: any;
        transactionStartTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ActiveSecurityContract extends BOA.Common.Types.ContractBase {
        accrualMethod?: number;
        activeISIN?: string;
        couponNo?: number;
        couponRate?: number;
        dateBasis?: number;
        fec?: number;
        finishDate?: Date;
        iSIN?: string;
        isIssuedForQualifiedCustomer?: boolean;
        isStrips?: boolean;
        isStripsStr?: string;
        isSubjectToStoppage?: boolean;
        issueDate?: Date;
        issueLocation?: number;
        issuerAccountNumber?: number;
        issuerAccountSuffix?: number;
        issuerType?: number;
        maturityDate?: Date;
        perUnit?: number;
        principalISIN?: string;
        reutersCode?: string;
        securityCouponId?: number;
        securityId?: number;
        securityTemplate?: number;
        sourceOrganizationAccountNumber?: number;
        sourceOrganizationAccountSuffix?: number;
        startDate?: Date;
        stoppageRate?: number;
        title?: string;
        totalCouponCount?: number;
    }
    interface AvailableCostContract extends BOA.Common.Types.ContractBase {
        costId?: string;
        custodianAccountNumber?: number;
        custodianAccountSuffix?: number;
        depotNo?: string;
        nominal?: number;
        portfolioPath?: string;
        valueDate?: Date;
    }
    interface BankLimitConract extends BOA.Common.Types.ContractBase {
        bankAssignedLimit?: number;
        bankName?: string;
        bankRemainingLimit?: number;
        countryAssignedLimit?: number;
        countryRemainingLimit?: number;
        productAssignedLimit?: number;
        productRemainingLimit?: number;
    }
    interface BankLimitRequest extends BOA.Common.Types.TransactionRequestBase {
        accountNumber?: number;
        processType?: string;
        tranDate?: Date;
    }
    interface Constants {
    }
    interface DailyTransactionCostContract extends BOA.Common.Types.ContractBase {
        dailyTransactionCostId?: number;
        depoNo?: string;
        fIFOType?: string;
        hostIP?: string;
        hostName?: string;
        nominal?: number;
        portfolioPath?: string;
        securityId?: number;
        sukukTransactionId?: number;
        systemDate?: Date;
        transactionState?: number;
        transactionType?: string;
        unitDirtyPrice?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
    }
    interface DebtSecurityConstants {
    }
    interface FEIndexContract extends BOA.Common.Types.ContractBase {
        accountClass?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        depositBranchCostIndex?: number;
        depositTransactionIndex?: number;
        fXId?: number;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        indexCoef?: number;
        indexType?: number;
        isDirty?: boolean;
        isNew?: boolean;
        isSelect?: boolean;
        systemDate?: Date;
        updateDate?: Date;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface FIPriceGenerator extends BOA.Common.Types.ContractBase {
        askQuote?: number;
        bidQuote?: number;
        coefficientOfVariation?: number;
        inUse?: boolean;
        isAskQuoted?: boolean;
        isBidQuoted?: boolean;
        iSIN?: string;
        isOnline?: boolean;
        isTransactionLimited?: boolean;
        portfolioPath?: string;
        securityId?: number;
        state?: number;
        transactionLimit?: number;
    }
    interface FIPriceInternetBranchContract extends BOA.Common.Types.ContractBase {
        daysToMaturity?: number;
        fec?: number;
        fecCode?: string;
        iSIN?: string;
        isIssuedForQualifiedCustomer?: boolean;
        issuerTypeDescription?: string;
        isTransactionLimited?: boolean;
        maturityDate?: Date;
        minimumTransactionLimit?: number;
        priceAskDirty?: number;
        priceBidDirty?: number;
        yieldRateAsk?: number;
        yieldRateBid?: number;
    }
    interface FIPriceLimitContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        inUse?: boolean;
        iSIN?: string;
        isTransactionLimited?: boolean;
        transactionLimit?: number;
    }
    interface FIPriceViewContract {
        indexType?: number;
        iSIN?: string;
        priceAskClean?: number;
        priceAskDirty?: number;
        priceAskDirtyTL?: number;
        priceBidClean?: number;
        priceBidDirty?: number;
        priceBidDirtyTL?: number;
        priceMidClean?: number;
        priceMidDirty?: number;
        sinkItem?: string;
        tranDate?: Date;
    }
    interface FXAccessLimitContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        accessPointIdList?: number[];
        accessPointText?: string;
        accountClass?: number;
        changeRangeDown?: number;
        changeRangeUp?: number;
        fec?: number;
        fromAmount?: number;
        fXId?: number;
        roleName?: string;
        toAmount?: number;
        userName?: string;
        workgroupName?: string;
    }
    interface FXBrowseContract extends BOA.Common.Types.ContractBase {
        currencyAsk?: number;
        currencyAskIncreaseValue?: number;
        currencyBid?: number;
        currencyBidIncreaseValue?: number;
        effectiveAsk?: number;
        effectiveAskIncreaseValue?: number;
        effectiveBid?: number;
        effectiveBidIncreaseValue?: number;
        fecCode?: string;
        fecIconPath?: string;
        fecId?: number;
        fecName?: string;
        indexDescription?: string;
        indexType?: number;
        margin?: number;
        parity?: number;
        parityAsk?: number;
        parityAskIncreaseValue?: number;
        parityBid?: number;
        parityBidIncreaseValue?: number;
        parityIncreaseValue?: number;
        pointLabel?: string;
        pointValue?: number;
        rowNumber?: number;
        seriesLabel?: string;
        tranDate?: Date;
        tranTime?: Date;
        valueChangeDescription?: string;
    }
    interface FXComponentContract extends BOA.Common.Types.ContractBase {
        accountClass?: number;
        askBankParity?: number;
        askBranchParity?: number;
        askCentralBankParity?: number;
        askLowAmountParity?: number;
        baseDepositRate?: number;
        baseFEC?: number;
        bidBankParity?: number;
        bidBranchParity?: number;
        bidCentralBankParity?: number;
        bidLowAmountParity?: number;
        branchCostRate?: number;
        branchCostRateBase?: number;
        branchCostRateForward?: number;
        changeRangeDown?: number;
        changeRangeDownAmount?: number;
        changeRangeUp?: number;
        changeRangeUpAmount?: number;
        coefForMinTranAmount?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        customerAdvantage?: number;
        derivativeProfitOrLossValue?: number;
        effectiveAskBankParity?: number;
        effectiveAskBranchParity?: number;
        effectiveAskLowAmountParity?: number;
        effectiveBidBankParity?: number;
        effectiveBidBranchParity?: number;
        effectiveBidLowAmountParity?: number;
        fec1TranAmount?: number;
        fec1UnitMultiplier?: number;
        fec2TranAmount?: number;
        fec2UnitMultiplier?: number;
        fecGroup?: number;
        fromAmountForLimit?: number;
        fXEngineContractList?: BOA.Types.Kernel.FX.FXEngineContract[];
        fXID?: number;
        fXJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        fXRate?: number;
        indexCoef?: number;
        indexType?: number;
        info?: string;
        lossRatio?: number;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minAmountForIndex?: number;
        minTranAmountForRef?: number;
        pairDepositRate?: number;
        parity?: number;
        profitOrLossCoef?: number;
        profitOrLossValue?: number;
        profitOrLossValueWithCoef?: number;
        profitRatio?: number;
        proposedRate?: number;
        spotRate?: number;
        toAmountForLimit?: number;
        tranFXRate?: number;
        tranFXRateAsk?: number;
        tranFXRateBid?: number;
        tranType?: number;
        tRYEquivalentRate?: number;
        uSDEquivalentRate?: number;
        useBranchRateForLimitOnRef?: boolean;
    }
    interface FXComponentContract extends BOA.Common.Types.ContractBase {
        accountClass?: number;
        askBankParity?: number;
        askBranchParity?: number;
        askCentralBankParity?: number;
        askLowAmountParity?: number;
        baseDepositRate?: number;
        baseFEC?: number;
        bidBankParity?: number;
        bidBranchParity?: number;
        bidCentralBankParity?: number;
        bidLowAmountParity?: number;
        branchCostRate?: number;
        branchCostRateBase?: number;
        branchCostRateForward?: number;
        changeRangeDown?: number;
        changeRangeDownAmount?: number;
        changeRangeUp?: number;
        changeRangeUpAmount?: number;
        coefForMinTranAmount?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        customerAdvantage?: number;
        derivativeProfitOrLossValue?: number;
        effectiveAskBankParity?: number;
        effectiveAskBranchParity?: number;
        effectiveAskLowAmountParity?: number;
        effectiveBidBankParity?: number;
        effectiveBidBranchParity?: number;
        effectiveBidLowAmountParity?: number;
        fec1TranAmount?: number;
        fec1UnitMultiplier?: number;
        fec2TranAmount?: number;
        fec2UnitMultiplier?: number;
        fecGroup?: number;
        fromAmountForLimit?: number;
        fXEngineContractList?: BOA.Types.Kernel.FX.FXEngineContract[];
        fXID?: number;
        fXJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        fXRate?: number;
        indexCoef?: number;
        indexType?: number;
        info?: string;
        lossRatio?: number;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minAmountForIndex?: number;
        minTranAmountForRef?: number;
        pairDepositRate?: number;
        parity?: number;
        profitOrLossCoef?: number;
        profitOrLossValue?: number;
        profitOrLossValueWithCoef?: number;
        profitRatio?: number;
        proposedRate?: number;
        spotRate?: number;
        toAmountForLimit?: number;
        tranFXRate?: number;
        tranFXRateAsk?: number;
        tranFXRateBid?: number;
        tranType?: number;
        tRYEquivalentRate?: number;
        uSDEquivalentRate?: number;
        useBranchRateForLimitOnRef?: boolean;
    }
    interface FXCustomerSpecificBranchRateContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beginDate?: Date;
        branchId?: number;
        branchRateCoefAsk?: number;
        branchRateCoefBid?: number;
        description?: string;
        endDate?: Date;
        hostName?: string;
        id?: number;
        rareMetalBranchRateCoefAsk?: number;
        rareMetalBranchRateCoefBid?: number;
        specialTranFXRateAskCoef?: number;
        specialTranFXRateBidCoef?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FXDefinitionContract extends BOA.Common.Types.ContractBase {
        additionalCoefficient?: number;
        channelId?: number;
        channelName?: string;
        endTime?: any;
        fecGroup?: number;
        fecGroupName?: string;
        fullName?: string;
        fXId?: number;
        fXIndexList?: BOA.Types.Kernel.FX.FEIndexContract[];
        fXKey?: number;
        fXKeyName?: string;
        fXLimitsList?: BOA.Types.Kernel.FX.FXLimitsContract[];
        fXTimeLimitList?: BOA.Types.Kernel.FX.FXTimeLimitContract[];
        isNew?: boolean;
        maxTranAmountForRef?: number;
        minTranAmountForRef?: number;
        profitOrLossCoef?: number;
        referenceExpireTime?: number;
        resourceCode?: string;
        resourceName?: string;
        startTime?: any;
        tranType?: number;
        tranTypeName?: string;
        useAdditionalCoefficient?: boolean;
        useBranchRateForLimitOnRef?: boolean;
        useCustomerAdvantage?: boolean;
    }
    interface FXDepositContract extends BOA.Common.Types.ContractBase {
        approvedBy?: string;
        beginDate?: Date;
        depositAsk?: number;
        depositBid?: number;
        depositMid?: number;
        description?: string;
        endDate?: Date;
        fec?: number;
        fecDesc?: string;
        indexType?: number;
        ricName?: string;
        spread?: number;
        term?: number;
        termDesc?: string;
        termDescDay?: string;
        termDescPeriod?: string;
        tranDate?: Date;
    }
    interface FXEngineContract extends BOA.Common.Types.ContractBase {
        currencyAsk?: number;
        currencyBid?: number;
        currencyCode?: number;
        effectiveAsk?: number;
        effectiveBid?: number;
        indexType?: number;
        indexTypeName?: string;
        parity?: number;
        parityAsk?: number;
        parityBid?: number;
        tranDate?: Date;
        visible?: boolean;
    }
    interface FXEngineContract extends BOA.Common.Types.ContractBase {
        currencyAsk?: number;
        currencyBid?: number;
        currencyCode?: number;
        effectiveAsk?: number;
        effectiveBid?: number;
        indexType?: number;
        indexTypeName?: string;
        parity?: number;
        parityAsk?: number;
        parityBid?: number;
        tranDate?: Date;
        visible?: boolean;
    }
    interface FXJournalContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bankRate?: number;
        baseFEC?: number;
        branchId?: number;
        branchRate?: number;
        branchRateBase?: number;
        branchRateForward?: number;
        businessKey?: number;
        changeRangeDown?: number;
        changeRangeDownAmount?: number;
        changeRangeUp?: number;
        changeRangeUpAmount?: number;
        coefForMinTranAmount?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        customerAdvantage?: number;
        derivativeProfitOrLossValue?: number;
        description?: string;
        fecAsk?: number;
        fecAskTranAmount?: number;
        fecBid?: number;
        fecBidTranAmount?: number;
        fromAmountForLimit?: number;
        fXId?: number;
        hostName?: string;
        id?: number;
        indexCoef?: number;
        indexType?: number;
        instrument?: BOA.Types.Kernel.FX.FXJournalInstrument;
        isTradePlusOperation?: boolean;
        lowAmountRate?: number;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minTranAmount?: number;
        minTranAmountForRef?: number;
        partyNo?: string;
        pMAmountTRY?: number;
        pMAmountUSD?: number;
        pMBankProfitLoss?: number;
        pMRateTRY?: number;
        pMRateUSD?: number;
        portfolioPath?: string;
        profitOrLossCoef?: number;
        profitOrLossValue?: number;
        reference?: string;
        resourceCode?: string;
        spotRate?: number;
        status?: BOA.Types.Kernel.FX.FXJournalStatus;
        systemDate?: Date;
        toAmountForLimit?: number;
        tranDate?: Date;
        tranFXRate?: number;
        tranFXRateAsk?: number;
        tranFXRateBid?: number;
        transactionReference?: string;
        tRYEquivalentRate?: number;
        uSDEquivalentRate?: number;
        userName?: string;
    }
    interface FXJournalContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bankRate?: number;
        baseFEC?: number;
        branchId?: number;
        branchRate?: number;
        branchRateBase?: number;
        branchRateForward?: number;
        businessKey?: number;
        changeRangeDown?: number;
        changeRangeDownAmount?: number;
        changeRangeUp?: number;
        changeRangeUpAmount?: number;
        coefForMinTranAmount?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        customerAdvantage?: number;
        derivativeProfitOrLossValue?: number;
        description?: string;
        fecAsk?: number;
        fecAskTranAmount?: number;
        fecBid?: number;
        fecBidTranAmount?: number;
        fromAmountForLimit?: number;
        fXId?: number;
        hostName?: string;
        id?: number;
        indexCoef?: number;
        indexType?: number;
        instrument?: BOA.Types.Kernel.FX.FXJournalInstrument;
        isTradePlusOperation?: boolean;
        lowAmountRate?: number;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minTranAmount?: number;
        minTranAmountForRef?: number;
        partyNo?: string;
        pMAmountTRY?: number;
        pMAmountUSD?: number;
        pMBankProfitLoss?: number;
        pMRateTRY?: number;
        pMRateUSD?: number;
        portfolioPath?: string;
        profitOrLossCoef?: number;
        profitOrLossValue?: number;
        reference?: string;
        resourceCode?: string;
        spotRate?: number;
        status?: BOA.Types.Kernel.FX.FXJournalStatus;
        systemDate?: Date;
        toAmountForLimit?: number;
        tranDate?: Date;
        tranFXRate?: number;
        tranFXRateAsk?: number;
        tranFXRateBid?: number;
        transactionReference?: string;
        tRYEquivalentRate?: number;
        uSDEquivalentRate?: number;
        userName?: string;
    }
    interface FXLimitsContract extends BOA.Common.Types.ContractBase {
        coefForMinTranAmount?: number;
        fec?: number;
        fXId?: number;
        isDirty?: boolean;
        isNew?: boolean;
        isSelect?: boolean;
        minAmountForIndex?: number;
    }
    interface FXParityBaseContract extends BOA.Common.Types.ContractBase {
        coefAskBank?: number;
        coefAskBranch?: number;
        coefAskEffective?: number;
        coefAskLowAmount?: number;
        coefBidBank?: number;
        coefBidBranch?: number;
        coefBidEffective?: number;
        coefBidLowAmount?: number;
        coefEfectiveAskBank?: number;
        coefEfectiveAskBranch?: number;
        coefEfectiveAskLowAmount?: number;
        coefEfectiveBidBank?: number;
        coefEfectiveBidBranch?: number;
        coefEfectiveBidLowAmount?: number;
        coefficientOfVariation?: number;
        fecAsk?: number;
		fECAskCode?: string;
		fECAskName?: string;
        fecBid?: number;
		fECBidCode?: string;
		fECBidName?: string;
        inUse?: number;
        parityBase?: number;
		fXParityDesc?: string;
        spotDays?: number;
    }
    interface FXParityBaseContract extends BOA.Common.Types.ContractBase {
        coefAskBank?: number;
        coefAskBranch?: number;
        coefAskEffective?: number;
        coefAskLowAmount?: number;
        coefBidBank?: number;
        coefBidBranch?: number;
        coefBidEffective?: number;
        coefBidLowAmount?: number;
        coefEfectiveAskBank?: number;
        coefEfectiveAskBranch?: number;
        coefEfectiveAskLowAmount?: number;
        coefEfectiveBidBank?: number;
        coefEfectiveBidBranch?: number;
        coefEfectiveBidLowAmount?: number;
        coefficientOfVariation?: number;
        fecAsk?: number;
        fecBid?: number;
        inUse?: number;
        parityBase?: number;
        spotDays?: number;
    }
    interface FXParityBaseViewContract extends BOA.Common.Types.ContractBase {
        fecAsk?: number;
        fecAskCode?: string;
        fecAskName?: string;
        fecBid?: number;
        fecBidCode?: string;
        fecBidName?: string;
        fecParity?: number;
        fecParityCode?: string;
        iconPath1?: string;
        iconPath2?: string;
        iconPathParity?: string;
        parityBase?: number;
    }
    interface FXRateContract {
        countryCode?: number;
        currencyAsk?: number;
        currencyBid?: number;
        currencyCode?: number;
        currencyDescription?: string;
        currencyShortCode?: string;
        effectiveAsk?: number;
        effectiveBid?: number;
        fec?: number;
        fecGroup?: number;
        indexType?: number;
        languageId?: number;
        parity?: number;
        parityAsk?: number;
        parityBid?: number;
        tranDate?: Date;
    }
    interface FXRateContract {
        countryCode?: number;
        currencyAsk?: number;
        currencyBid?: number;
        currencyCode?: number;
        currencyDescription?: string;
        currencyShortCode?: string;
        effectiveAsk?: number;
        effectiveBid?: number;
        fec?: number;
        fecGroup?: number;
        indexType?: number;
        languageId?: number;
        parity?: number;
        parityAsk?: number;
        parityBid?: number;
        tranDate?: Date;
    }
    interface FXRateResultContract {
        buyingFer?: number;
        buyingProfitLoss?: number;
        fXRateInfo?: BOA.Types.Kernel.FX.FXRateContract;
        maxFer?: number;
        minFer?: number;
        sellingFer?: number;
        sellingProfitLoss?: number;
    }
    interface FXReferenceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        approvedBy?: string;
        approveSpotRate?: number;
        baseDepositRate?: number;
        baseTreasuryRate?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        callCenterConfirmationStatusDesc?: string;
        callRecordId?: number;
        callRequest?: number;
        callRequestDesc?: string;
        changeRangeDownAmount?: number;
        changeRangeUpAmount?: number;
        changeReason?: string;
        confirmationMailSentStatus?: number;
        confirmCallStatus?: number;
        createdBy?: string;
        customerName?: string;
        derivativesMargin?: number;
        description?: string;
        fecAsk?: number;
        fecAskCode?: string;
        fecAskName?: string;
        fecAskTranAmount?: number;
        fecBid?: number;
        fecBidCode?: string;
        fecBidName?: string;
        fecBidTranAmount?: number;
        generalControlResult?: boolean;
        hostName?: string;
        iD?: number;
        instanceId?: number;
        isCustomerDemand?: boolean;
        isLimitedTransaction?: boolean;
        isStartedByTreasury?: boolean;
        isTradePlusOperation?: boolean;
        isUseNextDay?: boolean;
        isUseSectional?: boolean;
        manuelProfitLoss?: number;
        manuelProfitLossFWD?: number;
        manuelProfitOrLossIncluded?: boolean;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minTranAmountForRef?: number;
        newConfirmCallStatus?: number;
        originalTranDate?: Date;
        pairDepositRate?: number;
        pairTreasuryRate?: number;
        parity?: number;
        parityBase?: number;
        profitLossIncluded?: boolean;
        reference?: string;
        regionId?: number;
        regionName?: string;
        resourceCode?: string;
        resourceName?: string;
        spotMargin?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranFXRateOnApprove?: number;
        tranResourceCode?: string;
        tranType?: number;
        tranTypeName?: string;
        tRYEquivalentValue?: number;
        uSDEquivalentValue?: number;
        usedBy?: string;
        userName?: string;
    }
    interface FXReferenceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        approvedBy?: string;
        approveSpotRate?: number;
        baseDepositRate?: number;
        baseTreasuryRate?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        callCenterConfirmationStatusDesc?: string;
        callRecordId?: number;
        callRequest?: number;
        callRequestDesc?: string;
        changeRangeDownAmount?: number;
        changeRangeUpAmount?: number;
        changeReason?: string;
        confirmationMailSentStatus?: number;
        confirmCallStatus?: number;
        createdBy?: string;
        customerName?: string;
        derivativesMargin?: number;
        description?: string;
        fecAsk?: number;
        fecAskCode?: string;
        fecAskName?: string;
        fecAskTranAmount?: number;
        fecBid?: number;
        fecBidCode?: string;
        fecBidName?: string;
        fecBidTranAmount?: number;
        generalControlResult?: boolean;
        hostName?: string;
        iD?: number;
        instanceId?: number;
        isCustomerDemand?: boolean;
        isLimitedTransaction?: boolean;
        isStartedByTreasury?: boolean;
        isTradePlusOperation?: boolean;
        isUseNextDay?: boolean;
        isUseSectional?: boolean;
        manuelProfitLoss?: number;
        manuelProfitLossFWD?: number;
        manuelProfitOrLossIncluded?: boolean;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minTranAmountForRef?: number;
        newConfirmCallStatus?: number;
        originalTranDate?: Date;
        pairDepositRate?: number;
        pairTreasuryRate?: number;
        parity?: number;
        parityBase?: number;
        profitLossIncluded?: boolean;
        reference?: string;
        regionId?: number;
        regionName?: string;
        resourceCode?: string;
        resourceName?: string;
        spotMargin?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranFXRateOnApprove?: number;
        tranResourceCode?: string;
        tranType?: number;
        tranTypeName?: string;
        tRYEquivalentValue?: number;
        uSDEquivalentValue?: number;
        usedBy?: string;
        userName?: string;
    }
    interface FXReferenceInformationRequest extends BOA.Common.Types.RequestBase {
        fXJournal?: BOA.Types.Kernel.FX.FXJournalContract;
        fXReference?: BOA.Types.Kernel.FX.FXReferenceContract;
    }
    interface FXTimeLimitContract extends BOA.Common.Types.ContractBase {
        endTime?: any;
        fecGroup?: number;
        fXId?: number;
        isDirty?: boolean;
        isNew?: boolean;
        isSelect?: boolean;
        startTime?: any;
    }
    interface FXTransactionsContract extends BOA.Common.Types.ContractBase {
        accountBranchID?: number;
        accountBranchIDTo?: number;
        accountIBAN?: string;
        accountIBANTo?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountSuffixTo?: number;
        appliedRate?: number;
        appliedRateForPreciousMetalAskSlip?: number;
        appliedRateForPreciousMetalBidSlip?: number;
        askAmount?: number;
        askAmount24GoldValueForPreciousMetalAskSlip?: number;
        askAmountSlipDescriptionForPreciousMetalAsk?: string;
        askFEC?: number;
        askStatisticsCode?: string;
        askUnitMultiplier?: number;
        authorizedIdentityOnBehalfOfFirm?: string;
        authorizedNameOnBehalfOfFirm?: string;
        authorizedOrByOrder?: number;
        authorizedPersonId?: number;
        authorizedPhoneOnBehalfOfFirm?: string;
        banknoteAmount?: number;
        baseFEC?: number;
        bidAmount?: number;
        bidAmount24GoldValueForPreciousMetalBidSlip?: number;
        bidAmountSlipDescriptionForPreciousMetalBid?: string;
        bidFEC?: number;
        bidOrAsk?: number;
        bidStatisticsCode?: string;
        bidUnitMultiplier?: number;
        blackListVerificationType?: number;
        branchRate?: number;
        businessKey?: number;
        centralBankRate?: number;
        channelEx?: string;
        channelId?: number;
        cOE_id?: number;
        coinAmount?: number;
        creditCard?: string;
        creditCardAccountSuffix?: number;
        customerAddress?: string;
        customerName?: string;
        customerPhone?: string;
        customerTaxOffice?: string;
        customerTypeName?: string;
        description?: string;
        divitId?: any;
        eODBusinessKey?: number;
        fecDesc?: string;
        fecDesc2?: string;
        fecReceiptOrder?: number;
        fecReceiptSerial?: string;
        firmIdentityOnBehalfOfCustomer?: string;
        firmTitleOnBehalfOfCustomer?: string;
        flowStatus?: number;
        flowStatusEx?: string;
        fXTranId?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        isCorporate?: boolean;
        isFixedRate?: number;
        isFromAccount?: boolean;
        isFromCreditCard?: boolean;
        isToAccount?: boolean;
        nationality?: string;
        ownXtmBranchId?: number;
        productType?: number;
        profitLoss?: number;
        profitLossIncluded?: boolean;
        proposedRate?: number;
        reference?: string;
        resourceCode?: string;
        reverseBusinessKey?: number;
        systemDate?: Date;
        taxNumber?: string;
        tLAmount?: number;
        tranBranchId?: number;
        tranBranchName?: string;
        tranCode?: number;
        tranCodeEx?: string;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        tranTypeEx?: string;
        unpaidAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usdAmount?: number;
        userName?: string;
        warningMessage?: string;
        wfInstanceId?: number;
    }
    interface FXTransactionsContract extends BOA.Common.Types.ContractBase {
        accountBranchID?: number;
        accountBranchIDTo?: number;
        accountIBAN?: string;
        accountIBANTo?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountSuffixTo?: number;
        appliedRate?: number;
        appliedRateForPreciousMetalAskSlip?: number;
        appliedRateForPreciousMetalBidSlip?: number;
        askAmount?: number;
        askAmount24GoldValueForPreciousMetalAskSlip?: number;
        askAmountSlipDescriptionForPreciousMetalAsk?: string;
        askFEC?: number;
        askStatisticsCode?: string;
        askUnitMultiplier?: number;
        authorizedIdentityOnBehalfOfFirm?: string;
        authorizedNameOnBehalfOfFirm?: string;
        authorizedOrByOrder?: number;
        authorizedPersonId?: number;
        authorizedPhoneOnBehalfOfFirm?: string;
        banknoteAmount?: number;
        baseFEC?: number;
        bidAmount?: number;
        bidAmount24GoldValueForPreciousMetalBidSlip?: number;
        bidAmountSlipDescriptionForPreciousMetalBid?: string;
        bidFEC?: number;
        bidOrAsk?: number;
        bidStatisticsCode?: string;
        bidUnitMultiplier?: number;
        blackListVerificationType?: number;
        branchRate?: number;
        businessKey?: number;
        centralBankRate?: number;
        channelEx?: string;
        channelId?: number;
        cOE_id?: number;
        coinAmount?: number;
        creditCard?: string;
        creditCardAccountSuffix?: number;
        customerAddress?: string;
        customerName?: string;
        customerPhone?: string;
        customerTaxOffice?: string;
        customerTypeName?: string;
        description?: string;
        divitId?: any;
        eODBusinessKey?: number;
        fecDesc?: string;
        fecDesc2?: string;
        fecReceiptOrder?: number;
        fecReceiptSerial?: string;
        firmIdentityOnBehalfOfCustomer?: string;
        firmTitleOnBehalfOfCustomer?: string;
        flowStatus?: number;
        flowStatusEx?: string;
        fXTranId?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        isCorporate?: boolean;
        isFixedRate?: number;
        isFromAccount?: boolean;
        isFromCreditCard?: boolean;
        isToAccount?: boolean;
        nationality?: string;
        ownXtmBranchId?: number;
        productType?: number;
        profitLoss?: number;
        profitLossIncluded?: boolean;
        proposedRate?: number;
        reference?: string;
        resourceCode?: string;
        reverseBusinessKey?: number;
        systemDate?: Date;
        taxNumber?: string;
        tLAmount?: number;
        tranBranchId?: number;
        tranBranchName?: string;
        tranCode?: number;
        tranCodeEx?: string;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        tranTypeEx?: string;
        unpaidAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usdAmount?: number;
        userName?: string;
        warningMessage?: string;
        wfInstanceId?: number;
    }
    interface FXVolatilityContract extends BOA.Common.Types.ContractBase {
        approvedBy?: string;
        beginDate?: Date;
        delta?: number;
        description?: string;
        endDate?: Date;
        fecPair?: number;
        fecPairDesc?: string;
        pCA?: number;
        pCADesc?: string;
        ricName?: string;
        spread?: number;
        term?: number;
        termDesc?: string;
        termDescDay?: string;
        termDescPeriod?: string;
        tranDate?: Date;
        volatilityAsk?: number;
        volatilityBid?: number;
        volatilityMid?: number;
    }
    interface GoldExchangeContract extends BOA.Common.Types.ContractBase {
        askAmount?: number;
        askFEC?: number;
        bidAmount?: number;
        bidFEC?: number;
        businessKey?: number;
        businessKeyAsk?: number;
        businessKeyBid?: number;
        channelId?: number;
        hostIp?: string;
        hostName?: string;
        id?: number;
        resourceCode?: string;
        status?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GoldOrderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixTo?: number;
        amount?: number;
        branch?: string;
        channel?: string;
        channelId?: number;
        creditCard?: string;
        day?: number;
        description?: string;
        divitId?: any;
        endDate?: Date;
        hostName?: string;
        hour?: number;
        id?: number;
        resourceCode?: string;
        resourceId?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tLAmount?: number;
        tranBranchId?: number;
        transactionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GoldOrderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixTo?: number;
        amount?: number;
        branch?: string;
        channel?: string;
        channelId?: number;
        creditCard?: string;
        day?: number;
        description?: string;
        divitId?: any;
        endDate?: Date;
        hostName?: string;
        hour?: number;
        id?: number;
        resourceCode?: string;
        resourceId?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tLAmount?: number;
        tranBranchId?: number;
        transactionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GoldOrderTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixTo?: number;
        amount?: number;
        businessKey?: number;
        channelId?: number;
        creditCard?: string;
        day?: number;
        description?: string;
        endDate?: Date;
        fXTranId?: number;
        hostName?: string;
        hour?: number;
        id?: number;
        orderId?: number;
        provisionCode?: string;
        resourceCode?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tLAmount?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InvestmentFundConstants_old {
    }
    interface InvestmentFundPriceInternetBranchContract extends BOA.Common.Types.ContractBase {
        fec?: number;
        fundCode?: string;
        fundName?: string;
        fundTitle?: string;
        iSIN?: string;
        isOnlyOpenToQualifiedInvestor?: boolean;
        isTEFASQuotation?: boolean;
        priceAsk?: number;
        priceBid?: number;
    }
    interface InvestmentFundPriceLimitContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        fundCode?: string;
        fundName?: string;
        fundTitle?: string;
        inUse?: boolean;
        iSIN?: string;
        isTransactionLimited?: boolean;
        transactionLimit?: number;
    }
    interface InvestmentFundPriceViewContract {
        fundCode?: string;
        fundName?: string;
        fundTitle?: string;
        indexType?: number;
        iSIN?: string;
        priceAsk?: number;
        priceAskTL?: number;
        priceBid?: number;
        priceBidTL?: number;
        tranDate?: Date;
    }
    interface InvestmentFundPriceViewContract {
        fundCode?: string;
        fundName?: string;
        fundTitle?: string;
        indexType?: number;
        iSIN?: string;
        priceAsk?: number;
        priceAskTL?: number;
        priceBid?: number;
        priceBidTL?: number;
        tranDate?: Date;
    }
    interface SecurityCouponContract extends BOA.Common.Types.ContractBase {
        annualRate?: number;
        cashFlowPerUnit?: number;
        couponNo?: number;
        couponRate?: number;
        dayCount?: number;
        dayCount_30_360?: number;
        finishDate?: Date;
        hostIP?: string;
        hostName?: string;
        securityCouponId?: number;
        securityId?: number;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SecurityCouponContract extends BOA.Common.Types.ContractBase {
        annualRate?: number;
        cashFlowPerUnit?: number;
        couponNo?: number;
        couponRate?: number;
        dayCount?: number;
        dayCount_30_360?: number;
        finishDate?: Date;
        hostIP?: string;
        hostName?: string;
        securityCouponId?: number;
        securityId?: number;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SecurityTransactionCostContract extends BOA.Common.Types.ContractBase {
        amortizedCost?: number;
        bSMVAmount?: number;
        capitalReturn?: number;
        costId?: string;
        custodianAccountNumber?: number;
        custodianAccountSuffix?: number;
        depoNo?: string;
        fIFOType?: string;
        hostIP?: string;
        hostName?: string;
        isManuelPicking?: boolean;
        nominal?: number;
        portfolioPath?: string;
        securityId?: number;
        securityTransactionCostId?: number;
        systemDate?: Date;
        transactionKey?: string;
        transactionState?: number;
        transactionType?: string;
        unitDirtyPrice?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
    }
    interface TranFXRateContract extends BOA.Common.Types.ContractBase {
        baseFEC?: number;
        equivalentAmount?: number;
        fecGroup?: number;
        tranFXRate?: number;
        tranType?: number;
    }
}
declare namespace BOA.Types.Kernel.FX.DebtSecurityConstants {
    export const enum DateBasis {
        _30_360 = 1,
        ACT_ACT = 2
    }
    interface AccountingDetailTypes {
    }
    interface AccrualMethods {
    }
    interface BsmvSukukParamCodes {
    }
    interface DepoNos {
    }
    interface FIFOTypes {
    }
    interface IssueLocations {
    }
    interface IssueLocationsValue {
    }
    interface IssuerTypes {
    }
    interface ParameterTypes {
    }
    interface SecurityCostGeneratorTypes {
    }
    interface SecurityStateFlags {
    }
    interface TransactionType {
    }
}
declare namespace BOA.Types.Kernel.FX.InvestmentFundConstants_old {
    interface FIFOTypes {
    }
    interface InvestmentFundPreferredPriceTypes {
    }
}
declare namespace BOA.Types.Kernel.General {
    export const enum ApplicationVersionForceType {
        Optional = 0,
        Forced = 1
    }
    export const enum BarcodeType {
        ChequeAndBond = 1,
        Correspondence = 2,
        Cargo = 3,
        ChequeAndBond2 = 4,
        YourBanking = 5
    }
    export const enum CallItemDefinitionType {
        Script = 1,
        OrchMethod = 2,
        KernelMethod = 3
    }
    export const enum ChoiceType {
        All = 0,
        Row = 1,
        Column = 2
    }
    export const enum FECEnum {
        TL = 0,
        USD = 1,
        CHF = 10,
        ITL = 11,
        CAD = 12,
        KWD = 13,
        NOK = 14,
        GBP = 15,
        SAR = 16,
        JPY = 17,
        FIM = 18,
        EUR = 19,
        AUD = 2,
        ESP = 20,
        IEP = 21,
        LUF = 22,
        PTE = 23,
        ALT_gr = 24,
        BHD = 25,
        GMS_gr = 26,
        PLT_gr = 27,
        ALM_ton = 28,
        AED = 29,
        RUB = 30,
        CU_ton = 31,
        ZN_ton = 32,
        NI_ton = 33,
        PB_ton = 34,
        SN_ton = 35,
        CNY = 36,
        QAR = 37,
        PLD_gr = 38,
        CAG_gr = 39,
        ZCeyrek = 40,
        MYR = 50,
        ATS = 3,
        DEM = 4,
        BEF = 5,
        DKK = 6,
        FRF = 7,
        NLG = 8,
        SEK = 9
    }
    export const enum FECReceiptCurrencyEffective {
        Doviz = 1,
        Efektif = 2
    }
    export const enum FECReceiptSerial {
        A = 0,
        B = 1
    }
    export const enum FECReceiptTransactionCode {
        DAB = 1,
        DSB = 2
    }
    export const enum LKSCloseReasons {
        CustomerWelded = 0,
        Death = 1,
        MemberWeldedWithoutPaymentProblem = 2,
        MemberWeldedWithPaymentProblem = 3
    }
    export const enum LKSControlCodes {
        CustomerLimitChanged = 0,
        CustomerLimitNotChanged = 1,
        QueryBeforeAdditionalAllocationRequired = 2
    }
    export const enum LKSDataTye {
        RecordNotBelongToQueryCorporation = 0,
        RecordBelongToQueryCorporation = 1
    }
    export const enum LKSOnlineOperationTypes {
        QueryBeforeAllocation = 1,
        QueryBeforeAdditionalAllocation = 2,
        OnlineAllocation = 3,
        OnlineAdditionalAllocation = 4
    }
    export const enum LKSOperationResults {
        OperationSucceedDataExists = 0,
        OperationSucceedDataNotExists = 1,
        OperationSucceedDataCannotBeReturned = 2,
        OperationError = 3,
        DataError = 4,
        SystemError = 5
    }
    export const enum LKSReductionCodes {
        CustomerApplication = 0,
        MemberConsideration = 1
    }
    export const enum QueryEntity {
        G = 0,
        T = 1
    }
    export const enum QueryPurpose {
        Inquiry = 2,
        ChequeClearance = 1
    }
    export const enum ScreenName {
        KKBOnlineCekIstihbarat = 0,
        KKBOnlineCekSorgulama = 1,
        CIT = 2,
        Cybersoft = 3,
        MusteriTakipDetayi = 4
    }
    export const enum SurveyQuestionType {
        NotSelected = 0,
        SingleChoice = 1,
        MultipleChoice = 2,
        FreeTextSmall = 3,
        FreeTextLarge = 4,
        MatrixSingleChoice = 5,
        MatrixMultipleChoice = 6,
        DropDownChoice = 7,
        StarRating = 8,
        Order = 9,
        DynamicMatrixSingleChoice = 10,
        DynamicMatrixMultipleChoice = 11
    }
    export const enum SurveyTraceStatus {
        SurveyOpen = 1,
        SurveyCompleted = 2,
        SurveyDateNotValid = 3,
        UserInBlackList = 4,
        UserIsPersonal = 5,
        AccountShared = 6,
        SurveyLastSend = 7,
        EMailAddressIsEmpty = 8,
        WaitingForSend = 9,
        SmsSend = 10,
        HasNoPhoneNumber = 11,
        SurveyOpenForTemporaryAssignedBookingClerk = 12,
        SurveyOpenForTemporaryAssignedBookingClerkSupervisor = 13,
        SurveyOpenForTemporaryAssignedDirector = 14,
        SurveyOpenForTemporaryAssignedDirectorSupervisor = 15,
        IsMailSurvey = 16
    }
    export const enum Symbology {
        Codabar = 1,
        Industrial2of5 = 2,
        Interleaved2of5 = 3,
        Code39 = 4,
        Code39Extended = 5,
        Code93 = 6,
        Code93Extended = 7,
        Code128 = 8,
        Code11 = 9,
        CodeMSI = 10,
        PostNet = 11,
        EAN13 = 12,
        UPCA = 13,
        EAN8 = 14,
        EAN128 = 15,
        UPCSupplemental2 = 16,
        UPCSupplemental5 = 17,
        UPCE0 = 18,
        UPCE1 = 19,
        Matrix2of5 = 20,
        PDF417 = 21,
        DataMatrix = 22,
        QRCode = 23,
        IntelligentMail = 24,
        DataMatrixGS1 = 25,
        ITF14 = 26,
        DataBar = 27
    }
    export const enum WebServiceName {
        MernisWebService = 0
    }
    export const enum XtmCommandBusinessName {
        Denominate = 0,
        Dispense = 1,
        Present = 2,
        CashIn = 3,
        CashInEnd = 4,
        CashInRollback = 5,
        CancelCashIn = 6,
        PrintSlip = 7,
        PrintAccountStatement = 8,
        TakeAPhoto = 9,
        Scan = 10,
        Cancel = 11,
        VideoConnection = 12,
        FecList = 13,
        Print = 14,
        PrintAccountInfo = 15,
        Hold = 16,
        VideoResume = 17,
        VideoHold = 18,
        OpenKeyStrokeDefinitionWindow = 19,
        CloseKeyStrokeDefinitionWindow = 20,
        FaceRecognitionTakeAPhoto = 21,
        CallTransfer = 22,
        GetDeviceStatus = 23,
        DispenseReject = 24
    }
    export const enum XtmCommandBusinessStatus {
        Started = 0,
        WaitingForBroadcasting = 1,
        BroadcastedToXtm = 2,
        Executing = 3,
        Success = 4,
        Failed = 5,
        DeviceError = 6,
        HalfSuccess = 7
    }
    interface AgreementBrowserContract extends BOA.Common.Types.ContractBase {
        agreementId?: number;
        documentId?: number;
        documentName?: string;
        dynamicAgreementCode?: string;
        isDynamicAgreement?: boolean;
        version?: string;
    }
    interface AgreementContract extends BOA.Common.Types.ContractBase {
        addressLine1?: string;
        addressLine2?: string;
        agreementId?: number;
        body?: string;
        code?: string;
        fax?: string;
        footer?: string;
        footerHeight?: number;
        header?: string;
        headerHeight?: number;
        isFooterVisible?: boolean;
        isHeaderVisible?: boolean;
        isLogoImageVisible?: boolean;
        isPageNumberVisible?: boolean;
        isPrintDateVisible?: boolean;
        isSignatureImageVisible?: boolean;
        isSignatureNameSurnameVisible?: boolean;
        name?: string;
        paramCount?: number;
        rtftext?: string;
        telephone?: string;
    }
    interface AgreementPoolContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agreementPoolId?: number;
        divitId?: string;
        expireDate?: Date;
        hostIP?: string;
        hostName?: string;
        isUsed?: number;
        password?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        usedDate?: Date;
        userName?: string;
    }
    interface AgreementPoolDetailContract extends BOA.Common.Types.ContractBase {
        agreementId?: number;
        agreementPoolId?: number;
        hostIP?: string;
        hostName?: string;
        parameter?: number[];
        systemDate?: Date;
        userName?: string;
    }
    interface AgreementVersionInfo extends BOA.Common.Types.ContractBase {
        agreementGroupCode?: string;
        agreementGroupId?: number;
        agreementGroupName?: string;
        agreementId?: number;
        customerVersion?: string;
        divitInstanceId?: string;
        documentId?: number;
        documentName?: string;
        documentNameDisplay?: string;
        flowId?: string;
        latestVersion?: string;
        personName?: string;
    }
    interface ApplicationVersionContract extends BOA.Common.Types.ContractBase {
        activeVersion?: string;
        applicationName?: string;
        description?: string;
        forceType?: number;
    }
    interface BankBranchContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankId?: number;
        branchId?: number;
        city?: number;
        closeDate?: Date;
        creditCardCenter?: number;
        hostName?: string;
        name?: string;
        openDate?: Date;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface BankBranchContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankId?: number;
        branchId?: number;
        city?: number;
        closeDate?: Date;
        creditCardCenter?: number;
        hostName?: string;
        name?: string;
        openDate?: Date;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface BankContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankId?: number;
        bankType?: number;
        closeDate?: Date;
        hostName?: string;
        inForeignChequeExchange?: number;
        name?: string;
        openDate?: Date;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface BankContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankId?: number;
        bankType?: number;
        closeDate?: Date;
        hostName?: string;
        inForeignChequeExchange?: number;
        name?: string;
        openDate?: Date;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface BankCorrespondentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        correspondentId?: number;
        correspondentName?: string;
        counterAccount?: string;
        eftBankBranchId?: number;
        eftBankId?: number;
        fec?: number;
        intermediary?: string;
        intermediaryCorrespondent?: string;
        isKTNetting?: boolean;
        isNetting?: boolean;
        isPlasman?: boolean;
        isSettlement?: boolean;
        productCode?: string;
        swiftCode?: string;
        swiftLocoText?: string;
    }
    interface BarcodeContract extends BOA.Common.Types.ContractBase {
        barcodeId?: number;
        barcodeType?: number;
        barcodeTypeDescription?: string;
        branchId?: number;
        branchName?: string;
        branchName2?: string;
        description?: string;
        description2?: string;
        description3?: string;
        hostIP?: string;
        hostName?: string;
        request?: string;
        resourceId?: number;
        sender?: string;
        subTitle?: string;
        systemDate?: Date;
        title?: string;
        userName?: string;
        workGroupId?: number;
        workGroupName?: string;
        yourBankingBarcodeContract?: BOA.Types.Kernel.General.YourBankingBarcodeContract;
    }
    interface BarcodeContract extends BOA.Common.Types.ContractBase {
        barcodeId?: number;
        barcodeType?: number;
        barcodeTypeDescription?: string;
        branchId?: number;
        branchName?: string;
        branchName2?: string;
        description?: string;
        description2?: string;
        description3?: string;
        hostIP?: string;
        hostName?: string;
        request?: string;
        resourceId?: number;
        sender?: string;
        subTitle?: string;
        systemDate?: Date;
        title?: string;
        userName?: string;
        workGroupId?: number;
        workGroupName?: string;
        yourBankingBarcodeContract?: BOA.Types.Kernel.General.YourBankingBarcodeContract;
    }
    interface BarcodeVariable extends BOA.Types.Kernel.General.DocumentVariable {
        codeText?: string;
        dpiX?: number;
        dpiY?: number;
        symbology?: BOA.Types.Kernel.General.Symbology;
    }
    interface BranchPersonInfoContract extends BOA.Common.Types.ContractBase {
        level?: number;
        organizationId?: number;
        organizationName?: string;
        role?: string;
        userCode?: string;
    }
    interface BranchPersonInfoContract extends BOA.Common.Types.ContractBase {
        level?: number;
        organizationId?: number;
        organizationName?: string;
        role?: string;
        userCode?: string;
    }
    interface BusinessDayCountContract extends BOA.Common.Types.ContractBase {
        iD?: number;
        sourceDate?: Date;
        targetDate?: Date;
    }
    interface CalendarContract extends BOA.Common.Types.ContractBase {
        countryCode?: number;
        day?: Date;
        dayType?: number;
        description?: string;
        fecId?: number;
        isAllDay?: boolean;
    }
    interface CallItemDefinitionContract extends BOA.Common.Types.ContractBase {
        callItemDefinitionId?: number;
        callType?: number;
        description?: string;
        kernelClassName?: string;
        labelDictionary?: any;
        methodName?: string;
        name?: string;
        registryId?: number;
        returnValue?: string;
    }
    interface ChequeConstant {
    }
    interface CityContract extends BOA.Common.Types.ContractBase {
        cityId?: number;
        countryId?: number;
        name?: string;
    }
    interface CommandBusinContract extends BOA.Common.Types.ContractBase {
        callId?: number;
        comAmount?: number;
        comBusinessKey?: number;
        comFec?: number;
        errorMessage?: string;
        id?: number;
        machineName?: string;
        name?: BOA.Types.Kernel.General.XtmCommandBusinessName;
        receiveCommand?: number[];
        sendCommand?: number[];
        sessionId?: number;
        status?: BOA.Types.Kernel.General.XtmCommandBusinessStatus;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
        xtmId?: number;
    }
    interface ConditionalQuestionContract extends BOA.Common.Types.ContractBase {
        conditionalQuestionId?: number;
        isChosen?: boolean;
        isInsertValid?: boolean;
        relatedQuestionChoiceId?: number;
        relatedQuestionGroupId?: number;
        relatedQuestionId?: number;
        surveyQuestionId?: number;
    }
    interface ConditionalQuestionContract extends BOA.Common.Types.ContractBase {
        conditionalQuestionId?: number;
        isChosen?: boolean;
        isInsertValid?: boolean;
        relatedQuestionChoiceId?: number;
        relatedQuestionGroupId?: number;
        relatedQuestionId?: number;
        surveyQuestionId?: number;
    }
    interface ContextVariableContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        name?: string;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueExpression?: string;
        variableId?: number;
    }
    interface ContractExtensions {
    }
    interface CorporationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        corporationName?: string;
        reutersCode?: string;
        swiftCode?: string;
    }
    interface CountryContract extends BOA.Common.Types.ContractBase {
        countryCode?: string;
        countryId?: number;
        countryNameEN?: string;
        name?: string;
    }
    interface CountyContract extends BOA.Common.Types.ContractBase {
        cityId?: number;
        countyCode?: number;
        countyId?: number;
        name?: string;
    }
    interface CustomerAgreementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agreementData?: number[];
        agreementDataXPS?: number[];
        agreementId?: number;
        agreementPoolId?: number;
        agreementVersionCode?: string;
        agreementVersionId?: number;
        agreementVersionNo?: number;
        branch?: string;
        customerName?: string;
        description?: string;
        divitId?: string;
        documentId?: number;
        documentName?: string;
        dynamicAgreementCode?: string;
        flowId?: string;
        groupName?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isApproved?: boolean;
        isDynamicAgreement?: boolean;
        parameters?: number[];
        pDFBytes?: number[];
        pDFPath?: string;
        sortOrder?: number;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerAgreementVersionInfo extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agreements?: BOA.Types.Kernel.General.AgreementVersionInfo[];
        message?: string;
        missingAgreements?: BOA.Types.Kernel.General.AgreementVersionInfo[];
        sendYourCorner?: boolean;
        severity?: BOA.Common.Types.Severity;
    }
    interface DocumentVariable {
        fieldCode?: string;
    }
    interface DocumentVariableCollection {
    }
    interface DrawnChequeAmount {
        averageChequeAmount?: number;
        dateAdded?: Date;
        highestAmount?: number;
        hostName?: string;
        kKBOnlineBouncedChequeLogID?: number;
        lowestAmount?: number;
        type?: string;
        userName?: string;
        year?: number;
    }
    interface EmailContract extends BOA.Common.Types.ContractBase {
        attachment?: string;
        bcc?: string;
        body?: string;
        byteAttachment?: number[];
        cc?: string;
        contentType?: string;
        fileName?: string;
        from?: string;
        programId?: number;
        query?: string;
        spName?: string;
        subject?: string;
        templateId?: number;
        to?: string;
    }
    interface EmailContract extends BOA.Common.Types.ContractBase {
        attachment?: string;
        bcc?: string;
        body?: string;
        byteAttachment?: number[];
        cc?: string;
        contentType?: string;
        fileName?: string;
        from?: string;
        programId?: number;
        query?: string;
        spName?: string;
        subject?: string;
        templateId?: number;
        to?: string;
    }
    interface FECContract extends BOA.Common.Types.ContractBase {
        coinCode?: string;
        country?: number;
        demandDepositeAccount?: number;
        fecCode?: string;
        fecGroup?: number;
        fecId?: number;
        fecName?: string;
        iconPath?: string;
        internationalCode?: number;
        inUse?: number;
        isForward?: boolean;
        iSOCode?: string;
        lateDealCutOff?: string;
        parityBase?: number;
        paymentDaysLag?: number;
        purity?: number;
        timeDepositeAccount?: number;
        unitMultiplier?: number;
    }
    interface FECContract extends BOA.Common.Types.ContractBase {
        coinCode?: string;
        country?: number;
        demandDepositeAccount?: number;
        fecCode?: string;
        fecGroup?: number;
        fecId?: number;
        fecName?: string;
        iconPath?: string;
        internationalCode?: number;
        inUse?: number;
        isForward?: boolean;
        iSOCode?: string;
        lateDealCutOff?: string;
        parityBase?: number;
        paymentDaysLag?: number;
        purity?: number;
        timeDepositeAccount?: number;
        unitMultiplier?: number;
    }
    interface FECReceiptContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        actionId?: number;
        address?: string;
        amount?: number;
        amountTl?: number;
        amountUsd?: number;
        arrivalCountryId?: string;
        arrivalPurpose?: string;
        bankCode?: number;
        basis?: string;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        citizenShip?: string;
        currencyEffective?: BOA.Types.Kernel.General.FECReceiptCurrencyEffective;
        customerName?: string;
        dBSequence?: string;
        dBTranDate?: Date;
        description?: string;
        fec?: number;
        fecDescription?: string;
        fecReceiptId?: number;
        fer?: number;
        fOBStatisticCode?: string;
        freightStatisticCode?: string;
        gBSequence?: string;
        gBTranDate?: Date;
        insuranceStatisticCode?: string;
        isActive?: number;
        passaportNumber?: string;
        resourceCode?: string;
        seqNum?: number;
        serial?: BOA.Types.Kernel.General.FECReceiptSerial;
        staticalCode?: string;
        systemDate?: Date;
        taxNumber?: string;
        tranDate?: Date;
        transactionCode?: BOA.Types.Kernel.General.FECReceiptTransactionCode;
        transactionType?: string;
        tYSequence?: string;
        tYTranDate?: Date;
        userName?: string;
        year?: number;
    }
    interface FECReceiptSerialAndSeqNum {
        seqNum?: number;
        serial?: BOA.Types.Kernel.General.FECReceiptSerial;
    }
    interface FECUsageContract extends BOA.Common.Types.ContractBase {
        fecId?: number;
        usageCode?: string;
    }
    interface FinancialCalendarContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        description?: string;
        endDate?: Date;
        id?: number;
        year?: number;
    }
    interface FutureDatedTransactionCompositeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        accountNumberAndSuffix?: string;
        agreementDate?: Date;
        amount?: number;
        businessKey?: number;
        commission?: number;
        description?: string;
        detailBusinessKey?: number;
        detailId?: number;
        email?: string;
        errorInfo?: string;
        fec?: number;
        fecCode?: string;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        hostName?: string;
        id?: number;
        lastTry?: Date;
        resourceCode?: string;
        sMS?: string;
        status?: number;
        systemDate?: Date;
        toAccountNumber?: number;
        toName?: string;
        toSuffix?: number;
        tranBranch?: number;
        tranDate?: Date;
        tryCount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FutureDatedTransactionSelectContractKernel extends BOA.Common.Types.ContractBase {
        agreementDate?: Date;
        amount?: number;
        description?: string;
        detailId?: number;
        errorInfo?: string;
        fec?: string;
        fromAccountNumber?: number;
        fromName?: string;
        fromSuffix?: number;
        futureDatedTransactionBusinessKey?: number;
        futureDatedTransactionDetailBusinessKey?: number;
        id?: number;
        lastTry?: Date;
        resourceCode?: string;
        status?: string;
        statusCode?: number;
        toAccountNumber?: number;
        toName?: string;
        toSuffix?: number;
        tranBranch?: string;
        tranDate?: Date;
        tranType?: string;
        updateSystemDate?: Date;
        userName?: string;
    }
    interface FutureDatedTransactionSelectRequestContractKernel extends BOA.Common.Types.ContractBase {
        amountMax?: number;
        amountMin?: number;
        channelId?: number;
        dateMax?: Date;
        dateMin?: Date;
        fec?: number;
        fromAccountNumber?: number;
        fromSuffix?: number;
        isReport?: boolean;
        resourceCode?: string;
        status?: number;
        toAccountNumber?: number;
        toSuffix?: number;
        tranBranch?: number;
        tranDateMax?: Date;
        tranDateMin?: Date;
        tranId?: number;
        userName?: string;
    }
    interface GoldSendTransactionContract extends BOA.Common.Types.ContractBase {
        accountBranchId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        cardBranchId?: number;
        channelId?: number;
        comissionAmount?: number;
        creditCard?: string;
        customerSMSMessage?: string;
        fxRate?: number;
        goldAmount?: number;
        hostName?: string;
        id?: number;
        isCustomer?: boolean;
        receiverGsmNumber?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        responseCode?: string;
        responseMessage?: string;
        sendDate?: Date;
        senderGsmNumber?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        sMSCode?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        takenFrom?: string;
        totalAmount?: number;
        transactionDate?: Date;
        transactionId?: string;
        tranType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface HtmlVariable extends BOA.Types.Kernel.General.DocumentVariable {
        htmlText?: string;
    }
    interface ImageVariable extends BOA.Types.Kernel.General.DocumentVariable {
        image?: any;
    }
    interface InformationTextQueueContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        body?: string;
        businessKey?: number;
        channelId?: number;
        customerId?: number;
        informationId?: number;
        languageId?: number;
        notificationDefinitionId?: number;
        personId?: number;
        personTypeId?: number;
        priority?: number;
        systemDate?: Date;
        templateDefinitionId?: number;
        textQueueId?: number;
        tranDate?: Date;
        transactionDetailId?: number;
    }
    interface InsuranceEnums {
    }
    interface IntraBankContract {
        accountingRef?: string;
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixTo?: number;
        amount?: number;
        branchId?: number;
        fec?: number;
        tranDate?: Date;
    }
    interface IvrFaksEmailContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        cardNumber?: string;
        customerNo?: number;
        emailFormat?: string;
        faxEmail?: string;
        fileName?: string;
        isSend?: boolean;
        priority?: number;
        processType?: string;
        sendDate?: Date;
        statementDate?: Date;
        statementEndDate?: Date;
        statementStartDate?: Date;
        systemDate?: Date;
    }
    interface KernelClassDefinitionContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        className?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        kernelCode?: string;
        kernelId?: number;
        methodList?: BOA.Types.Kernel.General.KernelMethodContract[];
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KernelMethodContract extends BOA.Common.Types.ContractBase {
        kernelCode?: string;
        methodName?: string;
        methodNameLabel?: string;
        parameters?: BOA.Types.Kernel.General.ReflectedMethodParameterContract[];
        parameterString?: string;
        returnType?: BOA.Types.Kernel.General.ReflectedMethodReturnTypeContract;
        summary?: string;
    }
    interface KKBChequeQueryContract {
        bankList?: BOA.Types.Kernel.General.KKBTheBankCheckingAccount[];
        branchName?: string;
        customerAddress?: string;
        customerid?: number;
        customerName?: string;
        dateAdded?: Date;
        divitInstanceId?: number;
        drawnChequeAmountList?: BOA.Types.Kernel.General.DrawnChequeAmount[];
        errorCode?: string;
        errorMessage?: string;
        firstBouncedChequeDate?: string;
        firstSubmissionChequeDate?: string;
        hostName?: string;
        identityNumber?: string;
        indexOfCheque?: string;
        isOnline?: boolean;
        kKBOnlineBouncedChequeLogID?: number;
        last12MonthsAmountOfBTypeChequeSpecified?: boolean;
        last12MonthsAmountOfKTypeChequeSpecified?: boolean;
        last12MonthsAmountOfPaidAtSightChequeSpecified?: boolean;
        last12MonthTotalBouncedBTypeChequeAmount?: number;
        last12MonthTotalBouncedBTypeChequeCount?: number;
        last12MonthTotalBouncedKTypeChequeAmount?: number;
        last12MonthTotalBouncedKTypeChequeCount?: number;
        last12MonthTotalPaidChequeAmount?: number;
        last12MonthTotalPaidChequeCount?: number;
        last3MonthsAmountOfBTypeChequeSpecified?: boolean;
        last3MonthsAmountOfKTypeChequeSpecified?: boolean;
        last3MonthsAmountOfPaidAtSightChequeSpecified?: boolean;
        last3MonthTotalBouncedBTypeChequeAmount?: number;
        last3MonthTotalBouncedBTypeChequeCount?: number;
        last3MonthTotalBouncedKTypeChequeAmount?: number;
        last3MonthTotalBouncedKTypeChequeCount?: number;
        last3MonthTotalPaidChequeAmount?: number;
        last3MonthTotalPaidChequeCount?: number;
        lastBouncedChequeDate?: string;
        lastMonthAmountOfBTypeChequeSpecified?: boolean;
        lastMonthAmountOfKTypeChequeSpecified?: boolean;
        lastMonthAmountOfPaidAtSightChequeSpecified?: boolean;
        lastMonthTotalBouncedBTypeChequeAmount?: number;
        lastMonthTotalBouncedBTypeChequeCount?: number;
        lastMonthTotalBouncedKTypeChequeAmount?: number;
        lastMonthTotalBouncedKTypeChequeCount?: number;
        lastMonthTotalPaidChequeAmount?: number;
        lastMonthTotalPaidChequeCount?: number;
        lastSubmissionChequeDate?: string;
        openChequeCount?: string;
        postdatedChequeCount?: number;
        postdatedChequeList?: BOA.Types.Kernel.General.PostdatedCheque[];
        processResult?: string;
        referenceNumber?: string;
        reportIdentityNumber?: string;
        screenName?: string;
        taxNumber?: string;
        totalAmountOfPaidAtSightChequeSpecified?: boolean;
        totalAmountOfUnrequitedBTypeOfChequeSpecified?: boolean;
        totalAmountOfUnrequitedKTypeOfChequeSpecified?: boolean;
        totalBouncedBTypeChequeAmount?: number;
        totalBouncedBTypeChequeCount?: number;
        totalBouncedKTypeChequeAmount?: number;
        totalBouncedKTypeChequeCount?: number;
        totalChequeCount?: number;
        totalPaidChequeAmount?: number;
        totalPaidChequeCount?: number;
        unrequitedList?: BOA.Types.Kernel.General.KKBUnrequitedCheque[];
        unreturnedChequeCount?: string;
        userName?: string;
    }
    interface KKBCreditInfoSummary extends BOA.Common.Types.ContractBase {
        accountCloseDate?: Date;
        accountFinanceType?: BOA.Types.Kernel.General.KKBEnums.FinanceType;
        accountHolderType?: BOA.Types.Kernel.General.KKBEnums.AccountHolderTypes;
        accountLitigationDate?: Date;
        accountPaymentStatus?: string;
        accountWorstPaymentStatusEver?: string;
        installmentAmount?: number;
        originalLitigationBalance?: number;
        totalOutstandingBalance?: number;
    }
    interface KKBCreditSummary extends BOA.Common.Types.ContractBase {
        closeAccountWPSTimeRecentMonths?: number;
        openAcc_12_WorstPaymentStatus_0_6?: string;
        openAcc_12_WorstPaymentStatus_7_12?: string;
        openAcc_4_12_WorstPaymentStatus_0_6?: string;
        openAcc_4_12_WorstPaymentStatus_7_12?: string;
        openAllAccountCount?: number;
        worstCurrentPaymentStatus?: string;
        worstEverPaymentStatus?: string;
    }
    interface KKBEnums {
    }
    interface KKBRequestContract extends BOA.Common.Types.ContractBase {
        applicantRelationship?: number;
        birthDate?: Date;
        birthPlace?: string;
        corporateName?: string;
        customerNumber?: string;
        fatherName?: string;
        formId?: string;
        gender?: string;
        homeAddress?: string;
        homeCity?: string;
        homeCounty?: string;
        homeDistrict?: string;
        homeTelephoneNumber?: string;
        homeZipCode?: string;
        identityCardRegistrationNumber?: string;
        identityCardSerialNumber?: string;
        identityCardType?: string;
        identityNumber?: string;
        kKBId?: number;
        kKBQueryType?: number;
        maidenName?: string;
        maritalStatus?: string;
        mobilePhoneNumber?: string;
        monthlyIncome?: number;
        motherName?: string;
        name?: string;
        passportOrDrivingLicenceNumber?: string;
        requestedTotalLimitTL?: number;
        requestedTotalLimitUSD?: number;
        secondName?: string;
        surname?: string;
        workAddress?: string;
        workCity?: string;
        workCounty?: string;
        workDistrict?: string;
        workingType?: string;
        workTelephoneNumber?: string;
        workZipCode?: string;
    }
    interface KKBResultSummary extends BOA.Common.Types.ContractBase {
        creditInfo?: BOA.Types.Kernel.General.KKBCreditInfoSummary[];
        creditSummary?: BOA.Types.Kernel.General.KKBCreditSummary[];
        fraudCategory?: string;
        fraudDate?: Date;
        logId?: number;
        querySystem?: string;
        score?: number;
    }
    interface KKBTheBankCheckingAccount {
        bankCode?: string;
        bankName?: string;
        dateAdded?: Date;
        hostName?: string;
        kKBOnlineBouncedChequeLogID?: number;
        userName?: string;
    }
    interface KKBUnrequitedCheque {
        bankCode?: string;
        bankName?: string;
        branchName?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        dateAdded?: Date;
        foreignExchangeType?: string;
        hostName?: string;
        kKBOnlineBouncedChequeLogID?: number;
        payDate?: string;
        stateCode?: string;
        submissionDate?: string;
        userName?: string;
    }
    interface LKSInputContract extends BOA.Common.Types.ContractBase {
        allocationDateAndTime?: Date;
        birthDate?: Date;
        branchId?: number;
        corporationCode?: string;
        currentLimit?: number;
        customerNo?: number;
        dateAndTime?: Date;
        fatherName?: string;
        firstName?: string;
        identityNumber?: string;
        lKSOnlineOperationType?: BOA.Types.Kernel.General.LKSOnlineOperationTypes;
        secondName?: string;
        surname?: string;
        taxNumber?: string;
        userCode?: string;
    }
    interface LKSOutputContract extends BOA.Common.Types.ContractBase {
        controlCode?: BOA.Types.Kernel.General.LKSControlCodes;
        customerRecordList?: BOA.Types.Kernel.General.LKSOutputCustomerRecordContract[];
        errorCode?: string;
        errorDescription?: string;
        lKSAllocationDateTime?: Date;
        lKSFirstQueryDateTime?: Date;
        lKSInputId?: number;
        lKSOnlineOperationType?: BOA.Types.Kernel.General.LKSOnlineOperationTypes;
        lKSOutputId?: number;
        operationResult?: BOA.Types.Kernel.General.LKSOperationResults;
    }
    interface LKSOutputCustomerRecordContract extends BOA.Common.Types.ContractBase {
        additionLimitAllocationDateTime?: Date;
        birthDate?: Date;
        branchId?: number;
        cardFirstUsageDate?: Date;
        closeReasonDescription?: string;
        closeReasons?: BOA.Types.Kernel.General.LKSCloseReasons;
        corporationCode?: string;
        currentLimit?: number;
        customerId?: number;
        dataType?: BOA.Types.Kernel.General.LKSDataTye;
        extreAddress?: string;
        fatherName?: string;
        firstLimitAllocationDateTime?: Date;
        firstName?: string;
        homePhone?: string;
        identityNumber?: string;
        limitCloseDateTime?: Date;
        limitReductionDateTime?: Date;
        lKSOutputId?: number;
        milestoneLimit?: number;
        mobilePhone?: string;
        motherMaidenName?: string;
        reductionCode?: BOA.Types.Kernel.General.LKSReductionCodes;
        reductionCodeDescription?: string;
        secondName?: string;
        surname?: string;
        taxNumber?: string;
        userCode?: string;
        workPhone?: string;
    }
    interface OnlineAgreementMailRequest extends BOA.Common.Types.TransactionRequestBase {
        agreementGroupCode?: string;
        agreementIdList?: number[];
        agreementList?: string;
        agreementPoolId?: number;
        divitInstanceId?: string;
        mailAttachments?: string;
        mailTo?: string;
        tranDateString?: string;
        tranHour?: string;
    }
    interface ParameterContract extends BOA.Common.Types.ContractBase {
        isAllOptionValue?: boolean;
        isSelectable?: boolean;
        languageId?: number;
        paramCode?: string;
        paramDate?: string;
        paramDescription?: string;
        paramGroupCode?: string;
        paramType?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue3?: string;
        paramValue4?: string;
        paramValue5?: string;
        paramValue6?: string;
        paramValue7?: string;
        paramValue8?: string;
        sortOrder?: number;
    }
    interface ParameterContract extends BOA.Common.Types.ContractBase {
        isAllOptionValue?: boolean;
        isSelectable?: boolean;
        languageId?: number;
        paramCode?: string;
        paramDate?: string;
        paramDescription?: string;
        paramGroupCode?: string;
        paramType?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue3?: string;
        paramValue4?: string;
        paramValue5?: string;
        paramValue6?: string;
        paramValue7?: string;
        paramValue8?: string;
        sortOrder?: number;
    }
    interface ParameterDefaultContract {
        languageId?: number;
        paramDataType?: number;
        paramDataTypeRef?: string;
        paramDate?: Date;
        paramDescription?: string;
        paramType?: string;
        paramValue?: string;
    }
    interface ParameterDefaultContract {
        languageId?: number;
        paramDataType?: number;
        paramDataTypeRef?: string;
        paramDate?: Date;
        paramDescription?: string;
        paramType?: string;
        paramValue?: string;
    }
    interface ParameterExtendedContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        paramAddress?: string;
        paramCode1?: string;
        paramCode2?: string;
        paramDescription?: string;
        paramGroupCode?: string;
        paramType?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue3?: string;
        paramValue4?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ParameterExtendedContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        paramAddress?: string;
        paramCode1?: string;
        paramCode2?: string;
        paramDescription?: string;
        paramGroupCode?: string;
        paramType?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue3?: string;
        paramValue4?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ParameterRateContract {
        channelId?: number;
        coefficient?: number;
        maxAmount?: number;
        minAmount?: number;
        paramCode?: string;
        paramDescription?: string;
        paramType?: string;
        rate1?: number;
        rate2?: number;
        rate3?: number;
    }
    interface ParameterRateContract {
        channelId?: number;
        coefficient?: number;
        maxAmount?: number;
        minAmount?: number;
        paramCode?: string;
        paramDescription?: string;
        paramType?: string;
        rate1?: number;
        rate2?: number;
        rate3?: number;
    }
    interface PersonNotificationInfoContract extends BOA.Common.Types.ContractBase {
        email?: string;
        gsm?: string;
        isFaxActive?: boolean;
        isMailActive?: boolean;
        isPushActive?: boolean;
        isSmsActive?: boolean;
        isTextActive?: boolean;
        personId?: number;
    }
    interface PhysicalPreciousMetalCoinSerialContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        coin?: number;
        counts?: number;
        entryId?: number;
        hostIp?: string;
        hostName?: string;
        isPicked?: boolean;
        productId?: number;
        serialNumber?: string;
        status?: number;
        stock?: number;
        systemDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProduct extends BOA.Common.Types.ContractBase {
        fec?: number;
        fecCode?: string;
        fineness?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        serialNumber?: string;
        systemDate?: Date;
        type?: number;
        unit?: number;
        unitDescription?: string;
        unitValue?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProductCoin extends BOA.Common.Types.ContractBase {
        coin?: number;
        commissionAmount?: number;
        hostIp?: string;
        hostName?: string;
        productId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProductDetail extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        productId?: number;
        systemDate?: Date;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        value?: number;
    }
    interface PhysicalPreciousMetalProductInfo extends BOA.Common.Types.ContractBase {
        product?: BOA.Types.Kernel.General.PhysicalPreciousMetalProduct;
        productCoinList?: BOA.Types.Kernel.General.PhysicalPreciousMetalProductCoin[];
        productDetailList?: BOA.Types.Kernel.General.PhysicalPreciousMetalProductDetail[];
        tranDefinitionDetailList?: BOA.Types.Kernel.General.PhysicalPreciousMetalTranDefinitionDetail[];
        tranDefinitionList?: BOA.Types.Kernel.General.PhysicalPreciousMetalTranDefinition[];
    }
    interface PhysicalPreciousMetalTranDefinition extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        coinSerial?: number;
        commissionKey?: string;
        entryType?: number;
        finishTime?: string;
        hostIp?: string;
        hostName?: string;
        id?: number;
        isActive?: number;
        productId?: number;
        resourceCode?: string;
        resourceId?: number;
        startTime?: string;
        systemDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalTranDefinitionDetail extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        tranId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalTransferToBranchContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        fec?: number;
        fromBranchId?: number;
        grossAmount?: number;
        hostIp?: string;
        hostName?: string;
        id?: number;
        isActive?: number;
        ledgerId?: string;
        productId?: number;
        productType?: number;
        systemDate?: Date;
        toBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PostdatedCheque {
        dateAdded?: Date;
        hostName?: string;
        kKBOnlineBouncedChequeLogID?: number;
        postdatedChequeAmount?: number;
        postdatedChequeCount?: number;
        term?: string;
        userName?: string;
    }
    interface ProfitShareContract extends BOA.Common.Types.ContractBase {
        profitShare?: number;
    }
    interface ReceiptAllContract extends BOA.Common.Types.ContractBase {
        accountingKey?: number;
        accountingType?: number;
        accountName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        comment?: string;
        credit?: number;
        currentBalance?: number;
        debit?: number;
        debitCreditCode?: number;
        departmantId?: number;
        description?: string;
        fec?: number;
        fecCode?: string;
        fer?: number;
        hostName?: string;
        ledgerDescription?: string;
        ledgerId?: number;
        mainBusinessKey?: number;
        printedCount?: number;
        productCode?: string;
        resourceDescription?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        segmentCode?: string;
        seqNum?: number;
        statisticsCode?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        userName?: string;
        valueDate?: Date;
        workGroupName?: string;
    }
    interface ReceiptContract extends BOA.Common.Types.ContractBase {
        receiptall?: BOA.Types.Kernel.General.ReceiptAllContract;
        receiptAllList?: BOA.Types.Kernel.General.ReceiptAllContract[];
        receiptHeader?: BOA.Types.Kernel.General.ReceiptHeaderContract;
        receipttDetails?: BOA.Types.Kernel.General.ReceiptDetailContract[];
    }
    interface ReceiptDetailContract extends BOA.Common.Types.ContractBase {
        accountingType?: number;
        accountName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        comment?: string;
        costCenterName?: string;
        credit?: number;
        currentBalance?: number;
        debit?: number;
        debitCreditCode?: number;
        fec?: number;
        fecCode?: string;
        fer?: number;
        ledgerDescription?: string;
        ledgerId?: number;
        printedCount?: number;
        productCode?: string;
        segmentCode?: string;
        seqNum?: number;
        statisticsCode?: string;
        valueDate?: Date;
    }
    interface ReceiptHeaderContract extends BOA.Common.Types.ContractBase {
        accountingKey?: number;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        departmantId?: number;
        description?: string;
        hostName?: string;
        mainBusinessKey?: number;
        resourceDescription?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        systemDate?: Date;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        userName?: string;
        workGroupName?: string;
    }
    interface ReflectedMethodParameterContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        className?: string;
        name?: string;
        nameLabel?: string;
        parameterValue?: string;
    }
    interface ReflectedMethodReturnTypeContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        className?: string;
        isComplex?: boolean;
        isList?: boolean;
        isVoid?: boolean;
    }
    interface RegularPaymentCompanyPromotionsContract extends BOA.Common.Types.ContractBase {
        accountNumberToList?: number;
        accountSuffixToList?: number;
        beginningDate?: Date;
        branchName?: string;
        cityName?: string;
        companyPromotionsID?: number;
        endingDate?: Date;
        hasCreditCardCommission?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isActiveStatus?: string;
        isConstantAmount?: number;
        isCreditCardPayment?: number;
        isMultiplePayment?: number;
        locationCode?: string;
        locationName?: string;
        locationsID?: number;
        locationsType?: number;
        locationsTypeName?: string;
        mailPeriod?: number;
        payingPeriod?: number;
        paymentPeriodDes?: string;
        paymentTypeDes?: string;
        priority?: number;
        promotionCode?: string;
        promotionName?: string;
        promotionNameEng?: string;
        systemDate?: Date;
        townName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RegularPaymentLocationsContract extends BOA.Common.Types.ContractBase {
        accountNumberToList?: number;
        accountSuffixToList?: number;
        branchName?: string;
        city?: number;
        cityName?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        iPNO?: string;
        isActive?: number;
        isActiveStatus?: string;
        locationsCode?: string;
        locationsID?: number;
        locationsName?: string;
        locationsType?: number;
        locationsTypeName?: string;
        password?: string;
        picture?: string;
        priority?: number;
        responsibleBranchId?: number;
        responsiblePersonId?: number;
        systemDate?: Date;
        town?: number;
        townName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RegularPaymentNecessaryFieldsContract extends BOA.Common.Types.ContractBase {
        address?: boolean;
        amount?: boolean;
        birthDate?: boolean;
        cellPhone?: boolean;
        choosenAddress?: boolean;
        city?: boolean;
        companyPromotionsID?: number;
        country?: boolean;
        education?: boolean;
        email?: boolean;
        fec?: boolean;
        gender?: boolean;
        hearedChannel?: boolean;
        isCustomer?: number;
        locationsID?: number;
        memberNo?: boolean;
        message?: boolean;
        mutualCellPhone?: boolean;
        mutualName?: boolean;
        nameTitle?: boolean;
        necessaryFieldsID?: number;
        phone?: boolean;
        postalCode?: boolean;
        privacy?: boolean;
        profession?: boolean;
        resourceId?: number;
        taxNo?: boolean;
        taxOffice?: boolean;
        tCIdentification?: boolean;
        town?: boolean;
    }
    interface ReportDataSetContract extends BOA.Common.Types.ContractBase {
        reportDataSet?: any;
        reportDataSetName?: string;
        reportSPParameters?: BOA.Types.Kernel.General.ReportSPParameterContract[];
        storeProcedureName?: string;
    }
    interface ReportDataSetContract extends BOA.Common.Types.ContractBase {
        reportDataSet?: any;
        reportDataSetName?: string;
        reportSPParameters?: BOA.Types.Kernel.General.ReportSPParameterContract[];
        storeProcedureName?: string;
    }
    interface ReportSPParameterContract extends BOA.Common.Types.ContractBase {
        name?: string;
        type?: any;
        value?: any;
    }
    interface ReportSPParameterContract extends BOA.Common.Types.ContractBase {
        name?: string;
        type?: any;
        value?: any;
    }
    interface ResourceChannelRequest extends BOA.Common.Types.RequestBase {
        resourceId?: number;
    }
    interface SendVipSMSResponse extends BOA.Common.Types.ContractBase {
        description?: string;
        errorCode?: string;
        id?: number;
        isSent?: boolean;
        retryCount?: number;
    }
    interface ServiceHealthCheckContract extends BOA.Common.Types.ContractBase {
        isAlive?: boolean;
        lastCheckTime?: Date;
        serviceName?: string;
    }
    interface ServiceHealthCheckHistoryContract extends BOA.Common.Types.ContractBase {
        endTime?: Date;
        isAlive?: boolean;
        serviceName?: string;
        startTime?: Date;
    }
    interface SMSContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        errorDesc?: string;
        gSMNumber?: string;
        isSent?: number;
        message?: string;
        messageType?: number;
        sentDate?: Date;
        serviceChannel?: number;
        source?: string;
        tomorrow?: Date;
        tranDate?: Date;
    }
    interface SMSContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        errorDesc?: string;
        gSMNumber?: string;
        isSent?: number;
        message?: string;
        messageType?: number;
        sentDate?: Date;
        serviceChannel?: number;
        source?: string;
        tomorrow?: Date;
        tranDate?: Date;
    }
    interface SurveyAccessPointContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        surveyAccessPointId?: number;
        surveyCode?: string;
    }
    interface SurveyAccessPointContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        surveyAccessPointId?: number;
        surveyCode?: string;
    }
    interface SurveyChannelContract extends BOA.Common.Types.ContractBase {
        channel?: number;
        surveyId?: number;
    }
    interface SurveyChannelContract extends BOA.Common.Types.ContractBase {
        channel?: number;
        surveyId?: number;
    }
    interface SurveyContract extends BOA.Common.Types.ContractBase {
        afterStartTime?: number;
        callBranchLimit?: number;
        code?: string;
        description?: string;
        doNotCheckPreviousSendDate?: boolean;
        finishDate?: Date;
        finishHour?: number;
        finishOnTimeout?: boolean;
        guid?: string;
        header?: string;
        hostName?: string;
        informationCode?: string;
        informationCodeSms?: string;
        isCreatedDynamically?: boolean;
        isHeaderVisible?: boolean;
        isJointAccount?: boolean;
        isMailSurvey?: boolean;
        isPublish?: boolean;
        isSendPersonal?: boolean;
        isTimeoutInterval?: boolean;
        listGroup?: BOA.Types.Kernel.General.SurveyQuestionGroupContract[];
        listQuestionFavourite?: BOA.Types.Kernel.General.SurveyFavouriteQuestionContract[];
        listSurveyAccessPoint?: BOA.Types.Kernel.General.SurveyAccessPointContract[];
        listSurveyChannels?: number[];
        name?: string;
        showQuestionNo?: boolean;
        smsCountForHasEMail?: number;
        smsCountForHasNoEMail?: number;
        smsTreshold?: number;
        startDate?: Date;
        startHour?: number;
        surveyId?: number;
        surveyInfo?: BOA.Types.Kernel.General.SurveyInfoContract;
        surveyStatus?: BOA.Types.Kernel.General.SurveyTraceStatus;
        systemDate?: Date;
        timeout?: number;
        timeoutInterval?: number;
        type?: number;
        userName?: string;
        validityTime?: number;
        validityTimeSms?: number;
    }
    interface SurveyContract extends BOA.Common.Types.ContractBase {
        afterStartTime?: number;
        callBranchLimit?: number;
        code?: string;
        description?: string;
        doNotCheckPreviousSendDate?: boolean;
        finishDate?: Date;
        finishHour?: number;
        finishOnTimeout?: boolean;
        guid?: string;
        header?: string;
        hostName?: string;
        informationCode?: string;
        informationCodeSms?: string;
        isCreatedDynamically?: boolean;
        isHeaderVisible?: boolean;
        isJointAccount?: boolean;
        isMailSurvey?: boolean;
        isPublish?: boolean;
        isSendPersonal?: boolean;
        isTimeoutInterval?: boolean;
        listGroup?: BOA.Types.Kernel.General.SurveyQuestionGroupContract[];
        listQuestionFavourite?: BOA.Types.Kernel.General.SurveyFavouriteQuestionContract[];
        listSurveyAccessPoint?: BOA.Types.Kernel.General.SurveyAccessPointContract[];
        listSurveyChannels?: number[];
        name?: string;
        showQuestionNo?: boolean;
        smsCountForHasEMail?: number;
        smsCountForHasNoEMail?: number;
        smsTreshold?: number;
        startDate?: Date;
        startHour?: number;
        surveyId?: number;
        surveyInfo?: BOA.Types.Kernel.General.SurveyInfoContract;
        surveyStatus?: BOA.Types.Kernel.General.SurveyTraceStatus;
        systemDate?: Date;
        timeout?: number;
        timeoutInterval?: number;
        type?: number;
        userName?: string;
        validityTime?: number;
        validityTimeSms?: number;
    }
    interface SurveyFavouriteQuestionChoiceContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        hostName?: string;
        sortId?: number;
        surveyFavouriteQuestionChoiceId?: number;
        surveyFavouriteQuestionId?: number;
        systemDate?: Date;
        type?: number;
        userName?: string;
        weight?: number;
    }
    interface SurveyFavouriteQuestionChoiceContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        hostName?: string;
        sortId?: number;
        surveyFavouriteQuestionChoiceId?: number;
        surveyFavouriteQuestionId?: number;
        systemDate?: Date;
        type?: number;
        userName?: string;
        weight?: number;
    }
    interface SurveyFavouriteQuestionContract extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        isNew?: boolean;
        isOtherChoice?: boolean;
        isPublic?: boolean;
        listColumnChoice?: BOA.Types.Kernel.General.SurveyFavouriteQuestionChoiceContract[];
        listRowChoice?: BOA.Types.Kernel.General.SurveyFavouriteQuestionChoiceContract[];
        maxSelect?: number;
        minSelect?: number;
        multiplier?: number;
        question?: string;
        questionType?: number;
        statusType?: number;
        surveyFavouriteQuestionId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyFavouriteQuestionContract extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        isNew?: boolean;
        isOtherChoice?: boolean;
        isPublic?: boolean;
        listColumnChoice?: BOA.Types.Kernel.General.SurveyFavouriteQuestionChoiceContract[];
        listRowChoice?: BOA.Types.Kernel.General.SurveyFavouriteQuestionChoiceContract[];
        maxSelect?: number;
        minSelect?: number;
        multiplier?: number;
        question?: string;
        questionType?: number;
        statusType?: number;
        surveyFavouriteQuestionId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyInfoContract extends BOA.Common.Types.ContractBase {
        gUID?: string;
        header?: string;
        hostName?: string;
        surveyInfoId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyInfoContract extends BOA.Common.Types.ContractBase {
        gUID?: string;
        header?: string;
        hostName?: string;
        surveyInfoId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyQuestionChoiceContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        isChecked?: boolean;
        isEdit?: boolean;
        isExplanationRequired?: boolean;
        sortId?: number;
        surveyQuestionChoiceId?: number;
        surveyQuestionId?: number;
        type?: BOA.Types.Kernel.General.ChoiceType;
        weight?: number;
    }
    interface SurveyQuestionChoiceContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        isChecked?: boolean;
        isEdit?: boolean;
        isExplanationRequired?: boolean;
        sortId?: number;
        surveyQuestionChoiceId?: number;
        surveyQuestionId?: number;
        type?: BOA.Types.Kernel.General.ChoiceType;
        weight?: number;
    }
    interface SurveyQuestionContract extends BOA.Common.Types.ContractBase {
        answer?: string;
        choiceAnswerId?: number;
        conditionalQuestionContracts?: BOA.Types.Kernel.General.ConditionalQuestionContract[];
        conditionClassName?: string;
        explanation?: string;
        hostIp?: string;
        hostName?: string;
        isAnswerRequired?: boolean;
        isEdit?: boolean;
        isOtherChoice?: boolean;
        listColumnChoice?: BOA.Types.Kernel.General.SurveyQuestionChoiceContract[];
        listRowChoice?: BOA.Types.Kernel.General.SurveyQuestionChoiceContract[];
        matrixMultipleAnswer?: any;
        matrixSingleAnswer?: string[];
        maxSelect?: number;
        minSelect?: number;
        multiplier?: number;
        question?: string;
        questionType?: BOA.Types.Kernel.General.SurveyQuestionType;
        questionTypeNumber?: number;
        sortId?: number;
        statusType?: number;
        surveyQuestionGroupId?: number;
        surveyQuestionId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyQuestionContract extends BOA.Common.Types.ContractBase {
        answer?: string;
        choiceAnswerId?: number;
        conditionalQuestionContracts?: BOA.Types.Kernel.General.ConditionalQuestionContract[];
        conditionClassName?: string;
        explanation?: string;
        hostIp?: string;
        hostName?: string;
        isAnswerRequired?: boolean;
        isEdit?: boolean;
        isOtherChoice?: boolean;
        listColumnChoice?: BOA.Types.Kernel.General.SurveyQuestionChoiceContract[];
        listRowChoice?: BOA.Types.Kernel.General.SurveyQuestionChoiceContract[];
        matrixMultipleAnswer?: any;
        matrixSingleAnswer?: string[];
        maxSelect?: number;
        minSelect?: number;
        multiplier?: number;
        question?: string;
        questionType?: BOA.Types.Kernel.General.SurveyQuestionType;
        questionTypeNumber?: number;
        sortId?: number;
        statusType?: number;
        surveyQuestionGroupId?: number;
        surveyQuestionId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyQuestionGroupContract extends BOA.Common.Types.ContractBase {
        groupName?: string;
        isEdit?: boolean;
        isVisible?: boolean;
        listQuestion?: BOA.Types.Kernel.General.SurveyQuestionContract[];
        sortId?: number;
        surveyId?: number;
        surveyQuestionGroupId?: number;
    }
    interface SurveyQuestionGroupContract extends BOA.Common.Types.ContractBase {
        groupName?: string;
        isEdit?: boolean;
        isVisible?: boolean;
        listQuestion?: BOA.Types.Kernel.General.SurveyQuestionContract[];
        sortId?: number;
        surveyId?: number;
        surveyQuestionGroupId?: number;
    }
    interface SurveyTraceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        gUID?: string;
        hostName?: string;
        isClosedDueToTimeout?: boolean;
        statusId?: number;
        surveyCode?: string;
        surveyTraceId?: number;
        systemDate?: Date;
        userId?: number;
        userName?: string;
    }
    interface SwiftBicDirectoryContract extends BOA.Common.Types.ContractBase {
        branchInformation?: string;
        cityName?: string;
        countryCode?: string;
        swiftCode?: string;
    }
    interface SwiftMessage199 extends BOA.Types.Kernel.General.SwiftMessageBase {
        narrative?: string;
        relatedReference?: string;
        transactionReferenceNumber?: string;
    }
    interface SwiftMessage200 extends BOA.Types.Kernel.General.SwiftMessageBase {
        accountWithInstitution?: string;
        accountWithInstitutionHasSwiftCode?: boolean;
        amount?: string;
        currencyCode?: string;
        leg1CorrespondentName?: string;
        leg1KTAccountNumber?: string;
        transactionReferenceNumber?: string;
        valueDateYYMMDD?: string;
    }
    interface SwiftMessage202 extends BOA.Types.Kernel.General.SwiftMessageBase {
        accountWithInstitution?: string;
        amount?: string;
        beneficiaryInstitution?: string;
        currencyCode?: string;
        dateYYMMDD?: string;
        orderingInstitution?: string;
        relatedReference?: string;
        senderToReceiverInformation?: string;
        transactionReferenceNumber?: string;
    }
    interface SwiftMessage210 extends BOA.Types.Kernel.General.SwiftMessageBase {
        accountIdentification?: string;
        amount?: string;
        currencyCode?: string;
        intermediaryBankIdentifier?: string;
        relatedReference?: string;
        transactionReferenceNumber?: string;
        valueDateYYMMDD?: string;
    }
    interface SwiftMessage300 extends BOA.Types.Kernel.General.SwiftMessageBase {
        amountBought?: string;
        amountSold?: string;
        commonReference?: string;
        currencyCodeBought?: string;
        currencyCodeSold?: string;
        exchangeRate?: string;
        newSequenceA?: string;
        newSequenceB?: string;
        partyA?: string;
        partyB?: string;
        receivingAgentBoughtSwiftCode?: string;
        receivingAgentSoldSwiftCode?: string;
        relatedReference?: string;
        sendersReference?: string;
        tradeDateYYYYMMDD?: string;
        typeOfOperation?: string;
        valueDateYYYYMMDD?: string;
    }
    interface SwiftMessageBase {
        kTSwiftCode?: string;
        kTSwiftCode11?: string;
        receiverSwiftCode?: string;
        validationMessage?: string;
    }
    interface TableVariable extends BOA.Types.Kernel.General.DocumentVariable {
        tableCells?: any[];
    }
    interface TextVariable extends BOA.Types.Kernel.General.DocumentVariable {
        text?: string;
    }
    interface ThirdPartyComponentContract extends BOA.Common.Types.ContractBase {
        thirdParty?: BOA.Types.Kernel.General.ThirdPartyContract;
        thirdPartyId?: BOA.Types.Kernel.General.ThirdPartyIdContract;
    }
    interface ThirdPartyContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        address?: string;
        birthDate?: Date;
        birthPlace?: string;
        email?: string;
        fatherName?: string;
        faxNumber?: string;
        fullName?: string;
        identityNumber?: string;
        motherName?: string;
        name?: string;
        nationality?: string;
        phoneNumber?: string;
        surName?: string;
        thirdPartyId?: number;
    }
    interface ThirdPartyFullContract extends BOA.Common.Types.ContractBase {
        thirdParty?: BOA.Types.Kernel.General.ThirdPartyContract;
        thirdPartyIdList?: BOA.Types.Kernel.General.ThirdPartyIdContract[];
    }
    interface ThirdPartyIdContract extends BOA.Common.Types.ContractBase {
        iDNo?: string;
        iDType?: string;
        idTypeId?: number;
        idTypeName?: string;
        thirdPartyId?: number;
    }
    interface ThirdPartyTransactionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        hostName?: string;
        identityNumber?: string;
        idTypeId?: number;
        resourceId?: number;
        systemDate?: Date;
        thirdPartyId?: number;
        tranDate?: Date;
        userName?: string;
    }
    interface ThirdPartyWithRelationPersonsSerializeContract extends BOA.Common.Types.ContractBase {
        inteviewText?: string;
        isCharge?: boolean;
        isDefinedFaxNumber?: boolean;
        isEntitled?: boolean;
        isFaxMailOrder?: boolean;
        isOriginalOrder?: boolean;
        isPhoneApproved?: boolean;
        isSignitureApproved?: boolean;
        relationPersonId?: number;
        thirdPersonId?: number;
    }
    interface ThirdPartyWithRelationPersonsSerializeContract extends BOA.Common.Types.ContractBase {
        inteviewText?: string;
        isCharge?: boolean;
        isDefinedFaxNumber?: boolean;
        isEntitled?: boolean;
        isFaxMailOrder?: boolean;
        isOriginalOrder?: boolean;
        isPhoneApproved?: boolean;
        isSignitureApproved?: boolean;
        relationPersonId?: number;
        thirdPersonId?: number;
    }
    interface TimeScheduleContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        endDate?: Date;
        parameter1?: number;
        parameter2?: number;
        parameter3?: number;
        parameter4?: string;
        period?: number;
        periodDetail?: number;
    }
    interface TimeScheduleContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        endDate?: Date;
        parameter1?: number;
        parameter2?: number;
        parameter3?: number;
        parameter4?: string;
        period?: number;
        periodDetail?: number;
    }
    interface UserMailAndGsmContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        email?: string;
        gsmNumber?: string;
        name?: string;
        userId?: number;
    }
    interface WhiteListContract {
        informationWhiteListId?: number;
        isActive?: boolean;
        newValue?: string;
        realValue?: string;
        templateCode?: string;
    }
    interface XtmPrintCommandBusinessContract extends BOA.Common.Types.ContractBase {
        sendCommand?: number[];
        status?: number;
    }
    interface XtmScanCommandBusinessContract extends BOA.Common.Types.ContractBase {
        scanImage?: any;
        status?: number;
    }
    interface YourBankingBarcodeContract extends BOA.Common.Types.ContractBase {
        address?: string;
        applicationType?: string;
        fullName?: string;
        header?: string;
        identityNumber?: string;
        year?: string;
    }
    interface YourBankingBarcodeContract extends BOA.Common.Types.ContractBase {
        address?: string;
        applicationType?: string;
        fullName?: string;
        header?: string;
        identityNumber?: string;
        year?: string;
    }
}
declare namespace BOA.Types.Kernel.General.InsuranceEnums {
    export const enum QueryType {
        Plaka = 0,
        SasiNo = 1,
        TCKimlikNo = 2,
        VergiNo = 3,
        MotorNo = 4
    }
}
declare namespace BOA.Types.Kernel.General.KKBEnums {
    export const enum AccountHolderTypes {
        Kendisi = 0,
        Musterek = 1,
        Garantor = 2,
        MaddiDestek = 3,
        EkHamil = 4,
        Diger = 5,
        Bilinmiyor = 6
    }
    export const enum FinanceType {
        BireyselKredi = 0,
        TuketiciKredi = 1,
        KonutKredisi = 2,
        OtoKredisi = 3,
        KrediKarti = 4,
        KrediliMevduat = 5
    }
}
declare namespace BOA.Types.Kernel.General.RiskCenter {
    interface AccessTokenConfigurationContract {
        clientId?: string;
        clientSecret?: string;
        endPoint?: string;
        grantType?: string;
        password?: string;
        refreshToken?: string;
        scope?: string;
        state?: string;
        timeout?: number;
        username?: string;
    }
    interface RiskCenterConstant {
    }
    interface RiskCenterEnum {
    }
    interface RiskCenterServiceCallContract {
        businessKey?: number;
        errorCode?: string;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        requestDate?: Date;
        requestXML?: string;
        responseDate?: Date;
        responseXML?: string;
        riskCenterServiceCallId?: number;
        riskCenterTokenInformationId?: number;
        systemDate?: Date;
        taxNumber?: string;
        userName?: string;
    }
    interface RiskCenterTokenInformationContract extends BOA.Common.Types.ContractBase {
        accessToken?: string;
        expiresIn?: string;
        expireTime?: Date;
        hostName?: string;
        isExpired?: boolean;
        refreshToken?: string;
        riskCenterTokenInformationId?: number;
        scope?: string;
        systemDate?: Date;
        tokenType?: string;
        tokenTypeDescription?: string;
        userName?: string;
        webServiceType?: number;
    }
    interface WebServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        clientId?: string;
        clientSecret?: string;
        grantType?: string;
        password?: string;
        scope?: string;
        state?: string;
        timeout?: number;
        url?: string;
        username?: string;
    }
}
declare namespace BOA.Types.Kernel.General.RiskCenter.RiskCenterEnum {
    export const enum TokenType {
        Main = 1,
        Refresh = 2
    }
    export const enum WebServiceType {
        Credit = 1,
        Cheque = 2
    }
}
declare namespace BOA.Types.Kernel.HGS {
    interface AccountTransferRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: any;
    }
    interface AutoPaymentDirectiveContract extends BOA.Common.Types.ContractBase {
        apdAccountId?: string;
        apdChargeAmount?: number;
        apdMinimumBalance?: number;
        apdPaymentType?: number;
        apdTryCounter?: number;
        barcodeNo?: string;
    }
    interface BalanceLoadFromAccountRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        channelId?: number;
        channelName?: string;
        commissionAmount?: number;
        fromUnitId?: number;
        plateNo?: string;
        toUnitId?: number;
    }
    interface BalanceLoadFromCreditCardRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        channelName?: string;
        commissionAmount?: number;
        fromUnitId?: number;
        plateNo?: string;
    }
    interface BalanceParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        barcodeNo?: string;
        beginDate?: Date;
        cardNumber?: string;
        channelId?: number;
        endDate?: Date;
        languageId?: number;
    }
    interface BalanceTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        apdAccountId?: string;
        balanceId?: number;
        bankCustomerId?: number;
        barcodeNo?: string;
        branchId?: number;
        businessKey?: number;
        cardNumber?: string;
        cardNumberMask?: string;
        cardProvisionNo?: string;
        channelId?: number;
        channelName?: string;
        chargeAmount?: number;
        chargingProcessNo?: string;
        demandAmount?: number;
        errContract?: BOA.Types.Kernel.HGS.ErrorInfoContract;
        hostName?: string;
        iBAN?: string;
        oldBarcodeNo?: string;
        paymentAmount?: number;
        paymentType?: number;
        provusReferenceNo?: string;
        refundReason?: string;
        requestString?: string;
        resourceCode?: string;
        result?: boolean;
        source?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        updateDate?: Date;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
        workGroupId?: number;
    }
    interface BalanceTransferContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        balanceTransferId?: number;
        bankCustomerId?: number;
        fromBarcodeNo?: string;
        hostName?: string;
        processDate?: Date;
        processHostName?: string;
        processStatus?: number;
        processUserName?: string;
        provusReferanceNo?: number;
        systemDate?: Date;
        toBarcodeNo?: string;
        userName?: string;
    }
    interface CustomerContract extends BOA.Common.Types.ContractBase {
        address1?: string;
        address2?: string;
        addressType?: string;
        bankCustomerNo?: string;
        cityCode?: string;
        companyName?: string;
        customerEmail?: string;
        customerId?: number;
        customerType?: string;
        name?: string;
        passportNo?: string;
        postCode?: string;
        status?: string;
        surname?: string;
        tCKN?: string;
        town?: string;
        vKN?: string;
    }
    interface CustomerProductUserContract extends BOA.Common.Types.ContractBase {
        customer?: BOA.Types.Kernel.HGS.CustomerContract;
        listStatus?: number;
        product?: BOA.Types.Kernel.HGS.ProductContract;
        user?: BOA.Types.Kernel.HGS.UserInfoContract;
    }
    interface ErrorInfoContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorDesc?: string;
    }
    interface HGSConstant {
    }
    interface LoginInfoContract extends BOA.Common.Types.ContractBase {
        refNo?: number;
        wsPassword?: string;
        wsUserName?: string;
    }
    interface ProcessInfoContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        charhingProcessNo?: string;
        processDate?: Date;
        processType?: number;
        productNo?: string;
        status?: string;
    }
    interface ProductBalanceContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        barcodeNumber?: string;
        businessKey?: number;
        entryPlace?: string;
        exitPlace?: string;
        provusReferenceNumber?: string;
        systemDate?: Date;
        transactionAmount?: number;
        transactionDate?: Date;
        transactionType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface ProductContract extends BOA.Common.Types.ContractBase {
        aPDAccountSuffix?: number;
        aPDCardNumber?: string;
        aPDChargeAmount?: number;
        aPDMinimumBalance?: number;
        aPDSource?: string;
        apdTryCounter?: number;
        autoPaymentDirective?: BOA.Types.Kernel.HGS.AutoPaymentDirectiveContract;
        balance?: number;
        balanceTransactionContract?: BOA.Types.Kernel.HGS.BalanceTransactionContract;
        bankCustomerId?: number;
        barcodeNo?: string;
        branchId?: number;
        businessKey?: number;
        cancelDate?: Date;
        cancelReason?: string;
        channelId?: number;
        channelName?: string;
        chargeAmount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        deposit?: number;
        gSM?: string;
        hasDebtCommission?: boolean;
        hostName?: string;
        isAutoPaymentDirective?: boolean;
        isResetBalance?: boolean;
        licenseNo?: string;
        multipleSaleNo?: string;
        paymentAccountId?: string;
        paymentType?: number;
        paymentTypeDesc?: string;
        plateNo?: string;
        productId?: number;
        productStatus?: string;
        productStatusDescription?: string;
        productType?: string;
        provusCustomerId?: number;
        provusReferenceNo?: number;
        resetBusinessKey?: number;
        saleAmount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vehicleClass?: number;
        workGroupId?: number;
    }
    interface ProductParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        barcodeNo?: string;
        beginDate?: Date;
        channelId?: number;
        endDate?: Date;
        plateNo?: string;
        productStatus?: string;
    }
    interface ProductStatusInfoContract extends BOA.Common.Types.ContractBase {
        productNo?: string;
        productStatus?: string;
    }
    interface ProductType {
    }
    interface StringExtensions {
    }
    interface TrailerContract extends BOA.Common.Types.ContractBase {
        bankCustomerId?: number;
        bindingBarcodeNumber?: string;
        branchId?: number;
        businessKey?: number;
        cancelBusinessKey?: number;
        cancelDate?: Date;
        channelId?: number;
        hostName?: string;
        licenseNumber?: string;
        plateNumber?: string;
        provusReferenceNumber?: number;
        status?: string;
        systemDate?: Date;
        trailerId?: number;
        trailerType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workGroupId?: number;
    }
    interface TransactionContract extends BOA.Common.Types.ContractBase {
        tranAmount?: string;
        tranCode?: string;
        tranDateTime?: Date;
        tranDesc?: string;
        user?: BOA.Types.Kernel.HGS.UserInfoContract;
    }
    interface TransactionLogContract extends BOA.Common.Types.ContractBase {
        barcodeNo?: string;
        businessKey?: number;
        customerId?: number;
        provusReferenceNo?: string;
        requestXML?: string;
        systemDate?: Date;
        transactionId?: number;
        tranType?: number;
        userName?: string;
    }
    interface TransitContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        description?: string;
        entryDateTime?: Date;
        entryLocation?: string;
        exitDateTime?: Date;
        exitLocation?: string;
    }
    interface UserInfoContract extends BOA.Common.Types.ContractBase {
        bankCode?: string;
        boxOffice?: string;
        branchCityCode?: string;
        branchName?: string;
        branchNo?: string;
        branchTownName?: string;
        headOfficeNo?: string;
        machineName?: string;
        userCode?: string;
        userName?: string;
        userSurname?: string;
    }
}
declare namespace BOA.Types.Kernel.HGS.HGSConstant {
    export const enum BalanceStatusType {
        Load = 1,
        Refund = 2,
        Reset = 3,
        Transfer = 4,
        Reverse = 5,
        TopUpLoad = 6,
        TopUpReverse = 7
    }
    export const enum BalanceTransferStatus {
        NotProcess = 0,
        Process = 1
    }
    export const enum ErrorMessageType {
        BAŞARILI = 0,
        TAHSİLAT_ÖNCEDEN_GERÇEKLEŞMİŞTİR = 11,
        BAŞARISIZ = 111
    }
    export const enum ListStatus {
        BlackList = 4,
        GrayList = 5
    }
    export const enum PaymentType {
        FromAccount = 2,
        CreditCard = 3,
        AllAccounts = 4
    }
    export const enum SourceType {
        Bank = 1,
        Provus = 2
    }
    export const enum TransactionAccountingStatus {
        NotProcess = 0,
        Process = 1,
        Sent = 2
    }
    interface EODClassName {
    }
    interface ParamTypes {
    }
    interface ProductStatusType {
    }
    interface ResuorceDivitId {
    }
    interface TransactionType {
    }
}
declare namespace BOA.Types.Kernel.HR {
    export const enum AdditionalIncomeCodes {
        HealthHelp = 1,
        PaymentIncidental = 2,
        WorkwearHelp = 3,
        PayTolls = 4,
        IrregularWorkCompensation = 5,
        PerformanceBonus = 6,
        KTGroupHealthInsurance = 7,
        TransportationHelp = 8,
        GrossSalaryDifference = 9,
        PermissionFee = 10,
        BirthAssistance = 11,
        MarriageHelp = 12,
        SeverancePay = 13,
        NoticePay = 14,
        TraineeAllowance = 15,
        Deathbenefit = 16,
        Reward = 17,
        HousingBenefit = 18,
        TrainingAssistance = 19,
        Childbenefit = 20,
        FamilyAssistanceWithWorkingSpouse = 21,
        EducationSupport = 22,
        FamilyAssistanceWithNotWorkingSpouse = 23,
        PayTollDifference = 24,
        GettingHelpThrough = 25,
        OthersSalesPremiumCards = 26,
        RoyaltyConsumerFinance = 27,
        OtherSalesPremiums = 28,
        SalaryDifference = 29,
        GVDeficiencyPayments = 30,
        InternalAuditInternalControlAllowances = 31,
        HealthAid2 = 32,
        TrainerFee = 33,
        ReturntoWorkCompensation = 34,
        MinimumLivingAllowance = 35,
        PerformanceBonusNet = 36,
        BusinessBankLicenseExpert = 37,
        BusinessBankLicenseDirector = 38,
        EmergencyAssistance = 39,
        KTGroupHealthInsuranceFamily = 40,
        AnakastoPay = 41,
        ForeignLanguageCompensationDegree1 = 42,
        ForeignLanguageCompensationDegree2 = 43,
        ForeignLanguageCompensationDifference = 44,
        KTCorporationfamilyoffive = 45,
        ForeignLanguageCompensationDegree3 = 46,
        SeverancePayWithIncomeTax = 47,
        WhatGVAperdiemcourse = 48,
        SubsistenceNetVAT = 49,
        GrossGVAperdiemcourse = 50,
        GrossVATperdiem = 51,
        RetirementBonus = 52,
        PermissionFeeNet = 53,
        HomeBuyingSupport = 54,
        OutputPayment = 55,
        RamadanHelp = 56,
        GiftCards = 57,
        OtherPaymentAmountFM = 58,
        Advance = 99
    }
    export const enum LocationType {
        XTM = 1,
        ATM = 2,
        ŞUBE = 3,
        BÖLGE = 4,
        GM = 5
    }
    export const enum OutlookCategory {
        None = 0,
        Red = 1,
        Orange = 2,
        Peach = 3,
        Yellow = 4,
        Green = 5,
        Teal = 6,
        Olive = 7,
        Blue = 8,
        Purple = 9,
        Maroon = 10,
        Steel = 11,
        DarkSteel = 12,
        Gray = 13,
        DarkGray = 14,
        Black = 15,
        DarkRed = 16,
        DarkOrange = 17,
        DarkPeach = 18,
        DarkYellow = 19,
        DarkGreen = 20,
        DarkTeal = 21,
        DarkOlive = 22,
        DarkBlue = 23,
        DarkPurple = 24,
        DarkMaroon = 25
    }
    interface AbsenceContract extends BOA.Common.Types.ContractBase {
        absenceId?: number;
        approvalStatus?: number;
        birthDate?: Date;
        collectionAmount?: number;
        collectionDate?: Date;
        dailyUseStatus?: boolean;
        reportId?: number;
        uncollectionReason?: string;
    }
    interface AbsenceListContract extends BOA.Common.Types.ContractBase {
        absenceDay?: number;
        absenceEndDate?: Date;
        absenceId?: number;
        absenceStartDate?: Date;
        absenceTypeCode?: string;
        emailAddress?: string;
        employeeNumber?: number;
        personId?: number;
        personPhone?: string;
    }
    interface AbsenceListRequest extends BOA.Common.Types.RequestBase {
        amount?: number;
        emailAddress?: string;
    }
    interface AssignmentContract extends BOA.Common.Types.ContractBase {
        accountingPlanId?: number;
        actualLocationId?: number;
        assignmentCategory?: number;
        assignmentCostDept?: number;
        assignmentEndDate?: Date;
        assignmentGrade?: number;
        assignmentId?: number;
        assignmentStartDate?: Date;
        assignmentStatusTypeId?: number;
        assignmentType?: string;
        assignmentTypeDesc?: string;
        assignmentWorkPeriod?: number;
        bKMentorId?: number;
        businessGroupId?: number;
        effectiveEndDate?: Date;
        effectiveStartDate?: Date;
        hostIP?: string;
        hostName?: string;
        isPrimary?: number;
        jobId?: number;
        locationId?: number;
        organizationId?: number;
        payrollId?: number;
        payTypeId?: number;
        periodOfServiceId?: number;
        personGroupId?: number;
        personId?: number;
        positionHayGrpGrade?: number;
        positionId?: number;
        professionGroup?: string;
        projectGroup?: string;
        recruiterId?: number;
        searchAccountingPlanIdEnd?: number;
        searchAccountingPlanIdIsNull?: boolean;
        searchAccountingPlanIdStart?: number;
        searchActualLocationIdEnd?: number;
        searchActualLocationIdIsNull?: boolean;
        searchActualLocationIdStart?: number;
        searchAssignmentCategoryEnd?: number;
        searchAssignmentCategoryIsNull?: boolean;
        searchAssignmentCategoryStart?: number;
        searchAssignmentCostDeptEnd?: number;
        searchAssignmentCostDeptIsNull?: boolean;
        searchAssignmentCostDeptStart?: number;
        searchAssignmentEndDateEnd?: Date;
        searchAssignmentEndDateIsNull?: boolean;
        searchAssignmentEndDateStart?: Date;
        searchAssignmentGradeEnd?: number;
        searchAssignmentGradeIsNull?: boolean;
        searchAssignmentGradeStart?: number;
        searchAssignmentStartDateEnd?: Date;
        searchAssignmentStartDateIsNull?: boolean;
        searchAssignmentStartDateStart?: Date;
        searchAssignmentStatusTypeIdEnd?: number;
        searchAssignmentStatusTypeIdIsNull?: boolean;
        searchAssignmentStatusTypeIdStart?: number;
        searchAssignmentTypeDescIsNull?: boolean;
        searchAssignmentTypeDescLike?: string;
        searchAssignmentTypeIsNull?: boolean;
        searchAssignmentTypeLike?: string;
        searchAssignmentWorkPeriodEnd?: number;
        searchAssignmentWorkPeriodIsNull?: boolean;
        searchAssignmentWorkPeriodStart?: number;
        searchBKMentorIdEnd?: number;
        searchBKMentorIdIsNull?: boolean;
        searchBKMentorIdStart?: number;
        searchBusinessGroupIdEnd?: number;
        searchBusinessGroupIdIsNull?: boolean;
        searchBusinessGroupIdStart?: number;
        searchEffectiveEndDateEnd?: Date;
        searchEffectiveEndDateStart?: Date;
        searchEffectiveStartDateEnd?: Date;
        searchEffectiveStartDateStart?: Date;
        searchIsPrimaryEnd?: number;
        searchIsPrimaryIsNull?: boolean;
        searchIsPrimaryStart?: number;
        searchJobIdEnd?: number;
        searchJobIdIsNull?: boolean;
        searchJobIdStart?: number;
        searchLocationIdEnd?: number;
        searchLocationIdIsNull?: boolean;
        searchLocationIdStart?: number;
        searchOrganizationIdEnd?: number;
        searchOrganizationIdIsNull?: boolean;
        searchOrganizationIdStart?: number;
        searchPayrollIdEnd?: number;
        searchPayrollIdIsNull?: boolean;
        searchPayrollIdStart?: number;
        searchPayTypeIdEnd?: number;
        searchPayTypeIdIsNull?: boolean;
        searchPayTypeIdStart?: number;
        searchPeriodOfServiceIdEnd?: number;
        searchPeriodOfServiceIdIsNull?: boolean;
        searchPeriodOfServiceIdStart?: number;
        searchPersonGroupIdEnd?: number;
        searchPersonGroupIdIsNull?: boolean;
        searchPersonGroupIdStart?: number;
        searchPersonIdEnd?: number;
        searchPersonIdIsNull?: boolean;
        searchPersonIdStart?: number;
        searchPositionHayGrpGradeEnd?: number;
        searchPositionHayGrpGradeIsNull?: boolean;
        searchPositionHayGrpGradeStart?: number;
        searchPositionIdEnd?: number;
        searchPositionIdIsNull?: boolean;
        searchPositionIdStart?: number;
        searchProfessionGroupIsNull?: boolean;
        searchProfessionGroupLike?: string;
        searchProjectGroupIsNull?: boolean;
        searchProjectGroupLike?: string;
        searchRecruiterIdEnd?: number;
        searchRecruiterIdIsNull?: boolean;
        searchRecruiterIdStart?: number;
        searchSetOfBooksIdEnd?: number;
        searchSetOfBooksIdIsNull?: boolean;
        searchSetOfBooksIdStart?: number;
        searchSuperVisorIdEnd?: number;
        searchSuperVisorIdIsNull?: boolean;
        searchSuperVisorIdStart?: number;
        searchSystemDateEnd?: Date;
        searchSystemDateIsNull?: boolean;
        searchSystemDateStart?: Date;
        searchWorkingDayEnd?: number;
        searchWorkingDayIsNull?: boolean;
        searchWorkingDayStart?: number;
        searchWorkingHourEnd?: number;
        searchWorkingHourIsNull?: boolean;
        searchWorkingHourStart?: number;
        setOfBooksId?: number;
        superVisorId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workingDay?: number;
        workingHour?: number;
    }
    interface Constants {
    }
    interface DeductionTypeContract extends BOA.Common.Types.ContractBase {
        dvzcins?: string;
        isSucceed?: boolean;
        keskod?: number;
        message?: string;
        personId?: number;
        tstmkt?: number;
        tutar?: number;
    }
    interface EInvHeaderContract extends BOA.Common.Types.ContractBase {
        adress?: string;
        awtNo?: number;
        city?: string;
        county?: string;
        descriptions?: string;
        document?: any;
        documentStatus?: number;
        eInvHeaderId?: number;
        eInvLines?: BOA.Types.Kernel.HR.EInvLinesContract[];
        exchangeDate?: Date;
        exchangeRate?: number;
        exchangeType?: string;
        hostIP?: string;
        hostName?: string;
        invoiceCurrencyCode?: string;
        invoiceDate?: Date;
        invoiceDateEnd?: Date;
        invoiceDateStart?: Date;
        invoiceId?: string;
        invoiceIdArray?: string[];
        invoiceLines?: number;
        invoiceNumber?: string;
        invoiceType?: string;
        onlyNewestInvoices?: boolean;
        orderNumber?: string;
        pageIndex?: number;
        pageSize?: number;
        paymentCurrencyCode?: string;
        paymentDueDate?: Date;
        paymentType?: string;
        phoneNumber?: string;
        profileId?: string;
        stopajAmount?: number;
        stopajTaxCode?: string;
        systemDate?: Date;
        totalAmount?: number;
        transferSatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserId?: number;
        updateUserName?: string;
        userId?: number;
        userName?: string;
        uuId?: string;
        vendorName?: string;
        vkn?: string;
        vknS?: string;
        waybillNumber?: string;
    }
    interface EInvLinesContract extends BOA.Common.Types.ContractBase {
        definition?: string;
        descriptions?: string;
        eInvHeaderId?: number;
        eInvHeaderIdList?: number[];
        eInvLineId?: number;
        hostIP?: string;
        hostName?: string;
        ledgerCode?: string;
        lineAmount?: number;
        lineCurrencyCode?: string;
        lineNum?: number;
        orderLineNumber?: number;
        orderNumber?: string;
        organizationId?: number;
        systemDate?: Date;
        taxAmount?: number;
        taxCode?: string;
        unit?: number;
        unitCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserId?: number;
        updateUserName?: string;
        userId?: number;
        userName?: string;
    }
    interface EmploymentResponsibleContract extends BOA.Common.Types.ContractBase {
        baseOrganizationId?: number;
        corporateEmail?: string;
        id?: number;
        name?: string;
        parentId?: number;
        personId?: number;
        responsibleId?: number;
    }
    interface EnoctaActivityInfo extends BOA.Common.Types.ContractBase {
        activityCode?: string;
        activityName?: string;
        activityOwner?: string;
        additionalInfo1?: string;
        additionalInfo2?: string;
        additionalInfo3?: string;
        categoryCode?: string;
        categoryName?: string;
        courseCode?: string;
        endDate?: Date;
        enoctaActivityInfoId?: number;
        etkinlikTartismaGrubuKonusu?: number;
        hostIP?: string;
        hostName?: string;
        startDate?: Date;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        visible?: number;
    }
    interface EnoctaCourseInfo extends BOA.Common.Types.ContractBase {
        categoryCode?: string;
        categoryName?: string;
        competences?: string;
        courseCode?: string;
        courseMaterials?: string;
        courseName?: string;
        courseSystemCode?: string;
        courseType?: string;
        description?: string;
        enoctaCourseInfoId?: number;
        estimatedTime?: number;
        estimatedTimeGun?: number;
        hostIP?: string;
        hostName?: string;
        keyword?: string;
        language?: number;
        organizationalPosition?: string;
        planType?: number;
        status?: number;
        systemDate?: Date;
        target?: string;
        targetAudience?: string;
        targetGroup?: string;
        topicTitles?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        upperCategoryCode?: string;
        upperCategoryName?: string;
        userName?: string;
        validityPeriod?: number;
        visible?: number;
    }
    interface EnoctaUserActivityInfo extends BOA.Common.Types.ContractBase {
        activityCode?: string;
        activityCompleteStatus?: number;
        activityName?: string;
        activityScore?: number;
        activityStatus?: number;
        activitySuccessStatus?: number;
        assignmentDate?: Date;
        completionDate?: Date;
        completionPercentage?: number;
        courseCode?: string;
        courseCompleteStatus?: number;
        courseCompletionDate?: Date;
        courseName?: string;
        courseScore?: number;
        courseSuccessStatus?: number;
        courseType?: number;
        courseUniqueId?: number;
        experienceDuration?: number;
        posttestCompleteStatus?: number;
        posttestScore?: number;
        posttestSuccessStatus?: number;
        pretestCompleteStatus?: number;
        pretestScore?: number;
        pretestSuccessStatus?: number;
        registerId?: string;
        userCode?: string;
    }
    interface EnoctaUserInfo extends BOA.Common.Types.ContractBase {
        address?: string;
        birthday?: Date;
        city?: string;
        dateOfEntry?: Date;
        dateOfLeave?: Date;
        district?: string;
        educationalStatus?: string;
        eMail?: string;
        fax?: string;
        gender?: string;
        gsm1?: string;
        gsm2?: string;
        language?: number;
        maidenName?: string;
        manager?: string;
        maritalStatus?: string;
        password?: string;
        placeOfBirth?: string;
        registerId?: string;
        status?: number;
        tckNo?: string;
        tel1?: string;
        tel2?: string;
        userCode?: string;
        userFeatures?: string[];
        userName?: string;
        userSurname?: string;
        userType?: number;
        webAddress?: string;
        zipCode?: string;
    }
    interface EnoctaUserResult extends BOA.Common.Types.ContractBase {
        resultDesc?: string;
        resultType?: string;
        userCode?: string;
        userId?: number;
    }
    interface ExIncomeTypeContract extends BOA.Common.Types.ContractBase {
        ekgkod?: number;
        isSucceed?: boolean;
        message?: string;
        personId?: number;
        tstmkt?: number;
        tutmkt?: number;
    }
    interface ExtraPaymentContract {
        extraPaymentTotal?: number;
        extraPaymentType?: string;
    }
    interface ExtraPaymentHRContract extends BOA.Common.Types.ContractBase {
        dvzcins?: string;
        ekgkod?: number;
        personId?: number;
        tstmkt?: number;
        tutar?: number;
    }
    interface ExtraPaymentInfo {
        noticePay?: number;
        severancePay?: number;
    }
    interface FlexibleFringeBenefitContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        benefitIntegrationId?: string;
        ekgId?: string;
        personId?: string;
    }
    interface FlexValues extends BOA.Common.Types.ContractBase {
        code?: string;
        endDate?: Date;
        flexValId?: number;
        flexValSetId?: number;
        flexValue?: string;
        flexValue1?: string;
        flexValue10?: string;
        flexValue2?: string;
        flexValue3?: string;
        flexValue4?: string;
        flexValue5?: string;
        flexValue6?: string;
        flexValue7?: string;
        flexValue8?: string;
        flexValue9?: string;
        hostIP?: string;
        hostName?: string;
        isAllOptionValue?: boolean;
        parentFlexValue?: string;
        sortOrder?: number;
        startDate?: Date;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GeneralActivePersonelContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        actualLocationId?: number;
        age?: number;
        assignmentGrade?: number;
        birthCity?: string;
        birthCityCode?: number;
        birthDate?: string;
        birthPlace?: string;
        birthPlaceCode?: string;
        bloodType?: string;
        corporateEmail?: string;
        costCenterId?: number;
        disabilityStatus?: string;
        disabilityStatusId?: number;
        educationLevel?: string;
        employeeNumber?: number;
        employeeType?: string;
        employeeTypeId?: number;
        experience?: number;
        experienceAfterLastHire?: number;
        experienceAtLastJob?: number;
        experienceAtLastOrg?: number;
        experienceAtLastPosition?: number;
        experienceLastYear?: number;
        experienceOldWork?: number;
        firstName?: string;
        firstStartDate?: string;
        fullName?: string;
        functionalTitle?: string;
        generalLocation?: string;
        hasService?: string;
        identityNumber?: string;
        isUserActive?: number;
        jobGroup?: string;
        jobGroupId?: number;
        jobId?: number;
        jobName?: string;
        jobNameInEnglish?: string;
        lastName?: string;
        lastStartDate?: string;
        lEVEL?: number;
        locationCode?: string;
        locationId?: number;
        managerEmployeeNumber?: number;
        managerFullName?: string;
        managerJobId?: number;
        managerJobLevel?: number;
        managerJobName?: string;
        managerPersonId?: number;
        managerPositionId?: number;
        managerUserCode?: string;
        maritalStatus?: string;
        organizationCity?: string;
        organizationCityId?: number;
        organizationCountryId?: number;
        organizationCountryName?: string;
        organizationId?: number;
        organizationIdParent?: number;
        organizationName?: string;
        organizationNameParent?: string;
        organizationType?: string;
        organizationTypeParent?: string;
        personalEmail?: string;
        personId?: number;
        personLocation?: number;
        personType?: string;
        personTypeId?: number;
        positionFamily?: string;
        positionFamilyId?: number;
        positionId?: number;
        positionName?: string;
        profitCenter?: string;
        projectGroup?: string;
        sector?: string;
        sex?: string;
        supervisorEmployeeNumber?: number;
        superVisorFullName?: string;
        superVisorId?: number;
        supervisorJobId?: number;
        supervisorJobName?: string;
        supervisorPositionId?: number;
        supervisorUserCode?: string;
        toeflExamDate?: Date;
        toeflLevel?: number;
        toeflScore?: number;
        userCode?: string;
    }
    interface HRMessages {
        userCodeCanNotBeEmpty?: string;
    }
    interface HRPersonContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        agreementTerm?: number;
        birthDate?: Date;
        birthPlace?: string;
        bloodType?: string;
        businessGroupId?: number;
        corporateEmail?: string;
        countryOfBirth?: string;
        drivingLicence?: string;
        educationLevel?: string;
        effectiveEndDate?: Date;
        effectiveStartDate?: Date;
        employeeNumber?: number;
        experience?: number;
        firstName?: string;
        fullName?: string;
        hasService?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        jobId?: number;
        lastName?: string;
        maritalStatus?: string;
        middleName?: string;
        nationalIdentifier?: string;
        nationality?: string;
        personalEmail?: string;
        personId?: number;
        personTypeId?: number;
        previousLastName?: string;
        sex?: string;
        startDate?: Date;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
    }
    interface IndividualRetirementKernelContract extends BOA.Common.Types.ContractBase {
        additionalAmount?: string;
        aILEMAmount?: string;
        amount?: string;
        corporationAmount?: string;
        month?: string;
        personId?: string;
        year?: string;
    }
    interface InventoryContract {
        inventoryName?: string;
        inventoryType?: string;
        total?: number;
    }
    interface JobContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        businessGroupId?: number;
        description?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        jobDefinitionId?: number;
        jobGrade?: number;
        jobGroupId?: number;
        jobId?: number;
        jobName?: string;
        jobNameInEnglish?: string;
        jobOrgGroupId?: number;
        level?: number;
        searchBeginDateEnd?: Date;
        searchBeginDateIsNull?: boolean;
        searchBeginDateStart?: Date;
        searchBusinessGroupIdEnd?: number;
        searchBusinessGroupIdIsNull?: boolean;
        searchBusinessGroupIdStart?: number;
        searchDescriptionIsNull?: boolean;
        searchDescriptionLike?: string;
        searchEndDateEnd?: Date;
        searchEndDateIsNull?: boolean;
        searchEndDateStart?: Date;
        searchJobDefinitionIdEnd?: number;
        searchJobDefinitionIdIsNull?: boolean;
        searchJobDefinitionIdStart?: number;
        searchJobGradeEnd?: number;
        searchJobGradeIsNull?: boolean;
        searchJobGradeStart?: number;
        searchJobGroupIdEnd?: number;
        searchJobGroupIdIsNull?: boolean;
        searchJobGroupIdStart?: number;
        searchJobNameInEnglishIsNull?: boolean;
        searchJobNameInEnglishLike?: string;
        searchJobNameIsNull?: boolean;
        searchJobNameLike?: string;
        searchJobOrgGroupIdEnd?: number;
        searchJobOrgGroupIdIsNull?: boolean;
        searchJobOrgGroupIdStart?: number;
        searchLevelEnd?: number;
        searchLevelIsNull?: boolean;
        searchLevelStart?: number;
        searchSystemDateEnd?: Date;
        searchSystemDateIsNull?: boolean;
        searchSystemDateStart?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface JobLevel {
        branchManager?: number;
    }
    interface LocationContract extends BOA.Common.Types.ContractBase {
        address?: string;
        beginDate?: Date;
        businessGroupId?: number;
        cityId?: number;
        countryId?: number;
        countyId?: number;
        description?: string;
        district?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        isSGKWorkplace?: number;
        latitude?: string;
        locationCode?: string;
        locationCodeInEnglish?: string;
        locationId?: number;
        locationType?: number;
        longitude?: string;
        postalCode?: string;
        searchAddressIsNull?: boolean;
        searchAddressLike?: string;
        searchBeginDateEnd?: Date;
        searchBeginDateIsNull?: boolean;
        searchBeginDateStart?: Date;
        searchBusinessGroupIdEnd?: number;
        searchBusinessGroupIdIsNull?: boolean;
        searchBusinessGroupIdStart?: number;
        searchCityIdEnd?: number;
        searchCityIdIsNull?: boolean;
        searchCityIdStart?: number;
        searchCountryIdEnd?: number;
        searchCountryIdIsNull?: boolean;
        searchCountryIdStart?: number;
        searchCountyIdEnd?: number;
        searchCountyIdIsNull?: boolean;
        searchCountyIdStart?: number;
        searchDescriptionIsNull?: boolean;
        searchDescriptionLike?: string;
        searchDistrictIsNull?: boolean;
        searchDistrictLike?: string;
        searchEndDateEnd?: Date;
        searchEndDateIsNull?: boolean;
        searchEndDateStart?: Date;
        searchIsSGKWorkplaceEnd?: number;
        searchIsSGKWorkplaceIsNull?: boolean;
        searchIsSGKWorkplaceStart?: number;
        searchLatitudeIsNull?: boolean;
        searchLatitudeLike?: string;
        searchLocationCodeInEnglishIsNull?: boolean;
        searchLocationCodeInEnglishLike?: string;
        searchLocationCodeIsNull?: boolean;
        searchLocationCodeLike?: string;
        searchLocationTypeEnd?: number;
        searchLocationTypeIsNull?: boolean;
        searchLocationTypeStart?: number;
        searchLongitudeIsNull?: boolean;
        searchLongitudeLike?: string;
        searchPostalCodeIsNull?: boolean;
        searchPostalCodeLike?: string;
        searchSystemDateEnd?: Date;
        searchSystemDateIsNull?: boolean;
        searchSystemDateStart?: Date;
        searchTelephoneNumber1IsNull?: boolean;
        searchTelephoneNumber1Like?: string;
        searchTelephoneNumber2IsNull?: boolean;
        searchTelephoneNumber2Like?: string;
        searchTelephoneNumber3IsNull?: boolean;
        searchTelephoneNumber3Like?: string;
        systemDate?: Date;
        telephoneNumber1?: string;
        telephoneNumber2?: string;
        telephoneNumber3?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OrganizationContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        branchType?: string;
        businessGroupId?: number;
        costAllocationId?: number;
        costCenterId?: number;
        description?: string;
        email?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        locationId?: number;
        organizationClass?: string;
        organizationId?: number;
        organizationName?: string;
        organizationNameInEnglish?: string;
        organizationShortName?: string;
        organizationStatus?: number;
        organizationType?: string;
        orgPupAllView?: string;
        orgPupManager?: string;
        plannedOpenDate?: Date;
        searchBeginDateEnd?: Date;
        searchBeginDateIsNull?: boolean;
        searchBeginDateStart?: Date;
        searchBranchTypeIsNull?: boolean;
        searchBranchTypeLike?: string;
        searchBusinessGroupIdEnd?: number;
        searchBusinessGroupIdIsNull?: boolean;
        searchBusinessGroupIdStart?: number;
        searchCostAllocationIdEnd?: number;
        searchCostAllocationIdIsNull?: boolean;
        searchCostAllocationIdStart?: number;
        searchCostCenterIdEnd?: number;
        searchCostCenterIdIsNull?: boolean;
        searchCostCenterIdStart?: number;
        searchDescriptionIsNull?: boolean;
        searchDescriptionLike?: string;
        searchEmailIsNull?: boolean;
        searchEmailLike?: string;
        searchEndDateEnd?: Date;
        searchEndDateIsNull?: boolean;
        searchEndDateStart?: Date;
        searchLocationIdEnd?: number;
        searchLocationIdIsNull?: boolean;
        searchLocationIdStart?: number;
        searchOrganizationClassIsNull?: boolean;
        searchOrganizationClassLike?: string;
        searchOrganizationNameInEnglishIsNull?: boolean;
        searchOrganizationNameInEnglishLike?: string;
        searchOrganizationNameIsNull?: boolean;
        searchOrganizationNameLike?: string;
        searchOrganizationShortNameIsNull?: boolean;
        searchOrganizationShortNameLike?: string;
        searchOrganizationStatusEnd?: number;
        searchOrganizationStatusIsNull?: boolean;
        searchOrganizationStatusStart?: number;
        searchOrganizationTypeIsNull?: boolean;
        searchOrganizationTypeLike?: string;
        searchOrgPupAllViewIsNull?: boolean;
        searchOrgPupAllViewLike?: string;
        searchOrgPupManagerIsNull?: boolean;
        searchOrgPupManagerLike?: string;
        searchPlannedOpenDateEnd?: Date;
        searchPlannedOpenDateIsNull?: boolean;
        searchPlannedOpenDateStart?: Date;
        searchSystemDateEnd?: Date;
        searchSystemDateIsNull?: boolean;
        searchSystemDateStart?: Date;
        searchVOIPEnd?: number;
        searchVOIPIsNull?: boolean;
        searchVOIPStart?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vOIP?: number;
    }
    interface OrganizationType {
        brim?: string;
        servis?: string;
    }
    interface OutlookContract extends BOA.Common.Types.ContractBase {
        cancelMessage?: string;
        categoryName?: string;
        color?: BOA.Types.Kernel.HR.OutlookCategory;
        key?: string;
        mailBody?: string;
        mailSubject?: string;
        mailTo?: string;
        meetingEndDate?: Date;
        meetingLocation?: string;
        meetingStartDate?: Date;
        organizerMail?: string;
        password?: string;
        reminderDueBy?: Date;
        reminderMin?: number;
        taskDueDate?: Date;
        taskStartDate?: Date;
        userName?: string;
    }
    interface PersonLoanInfoContract extends BOA.Common.Types.ContractBase {
        dvzcins?: string;
        keskod?: number;
        personId?: number;
        tstmkt?: number;
        tutar?: number;
    }
    interface PersonnelAccountTransactionContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        businessKey?: number;
        credit?: number;
        currentBalance?: number;
        debit?: number;
        description?: string;
        resourceId?: number;
        tranDate?: Date;
    }
    interface PersonnelBalanceSalaryContract extends BOA.Common.Types.ContractBase {
        accountID?: number;
        amount?: number;
        customerID?: number;
        exceptionMessage?: string;
        iD?: number;
        iVR?: string;
        refID?: number;
    }
    interface PersonnelBalanceViewRequest {
        beginDate?: Date;
        customerId?: number;
        endDate?: Date;
        password?: string;
    }
    interface PersonnelMoneyTransferContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        card?: string;
        customerId?: number;
        description?: string;
        destinationBank?: string;
        destinationBranch?: string;
        eftId?: number;
        hrID?: string;
        hrPassword?: string;
        hrRefID?: string;
        iBAN?: string;
        lAccountNumber?: string;
        lFatherName?: string;
        lName?: string;
        lPhone?: string;
        moneyToTransfer?: number;
        oldHrPassword?: string;
        password?: string;
        paymentType?: number;
        suffixTo?: number;
    }
    interface PersonnelMoneyTransferRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        webUserId?: number;
    }
    interface PersonnelSalaryContract extends BOA.Common.Types.ContractBase {
        customerID?: string;
        hrID?: string;
        hrRefID?: string;
        salary?: number;
    }
    interface PersonnelTransactionRequest extends BOA.Common.Types.TransactionRequestBase {
        customerId?: number;
        newPassword?: string;
        password?: string;
        refId?: number;
    }
    interface PersonOverTimeContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        beginTime?: string;
        description?: string;
        employeeNumber?: number;
        endDate?: Date;
        endTime?: string;
        isManager?: number;
        personId?: number;
        personOverTimeId?: number;
        status?: number;
    }
    interface PersonQuitInfoContract {
        accrual?: number;
        advance?: number;
        extraPaymentContracts?: BOA.Types.Kernel.HR.ExtraPaymentContract[];
        extraPaymentInfo?: BOA.Types.Kernel.HR.ExtraPaymentInfo;
        incentive?: BOA.Types.Kernel.HR.SekerpinarIncentiveContract;
        inventoryContracts?: BOA.Types.Kernel.HR.InventoryContract[];
        karz?: number;
        levy?: number;
        managementTraineeYear?: number;
        monthlySalary?: string;
        multinet?: number;
        netSalary?: string;
    }
    interface PositionContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        businessGroupId?: number;
        description?: string;
        endDate?: Date;
        functionalTitle?: string;
        hayGroupGrade?: number;
        hayGroupPoint?: number;
        hayGroupSubWorkgroupId?: number;
        hayGroupWorkgroupId?: number;
        hostIP?: string;
        hostName?: string;
        jobId?: number;
        locationId?: number;
        organizationId?: number;
        orgPubManagerPositionId?: number;
        orgPubPositionContact?: string;
        positionDefinitionId?: number;
        positionFamilyId?: number;
        positionGroupId?: number;
        positionId?: number;
        positionJobDesc?: number;
        positionLocationId?: number;
        positionName?: string;
        positionNameInEnglish?: string;
        positionOrgValueId?: number;
        positionTypeId?: number;
        positionValueId?: number;
        probationPeriod?: number;
        probationPeriodUnit?: string;
        profitCenter?: string;
        searchBeginDateEnd?: Date;
        searchBeginDateIsNull?: boolean;
        searchBeginDateStart?: Date;
        searchBusinessGroupIdEnd?: number;
        searchBusinessGroupIdIsNull?: boolean;
        searchBusinessGroupIdStart?: number;
        searchDescriptionIsNull?: boolean;
        searchDescriptionLike?: string;
        searchEndDateEnd?: Date;
        searchEndDateIsNull?: boolean;
        searchEndDateStart?: Date;
        searchFunctionalTitleIsNull?: boolean;
        searchFunctionalTitleLike?: string;
        searchHayGroupGradeEnd?: number;
        searchHayGroupGradeIsNull?: boolean;
        searchHayGroupGradeStart?: number;
        searchHayGroupPointEnd?: number;
        searchHayGroupPointIsNull?: boolean;
        searchHayGroupPointStart?: number;
        searchHayGroupSubWorkgroupIdEnd?: number;
        searchHayGroupSubWorkgroupIdIsNull?: boolean;
        searchHayGroupSubWorkgroupIdStart?: number;
        searchHayGroupWorkgroupIdEnd?: number;
        searchHayGroupWorkgroupIdIsNull?: boolean;
        searchHayGroupWorkgroupIdStart?: number;
        searchJobIdEnd?: number;
        searchJobIdIsNull?: boolean;
        searchJobIdStart?: number;
        searchLocationIdEnd?: number;
        searchLocationIdIsNull?: boolean;
        searchLocationIdStart?: number;
        searchOrganizationIdEnd?: number;
        searchOrganizationIdIsNull?: boolean;
        searchOrganizationIdStart?: number;
        searchOrgPubManagerPositionIdEnd?: number;
        searchOrgPubManagerPositionIdIsNull?: boolean;
        searchOrgPubManagerPositionIdStart?: number;
        searchOrgPubPositionContactIsNull?: boolean;
        searchOrgPubPositionContactLike?: string;
        searchPositionDefinitionIdEnd?: number;
        searchPositionDefinitionIdIsNull?: boolean;
        searchPositionDefinitionIdStart?: number;
        searchPositionFamilyIdEnd?: number;
        searchPositionFamilyIdIsNull?: boolean;
        searchPositionFamilyIdStart?: number;
        searchPositionGroupIdEnd?: number;
        searchPositionGroupIdIsNull?: boolean;
        searchPositionGroupIdStart?: number;
        searchPositionJobDescEnd?: number;
        searchPositionJobDescIsNull?: boolean;
        searchPositionJobDescStart?: number;
        searchPositionLocationIdEnd?: number;
        searchPositionLocationIdIsNull?: boolean;
        searchPositionLocationIdStart?: number;
        searchPositionNameInEnglishIsNull?: boolean;
        searchPositionNameInEnglishLike?: string;
        searchPositionNameIsNull?: boolean;
        searchPositionNameLike?: string;
        searchPositionOrgValueIdEnd?: number;
        searchPositionOrgValueIdIsNull?: boolean;
        searchPositionOrgValueIdStart?: number;
        searchPositionTypeIdEnd?: number;
        searchPositionTypeIdIsNull?: boolean;
        searchPositionTypeIdStart?: number;
        searchPositionValueIdEnd?: number;
        searchPositionValueIdIsNull?: boolean;
        searchPositionValueIdStart?: number;
        searchProbationPeriodUnitIsNull?: boolean;
        searchProbationPeriodUnitLike?: string;
        searchProfitCenterIsNull?: boolean;
        searchProfitCenterLike?: string;
        searchSectorIsNull?: boolean;
        searchSectorLike?: string;
        searchSuccessorPositionIdEnd?: number;
        searchSuccessorPositionIdIsNull?: boolean;
        searchSuccessorPositionIdStart?: number;
        searchSystemDateEnd?: Date;
        searchSystemDateIsNull?: boolean;
        searchSystemDateStart?: Date;
        sector?: string;
        successorPositionId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PositionId {
        assistantOfGeneralManagerOfStrategy?: number;
        iKGroupManager?: number;
        qualityAndOrganizationDevelopmentManager?: number;
        strategyCommonManagerAssistantName?: number;
    }
    interface SekerpinarIncentiveContract {
        icentiveDate?: Date;
        incentiveType?: string;
    }
    interface SsiPremiumContract {
        endDate?: Date;
        locationCode?: string;
        locationId?: number;
        personId?: number;
        startDate?: Date;
    }
}
declare namespace BOA.Types.Kernel.HR.Constants {
    interface OracleCommands {
    }
    interface OracleParameter {
    }
}
declare namespace BOA.Types.Kernel.HRDefinition {
    export const enum CryptDataType {
        String = 1,
        Decimal = 2,
        Int32 = 3,
        ShortInt = 4
    }
    interface AuthenticationAndSalaryInfoContract extends BOA.Common.Types.ContractBase {
        dataContract?: BOA.Types.Kernel.HRDefinition.PersonSalaryContract[];
        dataSecurityCode?: string;
        isIKPersonnel?: boolean;
        personIdList?: number[];
        sSLDecryptedEncryptionKey?: string;
        sSLEncryptedEncryptionKey?: string;
    }
    interface AuthenticationAndSalaryInfoRequest extends BOA.Common.Types.TransactionRequestBase {
        closeDate?: Date;
        dataContract?: BOA.Types.Kernel.HRDefinition.PersonSalaryContract[];
        dataSecurityCode?: string;
        employeeNumber?: number;
        encriptionKey?: string;
        personId?: number;
        personIdList?: number[];
        personSalaryContract?: BOA.Types.Kernel.HRDefinition.PersonSalaryContract;
        personSalaryList?: BOA.Types.Kernel.HRDefinition.PersonSalaryContract[];
        requestResourceCode?: string;
    }
    interface CryptDataInfo extends BOA.Common.Types.ContractBase {
        cryptDataType?: number;
        decryptedDecimalData?: number;
        decryptedInt32Data?: number;
        decryptedShortIntData?: number;
        decryptedStringData?: string;
        encryptedData?: string;
        order?: number;
    }
    interface FamilySupportContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        familySupportCode?: number;
        familySupportId?: number;
        flag?: number;
        hostIP?: string;
        hostName?: string;
        month?: number;
        personId?: number;
        relatedPersonId?: number;
        systemDate?: Date;
        totalAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface FamilySupportRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.HRDefinition.FamilySupportContract;
    }
    interface FullSalaryInfo extends BOA.Common.Types.ContractBase {
        encryptedGrossSalary?: string;
        encryptedNetSalary?: string;
        grossSalary?: number;
        netSalary?: number;
    }
    interface PersonDetailInfoContract extends BOA.Common.Types.ContractBase {
        cryptDataInfoList?: BOA.Types.Kernel.HRDefinition.CryptDataInfo[];
        personId?: number;
    }
    interface PersonSalaryContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        businessGroupId?: number;
        changeReasonId?: string;
        changeReasonName?: string;
        endDate?: Date;
        grossSalaryAmount?: string;
        hostIP?: string;
        hostName?: string;
        lastChangeDate?: Date;
        netSalaryAmount?: string;
        personId?: number;
        personSalaryCurrencyId?: number;
        personSalaryCurrencyName?: string;
        personSalaryDetailList?: BOA.Types.Kernel.HRDefinition.PersonSalaryDetailContract[];
        personSalaryId?: number;
        personSalaryTypeId?: number;
        personSalaryTypeName?: string;
        status?: number;
        systemDate?: Date;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonSalaryDetailContract extends BOA.Common.Types.ContractBase {
        businessGroupId?: number;
        changeAmount?: string;
        changePercentage?: string;
        changeReasonId?: string;
        changeReasonName?: string;
        hostIP?: string;
        hostName?: string;
        personSalaryDetailId?: number;
        personSalaryId?: number;
        systemDate?: Date;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SalaryConstant {
    }
    interface SalaryDetailInfo {
        changeAmount?: number;
        changePercentage?: number;
        changeReasonId?: string;
        changeReasonName?: string;
        personSalaryDetailId?: number;
        personSalaryId?: number;
    }
    interface SalaryInfo extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        changeReasonId?: string;
        changeReasonName?: string;
        encryptedGrossSalaryAmount?: string;
        encryptedNetSalaryAmount?: string;
        endDate?: Date;
        grossSalaryAmount?: number;
        netSalaryAmount?: number;
        personId?: number;
        personSalaryCurrencyId?: number;
        personSalaryCurrencyName?: string;
        personSalaryId?: number;
        personSalaryTypeId?: number;
        personSalaryTypeName?: string;
        salaryDetailList?: BOA.Types.Kernel.HRDefinition.SalaryDetailInfo[];
        status?: number;
    }
    interface SecurityCodeContract extends BOA.Common.Types.ContractBase {
        dataSecurityCode?: string;
        encriptionKey?: string;
    }
}
declare namespace BOA.Types.Kernel.HRLoan {
    interface HRLoanContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        balance?: number;
    }
}
declare namespace BOA.Types.Kernel.HSM {
    interface ChangePinFromTerminalRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        currentPINBlock?: string;
        currentPVV?: string;
        delimiter?: string;
        endMessageDelimiter?: string;
        excludedPINCount?: number;
        excludedPINLength?: string;
        excludedPINTable?: string[];
        keyType?: string;
        messageTrailer?: string;
        newPINBlock?: string;
        pAN?: string;
        pINBlockFormatCode?: string;
        pVKIndicator?: string;
        pVKPair?: string;
        tPK?: string;
    }
    interface ChangePinFromTerminalResult extends BOA.Types.Kernel.HSM.HSMResponseBase {
        newPVV?: string;
    }
    interface DecryptPinRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pAN?: string;
        pin?: string;
    }
    interface DecryptPinResult extends BOA.Types.Kernel.HSM.HSMResponseBase {
        clearPIN?: string;
        referenceNumber?: string;
    }
    interface EmbossMagneticCardRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pan?: string;
    }
    interface EmbossMagneticCardResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        cvv?: string;
        cvv2?: string;
        pin?: string;
        pvv?: string;
    }
    interface EncryptClearPinRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pAN?: string;
        pin?: string;
    }
    interface EncryptClearPinResult extends BOA.Types.Kernel.HSM.HSMResponseBase {
        pinULmk?: string;
    }
    interface EncryptDataBlockRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        clearData?: string;
        zEK?: string;
    }
    interface EncryptDataBlockResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        encryptedData?: string;
    }
    interface ExportDesKeyRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        eppPublicKey?: string;
        eppPublicKeyMac?: string;
        ktPrivateKey?: string;
        tMK?: string;
        tMKKCV?: string;
    }
    interface ExportDesKeyResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        encryptedKey?: string;
        encryptedKeyLenght?: number;
        signatureKey?: string;
        signatureLenght?: number;
    }
    interface GenerateCAVVRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cAVK?: string;
        expDate?: string;
        pAN?: string;
        serviceCode?: string;
    }
    interface GenerateCAVVResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        cAVV?: string;
    }
    interface GenerateCVKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
    }
    interface GenerateCVKResult extends BOA.Types.Kernel.HSM.HSMResponseBase {
        cVK?: string;
    }
    interface GenerateCVV2Request extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cVK?: string;
        expDate?: string;
        pAN?: string;
    }
    interface GenerateCVV2Result extends BOA.Types.Kernel.HSM.HSMResponseContract {
        cVV2?: string;
    }
    interface GenerateCVVRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cVK?: string;
        expDate?: string;
        pAN?: string;
        serviceCode?: string;
    }
    interface GenerateCVVResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        cVV?: string;
    }
    interface GenerateICVVforEmvRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cVK?: string;
        expDate?: string;
        pAN?: string;
    }
    interface GenerateICVVforEmvResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        iCVV?: string;
    }
    interface GenerateKeyPairRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        keyEncoding?: string;
        keyLength?: string;
        keyType?: string;
    }
    interface GenerateKeyPairResult extends BOA.Types.Kernel.HSM.HSMResponseBase {
        exponent?: string;
        exponentTag?: string;
        hashValue?: string;
        modulusPublicKey?: string;
        modulusTag?: string;
        privateKey?: string;
        privateKeyLength?: string;
        tag?: string;
    }
    interface GenerateMacOnPublicKeyRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        eppPublicKey?: string;
    }
    interface GenerateMacOnPublicKeyResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        mAC?: string;
        publicKey?: string;
    }
    interface GeneratePVKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
    }
    interface GeneratePVKResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        pVK?: string;
    }
    interface GeneratePVVRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pan?: string;
        pinLmk?: string;
        pvkIndx?: string;
        pvkPair?: string;
    }
    interface GeneratePVVResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        pVV?: string;
    }
    interface GenerateRandomPinRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pan?: string;
    }
    interface GenerateRandomPinResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        pin_Lmk?: string;
    }
    interface GenerateTMKKCVRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        tMK?: string;
    }
    interface GenerateTMKKCVResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        keyCheckValue?: string;
    }
    interface GenerateTMKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        keyScheme?: string;
        keyType?: string;
        mode?: string;
    }
    interface GenerateTMKResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        keyCheckValue?: string;
        keyULmk?: string;
    }
    interface GenerateTPKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        tMK?: string;
    }
    interface GenerateTPKResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        keyCheckValue?: string;
        keyULmk?: string;
        keyUTmk?: string;
    }
    interface GenerateZEKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        zMK?: string;
    }
    interface GenerateZEKResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        kCV?: string;
        storageZEK?: string;
        transportZEK?: string;
    }
    interface HSMCommand {
        commandCode?: string;
        messageHeader?: string;
    }
    interface HSMCommandResponse {
        errorCode?: string;
        messageHeader?: string;
        response?: string;
        responseCode?: string;
        responseData?: number[];
    }
    interface HSMErrorCodeUtility {
    }
    interface HSMRequestBase {
        businessKey?: number;
    }
    interface HSMResponseBase extends BOA.Common.Types.ResponseBase {
        errorCode?: string;
        messageHeader?: string;
        response?: string;
        responseCode?: string;
    }
    interface HSMResponseContract extends BOA.Common.Types.ResponseBase {
        errorCode?: string;
        messageHeader?: string;
        response?: string;
        responseCode?: string;
    }
    interface HSMTransportationContext {
        environment?: BOA.Common.Types.ApplicationEnvironment;
        iPAddress?: string;
        machineName?: string;
        proxyStartTime?: Date;
        token?: number;
        userName?: string;
    }
    interface HSMTransporter {
        communicationKey?: string;
        request?: BOA.Types.Kernel.HSM.HSMRequestBase;
        transportationContext?: BOA.Types.Kernel.HSM.HSMTransportationContext;
    }
    interface IAuthorizedRequest {
    }
    interface IHSMService {
    }
    interface ImportZpkUnderZmkRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        zmkULmk?: string;
        zpkUZmk?: string;
    }
    interface ImportZpkUnderZmkResult extends BOA.Types.Kernel.HSM.HSMResponseBase {
        zpkKcv?: string;
        zpkULmk?: string;
    }
    interface IServiceParameterProvider {
    }
    interface LoadFormattingDataToHsmRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
    }
    interface LoadFormattingDataToHsmResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
    interface PrintPinAndSolicitationDataRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        line00?: string;
        line01?: string;
        line02?: string;
        line03?: string;
        line04?: string;
        line05?: string;
        line06?: string;
        line07?: string;
        line08?: string;
        pan?: string;
        pinLmk?: string;
    }
    interface PrintPinAndSolicitationDataResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
    interface ServiceParameter {
        address?: string;
        isAuthorized?: boolean;
    }
    interface TranslatePINZPKToLMKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pAN?: string;
        pINBlock?: string;
        zPK?: string;
    }
    interface TranslatePINZPKToLMKResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        pIN?: string;
    }
    interface TranslateTPKToLMKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pAN?: string;
        pINBlock?: string;
        tPK?: string;
    }
    interface TranslateTPKToLMKResult extends BOA.Types.Kernel.HSM.HSMResponseBase {
        pIN?: string;
    }
    interface TranslateTPKToZPKRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pan?: string;
        pinBlock?: string;
        tPK?: string;
        zPK?: string;
    }
    interface TranslateTPKToZPKResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
        pIN?: string;
    }
    interface TypesUtils {
    }
    interface VerifyCAVVRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cAVK?: string;
        cAVV?: string;
        expDate?: string;
        pAN?: string;
        serviceCode?: string;
    }
    interface VerifyCAVVResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
    interface VerifyCVV2Request extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cVK?: string;
        cVV2?: string;
        expDate?: string;
        pAN?: string;
    }
    interface VerifyCVV2Result extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
    interface VerifyCVVRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cVK?: string;
        cVV?: string;
        expDate?: string;
        pAN?: string;
        serviceCode?: string;
    }
    interface VerifyCVVResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
    interface VerifyICVVforEmvRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        cVK?: string;
        expDate?: string;
        iCVV?: string;
        pAN?: string;
    }
    interface VerifyICVVforEmvResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
    interface VerifyInterchangePinRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pan?: string;
        pinBlock?: string;
        pinUnderLmk?: string;
        zPK?: string;
    }
    interface VerifyInterchangePinResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
    interface VerifyTerminalPinRequest extends BOA.Types.Kernel.HSM.HSMRequestBase {
        pan?: string;
        pinBlock?: string;
        pinUnderLmk?: string;
        tPK?: string;
    }
    interface VerifyTerminalPinResult extends BOA.Types.Kernel.HSM.HSMResponseContract {
    }
}
declare namespace BOA.Types.Kernel.IAR {
    export const enum IARQueryType {
        CardNo = 1,
        TCKN = 2
    }
    export const enum IARReportType {
        DateAndCardNumber = 1,
        DateAndCompany = 2,
        DateAndUser = 3
    }
    export const enum IARTransactionType {
        Withdrawal = 1,
        Deposit = 2
    }
    interface CardOwnerContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        cardNumber?: string;
        customerId?: number;
        goldAccounts?: BOA.Types.Kernel.Account.AccountComponentAccountsContract[];
        gSMNumber?: string;
        hasGoldAccount?: boolean;
        identityNumber?: string;
        isCustomer?: boolean;
        name?: string;
        surname?: string;
    }
    interface CustomerTransactionContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        cardNumber?: string;
        customerName?: string;
        customerSurname?: string;
        gsmNumber?: string;
        hostName?: string;
        id?: number;
        identityNumber?: string;
        systemDate?: Date;
        transactionId?: number;
        userName?: string;
    }
    interface IARAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountBranchId?: number;
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.IAR.TransactionContract;
        iARCardNumber?: string;
        iARTransactionId?: number;
        instanceId?: string;
    }
    interface IARCardContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        cardNumber?: string;
        gSMNumber?: string;
        identityNumber?: string;
        name?: string;
        surname?: string;
    }
    interface IARTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        cardNumber?: string;
        cashedGram?: number;
        commission?: number;
        company?: string;
        description?: string;
        hour?: string;
        id?: number;
        name?: string;
        paid?: number;
        productType?: string;
        purity?: string;
        rate?: number;
        surname?: string;
        tranDate?: Date;
        tranType1?: string;
        tranType2?: string;
        user?: string;
    }
    interface IARTransactionResultContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        cardNumber?: string;
        errorMessage?: string;
        id?: number;
        success?: boolean;
    }
    interface IARWebServiceInfoContract extends BOA.Common.Types.ContractBase {
        iARWebserviceEnter?: string;
        key?: string;
        password?: string;
        serviceURL?: string;
        userName?: string;
    }
    interface TransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        cardNumber?: string;
        channelId?: number;
        channelName?: string;
        description?: string;
        divitId?: any;
        hostName?: string;
        iARCardContract?: BOA.Types.Kernel.IAR.IARCardContract;
        iARTransactionId?: number;
        id?: number;
        resourceCode?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tranBranch?: string;
        tranBranchId?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withHoldingId?: number;
    }
}
declare namespace BOA.Types.Kernel.IHS {
    interface DIBSContract extends BOA.Types.Kernel.IHS.GeneralMessageContractBase {
        amount?: number;
        borrowLendRatio?: number;
        dIBSDescription?: string;
        dIBSOfferType?: string;
        dIBSOperationType?: string;
        dIBSType?: number;
        dIBSValueCode?: string;
        divisibilityIndicator?: string;
        info1?: string;
        info2?: string;
        info3?: string;
        info4?: string;
        info5?: string;
        info6?: string;
        relationalQueryToken?: string;
        transactionValueDate?: Date;
        transactionValueType?: string;
    }
    interface GeneralMessageContractBase extends BOA.Common.Types.ContractBase {
        description?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageRoute?: number;
        messageSendDate?: Date;
        priority?: number;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface OfferContract extends BOA.Types.Kernel.IHS.GeneralMessageContractBase {
        actualAmount?: number;
        auctionNumber?: string;
        auctionType?: string;
        interestSharePercentage?: number;
        offerAmount?: number;
        offerPrice?: number;
        offerType?: string;
        offerValueCode?: string;
    }
}
declare namespace BOA.Types.Kernel.ImportLC {
    interface ApproverUnitContract extends BOA.Common.Types.ContractBase {
        approve?: string;
        state?: number;
        stateCode?: string;
        stateName?: string;
        unitName?: string;
    }
    interface ImportLCInsuranceContract extends BOA.Common.Types.ContractBase {
        dainiMurtein?: string;
        exchangeId?: number;
        goods?: string;
        insuranceNo?: string;
        isDocument?: boolean;
        kTTaxNo?: string;
        loadingPlace?: string;
        unLoadingPlace?: string;
        vehicle?: string;
    }
    interface ImportLCManagementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        authorizedPersonId?: number;
        branchId?: number;
        branchName?: string;
        changeVersion?: number;
        channelId?: number;
        collateralType?: number;
        controlId?: number;
        correspondentReference?: string;
        customerAddress?: string;
        customerName?: string;
        divitId?: any;
        exchangeId?: number;
        fec?: number;
        fecDesc?: string;
        hostIp?: string;
        hostName?: string;
        incentiveId?: number;
        isActive?: number;
        isConfirmed?: number;
        isIncentive?: number;
        manualRiskAmount?: number;
        opmUser?: string;
        portfolioClass?: number;
        productContent?: number;
        productSubType?: string;
        productSubTypeDetail?: number;
        productType?: number;
        reference?: string;
        remainingRisk?: number;
        resourceCode?: string;
        systemDate?: Date;
        toleranceRate?: number;
        totalDocumentAmount?: number;
        totalRisk?: number;
        totalTransferAmount?: number;
        trasferList?: BOA.Types.Kernel.Exchange.DocumentTransferContract[];
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InsurancePolicyContract extends BOA.Common.Types.ContractBase {
        accrual?: string;
        addendumNo?: number;
        addendumReasonId?: string;
        agencyName?: string;
        area?: number;
        arrivalCountry?: string;
        assetProjectNumber?: string;
        block?: string;
        brandId?: number;
        buildingName?: string;
        buildingNo?: string;
        businessKey?: number;
        channelId?: number;
        chassisNo?: string;
        city?: string;
        commission?: number;
        creditAccountNumber?: number;
        creditLetterNo?: string;
        daskPolicyNumber?: number;
        departureCountry?: string;
        district?: string;
        estateUsageTypeId?: number;
        expertiseReportId?: number;
        flatNo?: string;
        goodsFEC?: number;
        goodsType?: string;
        goodsValue?: number;
        hostIP?: string;
        hostName?: string;
        instanceId?: number;
        insuranceAmount?: number;
        insuranceCompany?: string;
        insurancePolicyId?: number;
        insuranceReasonId?: number;
        insuranceSourceId?: number;
        insuredAccountNumber?: number;
        insuredName?: string;
        insuredPhoneNumber?: string;
        insuredTaxNumber?: string;
        loadingDate?: Date;
        lossPayeeBankId?: number;
        lossPayeeBranchId?: number;
        modelId?: number;
        modelYear?: number;
        motorNo?: string;
        neovaProductCode?: string;
        neovaSystemDate?: Date;
        oldSystemInsurancePolicyId?: number;
        parcel?: string;
        placeOfProcess?: number;
        plate?: string;
        plateNo?: string;
        policyBranchId?: number;
        policyEndDate?: Date;
        policyExplanation?: string;
        policyFEC?: number;
        policyFER?: number;
        policyHolderAccountNumber?: number;
        policyHolderName?: string;
        policyHolderPhoneNumber?: string;
        policyHolderTaxNumber?: string;
        policyIssuedDate?: Date;
        policyNo?: string;
        policyStartDate?: Date;
        policySysDate?: Date;
        premium?: number;
        prePolicyNumber?: number;
        productId?: string;
        proposalStatus?: number;
        renewalNumber?: number;
        resourceCode?: string;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        transportTypeId?: string;
        uavtNumber?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vehicleInsuranceAmount?: number;
        vehicleNo?: string;
        vehicleTypeId?: number;
        vehicleUsageTypeId?: number;
    }
}
declare namespace BOA.Types.Kernel.INC {
    interface IncidentContract extends BOA.Common.Types.ContractBase {
        assignedUserCode?: string;
        incidentId?: number;
        statusId?: string;
    }
    interface IncidentRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.INC.IncidentContract;
    }
}
declare namespace BOA.Types.Kernel.Inquiry {
    export const enum AddressType {
        Home = 0,
        Work = 1
    }
    export const enum BannedCheck {
        E = 0,
        H = 1
    }
    export const enum BlackListType {
        TaxDebtor = 1,
        SSKDebtor = 2,
        Bankrupt = 3,
        SuspensionBankrupt = 4,
        BiddingProhibited = 5,
        CheaterList = 6,
        MASAKList = 7,
        Other = 8,
        Requisition = 9,
        PrecautionaryMeasures = 10,
        EmergencyStateInvestigation = 11
    }
    export const enum CustomerType {
        Individual = 0,
        Corporate = 1
    }
    export const enum EntityType {
        G = 0,
        T = 1
    }
    export const enum IdentityType {
        VKN = 5,
        TCKN = 6
    }
    export const enum InquiryPurpose {
        ReportForCustomer = 1,
        CreditInquiry = 2
    }
    export const enum ProcessResult {
        SuccessfulRecordsFound = 0,
        SuccessfulRecordsNotFound = 1,
        InputControlError = 2,
        DatabaseError = 3,
        SystemErros = 4
    }
    export const enum RequestReason {
        ForCreditApplication = 1,
        ForFollowUp = 2
    }
    export const enum RMQueryFilter {
        ByTaxNumber = 0,
        ByCustomerNo = 1
    }
    interface BlackListCorporationContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankruptcyClaimedBy?: string;
        bankruptcyCourtInfo?: string;
        bidProhibitedDate?: Date;
        bidProhibitingAgency?: string;
        blackListCorporationID?: number;
        blackListName?: string;
        blackListTypeID?: number;
        businessKey?: number;
        city?: number;
        companyType?: number;
        companyTypeDescription?: string;
        county?: number;
        countySelectedParamCode?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        delayedBankruptcyClaimedBy?: string;
        delayedBankruptcyCourtInfo?: string;
        description?: string;
        firstAuthorizedPersonLastName?: string;
        firstAuthorizedPersonMidName?: string;
        firstAuthorizedPersonName?: string;
        hostName?: string;
        inquirySource?: number;
        inquirySourceDescription?: string;
        neighborhood?: string;
        phone?: string;
        secondAuthorizedPersonLastName?: string;
        secondAuthorizedPersonMidName?: string;
        secondAuthorizedPersonName?: string;
        sSKDebtAmount?: number;
        status?: boolean;
        taxNumber?: string;
        taxOffice?: string;
        taxOwedAmount?: number;
        title?: string;
        tradeRegisterNumber?: string;
        tradeRegisterOffice?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface BlackListFlatFileContract extends BOA.Common.Types.ContractBase {
        cityCode?: number;
        districtCode?: number;
        firmName?: string;
        month?: number;
        newspaperNumber?: number;
        newspaperPage?: number;
        referenceDetailID?: number;
        taxNumber?: string;
        tradeRegisterNumber?: string;
        typeCode?: number;
        year?: number;
    }
    interface BlackListFlatFileFooterContract extends BOA.Common.Types.ContractBase {
        description?: string;
    }
    interface BlackListIndividualContract extends BOA.Common.Types.ContractBase {
        address?: string;
        auctionProhibitedDate?: Date;
        auctionProhibitingAgency?: string;
        bankruptcyClaimedBy?: string;
        bankruptcyCourtInformation?: string;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        blackListPersonalID?: number;
        blackListTypeID?: number;
        city?: number;
        county?: number;
        countySelectedParamCode?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        delayedBankruptcyClaimedBy?: string;
        delayedBankruptcyCourtInformation?: string;
        description?: string;
        fathersName?: string;
        firstName?: string;
        identityNumber?: string;
        inquirySource?: number;
        jobTitle?: string;
        lastName?: string;
        mothersName?: string;
        neighborhood?: string;
        phone?: string;
        previousLastName?: string;
        sSKDebtAmount?: number;
        status?: boolean;
        taxOffice?: string;
        taxOwedAmount?: number;
        updateUserName?: string;
        userName?: string;
    }
    interface ChequeInquiryOpenContract {
        accountNumber?: number;
        identityNumber?: string;
        isOpenByChequeInquiryInformation?: boolean;
        personType?: number;
        queryEntity?: string;
        screenName?: string;
        taxNumber?: string;
    }
    interface CommonTypes {
    }
    interface CourtBannedBouncedCheckCorpContract extends BOA.Common.Types.ContractBase {
        bannedPeriodDay?: string;
        bannedPeriodMonth?: string;
        bannedPeriodYear?: string;
        courtAprovelDate?: string;
        courtBannedBouncedCheckCorpID?: number;
        courtDecisionDate?: string;
        courtName?: string;
        courtRecordDate?: string;
        courtRecordNumber?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        decisionNo?: string;
        eDD?: number;
        hostName?: string;
        personType?: string;
        status?: boolean;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
        type?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface CourtBannedBouncedCheckIndividualContract extends BOA.Common.Types.ContractBase {
        bannedPeriodDay?: string;
        bannedPeriodMonth?: string;
        bannedPeriodYear?: string;
        birthDate?: Date;
        birthPlaceText?: string;
        courtAprovalDate?: string;
        courtBannedBouncedCheckIndividualID?: number;
        courtDecisionDate?: string;
        courtName?: string;
        courtRecordDate?: string;
        courtRecordNumber?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        decisionNumber?: string;
        eDD?: number;
        fathersName?: string;
        firstName?: string;
        hostName?: string;
        identityNumber?: string;
        lastName?: string;
        mothersName?: string;
        personType?: string;
        status?: boolean;
        taxNumber?: string;
        type?: string;
        typeDescription?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditExternalInquiryOpenContract {
        accountNumber?: number;
    }
    interface CrossChequeInputContract extends BOA.Common.Types.ContractBase {
        drawerIdentityNumber?: string;
        drawerTaxNumber?: string;
        drawingInquiryEndDate?: Date;
        drawingInquiryStartDate?: Date;
        endorserIdentityNumber?: string;
        endorserTaxNumber?: string;
        memberEftCode?: string;
        systemDate?: Date;
        userRegistryCode?: string;
    }
    interface CrossChequeOutputContract extends BOA.Common.Types.ContractBase {
        chequeRelationsList?: BOA.Types.Kernel.Inquiry.CrossChequeRelationsContract[];
        hataKodu?: string;
        hataKoduAciklama?: string;
        islemSonucu?: string;
        islemSonucuAciklama?: string;
        referansNo?: string;
    }
    interface CrossChequeRelationsContract extends BOA.Common.Types.ContractBase {
        crossChequeInquiryId?: number;
        drawerIdentityNumber?: string;
        drawerTaxNumber?: string;
        endorserIdentityNumber?: string;
        endorserTaxNumber?: string;
        firstDrawingDate?: Date;
        hostname?: string;
        lastDrawingDate?: Date;
        paidAfterUnbouncedChequeAmount?: number;
        paidAfterUnbouncedChequeCount?: number;
        paidOnDemandChequeAmount?: number;
        paidOnDemandChequeCount?: number;
        postDatedChequeAmount?: number;
        postDatedChequeCount?: number;
        systemDate?: Date;
        totalChequeAmount?: number;
        totalChequeCount?: number;
        unbouncedChequeAmount?: number;
        unbouncedChequeCount?: number;
        username?: string;
    }
    interface CultureConstant {
    }
    interface DataInputOpenContract {
        accountNumber?: number;
    }
    interface DataLoadingDetailsContract extends BOA.Common.Types.ContractBase {
        blackListID?: number;
        blackListName?: string;
        businessKey?: number;
        dataLoadingDetailsID?: number;
        dateAdded?: Date;
        dateEnded?: Date;
        dateEndedEnd?: Date;
        dateEndedStart?: Date;
        dateStarted?: Date;
        dateUpdated?: Date;
        description?: string;
        errorMsg?: string;
        fileName?: string;
        fileSize?: string;
        hostName?: string;
        inquiryListType?: string;
        inquiryListTypeID?: number;
        isLoaded?: boolean;
        mainInquiryID?: number[];
        recordCount?: number;
        userLongName?: string;
        userName?: string;
    }
    interface EDistraintContract extends BOA.Common.Types.ContractBase {
        eDistraintId?: number;
        fathersName?: string;
        firstName?: string;
        hBNO?: string;
        hostName?: string;
        identificationNumber?: string;
        lastName?: string;
        officeTaxNumber?: string;
        oId?: string;
        requestDate?: Date;
        systemDate?: Date;
        taxOfficeCode?: string;
        title?: string;
        transactionDate?: Date;
        transactionStatus?: string;
        transactionType?: string;
        userName?: string;
        withholdingAmount?: number;
    }
    interface FinancialAllotmentInquiryContract extends BOA.Common.Types.ContractBase {
        addressCity?: string;
        buttonstatus?: number;
        customerId?: number;
        firstname?: string;
        identityNumber?: string;
        inquiryListType?: string;
        inquiryPersonRecordId?: number;
        inquiryPersonRecordList?: BOA.Types.Kernel.Inquiry.FinancialAllotmentInquiryContract[];
        inquiryTypeId?: number;
        lastname?: string;
        personType?: number;
        queryDate?: Date;
        taxNumber?: string;
        title?: string;
    }
    interface FinancialAllotmentSavedInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        financialAllotmentList?: BOA.Types.Kernel.Inquiry.FinancialAllotmentSavedInquiryContract[];
        hostName?: string;
        inquiryCustomerRelationId?: number;
        inquiryListTypeId?: number;
        inquiryListTypeName?: string;
        name?: string;
        personType?: number;
        relatedDataId?: number;
        surname?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateusername?: string;
        userName?: string;
    }
    interface FinancialOffenseContract extends BOA.Common.Types.ContractBase {
        address?: string;
        birthDate?: Date;
        city?: string;
        country?: string;
        customerNumber?: number;
        financialOffenseID?: number;
        fOffenseID?: number;
        identityNumber?: string;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
    }
    interface FindeksAuthorizedSignatoryContract extends BOA.Common.Types.ContractBase {
        eMail?: string;
        findeksAuthorizedSignatoryId?: number;
        findeksCorporateMembershipId?: number;
        nameSurname?: string;
        phoneNumber?: string;
        tCKN?: string;
    }
    interface FindeksCodeValueContract extends BOA.Common.Types.ContractBase {
        code?: string;
        value?: string;
    }
    interface FindeksConstants {
    }
    interface FindeksCorporateMembershipApplicationRequestContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        address?: string;
        addressCityCode?: string;
        addressCountyCode?: string;
        applicantCorporation?: string;
        applicantUser?: string;
        applicationDate?: string;
        branchId?: number;
        branchName?: string;
        channelInformation?: string;
        companyType?: string;
        establishmentYear?: string;
        findeksAuthorizedSignatoryContractList?: BOA.Types.Kernel.Inquiry.FindeksAuthorizedSignatoryContract[];
        findeksCorporationExecutiveContract?: BOA.Types.Kernel.Inquiry.FindeksCorporationExecutiveContract;
        findeksExceptionDefinitionContractList?: BOA.Types.Kernel.Inquiry.FindeksExceptionDefinitionContract[];
        isExternal?: number;
        phoneNumber?: string;
        sectorCode?: string;
        shortTitle?: string;
        status?: number;
        taxOfficeCityCode?: string;
        taxOfficeCode?: string;
        title?: string;
        totalEmployeeCode?: string;
        vkn?: string;
    }
    interface FindeksCorporateMembershipApplicationResponseContract extends BOA.Common.Types.ContractBase {
        applicationReferenceNumber?: string;
        corporateId?: number;
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        findeksMembershipDocumentContractList?: BOA.Types.Kernel.Inquiry.FindeksMembershipDocumentContract[];
        resultCode?: string;
    }
    interface FindeksCorporateMembershipApprovalRequestContract extends BOA.Common.Types.ContractBase {
        applicationReferenceNumber?: string;
        branchId?: number;
        branchName?: string;
        channelInformation?: string;
        corporationId?: string;
        smsTitle?: string;
        vkn?: string;
    }
    interface FindeksCorporateMembershipApprovalResponseContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        resultCode?: string;
    }
    interface FindeksCorporateMembershipControlResponseContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressCityCode?: string;
        addressCountyCode?: string;
        applicantCorporation?: string;
        applicantUser?: string;
        applicationDate?: string;
        applicationReferenceNumber?: string;
        companyType?: string;
        corporationId?: string;
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        establishmentYear?: string;
        findeksAuthorizedSignatoryContractList?: BOA.Types.Kernel.Inquiry.FindeksAuthorizedSignatoryContract[];
        findeksCorporationExecutiveContract?: BOA.Types.Kernel.Inquiry.FindeksCorporationExecutiveContract;
        findeksExceptionDefinitionContractList?: BOA.Types.Kernel.Inquiry.FindeksExceptionDefinitionContract[];
        phoneNumber?: string;
        resultCode?: string;
        sectorCode?: string;
        shortTitle?: string;
        taxOfficeCityCode?: string;
        taxOfficeCode?: string;
        title?: string;
        totalEmployeeCode?: string;
        vkn?: string;
    }
    interface FindeksCorporationExecutiveContract extends BOA.Common.Types.ContractBase {
        eMail?: string;
        findeksCorporateMembershipId?: number;
        findeksCorporationExecutiveId?: number;
        nameSurname?: string;
        phoneNumber?: string;
        tCKN?: string;
    }
    interface FindeksCountyRequestContract extends BOA.Common.Types.ContractBase {
        channelInformation?: string;
        cityCode?: string;
    }
    interface FindeksCountyResponseContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        findeksCodeValueContractList?: BOA.Types.Kernel.Inquiry.FindeksCodeValueContract[];
        resultCode?: string;
    }
    interface FindeksEnums {
    }
    interface FindeksExceptionDefinitionContract extends BOA.Common.Types.ContractBase {
        duration?: number;
        exceptionEndDate?: string;
        exceptionReportType?: string;
        exceptionReportTypeDescription?: string;
        exceptionStartDate?: string;
        findeksCorporateMembershipId?: number;
        findeksExceptionDefinitionId?: number;
        name?: string;
        personType?: string;
        taxNumber?: string;
    }
    interface FindeksGetDocumentRequestContract extends BOA.Common.Types.ContractBase {
        address?: string;
        channelInformation?: string;
        email?: string;
        personType?: number;
        phoneNumber?: string;
        taxNumber?: string;
        title?: string;
    }
    interface FindeksGetDocumentResponseContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        findeksMembershipDocumentContractList?: BOA.Types.Kernel.Inquiry.FindeksMembershipDocumentContract[];
        resultCode?: string;
    }
    interface FindeksIndividualMembershipApplicationRequestContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bankEFTCode?: string;
        branchId?: number;
        branchName?: string;
        channelInformation?: string;
        clientIP?: string;
        educationStatus?: number;
        eMail?: string;
        findeksIndividualMembershipId?: number;
        identityNumber?: string;
        mobilePhoneNumber?: string;
        occupationGroup?: number;
        userName?: string;
    }
    interface FindeksIndividualMembershipApplicationResponseContract extends BOA.Common.Types.ContractBase {
        corporateId?: string;
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        isMember?: boolean;
        membershipDate?: string;
        membershipId?: number;
        resultCode?: string;
    }
    interface FindeksMembershipControlRequestContract extends BOA.Common.Types.ContractBase {
        applicationReferenceNumber?: string;
        branchId?: number;
        branchName?: string;
        channelInformation?: string;
        personType?: number;
        taxNumber?: string;
    }
    interface FindeksMembershipControlResponseContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        isMember?: boolean;
        membershipDate?: string;
        membershipId?: number;
        resultCode?: string;
    }
    interface FindeksMembershipDocumentContract extends BOA.Common.Types.ContractBase {
        documentData?: number[];
        documentExtention?: string;
        documentId?: string;
        documentName?: string;
        findeksMembershipDocumentId?: number;
        instanceId?: string;
        taxNumber?: string;
    }
    interface FindeksSendDocumentRequestContract extends BOA.Common.Types.ContractBase {
        applicationReferenceNumber?: string;
        branchId?: number;
        branchName?: string;
        channelInformation?: string;
        corporationId?: number;
        findeksMembershipDocumentContractList?: BOA.Types.Kernel.Inquiry.FindeksMembershipDocumentContract[];
        vkn?: string;
    }
    interface FindeksSendDocumentResponseContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        findeksMembershipDocumentContractList?: BOA.Types.Kernel.Inquiry.FindeksMembershipDocumentContract[];
        resultCode?: string;
    }
    interface FindeksTaxOfficeRequestContract extends BOA.Common.Types.ContractBase {
        channelInformation?: string;
        cityCode?: string;
    }
    interface FindeksTaxOfficeResponseContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        findeksCodeValueContractList?: BOA.Types.Kernel.Inquiry.FindeksCodeValueContract[];
        resultCode?: string;
    }
    interface GIBInquiryInput {
        kimlikNo?: string;
        kimlikTipi?: string;
        kullaniciKodu?: string;
        uyeKod?: string;
    }
    interface IEnumerableExtensions {
    }
    interface InquiryConstant {
    }
    interface InquiryResponseConstant {
    }
    interface IntegratedInquiryOpenContract {
        accountNumber?: number;
    }
    interface KKBBouncedCheckCorpContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankName?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        commonAccountIndicator?: string;
        commonAccountIndicatorDescription?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        drawDate?: Date;
        foreignExchangeType?: string;
        foreignExchangeTypeDescription?: string;
        hostName?: string;
        kKBBouncedCheckCorpID?: number;
        payDate?: Date;
        personCode?: string;
        stateCode?: string;
        stateCodeDescription?: string;
        status?: boolean;
        submissionDate?: Date;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface KKBBouncedCheckIndividualContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankName?: string;
        birthCityCode?: number;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        commonAccountIndicator?: string;
        commonAccountIndicatorDescription?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        drawDate?: Date;
        fathersName?: string;
        firstName?: string;
        foreignExchangeType?: string;
        foreignExchangeTypeDescription?: string;
        hostName?: string;
        identityNumber?: string;
        kKBBouncedCheckIndividualID?: number;
        lastName?: string;
        mothersName?: string;
        payDate?: Date;
        personCode?: string;
        stateCode?: string;
        stateCodeDescription?: string;
        status?: boolean;
        submissionDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface KKBChequeInquiryConstant {
    }
    interface KKBChequeInquiryContract extends BOA.Common.Types.ContractBase {
        bannedCheck?: string;
        channelId?: number;
        errorCode?: string;
        errorMessage?: string;
        hostName?: string;
        identityNumber?: string;
        isOnline?: boolean;
        kKBOnlineBouncedChequeReportId?: number;
        lastName?: string;
        name?: string;
        pDFContent?: number[];
        personType?: string;
        queryPurpose?: string;
        systemDate?: Date;
        taxNumber?: string;
        title?: string;
        userName?: string;
    }
    interface KKBTradeRegistryConstant {
    }
    interface KKBTradeRegistryModel extends BOA.Common.Types.ContractBase {
        acquiredList?: BOA.Types.Kernel.Inquiry.TSGAcquiredContract[];
        administratorList?: BOA.Types.Kernel.Inquiry.TSGAdministratorContract[];
        assigneeList?: BOA.Types.Kernel.Inquiry.TSGAssigneeContract[];
        capitalContract?: BOA.Types.Kernel.Inquiry.TSGCapitalContract;
        corporatePartnerList?: BOA.Types.Kernel.Inquiry.TSGCorporatePartnerContract[];
        criticalInformationContract?: BOA.Types.Kernel.Inquiry.TSGCriticalInformationContract;
        formerShareHolderList?: BOA.Types.Kernel.Inquiry.TSGFormerShareHolderContract[];
        noticeDetailContract?: BOA.Types.Kernel.Inquiry.TSGNoticeDetailContract;
        registryContract?: BOA.Types.Kernel.Inquiry.TSGRegistryContract;
        shareHolderList?: BOA.Types.Kernel.Inquiry.TSGShareHolderContract[];
        titleContract?: BOA.Types.Kernel.Inquiry.TSGTitleContract;
    }
    interface KKBTSGProactiveFileContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressCity?: string;
        addressCityDesc?: string;
        addressCounty?: string;
        branchId?: number;
        branchName?: string;
        capitalAmount?: number;
        capitalInformation?: string;
        corporationRegistryCenter?: number;
        corporationRegistryCenterDesc?: string;
        corporationRegistryCity?: string;
        corporationRegistryCityId?: number;
        corporationRegistryDate?: Date;
        corporationRegistryDateFormat?: string;
        customerId?: number;
        customerName?: string;
        dataLoadingDetailsID?: number;
        eMail?: string;
        fecName?: string;
        gazetteDate?: Date;
        gazetteDateFormat?: string;
        gazetteNumber?: string;
        gazettePage?: string;
        hostName?: string;
        identityNumber?: string;
        identityType?: string;
        identityTypeDesc?: string;
        inquirySource?: string;
        kKBTSGProactiveFileId?: number;
        legalStructure?: number;
        legalStructureDesc?: string;
        mersisNumber?: string;
        noticeNumber?: number;
        region?: string;
        registrySubjectList?: BOA.Types.Kernel.Inquiry.TSGRegistrySubjectContract[];
        registrySubjects?: string;
        segment?: string;
        systemDate?: Date;
        taxOffice?: string;
        taxOfficeCity?: string;
        title?: string;
        tradeRegisterNumber?: string;
        tranDate?: Date;
        userName?: string;
        zipCode?: string;
    }
    interface KTBouncedChecksContract extends BOA.Common.Types.ContractBase {
        branchCode?: string;
        checkBouncedNotice?: string;
        checkReportDate?: Date;
        checkReportState?: string;
        checkSheetNumber?: number;
        customerNumber?: number;
        kTBouncedChecksID?: number;
        processingDate?: Date;
        suffixNumber?: number;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
    }
    interface KTProtestedBillsContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchCode?: string;
        compensationDate?: Date;
        customerNumber?: number;
        firstDebtorName?: string;
        foreignExchangeAmount?: number;
        foreignExchangeCode?: string;
        kTProtestedBillsID?: number;
        maturityDate?: Date;
        suffixNumber?: string;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
    }
    interface LevyRecordsContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        city?: number;
        cityName?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        fecName?: string;
        fileNumber?: string;
        foreignExchangeCode?: number;
        identityNumber?: string;
        levyDate?: Date;
        levyOffice?: string;
        levyRecordID?: number;
        payee?: string;
        status?: boolean;
        taxNumber?: string;
        titleDebtor?: string;
        tradeRegisterNumber?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface MainInqueryListContract extends BOA.Common.Types.ContractBase {
        birthCounty?: string;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        birthYear?: number;
        blackListType?: string;
        blackListTypeID?: number;
        businessKey?: number;
        customerNumber?: number;
        dataLoadingDetailsID?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        entityID?: number;
        fathersName?: string;
        firstName?: string;
        fullName?: string;
        hostName?: string;
        identityNumber?: string;
        inquiryListType?: string;
        inquiryListTypeID?: number;
        lastName?: string;
        mainInqueryListID?: number;
        mainInquiryIdentitySourceId?: number;
        matchStatus?: number;
        mothersName?: string;
        referenceDetailID?: number;
        requestReason?: string;
        selectedCustomerInfo?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        status?: number;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface MainInquiryContract extends BOA.Common.Types.ContractBase {
        blackCorpBankruptcyList?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract[];
        blackCorpBidList?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract[];
        blackCorpDelayedBankruptcyList?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract[];
        blackCorpGeneralList?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract[];
        blackCorporationList?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract[];
        blackCorpSSKList?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract[];
        blackCorpTaxList?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract[];
        blackIndAuctionList?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract[];
        blackIndBankruptcyList?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract[];
        blackIndDelayedBankruptcyList?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract[];
        blackIndGeneralList?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract[];
        blackIndividualList?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract[];
        blackIndSSKList?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract[];
        blackIndTaxList?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract[];
        blackListCorporationContrct?: BOA.Types.Kernel.Inquiry.BlackListCorporationContract;
        blackListIndividualContrct?: BOA.Types.Kernel.Inquiry.BlackListIndividualContract;
        courtBannedBouncedCheckCorpContrct?: BOA.Types.Kernel.Inquiry.CourtBannedBouncedCheckCorpContract;
        courtBannedBouncedCheckIndividualContrct?: BOA.Types.Kernel.Inquiry.CourtBannedBouncedCheckIndividualContract;
        courtBannedCheckCorpContrct?: BOA.Types.Kernel.Inquiry.CourtBannedBouncedCheckCorpContract;
        courtBannedCheckCorpList?: BOA.Types.Kernel.Inquiry.CourtBannedBouncedCheckCorpContract[];
        courtBannedCheckIndividualContrct?: BOA.Types.Kernel.Inquiry.CourtBannedBouncedCheckIndividualContract;
        courtBannedCheckIndividualList?: BOA.Types.Kernel.Inquiry.CourtBannedBouncedCheckIndividualContract[];
        eDistraintList?: BOA.Types.Kernel.Inquiry.EDistraintContract[];
        financialOffenseContrct?: BOA.Types.Kernel.Inquiry.FinancialOffenseContract;
        inquiryListTypeId?: number[];
        kKBBouncedCheckCorpContrct?: BOA.Types.Kernel.Inquiry.KKBBouncedCheckCorpContract;
        kKBBouncedCheckCorpList?: BOA.Types.Kernel.Inquiry.KKBBouncedCheckCorpContract[];
        kKBBouncedCheckIndividualContrct?: BOA.Types.Kernel.Inquiry.KKBBouncedCheckIndividualContract;
        kKBBouncedCheckIndividualList?: BOA.Types.Kernel.Inquiry.KKBBouncedCheckIndividualContract[];
        kKBTSGProactiveFileContrct?: BOA.Types.Kernel.Inquiry.KKBTSGProactiveFileContract;
        kKBTSGProactiveFileList?: BOA.Types.Kernel.Inquiry.KKBTSGProactiveFileContract[];
        kTBouncedChecksContrct?: BOA.Types.Kernel.Inquiry.KTBouncedChecksContract;
        kTProtestedBillsContrct?: BOA.Types.Kernel.Inquiry.KTProtestedBillsContract;
        levyRecordsContrct?: BOA.Types.Kernel.Inquiry.LevyRecordsContract;
        levyRecordsList?: BOA.Types.Kernel.Inquiry.LevyRecordsContract[];
        mainInqueryListContrct?: BOA.Types.Kernel.Inquiry.MainInqueryListContract;
        marketInquiryContrct?: BOA.Types.Kernel.Inquiry.MarketInquiryContract;
        nonPerformingLoansContrct?: BOA.Types.Kernel.Inquiry.NonPerformingLoansContract;
        nonPerformingLoansList?: BOA.Types.Kernel.Inquiry.NonPerformingLoansContract[];
        officialCorrespondenceList?: BOA.Types.Kernel.Inquiry.OfficialCorrespondenceContract[];
        otherBankInqueryContrct?: BOA.Types.Kernel.Inquiry.OtherBankInqueryContract;
        otherBankLoanList?: BOA.Types.Kernel.Inquiry.OtherBankLoanStateContract[];
        otherBankLoanStateContrct?: BOA.Types.Kernel.Inquiry.OtherBankLoanStateContract;
        otherBankLoanStateToDeleteList?: BOA.Types.Kernel.Inquiry.OtherBankLoanStateContract[];
        provisionalInjunctionChequeCorpContrct?: BOA.Types.Kernel.Inquiry.ProvisionalInjunctionChequeCorpContract;
        provisionalInjunctionChequeCorpList?: BOA.Types.Kernel.Inquiry.ProvisionalInjunctionChequeCorpContract[];
        provisionalInjunctionChequeIndividualContrct?: BOA.Types.Kernel.Inquiry.ProvisionalInjunctionChequeIndividualContract;
        provisionalInjunctionChequeIndividualList?: BOA.Types.Kernel.Inquiry.ProvisionalInjunctionChequeIndividualContract[];
        riskCenterQuery?: BOA.Types.Kernel.Inquiry.RiskCenterQueryContract;
        tCMBBouncedCheckCorpContrct?: BOA.Types.Kernel.Inquiry.TCMBBouncedCheckCorpContract;
        tCMBBouncedCheckCorpList?: BOA.Types.Kernel.Inquiry.TCMBBouncedCheckCorpContract[];
        tCMBBouncedCheckIndividualContrct?: BOA.Types.Kernel.Inquiry.TCMBBouncedCheckIndividualContract;
        tCMBBouncedCheckIndividualList?: BOA.Types.Kernel.Inquiry.TCMBBouncedCheckIndividualContract[];
        tCMBProtestedBillsContrct?: BOA.Types.Kernel.Inquiry.TCMBProtestedBillsContract;
        tCMBProtestedBillsList?: BOA.Types.Kernel.Inquiry.TCMBProtestedBillsContract[];
        tradeEDistraintContract?: BOA.Types.Kernel.Inquiry.EDistraintContract;
        tradeOfficialCorrespondenceContract?: BOA.Types.Kernel.Inquiry.OfficialCorrespondenceContract;
        tradeRegistryGazetteContrct?: BOA.Types.Kernel.Inquiry.TradeRegistryGazetteContract;
        tradeRegistryGazetteList?: BOA.Types.Kernel.Inquiry.TradeRegistryGazetteContract[];
        uYAPCourtBannedCheckContrct?: BOA.Types.Kernel.Inquiry.UYAPCourtBannedBouncedCheckContract;
        uYAPCourtBannedCheckList?: BOA.Types.Kernel.Inquiry.UYAPCourtBannedBouncedCheckContract[];
        uYAPCourtDesicionsContrct?: BOA.Types.Kernel.Inquiry.UYAPCourtDesicionsContract;
        uYAPCourtDesicionsList?: BOA.Types.Kernel.Inquiry.UYAPCourtDesicionsContract[];
    }
    interface MarketInquiryContract extends BOA.Common.Types.ContractBase {
        companyName?: string;
        contactPerson?: string;
        contactTitle?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        description?: string;
        hostName?: string;
        identityNumber?: string;
        inquiryDate?: Date;
        marketInquiryID?: number;
        phone?: string;
        status?: boolean;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface NonPerformingLoansContract extends BOA.Common.Types.ContractBase {
        bankCode?: string;
        birthCity?: string;
        birthCounty?: number;
        birthCountySelectedParamCode?: string;
        birthDate?: Date;
        birthPlaceText?: string;
        branchCityCode?: number;
        branchCountyCode?: number;
        branchCountyOrder?: number;
        countySelectedParamCode?: string;
        creditCardNumber?: number;
        customerNumber?: number;
        dateAdded?: Date;
        fathersName?: string;
        firstName?: string;
        hostName?: string;
        identityCardOrderNumber?: number;
        identityCardSerialNumber?: string;
        identityNumber?: string;
        identityType?: string;
        lastName?: string;
        loanCollectedMonth?: number;
        loanCollectedYear?: number;
        loanTrackedMonth?: number;
        loanTrackedYear?: number;
        loanUtilizationCityCode?: number;
        mothersMaidenName?: string;
        nonPerformingLoansID?: number;
        noticeType?: string;
        orderNumber?: number;
        taxNumber?: string;
        userName?: string;
    }
    interface OfficialCorrespondenceContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        branchName?: string;
        cityName?: string;
        commercialName?: string;
        corporationType?: string;
        correspondenceDetailId?: number;
        correspondenceId?: number;
        countyName?: string;
        customerId?: number;
        customerName?: string;
        dateOfNotification?: Date;
        debtAmount?: number;
        fathersName?: string;
        hostName?: string;
        lastResponseDate?: Date;
        officialCorrespondenceId?: number;
        researchPeopleId?: number;
        researchType?: string;
        systemDate?: Date;
        taxIdentificationNumber?: string;
        transactionDate?: Date;
        userName?: string;
        writingDate?: Date;
    }
    interface OtherBankInqueryContract extends BOA.Common.Types.ContractBase {
        bankName?: string;
        bankNameForIntegratedInquiry?: string;
        cashLimit?: number;
        cashRisk?: number;
        cumulativeCash?: number;
        cumulativeDeposit?: number;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        foreignExchangeCode?: string;
        foreignExchangeCodeForIntegratedInquiry?: string;
        groupLimit?: number;
        groupRisk?: number;
        guaranteeDetail?: string;
        identityNumber?: string;
        inqueryDate?: Date;
        nonCashLimit?: number;
        nonCashRisk?: number;
        otherBankInqueryId?: number;
        referenceLimit?: number;
        status?: boolean;
        taxNumber?: string;
        title?: string;
        totalLimit?: number;
        tradeRegisterNumber?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface OtherBankLoanStateContract extends BOA.Common.Types.ContractBase {
        agencyCount?: number;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        endLoanTerm?: number;
        endLoanYear?: number;
        financingIssueCode?: string;
        groupID?: number;
        identityNumber?: string;
        interestAccrual?: number;
        interestRediscount?: number;
        isCreditRiskLimitReceivedData?: boolean;
        limit?: number;
        loanBankName?: string;
        loanPeriod?: number;
        loanTerm?: number;
        loanYear?: number;
        longTermRisk?: number;
        memberCode?: string;
        memberType?: string;
        midTermRisk?: number;
        otherBankLoanStateID?: number;
        riskCenterId?: number;
        riskCode?: string;
        riskCodeDetail?: string;
        shortTermRisk?: number;
        startLoanTerm?: number;
        startLoanYear?: number;
        taxNumber?: string;
        title?: string;
        totalRisk?: number;
        tradeRegisterNumber?: string;
    }
    interface ProvisionalInjunctionChequeCorpContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankCode?: string;
        bankName?: string;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        drawDate?: Date;
        jointAccount?: string;
        paymentType?: string;
        personCode?: string;
        provisionalInjunctionChequeCorporationId?: number;
        stateCode?: string;
        stateCodeDescription?: string;
        submissionDate?: Date;
        taxNumber?: string;
        title?: string;
    }
    interface ProvisionalInjunctionChequeIndividualContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankCode?: string;
        bankName?: string;
        birthCityCode?: number;
        birthDate?: Date;
        birthPlace?: string;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        drawDate?: Date;
        fatherName?: string;
        firstName?: string;
        identityNumber?: string;
        jointAccount?: string;
        lastName?: string;
        motherName?: string;
        paymentType?: string;
        personCode?: string;
        provisionalInjunctionChequeIndividualId?: number;
        stateCode?: string;
        stateCodeDescription?: string;
        submissionDate?: Date;
        taxNumber?: string;
    }
    interface RiskCenterHistoryContract extends BOA.Common.Types.ContractBase {
        firstFundUtilizationTerm?: string;
        hostName?: string;
        inSeriesTermCountOnNonPerformingLoans?: number;
        lastYearAverageCreditLimitAmount?: string;
        lastYearAverageCreditRiskAmount?: string;
        nonPerformingLoansFirstRiskCodeTerm?: string;
        nonPerformingLoansLastRiskCodeTerm?: string;
        riskCenterHistoryId?: number;
        riskCenterId?: number;
        systemDate?: Date;
        theHeighestNonPerformingLoansAmount?: number;
        theHeighestNonPerformingLoansTerm?: string;
        userName?: string;
    }
    interface RiskCenterListOpenContract {
        accountNumber?: number;
    }
    interface RiskCenterQueryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        errorCode?: string;
        hostName?: string;
        identityOrTaxNumber?: string;
        isAddedGeneralLimitInfo?: boolean;
        isIntegratedOrCreditExternalInquiry?: boolean;
        isOnline?: boolean;
        isSelectForIntegration?: boolean;
        otherBankLoanStateContract?: BOA.Types.Kernel.Inquiry.OtherBankLoanStateContract;
        personIdentityNumber?: string;
        personLastName?: string;
        personName?: string;
        personSecondName?: string;
        personType?: string;
        queryDate?: Date;
        requestReason?: string;
        requestTime?: Date;
        requestWorkGroupId?: number;
        result?: string;
        riskCenterCollectiveQueryId?: number;
        riskCenterDetail?: BOA.Types.Kernel.Inquiry.OtherBankLoanStateContract[];
        riskCenterDetailInfo?: BOA.Types.Kernel.Inquiry.OtherBankLoanStateContract[];
        riskCenterHistory?: BOA.Types.Kernel.Inquiry.RiskCenterHistoryContract;
        riskCenterId?: number;
        riskCenterSummary?: BOA.Types.Kernel.Inquiry.RiskCenterSummaryContract[];
        status?: boolean;
        systemDate?: Date;
        taxNumber?: string;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RiskCenterSummaryContract extends BOA.Common.Types.ContractBase {
        creditGroupCode?: string;
        creditGroupDescription?: string;
        hostName?: string;
        interestAccrual?: number;
        interestRediscount?: number;
        longTermRisk?: number;
        midTermRisk?: number;
        riskCenterId?: number;
        riskCenterSummaryId?: number;
        shortTermRisk?: number;
        systemDate?: Date;
        term?: string;
        totalLimit?: number;
        totalProfit?: number;
        totalRisk?: number;
        userName?: string;
        year?: string;
    }
    interface RiskConstant {
    }
    interface RMLoanOpenContract {
        accountNumber?: number;
        identityOrTaxNumber?: string;
        personType?: string;
        queryFilter?: BOA.Types.Kernel.Inquiry.RMQueryFilter;
        requestReason?: string;
    }
    interface ServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        errorCode?: string;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        outgoingServiceCallId?: number;
        requestDate?: Date;
        requestXML?: string;
        responseDate?: Date;
        responseXML?: string;
        systemDate?: Date;
        taxNumber?: string;
        userName?: string;
    }
    interface TaxPayerAddressContract extends BOA.Common.Types.ContractBase {
        addressType?: number;
        cityCode?: string;
        cityName?: string;
        countyCode?: string;
        countyName?: string;
        district?: string;
        innerDoorNumber?: string;
        outerDoorNumber?: string;
        street?: string;
        systemDate?: Date;
        taxPayerId?: number;
        town?: string;
        uAVTNumber?: string;
        village?: string;
    }
    interface TaxPayerBusinessActivityContract extends BOA.Common.Types.ContractBase {
        activityCode?: string;
        activityDescription?: string;
        taxPayerId?: number;
    }
    interface TaxPayerInquiryConstant {
    }
    interface TaxPayerInquiryContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        identityNumber?: string;
        identityType?: string;
        memberEftCode?: string;
        resourceCode?: string;
        taxPayerId?: number;
        timeout?: number;
        url?: string;
        userRegistryCode?: string;
    }
    interface TaxPayerInquiryContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        identityNumber?: string;
        identityType?: string;
        memberEftCode?: string;
        resourceCode?: string;
        taxPayerId?: number;
        timeout?: number;
        url?: string;
        userRegistryCode?: string;
    }
    interface TaxPayerOutputContract extends BOA.Common.Types.ContractBase {
        birthCityCode?: string;
        birthCityName?: string;
        birthCountyCode?: string;
        birthCountyName?: string;
        birthDate?: Date;
        companyType?: string;
        companyTypeDescription?: string;
        errorCode?: string;
        errorCodeDescription?: string;
        establishmentCityCode?: string;
        establishmentCityName?: string;
        establishmentCountyCode?: string;
        establishmentCountyName?: string;
        establishmentDate?: Date;
        fathersName?: string;
        firmStatus?: string;
        firmStatusDescription?: string;
        identityNumber?: string;
        isPotential?: string;
        name?: string;
        occupationListInfoContract?: BOA.Types.Kernel.Inquiry.TaxPayerBusinessActivityContract[];
        queryResult?: string;
        requestDate?: Date;
        requestXML?: string;
        responseDate?: Date;
        responseXML?: string;
        surname?: string;
        taxLiabilityBeginDate?: Date;
        taxLiabilityEndDate?: Date;
        taxNumber?: string;
        taxOfficeCode?: string;
        taxOfficeName?: string;
        taxPayerHomeAddressContract?: BOA.Types.Kernel.Inquiry.TaxPayerAddressContract[];
        taxPayerId?: number;
        taxPayerWorkAddressContract?: BOA.Types.Kernel.Inquiry.TaxPayerAddressContract[];
        title?: string;
    }
    interface TaxPayerServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorMessage?: string;
        identityNumber?: string;
        inContract?: BOA.Types.Kernel.Inquiry.TaxPayerInquiryContract;
        outContract?: BOA.Types.Kernel.Inquiry.TaxPayerOutputContract;
        requestDate?: Date;
        requestXML?: string;
        resourceCode?: string;
        responseDate?: Date;
        responseXML?: string;
        systemDate?: Date;
        taxNumber?: string;
        taxPayerServiceCallId?: number;
        userName?: string;
    }
    interface TCMBBouncedCheckCorpContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankCode?: string;
        bankName?: string;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        commonAccountIndicator?: string;
        customerNumber?: number;
        dateAdded?: Date;
        drawDate?: Date;
        foreignExchangeType?: string;
        foreignExchangeTypeDescription?: string;
        hostName?: string;
        originalChequeAmount?: string;
        payDate?: Date;
        personCode?: string;
        stateCode?: string;
        stateCodeDescription?: string;
        submissionDate?: Date;
        taxNumber?: string;
        tCMBBouncedCheckCorpID?: number;
        title?: string;
        tradeRegisterNumber?: string;
        userName?: string;
    }
    interface TCMBBouncedCheckIndividualContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankCode?: string;
        bankName?: string;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        birthYear?: number;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        commonAccountIndicator?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        drawDate?: Date;
        fathersName?: string;
        firstName?: string;
        foreignExchangeType?: string;
        foreignExchangeTypeDescription?: string;
        hostName?: string;
        identityNumber?: string;
        lastName?: string;
        mothersName?: string;
        originalChequeAmount?: string;
        payDate?: Date;
        personCode?: string;
        stateCode?: string;
        stateCodeDescription?: string;
        status?: boolean;
        submissionDate?: Date;
        taxNumber?: string;
        tCMBBouncedCheckIndividualID?: number;
        updateUserName?: string;
        userName?: string;
    }
    interface TCMBProtestedBillsContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankBranchCityCode?: number;
        bankBranchCountyCode?: number;
        bankBranchOrderNumber?: number;
        bankCode?: number;
        billAmount?: number;
        branchName?: string;
        city?: number;
        companyCode?: string;
        countySelectedParamCode?: string;
        customerNumber?: number;
        dateAdded?: Date;
        hostName?: string;
        identityNumber?: string;
        noticePeriod?: number;
        noticeYear?: number;
        orderNumber?: number;
        personCode?: string;
        recordType?: string;
        revokedPeriod?: number;
        revokedReason?: string;
        revokedReasonDescription?: string;
        revokedYear?: number;
        scanCode?: string;
        scanningTitle?: string;
        taxNumber?: string;
        tCMBrotestedBillsID?: number;
        title?: string;
        tradeRegisterNumber?: string;
        userName?: string;
    }
    interface TradeRegistryGazetteContract extends BOA.Common.Types.ContractBase {
        countyName?: string;
        customerId?: number;
        customerName?: string;
        district?: number;
        hostName?: string;
        id?: number;
        mailChecked?: boolean;
        noticeType?: number;
        noticeTypeName?: string;
        number?: number;
        pageNumber?: number;
        province?: number;
        provinceName?: string;
        record?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        state?: number;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TSGAcquiredContract extends BOA.Common.Types.ContractBase {
        legalStructure?: number;
        legalStructureDesc?: string;
        noticeId?: number;
        registryCenter?: number;
        registryCenterDesc?: string;
        registryCity?: string;
        registryCityId?: number;
        registryNumber?: string;
        taxNumber?: string;
        taxOffice?: string;
        taxOfficeCity?: string;
        title?: string;
        transferDate?: Date;
    }
    interface TSGAdministratorContract extends BOA.Common.Types.ContractBase {
        identityNumber?: string;
        name?: string;
        noticeId?: number;
        otherTitle?: string;
        signAuthority?: number;
        signAuthorityDesc?: string;
        surname?: string;
        title?: number;
        titleDesc?: string;
    }
    interface TSGAssigneeContract extends BOA.Common.Types.ContractBase {
        noticeId?: number;
        registryCenter?: number;
        registryCenterDesc?: string;
        registryCity?: string;
        registryCityId?: number;
        registryNumber?: string;
        taxNumber?: string;
        taxOffice?: string;
        taxOfficeCity?: string;
        title?: string;
    }
    interface TSGCapitalContract extends BOA.Common.Types.ContractBase {
        capitalAmount?: number;
        capitalIncreaseDate?: Date;
        fec?: number;
        fecName?: string;
        lastMeetingDate?: Date;
        noticeId?: number;
        oldCapitalAmount?: number;
    }
    interface TSGCorporatePartnerContract extends BOA.Common.Types.ContractBase {
        companyType?: string;
        noticeId?: number;
        oldSharePercentage?: number;
        sharePercentage?: number;
        taxNumber?: string;
        title?: string;
    }
    interface TSGCriticalInformationContract extends BOA.Common.Types.ContractBase {
        divisionInformation?: string;
        executionBankruptcyOffice?: string;
        fileIssueDocketNumber?: string;
        hasBankruptCertificate?: string;
        hasBankruptCertificateDesc?: string;
        hasExecutionBankruptcy?: string;
        hasExecutionBankruptcyDesc?: string;
        isLiquidated?: string;
        isLiquidatedDesc?: string;
        noticeId?: number;
        returnFromLiquidation?: string;
        returnFromLiquidationDesc?: string;
        returnToBusinessDate?: Date;
    }
    interface TSGFormerShareHolderContract extends BOA.Common.Types.ContractBase {
        dateOfSeparation?: Date;
        deathState?: string;
        deathStateType?: boolean;
        identityNumber?: string;
        noticeId?: number;
        taxNumber?: string;
        title?: string;
    }
    interface TSGNoticeContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        hostName?: string;
        isOnline?: boolean;
        noticeDetailContract?: BOA.Types.Kernel.Inquiry.TSGNoticeDetailContract;
        noticeId?: number;
        noticeNumber?: number;
        referenceNumber?: number;
        systemDate?: Date;
        tSGNoticeQueryId?: number;
        userName?: string;
    }
    interface TSGNoticeDetailContract extends BOA.Common.Types.ContractBase {
        acquiredList?: BOA.Types.Kernel.Inquiry.TSGAcquiredContract[];
        administratorList?: BOA.Types.Kernel.Inquiry.TSGAdministratorContract[];
        assigneeList?: BOA.Types.Kernel.Inquiry.TSGAssigneeContract[];
        branchIndicator?: string;
        branchIndicatorDesc?: string;
        capitalContract?: BOA.Types.Kernel.Inquiry.TSGCapitalContract;
        corporatePartnerList?: BOA.Types.Kernel.Inquiry.TSGCorporatePartnerContract[];
        criticalInformationContract?: BOA.Types.Kernel.Inquiry.TSGCriticalInformationContract;
        formerShareHolderList?: BOA.Types.Kernel.Inquiry.TSGFormerShareHolderContract[];
        gazetteDate?: Date;
        gazetteNumber?: string;
        gazettePage?: string;
        noticeId?: number;
        noticeNumber?: number;
        registryAddress?: string;
        registryCity?: string;
        registryCityId?: number;
        registryContract?: BOA.Types.Kernel.Inquiry.TSGRegistryContract;
        registryCounty?: string;
        registryDate?: Date;
        registrySubjectList?: BOA.Types.Kernel.Inquiry.TSGRegistrySubjectContract[];
        registryZipCode?: string;
        shareHolderList?: BOA.Types.Kernel.Inquiry.TSGShareHolderContract[];
        title?: string;
        titleContract?: BOA.Types.Kernel.Inquiry.TSGTitleContract;
        webAddress?: string;
    }
    interface TSGNoticeQueryContract extends BOA.Common.Types.ContractBase {
        customerNumber?: number;
        errorCode?: string;
        errorMessage?: string;
        gazetteEndDate?: Date;
        gazetteStartDate?: Date;
        hostName?: string;
        identityNumber?: string;
        identityOrTaxNumber?: string;
        isIdentityOrTax?: boolean;
        isOnline?: boolean;
        isOpenByList?: boolean;
        isPartnerIdentity?: boolean;
        isTradeRegisterNo?: boolean;
        noticeSummaryList?: BOA.Types.Kernel.Inquiry.TSGNoticeSummaryContract[];
        partnerIdentityNumber?: string;
        queryDateBegin?: Date;
        queryDateEnd?: Date;
        queryId?: number;
        queryScreen?: string;
        referenceNumber?: number;
        registryCenter?: number;
        registryCityId?: number;
        systemDate?: Date;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
        tSGNoticeQueryId?: number;
        user?: string;
        userName?: string;
        workgroupId?: number;
        workgroupName?: string;
    }
    interface TSGNoticeSummaryContract extends BOA.Common.Types.ContractBase {
        corporationRegistryCenter?: number;
        corporationRegistryCenterDesc?: string;
        corporationRegistryCity?: string;
        corporationRegistryCityId?: number;
        corporationRegistryDate?: Date;
        customerNumber?: number;
        gazetteDate?: Date;
        gazetteNumber?: string;
        gazettePage?: string;
        identityNumber?: string;
        isExistsDetail?: boolean;
        legalStructure?: number;
        legalStructureDesc?: string;
        noticeNumber?: number;
        referenceNumber?: number;
        registrySubjectList?: BOA.Types.Kernel.Inquiry.TSGRegistrySubjectContract[];
        registrySubjects?: string;
        taxNumber?: string;
        taxOffice?: string;
        taxOfficeCity?: string;
        title?: string;
        tSGNoticeQueryId?: number;
    }
    interface TSGRegistryContract extends BOA.Common.Types.ContractBase {
        fullMersisNumber?: string;
        fullRegistryNumber?: string;
        identityNumber?: string;
        identityType?: string;
        identityTypeDesc?: string;
        legalStructure?: number;
        legalStructureDesc?: string;
        mersisNumber?: string;
        noticeId?: number;
        registryCenter?: number;
        registryCenterDesc?: string;
        registryCity?: string;
        registryCityId?: number;
        registryDetail?: string;
        registryNumber?: number;
        taxOffice?: string;
        taxOfficeCity?: string;
    }
    interface TSGRegistrySubjectContract extends BOA.Common.Types.ContractBase {
        noticeNumber?: number;
        registrySubject?: number;
        registrySubjectDesc?: string;
        tSGNoticeQueryId?: number;
        tSGProactiveFileId?: number;
    }
    interface TSGShareHolderContract extends BOA.Common.Types.ContractBase {
        identityNumber?: string;
        noticeId?: number;
        oldSharePercentage?: number;
        sharePercentage?: number;
        taxNumber?: string;
        title?: string;
    }
    interface TSGTitleContract extends BOA.Common.Types.ContractBase {
        legalStructureChangeDate?: Date;
        newLegalStructure?: number;
        newLegalStructureDesc?: string;
        noticeId?: number;
        oldRegistryCenter?: number;
        oldRegistryCityId?: number;
        oldRegistryNumber?: string;
        oldTitle?: string;
        registryChangeDate?: Date;
        titleChangeDate?: Date;
    }
    interface UYAPCourtBannedBouncedCheckContract extends BOA.Common.Types.ContractBase {
        announcementDate?: string;
        birthCityCode?: string;
        birthDate?: Date;
        courtDecisionDate?: string;
        courtEffectiveDate?: string;
        courtID?: string;
        courtName?: string;
        customerNumber?: number;
        dateAdded?: Date;
        dateUpdated?: Date;
        decisionNumberOrder?: string;
        decisionNumberYear?: string;
        fathersName?: string;
        fileDate?: string;
        fileNumber?: string;
        fileType?: string;
        firstName?: string;
        hostName?: string;
        identityNumber?: string;
        lastName?: string;
        mothersName?: string;
        mTKNumber?: string;
        notificationDate?: string;
        personType?: string;
        registeredCity?: number;
        registeredCounty?: number;
        registeredCountyDescription?: string;
        registeredNeighborhood?: string;
        status?: boolean;
        statusCode?: string;
        statusCodeDescription?: string;
        suppressionCourtName?: string;
        supressionCourtID?: string;
        taxNumber?: string;
        title?: string;
        updateUserName?: string;
        userName?: string;
        uYAPCourtBannedBouncedCheckID?: number;
        uyapID?: string;
    }
    interface UYAPCourtDesicionsContract extends BOA.Common.Types.ContractBase {
        blackListName?: string;
        blackListTypeID?: number;
        businessKey?: number;
        courtName?: string;
        dateAdded?: Date;
        dateUpdated?: Date;
        decisionNumber?: string;
        description?: string;
        hostName?: string;
        status?: boolean;
        title?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
        uYAPCourtDesicionsID?: number;
    }
    interface WebServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        clientId?: string;
        clientSecret?: string;
        grantType?: string;
        password?: string;
        scope?: string;
        state?: string;
        timeout?: number;
        url?: string;
        username?: string;
    }
}
declare namespace BOA.Types.Kernel.Inquiry.CommonTypes {
    export const enum InquiryDataMap {
        TCMBProtestedBillsEnum = 3,
        NonPerformingLoansEnum = 4,
        LevyRecordsEnum = 5,
        UYAPCourtBannedCheckEnum = 15,
        KKBBouncedCheckIndividualEnum = 16,
        CourtBannedCheckCorpEnum = 17,
        UYAPCourtDesicionsEnum = 20
    }
}
declare namespace BOA.Types.Kernel.Inquiry.FindeksEnums {
    export const enum PersonType {
        Individual = 0,
        Corporate = 1
    }
    export const enum WebServiceType {
        Membership = 1,
        Document = 2,
        General = 3
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB {
    export const enum AccountHolderTypes {
        MainApplicant = 1,
        Joint = 2,
        Surety = 3,
        CollateralProvider = 4,
        AdditionalHolder = 5,
        Other = 8,
        Unknown = 9
    }
    export const enum AccountSpecialStatus {
        WriteOff = 1,
        Deceased = 2,
        GoneAway = 3,
        Dispute = 4,
        Arrangement = 5,
        Query = 6
    }
    export const enum AccountStatus {
        OpenActive = 0,
        ClosedRegularly = 21,
        ClosedForUsageRisk = 32,
        ClosedStillRecovering = 81,
        ClosedRecovered = 82,
        ClosedWrittenOff = 83,
        ClosedUnknown = 89,
        Unknown = 99
    }
    export const enum AddressIndicator {
        Current = 0,
        Previous = 1,
        LinkedAddress = 2,
        Other = 8,
        Unknown = 9
    }
    export const enum AddressType {
        Residential = 1,
        Postal = 2,
        POBox = 3,
        Business = 4,
        Other = 8,
        Unknown = 9
    }
    export const enum CollectionType {
        Default = 0,
        Litigation = 1,
        DefaultAndLitigation = 2,
        CouldNotFind = 3
    }
    export const enum CorporateQueryFilterType {
        ByKKBId = 0,
        ByQueryFilter = 1
    }
    export const enum CorporateQueryPurpose {
        CreditRequestEvaluation = 1,
        RiskMonitoring = 2
    }
    export const enum CorporateReportType {
        MonitoringReport = 1,
        IntelligenceReport = 2
    }
    export const enum CurrencyCode {
        TL = 949,
        USD = 840,
        EURO = 280
    }
    export const enum EmployerIndicator {
        Current = 0,
        Previous = 1,
        Other = 8,
        Unknown = 9
    }
    export const enum FinanceType {
        Unknown = 0,
        RetailLoan = 1,
        PersonalLoan = 2,
        Mortgage = 3,
        AutoCredit = 5,
        CreditCard = 23,
        Overdraft = 26,
        ExistingRetailCustomer = 50,
        ExistingCommercialCustomer = 60,
        CommercialCreditApplication = 61,
        SearchAgainForAnExistingApplication = 90
    }
    export const enum FrequencyOfPaymentsFlag {
        Weekly = 0,
        Monthly = 1,
        TwoMonthly = 2,
        ThreeMontly = 3,
        FourMontly = 4,
        SixMontly = 6,
        Annually = 12,
        Variable = 98,
        Unknown = 99
    }
    export const enum GenderType {
        Male = 1,
        Female = 2,
        Reserved = 3,
        Unknown = 9
    }
    export const enum HasNonPerformingLoan {
        Yes = 0,
        No = 1
    }
    export const enum IdentityType {
        Passport = 1,
        DrivingLicence = 2,
        NationalIdentityCard = 3,
        PersonalTaxNumber = 5,
        NationalCitizenshipNumber = 6,
        Other = 8,
        Unknown = 9
    }
    export const enum IncomePeriod {
        Annual = 0,
        Monthly = 1,
        Weekly = 2,
        Casual = 3,
        Other = 8,
        Unknown = 9
    }
    export const enum InterestRateFlag {
        FixedRate = 1,
        VariableRate = 2,
        Other = 8,
        Unknown = 9
    }
    export const enum IsKKBQueried {
        UnQueried = 0,
        Queried = 1,
        InvalidIdentityNo = 2
    }
    export const enum MaritalStatus {
        Single = 1,
        Married = 2,
        Separated = 6,
        Divorced = 7,
        Widowed = 8,
        Other = 98,
        Unknown = 99
    }
    export const enum MethodOfPayment {
        GiroPaymentBook = 1,
        DirectDebit = 2,
        PrenotifiedDirectDebit = 3,
        BillOfExchange = 4,
        StandingOrder = 5,
        Cash = 6,
        BankCheque = 7,
        CreditCard = 8,
        Other = 98,
        Unknown = 99
    }
    export const enum PaymentPerformanceFlag {
        Bad = 0,
        Indeterminate = 1,
        Good = 2
    }
    export const enum PersonTypeEnumForKKB {
        Firm = 10,
        Person = 20
    }
    export const enum PurposeOfFinance {
        NewCar = 1,
        UsedCar = 2,
        Truck = 3,
        Motorbike = 4,
        OtherRecReationalVehicle = 5,
        Furniture = 6,
        Hifi = 7,
        HouseHoldAppiances = 8,
        Clothes = 9,
        Travel = 10,
        Boat = 11,
        House = 12,
        SettleDebts = 13,
        Wedding = 14,
        Education = 15,
        PersonalComputers = 16,
        Decoration = 17,
        Deposit = 18,
        Investment = 19,
        Health = 20,
        Hobby = 21,
        Commercial = 22,
        Other = 98,
        Unknown = 99
    }
    export const enum QueryFilter {
        ByKKBId = 0,
        ByTaxNumber = 1,
        ByCustomerNo = 2
    }
    export const enum QuerySubType {
        CreditCardApplication = 51,
        IndividualCreditApplication = 52,
        CompanyPartnerQuery = 54,
        CheckBookApplication = 55,
        WithCustomerRequest = 56
    }
    export const enum QueryType {
        Information = 999,
        CreditCardApplication = 51,
        IndividualCreditApplication = 52
    }
    export const enum QuestionType {
        Combo = 0,
        Input = 1
    }
    export const enum ResidentialStatus {
        Owner = 1,
        BuyingWithBond = 2,
        Rented = 3,
        LivingWithParents = 4,
        LivingWithOthers = 5,
        HousingProvidedByTheEmployer = 6,
        Other = 8,
        Unknown = 9
    }
    export const enum RiskReportAssetType {
        Individual = 0,
        Corporate = 1
    }
    export const enum RiskReportOperationResult {
        OperationSucceedDataExists = 0,
        OperationSucceedDataNotExist = 1,
        WebServiceDataControlError = 2,
        DatabaseError = 3,
        SystemError = 4,
        WebUIError = 5
    }
    export const enum RiskReportQueryPurpose {
        Customer = 0,
        Enquiry = 1
    }
    export const enum RiskReportReportType {
        Detail = 0,
        Summary = 1
    }
    interface ApplicantToPersonContract extends BOA.Common.Types.ContractBase {
        creditApplicant?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditApplicantContract;
        personInfo?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonInfoContract;
    }
    interface CollectionContract extends BOA.Common.Types.ContractBase {
        accountHolderTypeDescription?: string;
        collectionBalance?: number;
        collectionTypeDescription?: string;
        creditKey?: any;
        date?: Date;
        financeTypeDescription?: string;
        outstandingDebt?: number;
        personUniqueKey?: any;
    }
    interface CommonQueryContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        id?: number;
        name?: string;
        tardesQueryId?: number;
    }
    interface CommonResultContract extends BOA.Common.Types.ContractBase {
        expense?: string;
        hostName?: string;
        income?: string;
        netIncome?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface CorporateConstants {
    }
    interface CorporateCreditCounts {
        assuranceCount?: number;
        creditCount?: number;
        otherInfo?: string;
        source?: string;
    }
    interface CorporateCreditDetail {
        delayedAmount?: number;
        delayedCount?: number;
        finalDate?: Date;
        lastMonthActuallyCashedOverdueInterest?: number;
        lastMonthDueAmount?: number;
        lastMonthTotalPaidAmount?: number;
        lastMonthTotalPaidFinancingCost?: number;
        overdueInterest?: number;
        riskGroupCode?: number;
        riskGroupCodeDescription?: string;
        riskGroupCodeName?: string;
        source?: string;
        totalPaidAmount?: number;
        totalProfitlessRisk?: number;
        totalRisk?: number;
        unpaidFinancingCost?: number;
    }
    interface CorporateCreditPayment extends BOA.Common.Types.ContractBase {
        currencyCode?: string;
        ledgerAccountNumber?: string;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentStatus?: string;
        paymentType?: number;
        paymentTypeName?: string;
        source?: string;
        totalDelayedDays?: number;
    }
    interface CorporateOnlineLogContract {
        address?: string;
        error?: any;
        hasError?: boolean;
        logID?: number;
        middeName?: string;
        name?: string;
        personType?: number;
        purpose?: number;
        relation?: number;
        reportType?: number;
        result?: string;
        surname?: string;
        taxNumber?: string;
        title?: string;
        tranDate?: Date;
    }
    interface CorporateQueryContract extends BOA.Common.Types.ContractBase {
        creditApplicationDate?: Date;
        creditInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateQueryCreditContract[];
        customerId?: number;
        firmInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateQueryFirmContract;
        forceOnline?: boolean;
        isCredit?: boolean;
        kKBOnlineLodId?: number;
        personInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateQueryPersonContract;
        personType?: BOA.Types.Kernel.Inquiry.KKB.PersonTypeEnumForKKB;
        queryFilterType?: BOA.Types.Kernel.Inquiry.KKB.CorporateQueryFilterType;
        queryPurpose?: number;
        reportType?: number;
        resourceCode?: string;
    }
    interface CorporateQueryCreditContract extends BOA.Common.Types.ContractBase {
        creditCcy?: string;
        creditType?: string;
        creditValor?: string;
    }
    interface CorporateQueryFirmContract extends BOA.Common.Types.ContractBase {
        creditRelationType?: number;
        foundationDate?: Date;
        identityCardType?: number;
        identityNumber?: string;
        phoneNumber?: string;
        taxDepartment?: string;
        title?: string;
    }
    interface CorporateQueryOpenContract extends BOA.Common.Types.ContractBase {
        kKBId?: number;
        query?: BOA.Types.Kernel.Inquiry.KKB.CorporateQueryContract;
        queryFilter?: BOA.Types.Kernel.Inquiry.KKB.CorporateQueryFilterType;
        reportLogResult?: BOA.Types.Kernel.Inquiry.KKB.CorporateQueryReportContract;
    }
    interface CorporateQueryPersonContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        creditRelationType?: number;
        fatherName?: string;
        gender?: string;
        identityCardType?: number;
        identityNumber?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        phoneNumber?: string;
        surname?: string;
    }
    interface CorporateQueryReportContract extends BOA.Common.Types.ContractBase {
        address?: string;
        birthDate?: Date;
        customerNo?: number;
        dataType?: number;
        departmentName?: string;
        foundationDate?: Date;
        fullName?: string;
        homeAddress?: string;
        isOnline?: boolean;
        middleName?: string;
        name?: string;
        queryDate?: Date;
        queryId?: number;
        queryPersonType?: number;
        queryPersonTypeDesc?: string;
        queryPurpose?: number;
        queryPurposeDesc?: string;
        relation?: number;
        reportType?: number;
        reportTypeDesc?: string;
        roleName?: string;
        surname?: string;
        taxNumber?: string;
        taxOffice?: string;
        tranDate?: Date;
        userFullName?: string;
        userName?: string;
    }
    interface CorporateRedemptionPlanFrozenCreditDetail {
        description?: string;
        fifthGroup?: string;
        fourthGroup?: string;
        thirdGroup?: string;
    }
    interface CorporateResponseApplicantContract extends BOA.Common.Types.ContractBase {
        applicant?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBECA;
        corporation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCorporationInfo[];
        person?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonInfo[];
    }
    interface CorporateResponseAssuranceGroupInfo extends BOA.Common.Types.ContractBase {
        assuranceCount?: number;
        groupCode?: number;
        sourceCount?: number;
        totalAmount?: number;
    }
    interface CorporateResponseAssuranceInfo extends BOA.Common.Types.ContractBase {
        assurance?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEGR;
        assuranceRealty?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEGM[];
        guarantor?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseRelationInfo[];
    }
    interface CorporateResponseAssuranceSummary {
        assuranceAmount?: number;
        assuranceGroup?: number;
        assuranceGroupDescription?: string;
        assuranceTypeCode?: number;
        assuranceTypeDescription?: string;
        toolTip?: string;
    }
    interface CorporateResponseAssuranceTableInfo {
        assuranceSourceCount?: number;
        assuranceTableSource?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseAssuranceTableSourceInfo[];
        assuranceType?: number;
        assuranceTypeDescription?: string;
        totalAmount?: number;
    }
    interface CorporateResponseAssuranceTableSourceInfo {
        sourceAlias?: string;
        sourceCode?: number;
        totalAmount?: number;
    }
    interface CorporateResponseAssuranceView extends BOA.Common.Types.ContractBase {
        assuranceInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEGR[];
        assuranceSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseAssuranceSummary[];
        guarantyDetailCorporation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseViewCorporation[];
        guarantyDetailPerson?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseViewPerson[];
        voucheeDetailCorporationList?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseViewCorporation[];
        voucheeDetailPersonList?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseViewPerson[];
    }
    interface CorporateResponseAssuranceViewAssuranceInfo {
        assuranceAmount?: number;
        assuranceDate?: Date;
        assuranceGroup?: number;
        assuranceGroupDescription?: string;
        assuranceTypeCode?: number;
        assuranceTypeDescription?: string;
        currencyCode?: number;
        currencySymbol?: string;
        marketPrice?: number;
        mIDESNumber?: string;
        source?: string;
    }
    interface CorporateResponseAssuranceViewGuarantySummary {
        guarantyCount?: number;
        guarantyName?: string;
    }
    interface CorporateResponseBouncedChequeInfo extends BOA.Common.Types.ContractBase {
        bouncedCheque?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBECK;
        corporation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBETC;
        person?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEGC;
    }
    interface CorporateResponseBouncedChequeYearGroupInfo extends BOA.Common.Types.ContractBase {
        bouncedChequeAmount?: number;
        bouncedChequeCount?: number;
        totalBouncedChequeAmount?: number;
        totalBouncedChequeCount?: number;
        year?: number;
    }
    interface CorporateResponseCcyInfo {
        ccyCode?: number;
        computedRate?: number;
        rate?: number;
        rateDate?: Date;
        ratePower?: number;
    }
    interface CorporateResponseContract extends BOA.Common.Types.ContractBase {
        currencyInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCurrencyContract;
        entityList?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseEntity[];
        resultInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseResultInfo;
    }
    interface CorporateResponseCorporationInfo extends BOA.Common.Types.ContractBase {
        corporationMutableInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEFV;
        corporationPermanentInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEFC;
    }
    interface CorporateResponseCorporationRelationInfo extends BOA.Common.Types.ContractBase {
        identityNumber?: string;
        identityType?: number;
        identityTypeDesc?: string;
        relationType?: number;
        relationTypeDesc?: string;
        title?: string;
    }
    interface CorporateResponseCreditInfo extends BOA.Common.Types.ContractBase {
        creditAccountInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEAC;
        creditAssuranceInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseAssuranceInfo[];
        creditPaymentInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEAP[];
        creditPaymentPlanInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEIP[];
    }
    interface CorporateResponseCreditPackageInfo extends BOA.Common.Types.ContractBase {
        creditCcy?: string;
        creditType?: string;
        creditValor?: string;
    }
    interface CorporateResponseCurrencyContract extends BOA.Common.Types.ContractBase {
        ccyInfoList?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCcyInfo[];
        fCcyCount?: number;
        lCcyCode?: number;
    }
    interface CorporateResponseCustomerFirmInfo {
        address?: string;
        customerId?: number;
        customerName?: string;
        foundationDate?: Date;
        identityType?: number;
        personId?: number;
        taxNumber?: string;
        taxOffice?: string;
        title?: string;
    }
    interface CorporateResponseCustomerPersonInfo {
        birthDate?: Date;
        birthPlace?: string;
        customerId?: number;
        fatherName?: string;
        homeAddress?: string;
        homeZipCode?: string;
        identityNumber1?: string;
        identityType1?: number;
        middleName?: string;
        motherName?: string;
        name?: string;
        surname?: string;
        workAddress?: string;
        workZipCode?: string;
    }
    interface CorporateResponseEntity extends BOA.Common.Types.ContractBase {
        applicant?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseApplicantContract[];
        bouncedCheque?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseBouncedChequeInfo[];
        scoreDataInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBESR[];
        shareHolderRelation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEHI[];
        sourceData?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseSourceDataContract[];
        summary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseSummaryContract;
        title?: string;
    }
    interface CorporateResponseLimitRiskDelayInfo {
        cashLimit?: number;
        cashLimitToolTip?: string;
        cashRisk?: number;
        cashRiskToolTip?: string;
        delayedAccountCount?: number;
        groupLimit?: number;
        groupRisk?: number;
        nonCashLimit?: number;
        nonCashLimitToolTip?: string;
        nonCashRisk?: number;
        nonCashRiskToolTip?: string;
        otherRisk?: number;
        reviseTerm?: string;
        reviseTermDate?: Date;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        totalDelayedAmount?: number;
        totalLimit?: number;
        totalLimitToolTip?: string;
        totalRisk?: number;
        totalRiskToolTip?: string;
    }
    interface CorporateResponsePartnershipInfo extends BOA.Common.Types.ContractBase {
        dataType?: number;
        identityNumber?: string;
        identityType?: number;
    }
    interface CorporateResponsePersonInfo extends BOA.Common.Types.ContractBase {
        personMutableInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEIV;
        personPermanentInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEIC;
    }
    interface CorporateResponsePersonReference extends BOA.Common.Types.ContractBase {
        dataType?: number;
        referenceNumber?: string;
        referenceType?: number;
        sourceCode?: number;
    }
    interface CorporateResponsePersonRelationInfo extends BOA.Common.Types.ContractBase {
        middleName?: string;
        name?: string;
        relationType?: number;
        relationTypeDesc?: string;
        surname?: string;
        taxNumber?: string;
        tCIdentityNumber?: string;
    }
    interface CorporateResponsePhone extends BOA.Common.Types.ContractBase {
        countryCode?: string;
        phoneNumber?: string;
        regionCode?: string;
    }
    interface CorporateResponseProhibitoryFulcrumAndScopeInfo extends BOA.Common.Types.ContractBase {
        is_2886_DIK?: boolean;
        is_2886_DIK_BI?: boolean;
        is_2886_DIK_KI?: boolean;
        is_2886_DIK_TI?: boolean;
        is_4734_KIK?: boolean;
        is_4735_KISK?: boolean;
        is_Other?: boolean;
        is_Other_BI?: boolean;
        is_Other_KI?: boolean;
        is_Other_TI?: boolean;
    }
    interface CorporateResponseRedemptionPlanView {
        creditDetail?: BOA.Types.Kernel.Inquiry.KKB.CorporateCreditDetail[];
        frozenCreditDetail?: BOA.Types.Kernel.Inquiry.KKB.CorporateRedemptionPlanFrozenCreditDetail[];
        paymentList?: BOA.Types.Kernel.Inquiry.KKB.CorporateCreditPayment[];
        paymentPlanList?: BOA.Types.Kernel.Inquiry.KKB.CorporateCreditPayment[];
    }
    interface CorporateResponseReferenceNumber extends BOA.Common.Types.ContractBase {
        dataType?: number;
        reference?: string;
        sourceCode?: number;
    }
    interface CorporateResponseRelationInfo extends BOA.Common.Types.ContractBase {
        corporation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCorporationInfo;
        person?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonInfo;
    }
    interface CorporateResponseResultInfo extends BOA.Common.Types.ContractBase {
        address?: string;
        customerTitle?: string;
        error?: string;
        hasError?: boolean;
        isOnlineResult?: boolean;
        kKBReferenceNumber?: string;
        kTCustomerId?: number;
        kTGroupId?: number;
        kTGroupName?: string;
        lastQueryDate?: Date;
        middleName?: string;
        name?: string;
        onlineLogId?: number;
        purpose?: number;
        queryUserName?: string;
        referenceNumber?: string;
        relation?: number;
        reportType?: number;
        resultString?: string;
        surname?: string;
        taxNumber?: string;
        transactionResult?: string;
        warningMessages?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseWarningMessageInfo[];
    }
    interface CorporateResponseShareholderInfo extends BOA.Common.Types.ContractBase {
        dataType?: number;
        identityNumber?: string;
        identityType?: number;
    }
    interface CorporateResponseSourceDataContract extends BOA.Common.Types.ContractBase {
        assurance?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseAssuranceInfo[];
        auctionBan?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEIY[];
        corporation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCorporationInfo;
        creditAccountInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCreditInfo[];
        importExport?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEIT[];
        memzuc?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBERH[];
        person?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonInfo;
        relation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseRelationInfo[];
        source?: string;
    }
    interface CorporateResponseSourceDataTypeInfo extends BOA.Common.Types.ContractBase {
        dataTypes?: string;
        sourceCode?: number;
    }
    interface CorporateResponseSummaryContract extends BOA.Common.Types.ContractBase {
        assuranceSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOT;
        assuranceSummaryNew?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEON;
        bouncedChequeSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOC;
        corporateRelationSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOF;
        creditSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOB;
        guarantorCreditSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOK;
        limitRiskSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOL;
        limitRiskSummaryNew?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOM;
        personRelationSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOI;
        responseSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOH;
        warningSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOU;
    }
    interface CorporateResponseTRBEAC extends BOA.Common.Types.ContractBase {
        accountClosingDate?: Date;
        accountPrivateStatusCode?: number;
        actualLimitAmount?: number;
        actualLimitDate?: Date;
        amount1?: number;
        amount10?: number;
        amount11?: number;
        amount12?: number;
        amount13?: number;
        amount14?: number;
        amount15?: number;
        amount16?: number;
        amount17?: number;
        amount18?: number;
        amount19?: number;
        amount2?: number;
        amount20?: number;
        amount21?: number;
        amount3?: number;
        amount4?: number;
        amount5?: number;
        amount6?: number;
        amount7?: number;
        amount8?: number;
        amount9?: number;
        branchCityCode?: string;
        branchCode?: string;
        commissionPaymentCode?: number;
        commissionRate?: number;
        creditAccountReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseReferenceNumber;
        creditRelationCode?: number;
        creditUsageIntention?: string;
        creditUsageIntentionCode?: number;
        currencyCode?: number;
        date1?: Date;
        date2?: Date;
        date3?: Date;
        date4?: Date;
        date5?: Date;
        decree?: boolean;
        departmentCode?: string;
        draweeCountryCode?: number;
        draweeIdentityNumber?: string;
        draweeName?: string;
        draweeTaxNumber?: string;
        firstUsageDate?: Date;
        formerAccountNumber?: string;
        getGroup?: number;
        groupAmount2?: number;
        groupAmount3?: number;
        groupAmount4?: number;
        groupAmount5?: number;
        groupDate2?: Date;
        groupDate3?: Date;
        groupDate4?: Date;
        groupDate5?: Date;
        initialLimitAmount?: number;
        initialLimitDate?: Date;
        interestPaymentCode?: number;
        interestRate?: number;
        lastUpdateDate?: Date;
        lastUsageDate?: Date;
        ledgerAccountNumber?: string;
        mIDESNumber?: string;
        principalPaymentCode?: number;
        productReferenceNumber?: string;
        queryKBBReferenceNumber?: string;
        querySourceReferenceNumber?: string;
        reservedArea1?: number;
        reservedArea4?: string;
        riskGroupCode?: number;
        riskGroupCodeDescription?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        term?: number;
        termCode?: string;
        totalDelayCount?: number;
    }
    interface CorporateResponseTRBEAP extends BOA.Common.Types.ContractBase {
        creditAccountReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseReferenceNumber;
        identityNumber?: string;
        identityType?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        paymentAmount?: number;
        paymentCurrencyCode?: number;
        paymentDate?: Date;
        paymentOrderNo?: string;
        paymentType?: number;
        paymentTypeName?: string;
        reservedArea1?: string;
        sourceCode?: number;
        sourceDataType?: number;
        totalDelayedDays?: number;
    }
    interface CorporateResponseTRBECA extends BOA.Common.Types.ContractBase {
        branchCode?: string;
        creditApplicationDate?: Date;
        creditApplicationRejectReason?: number;
        creditApplicationResult?: number;
        creditPackagesInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCreditPackageInfo[];
        creditProductCount?: number;
        departmentCode?: string;
        kKBReferenceNumber?: string;
        kTReferenceNumber?: string;
        lastTaxAmount?: number;
        lastTaxYear?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        onlineTransactionSource?: number;
        queryDateTime?: Date;
        queryPurpose?: number;
        relationCount?: number;
        sourceAlias?: string;
        sourceCode?: number;
        sourceType?: number;
        userID?: string;
    }
    interface CorporateResponseTRBECK extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        appropriateDate?: Date;
        bankName?: string;
        branchName?: string;
        branchNo?: number;
        chequeAmount?: number;
        isUnMatchReferenceNumber?: boolean;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        orderDate?: Date;
        orderNo?: string;
        partnerAccountIdentifier?: string;
        paymentCurrencyCode?: number;
        paymentCurrencyDesc?: string;
        paymentDate?: Date;
        personType?: string;
        personTypeCode?: string;
        previousStatusCode?: string;
        previousStatusDate?: Date;
        previousStatusDesc?: string;
        reservedArea1?: string;
        serialNo?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        statusCode?: string;
        statusDesc?: string;
    }
    interface CorporateResponseTRBEFC extends BOA.Common.Types.ContractBase {
        address?: string;
        addressZipCode?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        chainOfCommerce?: string;
        commerceRegistryNumber?: number;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        corporationType?: number;
        corporationTypeName?: string;
        country?: string;
        countryCode?: number;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        customerTypeDescription?: string;
        departmentCode?: string;
        foundationDate?: Date;
        guarantorAmount?: number;
        identityNumber?: string;
        identityType?: number;
        identityTypeDesc?: string;
        isMatch?: boolean;
        lastUpdateDate?: Date;
        matchReason?: string;
        mIDESNumber?: string;
        partnershipRate?: number;
        personReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonReference;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        reservedArea1?: string;
        reservedArea2?: string;
        reservedArea3?: number;
        reservedArea4?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        taxDepartment?: string;
        title?: string;
    }
    interface CorporateResponseTRBEFV extends BOA.Common.Types.ContractBase {
        activitySubject?: string;
        activityTypeCode?: string;
        capacityUsagePercent?: number;
        capacityUsageRatePeriod?: number;
        chamberOfArtisan?: string;
        corporateForeignCurrencyCreditLimit?: number;
        corporateLocalCurrencyCreditLimit?: number;
        corporationTotalLimit?: number;
        faxNumber1?: string;
        faxNumber2?: string;
        faxNumber3?: string;
        formattedFaxNumber1?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedFaxNumber2?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedFaxNumber3?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedPhoneNumber1?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedPhoneNumber2?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedPhoneNumber3?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedPhoneNumber4?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedPhoneNumber5?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        groupCode?: string;
        groupLimit?: number;
        groupName?: string;
        groupRisk?: number;
        imkbRate?: number;
        limitCurrencyCode?: number;
        mbSectorCode?: string;
        mbSectorDescription?: string;
        paidCapitalAmount?: number;
        paidCapitalYear?: number;
        phoneNumber1?: string;
        phoneNumber2?: string;
        phoneNumber3?: string;
        phoneNumber4?: string;
        phoneNumber5?: string;
        registeredCapitalAmount?: number;
        registeredCapitalYear?: number;
        reservedArea?: string;
        revenueAmount?: number;
        revenueCurrencyCode?: number;
        revenueCurrencyDescription?: string;
        revenueYear?: number;
        reviseTermDate?: Date;
        sectorCode?: string;
        sectorDescription?: string;
        sourceWorkBeginDate?: Date;
        totalCustomerNumber?: number;
        totalEmployeeNumber?: number;
        website?: string;
    }
    interface CorporateResponseTRBEGC extends BOA.Common.Types.ContractBase {
        address?: string;
        addressCityCode?: number;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceCityCode?: number;
        fatherName?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        reservedArea1?: string;
        surName?: string;
        taxIDNumber?: string;
        tCIDNumber?: string;
    }
    interface CorporateResponseTRBEGM extends BOA.Common.Types.ContractBase {
        address?: string;
        assuranceReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseReferenceNumber;
        blockNumber?: string;
        branchCityCode?: string;
        branchCode?: string;
        cityCode?: number;
        cityName?: string;
        departmentCode?: string;
        expertiseAmount?: number;
        expertiseCode?: number;
        expertiseDate?: Date;
        expertiserCode?: number;
        expertiserName?: string;
        floor?: number;
        landRate?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        pageNumber?: string;
        parcel?: string;
        plot?: string;
        realtyAmount?: number;
        realtyType?: number;
        reservedArea1?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        townCode?: number;
        townName?: string;
    }
    interface CorporateResponseTRBEGR extends BOA.Common.Types.ContractBase {
        assuranceAmount?: number;
        assuranceDate?: Date;
        assuranceGroup?: number;
        assuranceGroupDescription?: string;
        assuranceReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseReferenceNumber;
        assuranceTLAmount?: number;
        assuranceTypeCode?: number;
        assuranceTypeDescription?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        currencyCode?: number;
        currencyName?: string;
        departmentCode?: string;
        expirationDate?: Date;
        guaranteeAmount?: number;
        guarantorCount?: number;
        lastUpdateDate?: Date;
        marketPrice?: number;
        mIDESNumber?: string;
        personReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonReference;
        realtyCount?: number;
        relationCode?: number;
        relationDescription?: string;
        reservedArea1?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceDataTypeDescription?: string;
        status?: boolean;
        statusDescription?: string;
        totalChequeOrDepositCount?: number;
    }
    interface CorporateResponseTRBEHI extends BOA.Common.Types.ContractBase {
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        partnership?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePartnershipInfo;
        partnershipRate?: number;
        partnershipTitle?: string;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        reservedArea1?: string;
        shareholder?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseShareholderInfo;
        shareholderCorporateTitle?: string;
        shareholderMiddleName?: string;
        shareholderName?: string;
        shareholderPersonTitle?: string;
        shareholderSurName?: string;
        signAuthorizationCode?: string;
        signAuthorizationDesc?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceDataTypeDescription?: string;
    }
    interface CorporateResponseTRBEIC extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        departmentCode?: string;
        fatherName?: string;
        gender?: number;
        genderDesc?: string;
        guarantorAmount?: number;
        homeAddress?: string;
        homeAddressZipCode?: string;
        identityNumber1?: string;
        identityNumber2?: string;
        identityNumber3?: string;
        identityNumber4?: string;
        identityType1?: number;
        identityType1Desc?: string;
        identityType2?: number;
        identityType2Desc?: string;
        identityType3?: number;
        identityType3Desc?: string;
        identityType4?: number;
        identityType4Desc?: string;
        isMatch?: boolean;
        isValidBirthDate?: boolean;
        lastUpdateDate?: Date;
        matchReason?: string;
        mIDESNumber?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        nationality?: number;
        nationalityDesc?: string;
        partnershipRate?: number;
        personReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonReference;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        reservedArea1?: string;
        reservedArea2?: string;
        reservedArea3?: string;
        reservedArea4?: string;
        reservedArea5?: number;
        reservedArea6?: string;
        signAuthorizationCode?: number;
        signAuthorizationDesc?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        surName?: string;
        title?: string;
        workAddress?: string;
        workAddressZipCode?: string;
    }
    interface CorporateResponseTRBEIP extends BOA.Common.Types.ContractBase {
        accountReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseReferenceNumber;
        currencyType?: number;
        identityNumber?: string;
        identityType?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        orderNo?: string;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentType?: number;
        paymentTypeName?: string;
        reservedArea1?: string;
        sourceCode?: number;
        sourceDataType?: number;
    }
    interface CorporateResponseTRBEIT extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchCityCode?: string;
        branchCode?: string;
        countryCode1?: number;
        countryCode2?: number;
        countryCode3?: number;
        countryCode4?: number;
        countryCode5?: number;
        currencyCode?: number;
        departmentCode?: string;
        indicator?: string;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        orderNo?: string;
        period?: number;
        personReferenceNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonReference;
        reservedArea1?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        year?: number;
    }
    interface CorporateResponseTRBEIV extends BOA.Common.Types.ContractBase {
        birthCityCode?: number;
        birthCityName?: string;
        birthTownCode?: number;
        birthTownName?: string;
        birthVillageName?: string;
        cellPhoneNumber?: string;
        educationStatus?: string;
        educationStatusCode?: number;
        email?: string;
        faxNumber?: string;
        fileOrderNumber?: number;
        filePageNumber?: number;
        fileVolumeNumber?: number;
        formattedCellPhoneNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedFaxNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedHomePhoneNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formattedWorkPhoneNumber?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePhone;
        formerLastName?: string;
        homePhoneNumber?: string;
        occupation?: string;
        occupationCode?: number;
        reservedArea1?: string;
        workPhoneNumber?: string;
    }
    interface CorporateResponseTRBEIY extends BOA.Common.Types.ContractBase {
        announcementDate?: Date;
        auctionFoundationAddress?: string;
        auctionFoundationCityCode?: number;
        auctionFoundationCityName?: string;
        auctionFoundationEmail?: string;
        auctionFoundationFaxNumber?: string;
        auctionFoundationFaxRegionCode?: string;
        auctionFoundationName?: string;
        auctionFoundationPhoneNumber?: string;
        auctionFoundationPhoneRegionCode?: string;
        auctionFoundationTownCode?: number;
        auctionFoundationTownName?: string;
        auctionFoundationZipCode?: string;
        auctionNumber?: string;
        branchCode?: string;
        departmentCode?: string;
        description?: string;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        officialJournalNumber?: number;
        prohibitoryBeginDate?: Date;
        prohibitoryDecisionFoundation?: string;
        prohibitoryDecisionMinistryCode?: number;
        prohibitoryDecisionMinistryName?: string;
        prohibitoryEndDate?: Date;
        prohibitoryFulcrumAndScope?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseProhibitoryFulcrumAndScopeInfo;
        prohibitoryPeriod?: number;
        publishingDate?: Date;
        reservedArea1?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: string;
        updateUser?: string;
        verifyDate?: Date;
        verifyUser?: string;
    }
    interface CorporateResponseTRBEOB extends BOA.Common.Types.ContractBase {
        aC_CashActualLimitCount?: number;
        aC_CashActualLimitSourceCount?: number;
        aC_CashRiskCount?: number;
        aC_CashRiskSourceCount?: number;
        aC_FirstUsageDate?: Date;
        aC_LastUsageDate?: Date;
        aC_NonCashActualLimitCount?: number;
        aC_NonCashActualLimitSourceCount?: number;
        aC_NonCashRiskCount?: number;
        aC_NonCashRiskSourceCount?: number;
        aC_OtherActualLimitCount?: number;
        aC_OtherActualLimitSourceCount?: number;
        aC_OtherRiskCount?: number;
        aC_OtherRiskSourceCount?: number;
        aC_SourceCount?: number;
        aC_TotalCashLimit?: number;
        aC_TotalCashRisk?: number;
        aC_TotalNonCashLimit?: number;
        aC_TotalNonCashRisk?: number;
        aC_TotalOtherLimit?: number;
        aC_TotalOtherRisk?: number;
        iC_3G_FirstDate?: Date;
        iC_3G_LastDate?: Date;
        iC_3G_SourceCount?: number;
        iC_3G_TotalActualRisk?: number;
        iC_3G_TotalRisk?: number;
        iC_4G_FirstDate?: Date;
        iC_4G_LastDate?: Date;
        iC_4G_SourceCount?: number;
        iC_4G_TotalActualRisk?: number;
        iC_4G_TotalRisk?: number;
        iC_5G_FirstDate?: Date;
        iC_5G_LastDate?: Date;
        iC_5G_SourceCount?: number;
        iC_5G_TotalActualRisk?: number;
        iC_5G_TotalRisk?: number;
        oC_TotalActualRisk?: number;
    }
    interface CorporateResponseTRBEOC extends BOA.Common.Types.ContractBase {
        bouncedChequeCount?: number;
        bouncedChequeYearGroup?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseBouncedChequeYearGroupInfo[];
        currentMonth?: string;
        currentMonthBouncedChequeAmount?: number;
        currentMonthBouncedChequeCount?: number;
        currentMonthTotalBouncedChequeAmount?: number;
        currentMonthTotalBouncedChequeCount?: number;
        totalBouncedChequeCount?: number;
        yearCount?: number;
    }
    interface CorporateResponseTRBEOF extends BOA.Common.Types.ContractBase {
        corporationRelation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCorporationRelationInfo[];
        relationCount?: number;
    }
    interface CorporateResponseTRBEOH extends BOA.Common.Types.ContractBase {
        assuranceSourceCount?: number;
        bouncedChequeSourceCount?: number;
        corporationSourceCount?: number;
        creditSourceCount?: number;
        groupInfoSourceCount?: number;
        guarantorSourceCount?: number;
        sourceDataType?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseSourceDataTypeInfo[];
        totalSourceCount?: number;
    }
    interface CorporateResponseTRBEOI extends BOA.Common.Types.ContractBase {
        personRelation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonRelationInfo[];
        relationCount?: number;
    }
    interface CorporateResponseTRBEOK extends BOA.Common.Types.ContractBase {
        aC_CashActualLimitCount?: number;
        aC_CashActualLimitSourceCount?: number;
        aC_CashRiskCount?: number;
        aC_CashRiskSourceCount?: number;
        aC_FirstUsageDate?: Date;
        aC_LastUsageDate?: Date;
        aC_NonCashActualLimitCount?: number;
        aC_NonCashActualLimitSourceCount?: number;
        aC_NonCashRiskCount?: number;
        aC_NonCashRiskSourceCount?: number;
        aC_OtherActualLimitCount?: number;
        aC_OtherActualLimitSourceCount?: number;
        aC_OtherRiskCount?: number;
        aC_OtherRiskSourceCount?: number;
        aC_SourceCount?: number;
        aC_TotalCashLimit?: number;
        aC_TotalCashRisk?: number;
        aC_TotalNonCashLimit?: number;
        aC_TotalNonCashRisk?: number;
        aC_TotalOtherLimit?: number;
        aC_TotalOtherRisk?: number;
        iC_3G_FirstDate?: Date;
        iC_3G_LastDate?: Date;
        iC_3G_SourceCount?: number;
        iC_3G_TotalActualRisk?: number;
        iC_3G_TotalRisk?: number;
        iC_4G_FirstDate?: Date;
        iC_4G_LastDate?: Date;
        iC_4G_SourceCount?: number;
        iC_4G_TotalActualRisk?: number;
        iC_4G_TotalRisk?: number;
        iC_5G_FirstDate?: Date;
        iC_5G_LastDate?: Date;
        iC_5G_SourceCount?: number;
        iC_5G_TotalActualRisk?: number;
        iC_5G_TotalRisk?: number;
        oC_TotalActualRisk?: number;
    }
    interface CorporateResponseTRBEOL extends BOA.Common.Types.ContractBase {
        totalLimitAmount?: number;
        totalLimitSourceCount?: number;
        totalRiskAmount?: number;
        totalRiskSourceCount?: number;
    }
    interface CorporateResponseTRBEOM extends BOA.Common.Types.ContractBase {
        limitRiskDelayList?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseLimitRiskDelayInfo[];
        noticeMemberCount?: number;
    }
    interface CorporateResponseTRBEON extends BOA.Common.Types.ContractBase {
        assuranceCount?: number;
        guarantorAssuranceCount?: number;
        guarantorAssuranceSourceCount?: number;
        guarantorTotalAmount?: number;
    }
    interface CorporateResponseTRBEOT extends BOA.Common.Types.ContractBase {
        assuranceGroup?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseAssuranceGroupInfo[];
        assuranceGroupCount?: number;
        assuranceGuaranteeAmount?: number;
        assuranceGuaranteeCount?: number;
        assuranceGuaranteeSourceCount?: number;
    }
    interface CorporateResponseTRBEOU extends BOA.Common.Types.ContractBase {
        auctionBanCount?: number;
        auctionBanEndDate?: Date;
        prohibitoryFulcrumAndScope?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseProhibitoryFulcrumAndScopeInfo;
        totalAuctionBanCount?: number;
    }
    interface CorporateResponseTRBERH extends BOA.Common.Types.ContractBase {
        identityNumber?: string;
        identityType?: number;
        memzucDetail?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBERT[];
        mIDESNumber?: string;
        noticeCycle?: string;
        riskCount?: number;
    }
    interface CorporateResponseTRBERT extends BOA.Common.Types.ContractBase {
        accrualOfInterestCommission?: number;
        creditLimitAmount?: number;
        reeskontCommission?: number;
        riskCode?: number;
        riskDescription?: string;
        termAmount_01_12?: number;
        termAmount_12_24?: number;
        termAmount_24plus?: number;
        totalCorporationCount?: number;
    }
    interface CorporateResponseTRBESR extends BOA.Common.Types.ContractBase {
        exceptionCode?: number;
        exceptionDescription?: string;
        rating?: number;
        reasonCode1?: number;
        reasonCode2?: number;
        reasonCode3?: number;
        reasonCode4?: number;
        reasonDescription1?: string;
        reasonDescription2?: string;
        reasonDescription3?: string;
        reasonDescription4?: string;
        reservedArea1?: string;
        scoreCardVersion?: number;
        scoreCompanyCode?: string;
        scoreCompanyName?: string;
        scoreValue?: number;
    }
    interface CorporateResponseTRBETC extends BOA.Common.Types.ContractBase {
        address?: string;
        addressCityCode?: number;
        reservedArea1?: string;
        taxNumber?: string;
        title?: string;
    }
    interface CorporateResponseViewContract extends BOA.Common.Types.ContractBase {
        assuranceRealty?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEGM[];
        assuranceView?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseAssuranceView;
        auctionBan?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEIY[];
        bouncedChequeDetail?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBECK[];
        corporationRelationList?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseCorporationRelationInfo[];
        personRelationList?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponsePersonRelationInfo[];
        redemptionPlanView?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseRedemptionPlanView;
        responseContract?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseContract;
        shareHolderRelation?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEHI[];
        sourceCorporationInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseViewCorporation[];
        summaryView?: BOA.Types.Kernel.Inquiry.KKB.CorporateSummaryViewContract;
    }
    interface CorporateResponseViewCorporation {
        activitySubject?: string;
        activityTypeCode?: string;
        address?: string;
        addressZipCode?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        capacityUsagePercent?: number;
        capacityUsageRatePeriod?: number;
        chainOfCommerce?: string;
        chamberOfArtisan?: string;
        commerceRegistryNumber?: number;
        corporateForeignCurrencyCreditLimit?: number;
        corporateLocalCurrencyCreditLimit?: number;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        corporationTotalLimit?: number;
        corporationType?: number;
        corporationTypeName?: string;
        country?: string;
        countryCode?: number;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        customerTypeDescription?: string;
        departmentCode?: string;
        faxNumber1?: string;
        faxNumber2?: string;
        faxNumber3?: string;
        foundationDate?: Date;
        groupCode?: string;
        groupLimit?: number;
        groupName?: string;
        groupRisk?: number;
        guarantorAmount?: number;
        identityNumber?: string;
        identityType?: number;
        identityTypeDesc?: string;
        imkbRate?: number;
        isMatch?: boolean;
        lastUpdateDate?: Date;
        limitCurrencyCode?: number;
        matchReason?: string;
        mbSectorCode?: string;
        mbSectorDescription?: string;
        mIDESNumber?: string;
        paidCapitalAmount?: number;
        paidCapitalYear?: number;
        partnershipRate?: number;
        phoneNumber1?: string;
        phoneNumber2?: string;
        phoneNumber3?: string;
        phoneNumber4?: string;
        phoneNumber5?: string;
        registeredCapitalAmount?: number;
        registeredCapitalYear?: number;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        reservedArea?: string;
        reservedArea1?: string;
        reservedArea2?: string;
        reservedArea3?: number;
        reservedArea4?: string;
        revenueAmount?: number;
        revenueCurrencyCode?: number;
        revenueCurrencyDescription?: string;
        revenueYear?: number;
        reviseTermDate?: Date;
        sectorCode?: string;
        sectorDescription?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        sourceWorkBeginDate?: Date;
        taxDepartment?: string;
        title?: string;
        totalCustomerNumber?: number;
        totalEmployeeNumber?: number;
        website?: string;
    }
    interface CorporateResponseViewLeasingLimitRisk {
        creditLimitAmount?: number;
        identityNumber?: string;
        identityType?: number;
        noticeCycle?: string;
        riskCode?: number;
        riskDescription?: string;
        source?: string;
        totalRisk?: number;
        usageRate?: number;
    }
    interface CorporateResponseViewPerson {
        birthCityCode?: number;
        birthCityName?: string;
        birthDate?: Date;
        birthPlace?: string;
        birthTownCode?: number;
        birthTownName?: string;
        birthVillageName?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        cellPhoneNumber?: string;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        departmentCode?: string;
        educationStatus?: string;
        educationStatusCode?: number;
        email?: string;
        fatherName?: string;
        faxNumber?: string;
        fileOrderNumber?: number;
        filePageNumber?: number;
        fileVolumeNumber?: number;
        formerLastName?: string;
        gender?: number;
        genderDesc?: string;
        guarantorAmount?: number;
        homeAddress?: string;
        homeAddressZipCode?: string;
        homePhoneNumber?: string;
        identityNumber1?: string;
        identityNumber2?: string;
        identityNumber3?: string;
        identityNumber4?: string;
        identityType1?: number;
        identityType1Desc?: string;
        identityType2?: number;
        identityType2Desc?: string;
        identityType3?: number;
        identityType3Desc?: string;
        identityType4?: number;
        identityType4Desc?: string;
        isValidBirthDate?: boolean;
        lastUpdateDate?: Date;
        matchReason?: string;
        mIDESNumber?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        nationality?: number;
        nationalityDesc?: string;
        occupation?: string;
        occupationCode?: number;
        partnershipRate?: number;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        signAuthorizationCode?: number;
        signAuthorizationDesc?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        surName?: string;
        title?: string;
        workAddress?: string;
        workAddressZipCode?: string;
        workPhoneNumber?: string;
    }
    interface CorporateResponseWarningMessageInfo extends BOA.Common.Types.ContractBase {
        message?: string;
        messageCode?: string;
        orderNo?: number;
    }
    interface CorporateSummaryAssuranceView {
        assuranceCount?: number;
        assuranceDetailList?: BOA.Types.Kernel.Inquiry.KKB.CorporateSummaryViewAssuranceDetail[];
        guarantorAssuranceCount?: number;
        guarantorAssuranceSourceCount?: number;
        guarantorTotalAmount?: number;
    }
    interface CorporateSummaryViewAssuranceDetail {
        assuranceSourceCount?: number;
        assuranceType?: number;
        assuranceTypeDescription?: string;
        assuranceTypeTotalAmount?: number;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceTotalAmount?: number;
        toolTip?: string;
    }
    interface CorporateSummaryViewContract extends BOA.Common.Types.ContractBase {
        assuranceInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateSummaryAssuranceView;
        bouncedChequeSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOC;
        creditAssuranceCount?: BOA.Types.Kernel.Inquiry.KKB.CorporateCreditCounts[];
        creditSummary?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOB;
        customerTitle?: string;
        groupCode?: string;
        groupName?: string;
        leasingLimitRiskDetail?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseViewLeasingLimitRisk[];
        paymentPerformance?: BOA.Types.Kernel.Inquiry.KKB.CorporateSummaryViewPaymentPerformance[];
        resultMessage?: string;
        scoreFinarException?: string;
        scoreFinarHasValue?: boolean;
        scoreFinarScoreReasons?: string;
        scoreFinarValue?: number;
        scoreGDSException?: string;
        scoreGDSHasValue?: boolean;
        scoreGDSScoreReasons?: string;
        scoreGDSValue?: number;
        scoreInfo?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBESR[];
        sourceBasedLimitRisk?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseLimitRiskDelayInfo[];
        statistics?: BOA.Types.Kernel.Inquiry.KKB.CorporateResponseTRBEOH;
        taxNumber?: string;
    }
    interface CorporateSummaryViewPaymentPerformance {
        finalDate?: Date;
        lastMonthActuallyCashedOverdueInterest?: number;
        lastMonthDueAmount?: number;
        lastMonthDueFinancingCost?: number;
        lastMonthTotalPaidAmount?: number;
        lastMonthTotalPaidFinancingCost?: number;
        openDelayedAmountTL?: number;
        openMaxDelayDaysCount?: number;
        source?: string;
        totalActuallyCashedOverdueInterest?: number;
        totalDelayCount?: number;
        totalDelayedDaysCount?: number;
        unpaidFinancingCost?: number;
    }
    interface CreditToPersonContract extends BOA.Common.Types.ContractBase {
        creditAccount?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditAccountContract;
        personInfo?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonInfoContract;
    }
    interface HouseholdDetailsContract extends BOA.Common.Types.ContractBase {
        anyLitigationAccounts?: string;
        averageLimitAmount?: number;
        averageLoanAmount?: number;
        exclusionCode?: number;
        highestAge?: number;
        highestBureauScore?: number;
        householdScore?: number;
        householdSummaryList?: BOA.Types.Kernel.Inquiry.KKB.HouseholdSummaryContract[];
        limitUtilizationRatioforCreditCards?: string;
        limitUtilizationRatioforOverdrafts?: string;
        lowestAge?: number;
        maximumAmountOfConsumerLoans?: number;
        maximumAmountOfMortgageLoans?: number;
        maximumLimitOfCreditCards?: number;
        maximumLimitOfOverdrafts?: number;
        maximumOutstandingBalanceOfConsumerLoans?: number;
        maximumOutstandingBalanceOfCreditCards?: number;
        maximumOutstandingBalanceOfMortgageLoans?: number;
        maximumOutstandingBalanceOfOverdrafts?: number;
        monthOfUpdate?: string;
        numberOfConsumerLoansInArrears?: number;
        numberOfCreditCardsInArrears?: number;
        numberOfFemalesInHousehold?: number;
        numberOfMalesInHousehold?: number;
        numberOfMortgageLoansInArrears?: number;
        numberOfOverdraftsInArrears?: number;
        numberOfPeopleInHousehold?: number;
        numberOfRelationships?: number;
        numberOfTotalCommercialCreditApplicationsinLast1Year?: number;
        numberOfTotalPersonalCreditApplicationsinLast1Year?: number;
        reservedFiller?: string;
        theEarliestStartDateofCredits?: Date;
        theLatestStartDateofCredits?: Date;
        theNumberOfActiveConsumerLoanAccounts?: number;
        theNumberOfActiveConsumerLoanAccountsinLitigation?: number;
        theNumberOfActiveCreditCardAccounts?: number;
        theNumberOfActiveCreditCardAccountsinLitigation?: number;
        theNumberOfActiveMortgageLoanAccounts?: number;
        theNumberOfActiveMortgageLoanAccountsinLitigation?: number;
        theNumberOfActiveOverdraftAccounts?: number;
        theNumberOfActiveOverdraftAccountsinLitigation?: number;
        theNumberOfConsumerLoansinLitigation?: number;
        theNumberOfCreditCardsinLitigation?: number;
        theNumberOfMortgageLoansinLitigation?: number;
        theNumberOfOverdraftsinLitigation?: number;
        totalAmountOfConsumerLoans?: number;
        totalAmountOfCreditCardLimits?: number;
        totalAmountOfMortgageLoans?: number;
        totalAmountOfOverdraftLimits?: number;
        totalMonthlyInstalmentAmount?: number;
        totalOutstandingBalance?: number;
        totalOutstandingBalanceOfConsumerLoans?: number;
        totalOutstandingBalanceOfConsumerLoansInArrears?: number;
        totalOutstandingBalanceOfConsumerLoansinLitigation?: number;
        totalOutstandingBalanceOfCreditCards?: number;
        totalOutstandingBalanceOfCreditCardsInArrears?: number;
        totalOutstandingBalanceOfCreditCardsinLitigation?: number;
        totalOutstandingBalanceOfMortgageLoans?: number;
        totalOutstandingBalanceOfMortgageLoansInArrears?: number;
        totalOutstandingBalanceOfMortgageLoansinLitigation?: number;
        totalOutstandingBalanceOfOverdrafts?: number;
        totalOutstandingBalanceOfOverdraftsInArrears?: number;
        totalOutstandingBalanceOfOverdraftsinLitigation?: number;
        worstBureauScore?: number;
        worstCIIIndex?: number;
        worstPaymentStatus?: string;
        worstPaymentStatusInLast12months?: string;
        worstPaymentStatusInLast3months?: string;
        worstPaymentStatusInLast6months?: string;
    }
    interface HouseholdSummaryContract extends BOA.Common.Types.ContractBase {
        arrearsCount?: number;
        arrearsDebtAmount?: number;
        count?: number;
        financeType?: string;
        limitFullnessRatio?: string;
        maximumCreditAmount?: number;
        maximumDebt?: number;
        numberOfAccountsInLigitation?: number;
        numberOfActiveAccountsInLigitation?: number;
        totalArrearsDebtInLigitation?: number;
        totalCreditAmount?: number;
        totalDebtAmount?: number;
    }
    interface IndividualApplicantSummary extends BOA.Common.Types.ContractBase {
        bestMatchToInputApplicants?: string;
        numberOfIndexEntries?: number;
        reasonForApplicantReturn?: string;
    }
    interface IndividualBrueauScoreContract extends BOA.Common.Types.ContractBase {
        applicantNumber?: number;
        cII?: string;
        cIIExclusionCode?: string;
        dataTypeFlag?: string;
        exclusionCode?: string;
        fraudFlag?: string;
        modelType?: string;
        reasonCode1?: string;
        reasonCode2?: string;
        reasonCode3?: string;
        reasonCode4?: string;
        score?: number;
    }
    interface IndividualConstants {
    }
    interface IndividualCreditAccountContract extends BOA.Common.Types.ContractBase {
        accountPaymentStatus?: string;
        accountSpecialStatus?: string;
        accountSpecialStatusDescription?: string;
        accountSpecialStatusEnd?: Date;
        accountSpecialStatusStart?: Date;
        accountStatus?: string;
        accountStatusDescription?: string;
        amountFinanced?: number;
        applicationReferenceNumber?: string;
        arrearsBalance?: number;
        bankName?: string;
        closedDate?: Date;
        creditBalanceIndicator?: number;
        creditLimit?: number;
        cumulativeNumberOfMissedPayments?: number;
        currencyCode?: number;
        currencyDivisor?: number;
        customerAccountNumber?: string;
        dateOfLastPayment?: Date;
        debitInterestBearingBalance?: number;
        defaultDate?: Date;
        depositAmount?: number;
        durationOfAgrement?: string;
        fecCode?: string;
        fecId?: number;
        finalInstallmentAmount?: number;
        financeType?: BOA.Types.Kernel.Inquiry.KKB.FinanceType;
        financeTypeDescription?: string;
        frequencyOfPayments?: BOA.Types.Kernel.Inquiry.KKB.FrequencyOfPaymentsFlag;
        frequencyOfPaymentsDescription?: string;
        installmentAmount?: number;
        interestRateFlag?: BOA.Types.Kernel.Inquiry.KKB.InterestRateFlag;
        interestRateFlagDescription?: string;
        key?: any;
        lastPaymentAmount?: number;
        litigationDate?: Date;
        methodOfPayment?: BOA.Types.Kernel.Inquiry.KKB.MethodOfPayment;
        methodOfPaymentDescription?: string;
        monthOfLastUpdate?: Date;
        numberofAccountHolders?: number;
        numberOfInstallment?: number;
        originalDefaultBalance?: number;
        originalLitigationBalance?: number;
        outstandingInstallmentCount?: number;
        ownDataFlag?: boolean;
        paymentPerformanceFlag?: BOA.Types.Kernel.Inquiry.KKB.PaymentPerformanceFlag;
        persons?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonInfoContract[];
        purchasedItemReference?: string;
        purposeOfFinance?: string;
        purposeOfFinanceDescription?: string;
        reasonWriteOffClosure?: string;
        revisedFrequencyOfPayments?: BOA.Types.Kernel.Inquiry.KKB.FrequencyOfPaymentsFlag;
        revisedFrequencyOfPaymentsDescription?: string;
        revisedInstallmentAmount?: number;
        revisedNumberOfInstallments?: number;
        revisedStartDate?: Date;
        startDate?: Date;
        totalInstallmentLimit?: number;
        totalInstallmentsBalance?: number;
        totalOutstandingBalance?: number;
        userCompanyName?: string;
        worstPaymentStatus?: string;
        writeOffRecoveredDate?: Date;
    }
    interface IndividualCreditAccountSummaryContract {
        activeLimit?: number;
        creditCount?: number;
        defaultDate?: Date;
        fillRate?: number;
        fillRatePersentageText?: string;
        financeType?: BOA.Types.Kernel.Inquiry.KKB.FinanceType;
        financeTypeDescription?: string;
        installmentAmount?: number;
        lastPeriodCreditCardPaymentAmount?: number;
        lastPeriodCreditPaymentAmount?: number;
        lastPeriodPayment?: number;
        litigationDate?: Date;
        openCreditCount?: number;
        openDate?: Date;
        originalDefaultBalance?: number;
        originalLitigationBalance?: number;
        outstandingDebt?: number;
        totalLimit?: number;
    }
    interface IndividualCreditApplicantContract extends BOA.Common.Types.ContractBase {
        amountFinanced?: number;
        applicantDate?: Date;
        applicationReferenceNumber?: string;
        bankName?: string;
        currencyCode?: number;
        currencyDivisor?: number;
        depositAmount?: number;
        fecCode?: string;
        fecId?: number;
        finalInstalmentAmount?: number;
        financeType?: BOA.Types.Kernel.Inquiry.KKB.FinanceType;
        financeTypeDescription?: string;
        frequencyOfPayments?: BOA.Types.Kernel.Inquiry.KKB.FrequencyOfPaymentsFlag;
        frequencyOfPaymentsDescription?: string;
        generatedReferenceNumber?: string;
        installmentAmount?: number;
        interestRateFlag?: BOA.Types.Kernel.Inquiry.KKB.InterestRateFlag;
        interestRateFlagDescription?: string;
        key?: any;
        methodOfPayment?: BOA.Types.Kernel.Inquiry.KKB.MethodOfPayment;
        methodOfPaymentDescription?: string;
        numberOfApplicants?: number;
        numberOfInstallment?: number;
        ownDataFlag?: boolean;
        persons?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonInfoContract[];
        purchasedItemReference?: string;
        purposeOfFinance?: string;
        purposeOfFinanceDescription?: string;
        requestedCreditLimit?: number;
        userCompanyName?: string;
    }
    interface IndividualCreditSummaryContract extends BOA.Common.Types.ContractBase {
        allAccInLegalMainNumberOfOwnAccounts?: number;
        allAccInLegalNonMainNumberOfAccounts?: number;
        allAccInLegalNonMainNumberOfOwnAccounts?: number;
        allAccInLegalNonMainTimeFromMostRecentDefault?: number;
        allAccInLegalNonMainTotalOutstBalance?: number;
        allAccInLegalNumberOfAccounts?: number;
        allAccInLegalTimeFromMostRecentDefault?: number;
        allAccInLegalTotalOutstBalance?: number;
        allAccNotUpdatedNonMainNumberOfAccounts?: number;
        allAccNotUpdatedNonMainWorstPymtStatusLast12Months?: number;
        allAccNotUpdatedNumberOfAccounts?: number;
        allAccNotUpdatedWorstPymtStatusLast12Months?: number;
        closeAccWPSTimeRecentMonths?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNonMainNumberOfAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNonMainNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNonMainTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNumberOfAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNonMainNumberOfAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNonMainNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNonMainTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNumberOfAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNonMainNumberOfAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNonMainNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNonMainTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNumberOfAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffTimeFromRecentClosed?: number;
        monthlyCommitmentMainOrJoint?: number;
        openAcc12WorstPaymentStatus0To6?: string;
        openAcc12WorstPaymentStatus7To12?: string;
        openAcc4To12WorstPaymentStatus0To6?: string;
        openAcc4To12WorstPaymentStatus7To12?: string;
        openAllAccCount?: number;
        openedAccAllTotalBalanceExclMortgage?: number;
        openedAccAllTotalBalanceOnlyMortgage?: number;
        openedAccAllWorstPymntStatus7To12Months?: string;
        openedAccCurrPymtStatus0NumberOfAccounts?: number;
        openedAccCurrPymtStatus0TotalBalance?: number;
        openedAccCurrPymtStatus1To6MontlyCommitment?: number;
        openedAccCurrPymtStatus1To6NumberOfAccounts?: number;
        openedAccCurrPymtStatus1To6TotalBalance?: number;
        openedAccCurrPymtStatusOtherMontlyCommitment?: number;
        openedAccCurrPymtStatusOtherNumberOfAccounts?: number;
        openedAccCurrPymtStatusOtherTotalBalance?: number;
        openedAccMontlyCommitment?: number;
        openedAccOpenedInLast12MonthsAgoNumberOfAccounts?: number;
        openedAccOpenedInLast12MonthsAgoTotalBalanceExclMortgage?: number;
        openedAccOpenedInLast12MonthsAgoTotalBalanceOnlyMortgage?: number;
        openedAccOpenedInLast3MonthsNumberOfAccounts?: number;
        openedAccOpenedInLast3MonthsTotalBalanceExclMortgage?: number;
        openedAccOpenedInLast3MonthsTotalBalanceOnlyMortgage?: number;
        openedAccOpenedInLast3MonthsWorstPaymentStatus?: string;
        openedAccOpenedInLast4To12MonthsNumberOfAccounts?: number;
        openedAccOpenedInLast4To12MonthsTotalBalanceExclMortgage?: number;
        openedAccOpenedInLast4To12MonthsTotalBalanceOnlyMortgage?: number;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        totalNoOfReordsRetrieved?: number;
        totalOutBalAllRecsRetrieved?: number;
        worstCurrentPaymentStatus?: string;
        worstEverPaymentStatus?: string;
    }
    interface IndividualCreditSummaryViewContract extends BOA.Common.Types.ContractBase {
        creditSummary?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditSummaryContract;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        personalDebtIndex?: number;
        personSummaryList?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonSummaryViewContract[];
        score?: number;
        warning?: BOA.Types.Kernel.Inquiry.KKB.IndividualWarningContract;
        worstCurrentPaymentStatus?: string;
        worstEverPaymentStatus?: string;
    }
    interface IndividualPersonAddressContract extends BOA.Common.Types.ContractBase {
        addressCurrentIndicator?: BOA.Types.Kernel.Inquiry.KKB.AddressIndicator;
        addressCurrentIndicatorDescription?: string;
        addressFromDate?: Date;
        addressLine?: string;
        addressToDate?: Date;
        addressType?: BOA.Types.Kernel.Inquiry.KKB.AddressType;
        addressTypeDescription?: string;
        postCode?: string;
    }
    interface IndividualPersonContract {
        accountHolderType?: BOA.Types.Kernel.Inquiry.KKB.AccountHolderTypes;
        accountHolderTypeAbreviation?: string;
        accountHolderTypeDescription?: string;
        aliasSurname?: string;
        companyName?: string;
        dateOfBirth?: Date;
        fathersForename?: string;
        forename1?: string;
        forename2?: string;
        gender?: BOA.Types.Kernel.Inquiry.KKB.GenderType;
        genderDescription?: string;
        mothersForename?: string;
        mothersMaidenSurname?: string;
        placeOfBirth?: string;
        placeOfBirthCode?: string;
        primaryIdentityNumber?: string;
        primaryIdentityType?: BOA.Types.Kernel.Inquiry.KKB.IdentityType;
        primaryIdentityTypeDescription?: string;
        regionProvinceOfBirth?: string;
        secondaryIdentityType?: BOA.Types.Kernel.Inquiry.KKB.IdentityType;
        secondaryIdentityTypeDescription?: string;
        seondaryIdentityNumber?: string;
        surname?: string;
        surnameSuffix?: string;
        title?: string;
    }
    interface IndividualPersonDetailContract extends BOA.Common.Types.ContractBase {
        celluarTelephoneNumber?: string;
        creditCardsHeld?: string;
        homeTelephoneNumber?: string;
        income?: number;
        incomeFrequencyFlag?: BOA.Types.Kernel.Inquiry.KKB.IncomePeriod;
        incomeFrequencyFlagDescription?: string;
        incomeNetFlag?: number;
        maritalStatus?: BOA.Types.Kernel.Inquiry.KKB.MaritalStatus;
        maritalStatusDescription?: string;
        numberOfDependants?: number;
        numberOfDependantsWithIncome?: number;
        occupationCodeDescription?: string;
        residentialStatus?: BOA.Types.Kernel.Inquiry.KKB.ResidentialStatus;
        residentialStatusDescription?: string;
        workTelephoneNumber?: string;
    }
    interface IndividualPersonEmployerContract extends BOA.Common.Types.ContractBase {
        addressLine?: string;
        employerCurrentIndicator?: BOA.Types.Kernel.Inquiry.KKB.EmployerIndicator;
        employerCurrentIndicatorDescription?: string;
        employerName?: string;
        employmentEndDate?: Date;
        employmentStartDate?: Date;
        postCode?: string;
        telephoneNumber?: string;
    }
    interface IndividualPersonInfoContract extends BOA.Common.Types.ContractBase {
        addresses?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonAddressContract[];
        applicationSummary?: BOA.Types.Kernel.Inquiry.KKB.IndividualApplicantSummary;
        employers?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonEmployerContract[];
        isRequestedPerson?: boolean;
        key?: any;
        person?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonContract;
        personDetail?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonDetailContract;
        uniqueKey?: any;
    }
    interface IndividualPersonSummaryViewContract extends BOA.Common.Types.ContractBase {
        accountHolderType?: BOA.Types.Kernel.Inquiry.KKB.AccountHolderTypes;
        accountHolderTypeDescription?: string;
        applicantCount?: number;
        bankCount?: number;
        collectionList?: BOA.Types.Kernel.Inquiry.KKB.CollectionContract[];
        creditSummaryList?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditAccountSummaryContract[];
        displayName?: string;
        includedPersonNameList?: string[];
        isRequestedPerson?: boolean;
        key?: any;
        name?: string;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        personalDebtIndex?: number;
        personSingularData?: BOA.Types.Kernel.Inquiry.KKB.PersonSingularDataContract;
        score?: number;
        surname?: string;
        totalMaxPaymentAmount?: number;
        worstCurrentPaymentStatus?: string;
        worstEverPaymentStatus?: string;
    }
    interface IndividualQueryInputContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        customerId?: number;
        fatherName?: string;
        forceOnline?: boolean;
        gender?: number;
        identityNumber?: string;
        identityType?: number;
        maritalStatus?: number;
        middleName?: string;
        motherMaidenName?: any;
        motherName?: string;
        name?: string;
        onlineLogId?: number;
        querySubType?: BOA.Types.Kernel.Inquiry.KKB.QuerySubType;
        queryType?: BOA.Types.Kernel.Inquiry.KKB.QueryType;
        referenceNumber?: string;
        resourceCode?: string;
        surname?: string;
    }
    interface IndividualQueryOpenContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        identityNumber?: string;
        onlineLogId?: number;
        queryFilter?: BOA.Types.Kernel.Inquiry.KKB.QueryFilter;
        querySubType?: BOA.Types.Kernel.Inquiry.KKB.QuerySubType;
        resourceCode?: string;
    }
    interface IndividualResponseContract extends BOA.Common.Types.ContractBase {
        brueauScoreInfo?: BOA.Types.Kernel.Inquiry.KKB.IndividualBrueauScoreContract;
        creditAccounts?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditAccountContract[];
        creditApplicants?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditApplicantContract[];
        creditSummaryList?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditSummaryContract[];
        householdDetails?: BOA.Types.Kernel.Inquiry.KKB.HouseholdDetailsContract;
        onlineLogDate?: Date;
        onlineLogId?: number;
        personalDebtIndex?: number;
        querySystem?: BOA.Types.Kernel.Inquiry.KKB.KKBCommonConstants.DataRetrieveSource;
        score?: number;
        warnings?: BOA.Types.Kernel.Inquiry.KKB.IndividualWarningContract[];
    }
    interface IndividualResponseViewContract extends BOA.Common.Types.ContractBase {
        applicantToPersonList?: BOA.Types.Kernel.Inquiry.KKB.ApplicantToPersonContract[];
        creditSummaryView?: BOA.Types.Kernel.Inquiry.KKB.IndividualCreditSummaryViewContract;
        creditToPersonList?: BOA.Types.Kernel.Inquiry.KKB.CreditToPersonContract[];
        householdInfoView?: BOA.Types.Kernel.Inquiry.KKB.HouseholdDetailsContract;
        isOnlineKKBQueried?: boolean;
        onlineLogDate?: Date;
        onlineLogId?: number;
    }
    interface IndividualWarningContract extends BOA.Common.Types.ContractBase {
        companyName?: string;
        companyReferenceNumber?: string;
        fraudCategory?: number;
        lastUpdateDate?: Date;
        ownDataFlag?: boolean;
        persons?: BOA.Types.Kernel.Inquiry.KKB.IndividualPersonInfoContract[];
        suppliedDate?: Date;
        warningMessage?: string;
    }
    interface KKBCommonConstants {
    }
    interface KKBParseRequiredParameterHolderContract extends BOA.Common.Types.ContractBase {
        accountHolderParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        accountSpecialParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        accountStatusParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        addressIndicatorParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        currencyParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        currencyParameterList1?: BOA.Types.Kernel.General.ParameterContract[];
        employerIndicatorParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        financeTypeParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        frequencyOfPaymentsFlagParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        genderTypeParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        identityTypeParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        incomePeriodParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        interestRateFlagParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        maritalStatusParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        methodOfPaymentParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        occupationParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        purposeOfFinanceSpecialParameterList?: BOA.Types.Kernel.General.ParameterContract[];
        residentialStatusParameterList?: BOA.Types.Kernel.General.ParameterContract[];
    }
    interface PersonSingularDataContract extends BOA.Common.Types.ContractBase {
        applicantCount?: number;
        bankCount?: number;
        lastPeriodTotalCreditCardPaymentAmount?: number;
        lastPeriodTotalCreditPaymentAmount?: number;
        lastPeriodTotalPayment?: number;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        totalMaxPaymentAmount?: number;
        worstPaymentStatus?: string;
        worstPaymentStatusOnActiveAccounts?: string;
    }
    interface RiskReportConstants {
    }
    interface RiskReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        assetType?: string;
        commissionKey?: number;
        creditRatingRequested?: boolean;
        errorCode?: string;
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        querierWorkgroupId?: number;
        queryPurpose?: BOA.Types.Kernel.Inquiry.KKB.RiskReportQueryPurpose;
        reportContent?: number[];
        reportType?: string;
        riskReportId?: number;
        systemDate?: Date;
        taxNumber?: string;
        userName?: string;
    }
    interface RiskReportQueryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        assetType?: BOA.Types.Kernel.Inquiry.KKB.RiskReportAssetType;
        assetTypeQueryValue?: string;
        birthDate?: Date;
        birthPlace?: string;
        chamberOfCommerce?: string;
        creditRatingRequested?: boolean;
        establishmentDate?: Date;
        fathersName?: string;
        firstName?: string;
        homeAddress?: string;
        homePostCode?: string;
        identityNumber?: string;
        mothersName?: string;
        queryPurpose?: BOA.Types.Kernel.Inquiry.KKB.RiskReportQueryPurpose;
        reportType?: BOA.Types.Kernel.Inquiry.KKB.RiskReportReportType;
        reportTypeQueryValue?: string;
        secondName?: string;
        surname?: string;
        taxNumber?: string;
        taxOffice?: string;
        title?: string;
        tradeRegistryNo?: number;
        workAddress?: string;
        workPostCode?: string;
    }
    interface StaffQueryConstants {
    }
    interface StaffQueryContract extends BOA.Common.Types.ContractBase {
        administrativeOrLegalFollowRegistration?: number;
        administrativeOrLegalFollowRegistrationDesc?: string;
        applicantCount?: number;
        creditKey?: any;
        customerId?: number;
        hasNonPerformingLoan?: number;
        hasNonPerformingLoanDesc?: string;
        hostName?: string;
        identityNumber?: string;
        lastPeriodCreditCardAmountToPayTL?: number;
        lastPeriodCreditCardPaymentAmountTL?: number;
        lastPeriodCreditPaymentAmountTL?: number;
        lastPeriodOverdraftPaymentAmountTL?: number;
        lastPeriodTotalMonthlyPaymentAmount?: number;
        lastYearOpenedLoanCount?: number;
        lastYearOpenedNonPerformingLoanAmount?: number;
        name?: string;
        nonPerformingLoanAmount?: number;
        personalDebtIndex?: number;
        personUniqueKey?: any;
        queryDate?: Date;
        queryDateBegin?: Date;
        queryDateEnd?: Date;
        queryLogId?: number;
        region?: string;
        riskBegin?: number;
        riskEnd?: number;
        score?: number;
        scoreBegin?: number;
        scoreEnd?: number;
        staffQueryId?: number;
        systemDate?: Date;
        title?: string;
        totalConsumerLoanDebtTL?: number;
        totalCreditCardDebtTL?: number;
        totalDebt?: number;
        totalLimitTL?: number;
        totalMortgageDebtTL?: number;
        totalOverdraftDebtTL?: number;
        totalRiskTL?: number;
        unit?: string;
        userId?: number;
        userIdBegin?: number;
        userIdEnd?: number;
        userName?: string;
        workgroupId?: number;
    }
    interface TardesConstants {
    }
    interface TardesCreditContract extends BOA.Common.Types.ContractBase {
        creditId?: number;
        creditInstallment?: number;
        creditName?: string;
        creditTerm?: number;
        demandAmount?: number;
        interestRate?: string;
        maxDemandTerm?: number;
        maxInstallment?: number;
        maxInterestRate?: number;
        minDemandTerm?: number;
        minInstallment?: number;
        minInterestRate?: number;
        tardesQueryId?: number;
    }
    interface TardesCreditEvaluationContract extends BOA.Common.Types.ContractBase {
        creditId?: string;
        creditName?: string;
        demandInstallment?: string;
        demandInterestRate?: string;
        demandTerm?: string;
        hostName?: string;
        proposedLimit?: string;
        proposedTerm?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface TardesIncomeExpenseContract extends BOA.Common.Types.ContractBase {
        categoryId?: string;
        expenseValue?: string;
        hostName?: string;
        incomeName?: string;
        incomeValue?: string;
        netIncome?: string;
        rateOfGrossIncome?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface TardesProductContract extends BOA.Common.Types.ContractBase {
        productCountDaa?: string;
        productId?: number;
        productionCategoryId?: number;
        productName?: string;
        tardesQueryId?: number;
    }
    interface TardesProductEvaluationContract extends BOA.Common.Types.ContractBase {
        expense?: string;
        grossIncome?: string;
        hostName?: string;
        netIncome?: string;
        productCountDaa?: string;
        productId?: string;
        productName?: string;
        proposedLimit?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        term?: string;
        userName?: string;
        workingCapitalRequirement?: string;
    }
    interface TardesProductionCategoryContract extends BOA.Common.Types.ContractBase {
        categoryId?: number;
        categoryName?: string;
        hostName?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
        zipCode?: number;
    }
    interface TardesQualityScoreContract extends BOA.Common.Types.ContractBase {
        categoryName?: string;
        hostName?: string;
        qualityResult?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface TardesQueryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        advanceList?: BOA.Types.Kernel.Inquiry.KKB.CommonQueryContract[];
        bankLoanList?: BOA.Types.Kernel.Inquiry.KKB.CommonQueryContract[];
        branchId?: number;
        cityId?: number;
        creditEvaluationList?: BOA.Types.Kernel.Inquiry.KKB.TardesCreditEvaluationContract[];
        creditList?: BOA.Types.Kernel.Inquiry.KKB.TardesCreditContract[];
        creditPersonList?: BOA.Types.Kernel.Inquiry.KKB.TardesQueryContract[];
        divitInstanceId?: any;
        hostName?: string;
        identityNumber?: string;
        incExpAgriNonAgricultural?: BOA.Types.Kernel.Inquiry.KKB.CommonResultContract[];
        incExpListByProductType?: BOA.Types.Kernel.Inquiry.KKB.TardesIncomeExpenseContract[];
        incExpNonAgricultural?: BOA.Types.Kernel.Inquiry.KKB.CommonResultContract[];
        nonAgriculturalExpenseList?: BOA.Types.Kernel.Inquiry.KKB.CommonQueryContract[];
        nonAgriculturalIncomeList?: BOA.Types.Kernel.Inquiry.KKB.CommonQueryContract[];
        productEvaluationList?: BOA.Types.Kernel.Inquiry.KKB.TardesProductEvaluationContract[];
        productionCategoryList?: BOA.Types.Kernel.Inquiry.KKB.TardesProductionCategoryContract[];
        productList?: BOA.Types.Kernel.Inquiry.KKB.TardesProductContract[];
        productListByCategoriId?: BOA.Types.Kernel.Inquiry.KKB.TardesProductContract[];
        qualityScoreByProductType?: BOA.Types.Kernel.Inquiry.KKB.TardesQualityScoreContract[];
        questionList?: BOA.Types.Kernel.Inquiry.KKB.TardesQuestionContract[];
        questionListByCategoriId?: BOA.Types.Kernel.Inquiry.KKB.TardesQuestionContract[];
        relatedAccountNumber?: number;
        relatedCustomerName?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        title?: string;
        tranBeginDate?: Date;
        tranDate?: Date;
        tranEndDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workgroupName?: string;
    }
    interface TardesQuestionContract extends BOA.Common.Types.ContractBase {
        categoryId?: number;
        categoryName?: string;
        hostName?: string;
        questionAnswer?: string;
        questionForm?: string;
        questionId?: number;
        questionName?: string;
        questionOptionList?: BOA.Types.Kernel.Inquiry.KKB.TardesQuestionOptionContract[];
        questionType?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        typeId?: number;
        typeName?: string;
        userName?: string;
    }
    interface TardesQuestionOptionContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        optionText?: string;
        optionValue?: string;
        questionId?: number;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.Corporate.ResponseView {
    interface CorporateResponseViewStatistics {
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.CorporateConstants {
    interface Currency {
    }
    interface DefaultValues {
    }
    interface ParameterTypes {
    }
    interface ResourceCodes {
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.Individual {
    interface IndividualOfflineQueryContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        individualOfflineQueryId?: number;
        individualOnlineQueryId?: number;
        querySubType?: number;
        queryType?: number;
        resourceCode?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface IndividualOnlineQueryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        birthDate?: Date;
        birthPlace?: string;
        channelId?: number;
        gender?: number;
        identityNumber?: string;
        identityType?: number;
        individualOnlineQueryId?: number;
        inputText?: string;
        middleName?: string;
        name?: string;
        querySubType?: number;
        queryType?: number;
        referenceNumber?: string;
        resourceCode?: string;
        resultText?: string;
        score?: number;
        surname?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.IndividualConstants {
    interface Collection {
    }
    interface CollectionTypeDescription {
    }
    interface DefaultValues {
    }
    interface ParameterTypes {
    }
    interface Reports {
    }
    interface ResourceCodes {
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.KKBCommonConstants {
    export const enum DataRetrieveSource {
        Database = 1,
        Online = 2
    }
    interface Commission {
    }
    interface Messages {
    }
    interface Notice {
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.RiskReportConstants {
    interface AssetTypeCodes {
    }
    interface Formats {
    }
    interface ParameterTypes {
    }
    interface ReportTypeCodes {
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.StaffQueryConstants {
    export const enum EodName {
        StaffQuery = 0
    }
}
declare namespace BOA.Types.Kernel.Inquiry.KKB.TardesConstants {
    interface TardesUrl {
    }
}
declare namespace BOA.Types.Kernel.Inquiry.TAKPAS {
    interface AccessoryContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        count?: number;
        explanation?: string;
        id?: number;
        price?: number;
        priceUnit?: string;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
    }
    interface AnnexContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        explanation?: string;
        id?: number;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
        type?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Annex;
        typeDescription?: string;
    }
    interface AreaContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        area?: number;
        id?: number;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
    }
    interface CaveatProclaimContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        beneficiaryList?: BOA.Types.Kernel.Inquiry.TAKPAS.ShareContract[];
        duration?: number;
        endDate?: Date;
        firstEstablishmentProcess?: BOA.Types.Kernel.Inquiry.TAKPAS.ProcessContract;
        id?: number;
        sentence?: string;
        startDate?: Date;
        template?: string;
        titleDeedSection?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSection;
        titleDeedSectionCaveatProclaimId?: number;
        titleDeedSectionDescription?: string;
        titleDeedSectionReference?: number;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
        type?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.CaveatProclaim;
        typeDescription?: string;
    }
    interface CaveatProclaimDefinitionContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        id?: number;
        name?: string;
    }
    interface CityContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        id?: number;
        name?: string;
    }
    interface CorporatePersonContract extends BOA.Types.Kernel.Inquiry.TAKPAS.PersonContract {
        corporatePersonType?: string;
        hasForeignCapital?: boolean;
        hasForeignRepresentative?: boolean;
        registryNumber?: string;
        taxNumber?: string;
    }
    interface CountryContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        id?: number;
        name?: string;
        officialName?: string;
    }
    interface DailyWageContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        dailyWageNumber?: number;
        date?: Date;
        id?: number;
        institution?: string;
    }
    interface DistrictContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        cityId?: number;
        id?: number;
        name?: string;
    }
    interface HousingSupportResultContract extends BOA.Common.Types.ContractBase {
        canGetSupport?: boolean;
        message?: string;
    }
    interface ImmovablePropertyContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        accessoryCount?: number;
        annexCount?: number;
        area?: number;
        city?: string;
        district?: string;
        id?: number;
        independentUnit?: BOA.Types.Kernel.Inquiry.TAKPAS.IndependentUnitContract;
        innovationCount?: number;
        institution?: string;
        islandNumber?: string;
        pageNumber?: string;
        parcelNumber?: string;
        permanentIndependentRight?: BOA.Types.Kernel.Inquiry.TAKPAS.PermanentIndependentRightContract;
        propertyType?: string;
        sectionNumber?: string;
        site?: string;
        street?: string;
        subImmovablePropertyId?: number;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
        type?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.ImmovableProperty;
        typeDescription?: string;
        volumeNumber?: string;
    }
    interface ImmovablePropertyDetailInfoContract extends BOA.Types.Kernel.Inquiry.TAKPAS.ImmovablePropertyContract {
        accessory?: BOA.Types.Kernel.Inquiry.TAKPAS.InquiryResult<BOA.Types.Kernel.Inquiry.TAKPAS.AccessoryContract[]>;
        annex?: BOA.Types.Kernel.Inquiry.TAKPAS.InquiryResult<BOA.Types.Kernel.Inquiry.TAKPAS.AnnexContract[]>;
        caveatProclaim?: BOA.Types.Kernel.Inquiry.TAKPAS.InquiryResult<BOA.Types.Kernel.Inquiry.TAKPAS.CaveatProclaimContract[]>;
        innovation?: BOA.Types.Kernel.Inquiry.TAKPAS.InquiryResult<BOA.Types.Kernel.Inquiry.TAKPAS.InnovationContract[]>;
        share?: BOA.Types.Kernel.Inquiry.TAKPAS.InquiryResult<BOA.Types.Kernel.Inquiry.TAKPAS.ShareContract[]>;
    }
    interface ImmovablePropertyExContract extends BOA.Types.Kernel.Inquiry.TAKPAS.ImmovablePropertyContract {
        landDenominator?: string;
        landShare?: string;
        name?: string;
        surname?: string;
    }
    interface ImmovablePropertyInfoContract extends BOA.Types.Kernel.Inquiry.TAKPAS.ImmovablePropertyContract {
        immovablePropertyList?: BOA.Types.Kernel.Inquiry.TAKPAS.InquiryResult<BOA.Types.Kernel.Inquiry.TAKPAS.ImmovablePropertyContract[]>;
        shareList?: BOA.Types.Kernel.Inquiry.TAKPAS.InquiryResult<BOA.Types.Kernel.Inquiry.TAKPAS.ShareContract[]>;
    }
    interface ImmovablePropertyKindContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        explanation?: string;
        id?: number;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
    }
    interface IndependentUnitContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        blockNumber?: string;
        entrance?: string;
        floor?: string;
        id?: number;
        independentUnitType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.IndependentUnit;
        independentUnitTypeDescription?: string;
        landDenominator?: number;
        landShare?: number;
        number?: string;
    }
    interface InnovationContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        definition?: string;
        id?: number;
        innovationType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Innovation;
        innovationTypeDescription?: string;
        shareList?: BOA.Types.Kernel.Inquiry.TAKPAS.ShareContract[];
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
    }
    interface InquiryResult<T> extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        result?: T;
    }
    interface InstitutionContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        districtId?: number;
        id?: number;
        institutionType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Institution;
        institutionTypeDescription?: string;
        name?: string;
        status?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Status;
        statusDescription?: string;
    }
    interface MehodInfoContract extends BOA.Common.Types.ContractBase {
        bOAObjectType?: any;
        methodType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.MethodName;
        tAKBISObjectType?: any;
    }
    interface OrganizationContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        id?: number;
        name?: string;
        officialName?: string;
    }
    interface Owner extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        id?: number;
        ownerSummaryInformation?: string;
        ownerType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Owner;
        ownerTypeDescription?: string;
    }
    interface PermanentIndependentRightContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        endDate?: Date;
        establishmentForm?: number;
        id?: number;
        periodExplanation?: string;
        sentence?: string;
        startDate?: Date;
    }
    interface PersonContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        id?: number;
        name?: string;
        personType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Person;
        status?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Status;
        statusDescription?: string;
    }
    interface PledgeBeneficiaryContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        amount?: number;
        denominator?: number;
        id?: number;
        owner?: BOA.Types.Kernel.Inquiry.TAKPAS.Owner;
        share?: number;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
    }
    interface PledgeContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        amount?: number;
        amountUnit?: string;
        conditions?: string;
        creditType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Credit;
        creditTypeDescription?: string;
        degree?: number;
        explanation?: string;
        firstEstablishmentProcess?: BOA.Types.Kernel.Inquiry.TAKPAS.ProcessContract;
        id?: number;
        interest?: string;
        isConsecutive?: boolean;
        maturity?: string;
        pledgeBeneficiaryList?: BOA.Types.Kernel.Inquiry.TAKPAS.PledgeBeneficiaryContract[];
        pledgeType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Pledge;
        pledgeTypeDescription?: string;
        rightForFreeDegreeUtilization?: boolean;
        sequenceNumber?: number;
        shareId?: number;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
    }
    interface ProcessContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        cancellationExplanation?: string;
        dailyWage?: BOA.Types.Kernel.Inquiry.TAKPAS.DailyWageContract;
        id?: number;
        processDefinition?: string;
        processStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.ProcessStatus;
        processStatusDescription?: string;
        startingTypeName?: string;
    }
    interface RealPersonContract extends BOA.Types.Kernel.Inquiry.TAKPAS.PersonContract {
        birthDate?: Date;
        birthPlace?: string;
        deathDate?: Date;
        fatherName?: string;
        gender?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Gender;
        genderDescription?: string;
        identityNumber?: number;
        identitySerialNumber?: string;
        motherName?: string;
        sequenceNumber?: string;
        surname?: string;
        volumeNumber?: string;
    }
    interface ShareContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASProcessBaseContract {
        denominator?: string;
        id?: number;
        immovablePropertyId?: number;
        owner?: BOA.Types.Kernel.Inquiry.TAKPAS.Owner;
        participationNumber?: number;
        share?: string;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionStatusDescription?: string;
        type?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Share;
        typeDescription?: string;
    }
    interface StreetContract extends BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASContractBase {
        districtId?: number;
        id?: number;
        institutionId?: number;
        name?: string;
        status?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Status;
        statusDescription?: string;
        type?: string;
    }
    interface TAKPASConstants {
    }
    interface TAKPASContractBase extends BOA.Common.Types.ContractBase {
        cacheDate?: Date;
        gottenFromCache?: boolean;
    }
    interface TAKPASInquiryArgument extends BOA.Common.Types.ContractBase {
        accessoryList?: BOA.Types.Kernel.Inquiry.TAKPAS.AccessoryContract[];
        accountNumber?: number;
        annexList?: BOA.Types.Kernel.Inquiry.TAKPAS.AnnexContract[];
        caveatProclaimList?: BOA.Types.Kernel.Inquiry.TAKPAS.CaveatProclaimContract[];
        identityNumber?: string;
        immovablePropertyList?: BOA.Types.Kernel.Inquiry.TAKPAS.ImmovablePropertyContract[];
        immovableShareList?: BOA.Types.Kernel.Inquiry.TAKPAS.ShareContract[];
        innovationList?: BOA.Types.Kernel.Inquiry.TAKPAS.InnovationContract[];
        methodList?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.MethodName[];
        pledgeList?: BOA.Types.Kernel.Inquiry.TAKPAS.PledgeContract[];
        shareList?: BOA.Types.Kernel.Inquiry.TAKPAS.ShareContract[];
    }
    interface TAKPASInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        blockNumber?: string;
        businessKey?: number;
        cityId?: number;
        customerName?: string;
        districtId?: number;
        entrance?: string;
        fatherName?: string;
        floor?: string;
        identityNumber?: string;
        immovablePropertyId?: number;
        immovablePropertyType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.ImmovableProperty;
        independentUnitNumber?: string;
        institutionId?: number;
        institutionType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Institution;
        isCome?: boolean;
        islandNumber?: string;
        isOnlineQuery?: boolean;
        motherName?: string;
        name?: string;
        ownerId?: number;
        ownerIdList?: number[];
        ownerType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Owner;
        pageNumber?: string;
        parcelNumber?: string;
        queryWithLocationInfo?: boolean;
        reference?: number;
        registryType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Registry;
        shareId?: number;
        statusType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.Status;
        streetId?: number;
        streetIdList?: number[];
        surname?: string;
        titleDeedSectionStatus?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSectionStatus;
        titleDeedSectionType?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.TitleDeedSection;
        volumeNumber?: string;
    }
    interface TAKPASInquiryResultContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bOAObject?: any;
        businessKey?: number;
        customerName?: string;
        encryptedInquiryResult?: string;
        errorMessage?: string;
        hostName?: string;
        inquiryKey?: string;
        inquiryResult?: string;
        isOnlineQuery?: boolean;
        isSuccessful?: boolean;
        methodName?: BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes.MethodName;
        onlineInquiryId?: number;
        onlineQueryDate?: Date;
        resourceCode?: string;
        systemDate?: Date;
        tAKPASInquiryResultId?: number;
        taxNumber?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userMail?: string;
        userName?: string;
    }
    interface TAKPASInquiryResultFilterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        customerName?: string;
        endDate?: Date;
        inquiryKey?: string;
        isHousingQuery?: boolean;
        isOnlineQuery?: boolean;
        isSuccessful?: boolean;
        methodName?: string;
        startDate?: Date;
        taxNumber?: string;
        userName?: string;
    }
    interface TAKPASProcessBaseContract extends BOA.Common.Types.ContractBase {
        cancelmentProcess?: BOA.Types.Kernel.Inquiry.TAKPAS.ProcessContract;
        establishmentProcess?: BOA.Types.Kernel.Inquiry.TAKPAS.ProcessContract;
    }
    interface TAKPASTypes {
    }
}
declare namespace BOA.Types.Kernel.Inquiry.TAKPAS.TAKPASTypes {
    export const enum Annex {
        None = 0,
        CoalBunker = 1,
        Garage = 2,
        Warehouse = 3,
        Other = 4
    }
    export const enum CaveatProclaim {
        None = 0,
        Caveat = 1,
        Proclaim = 2,
        Easement = 3
    }
    export const enum Credit {
        None = 0,
        HousingCredit = 1,
        CommercialCredit = 2,
        OperationCredit = 3,
        AgainstLiability = 4,
        AgricultureCredit = 5,
        ConsumerCredit = 6,
        OtherCredit = 7,
        Leasing = 8,
        ColleteralHypothec = 9
    }
    export const enum Gender {
        None = 0,
        Male = 1,
        Female = 2,
        Unknown = 3
    }
    export const enum ImmovableProperty {
        None = 0,
        MainProperty = 1,
        IndependentUnit = 2,
        PermanentIndependentRight = 3,
        PublicProperty = 4
    }
    export const enum IndependentUnit {
        None = 0,
        CondominiumOwnership = 1,
        Easement = 2,
        TimeShare = 3
    }
    export const enum Innovation {
        None = 0,
        Tree = 1,
        House = 2,
        Annex = 3,
        FisheryAndKillingArea = 4,
        Other = 5
    }
    export const enum Institution {
        Item0 = 0,
        HeadOffice = 1,
        DistrictOffice = 2,
        LandOffice = 3,
        CadastralOffice = 4,
        CadastralProvostship = 5
    }
    export const enum MethodName {
        GetirAlanTasinmazIDDen = 0,
        GetirAnaTasinmaz = 1,
        GetirBagimsizBolum = 2,
        GetirCinsTasinmazIDDen = 3,
        GetirDMH = 4,
        GetirTasinmazCiltSayfaDan = 5,
        GetirTasinmazIDDen = 6,
        GetirTasinmazMalikBilgisinden = 7,
        GetirUstTasinmazSayisi = 8,
        GetirSerhBeyan = 9,
        GetirSerhBeyanLehtarIDDen = 10,
        GetirHisseMalikIDDen = 11,
        GetirHisseTasinmazIDDen = 12,
        GetirTuzelKisi = 13,
        GetirTuzelKisiIDDen = 14,
        GetirGercekKisi = 15,
        GetirGercekKisiIDDen = 16,
        GetirRehinHisseIDDen = 17,
        GetirRehinLehtarIDDen = 18,
        GetirEklenti = 19,
        GetirMuhdesat = 20,
        GetirMuhdesatMalikIDDen = 21,
        GetirTeferruat = 22,
        GetirHisseHaraket = 23,
        GetirTasinmazHaraket = 24,
        GetirAdaNumaralari = 25,
        GetirParselNumaralari = 26,
        GetirIlTum = 27,
        GetirIlceIlIDDen = 28,
        GetirKurumIlceIDDen = 29,
        GetirKurumIlIDDen = 30,
        GetirMahalleIlceIDDen = 31,
        GetirMahalleKurumIDDen = 32,
        GetirUlkeTum = 33,
        GetirOrganizasyon = 34,
        GetirSerhBeyanTanim = 35
    }
    export const enum Owner {
        None = 0,
        RealPerson = 1,
        CorporatePerson = 2,
        ImmovableProperty = 3,
        Country = 4,
        Village = 5,
        Organization = 6,
        Parcel = 7,
        POLOwnerSet = 8,
        City = 9,
        ProcessRealPerson = 10,
        ProcessCorporatePerson = 11
    }
    export const enum Person {
        Real = 0,
        Corporate = 1
    }
    export const enum Pledge {
        None = 0,
        Hypothec = 1,
        NegotiableLandCharge = 2,
        MortgageCertificate = 3,
        ProtectedAmount = 4,
        EmptyPledge = 5,
        LegalPledge = 6,
        FakePledge = 7
    }
    export const enum ProcessStatus {
        Uncertain = 0,
        Continuing = 1,
        Finished = 2,
        Cancelled = 3
    }
    export const enum QueryType {
        Default = 0,
        Online = 1,
        Offline = 2
    }
    export const enum Registry {
        MainProperty = 0,
        CondominiumOwnership = 1
    }
    export const enum Share {
        None = 0,
        Mutual = 1,
        Participation = 2
    }
    export const enum Status {
        All = 0,
        Active = 1,
        Passive = 2
    }
    export const enum TitleDeedSection {
        None = 0,
        Ground = 1,
        GroundShare = 2,
        GroundInnovation = 3,
        GroundInnovationOwner = 4,
        CaveatProclaimOwner = 5,
        Person = 6,
        CorporatePerson = 7,
        StreetVillage = 8,
        Country = 9,
        Organization = 10,
        Caveat = 11,
        Proclaim = 12,
        Pledge = 13,
        PledgeAmount = 14,
        Easement = 15
    }
    export const enum TitleDeedSectionStatus {
        All = 0,
        Draft = 1,
        Active = 2,
        Passive = 3
    }
}
declare namespace BOA.Types.Kernel.Insurance.Agent {
    export const enum AddressType {
        Home = 7,
        Work = 3,
        Contact = 1
    }
    export const enum IdentityType {
        G = 1,
        T = 2
    }
    export const enum LifePolicyOpenMode {
        FromProposal = 0,
        FromProject = 1,
        ExistingRecord = 2
    }
    export const enum PhoneType {
        GSM = 3,
        LandLine = 1
    }
    export const enum QueryStatus {
        Error = 0,
        ActiveAndSame = 1,
        ActiveAndDifferent = 2,
        NoRecordInResult = 3,
        Passive = 4,
        CouldNotFindPolicy = 5
    }
    interface CallCenterBlackListContract {
        accountNumber?: string;
        description?: string;
        groupId?: number;
        id?: number;
        phoneNumber?: string;
        updateDate?: Date;
        updateUserName?: string;
    }
    interface CallCenterCampaignInfoContract {
        campaignId?: number;
        groupId?: number;
    }
    interface CallCenterContract {
        campaignId?: number;
        communicationPhone?: string;
        customerId?: string;
        customerName?: string;
        gSM?: string;
        homePhone?: string;
        phone4?: string;
        phone5?: string;
        renewalFollowIdList?: number[];
        workPhone?: string;
    }
    interface CollateralInsuranceExceptionContract extends BOA.Common.Types.ContractBase {
        block?: string;
        collateralId?: number;
        collateralInsuranceExceptionId?: number;
        description?: string;
        hostName?: string;
        independentSection?: number;
        insuranceProductCode?: string;
        insuranceProductCodeDefinition?: string;
        isConditionalApproval?: number;
        isRequired?: number;
        mortgageDegree?: number;
        realEstateTypeName?: string;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ConstParameter {
    }
    interface CreditRiskByDateContract extends BOA.Common.Types.ContractBase {
        riskAmount?: number;
        riskDate?: Date;
        sequenceNumber?: number;
    }
    interface CustomersToCallContract {
        callCenterNotSentReason?: BOA.Types.Kernel.Insurance.Agent.InsuranceConstants.CallCenterNotSentReason;
        callCenterRecordId?: number;
        citizenship?: number;
        customerId?: number;
        customerName?: string;
        hasAnotherPolicy?: number;
        isAlreadyInCallCenter?: number;
        isNearTheEndDate?: number;
        personType?: number;
        ptf?: string;
        renewalFollowId?: number;
    }
    interface InsuranceConstants {
    }
    interface InsurancePolicyContract extends BOA.Common.Types.ContractBase {
        accrual?: string;
        addendumNo?: number;
        addendumReasonId?: string;
        agencyName?: string;
        area?: number;
        arrivalCountry?: string;
        assetProjectNumber?: string;
        block?: string;
        brandId?: number;
        buildingName?: string;
        buildingNo?: string;
        businessKey?: number;
        channelId?: number;
        chassisNo?: string;
        city?: string;
        collateralDivitId?: string;
        collateralDivitInstanceId?: string;
        collateralFlowId?: string;
        collateralId?: number;
        collectionType?: string;
        commission?: number;
        creditAccountNumber?: number;
        creditLetterNo?: string;
        daskPolicyNumber?: number;
        departureCountry?: string;
        district?: string;
        estateUsageTypeId?: number;
        expertiseReportId?: number;
        flatNo?: string;
        goodsFEC?: number;
        goodsType?: string;
        goodsValue?: number;
        hostIP?: string;
        hostName?: string;
        instanceId?: number;
        insuranceAmount?: number;
        insuranceCompany?: string;
        insurancePolicyId?: number;
        insuranceReasonId?: number;
        insuranceSourceId?: number;
        insuredAccountNumber?: number;
        insuredName?: string;
        insuredPhoneNumber?: string;
        insuredTaxNumber?: string;
        loadingDate?: Date;
        lossPayeeBankId?: number;
        lossPayeeBranchId?: number;
        modelId?: number;
        modelYear?: number;
        motorNo?: string;
        neovaProductCode?: string;
        neovaSystemDate?: Date;
        netPremium?: number;
        parcel?: string;
        placeOfProcess?: number;
        plate?: string;
        plateNo?: string;
        policyBranchId?: number;
        policyEndDate?: Date;
        policyExplanation?: string;
        policyFEC?: number;
        policyFER?: number;
        policyHolderAccountNumber?: number;
        policyHolderName?: string;
        policyHolderPhoneNumber?: string;
        policyHolderTaxNumber?: string;
        policyIssuedDate?: Date;
        policyNo?: string;
        policyStartDate?: Date;
        policySysDate?: Date;
        premium?: number;
        prePolicyNumber?: number;
        productId?: string;
        proposalStatus?: number;
        referenceUserName?: string;
        renewalNumber?: number;
        resourceCode?: string;
        status?: number;
        systemDate?: Date;
        tramerInquiryKey?: string;
        tranDate?: Date;
        transportTypeId?: string;
        uavtNumber?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vehicleInsuranceAmount?: number;
        vehicleNo?: string;
        vehicleTypeId?: number;
        vehicleUsageTypeId?: number;
    }
    interface InsuranceVehicleInfoContract extends BOA.Common.Types.ContractBase {
        asbisRegistrationReferenceNumber?: string;
        chassisNo?: string;
        eGMReferenceNumber?: string;
        motorNo?: string;
        registrationSerialNumber?: string;
    }
    interface IntegrationSyncContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        errorMessage?: string;
        firmCode?: string;
        integrationSyncId?: number;
        name?: string;
        reasonCode?: string;
        sourceDataId?: number;
        status?: number;
        systemDate?: Date;
        type?: string;
        userName?: string;
    }
    interface LifePolicyCancellationContract extends BOA.Common.Types.ContractBase {
        cancellationDate?: Date;
        cancelReason?: string;
        cancelReasonCode?: string;
        creditProjectId?: number;
        documentForCancellation?: BOA.Types.Kernel.Insurance.Agent.LifePolicyDocumentContract;
        policyNumber?: number;
    }
    interface LifePolicyCollectionDurationContract extends BOA.Common.Types.ContractBase {
        duration?: number;
        period?: number;
        premium?: number;
    }
    interface LifePolicyCollectionInfo extends BOA.Common.Types.ContractBase {
        journalLogActive?: boolean;
        kTCreditCard?: BOA.Types.Kernel.Insurance.Agent.LifePolicyCollectionItemCreditCardContract;
        otherBankCreditCard?: BOA.Types.Kernel.Insurance.Agent.LifePolicyCollectionItemCreditCardContract;
        premiumCollectionDuration?: number;
        premiumCollectionPeriod?: number;
        selectedAccount?: BOA.Types.Kernel.Insurance.Agent.LifePolicyCollectionItemAccountContract;
        selectedCollectionMethod?: string;
    }
    interface LifePolicyCollectionItemAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountNumberFull?: string;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        creditCardNumber?: string;
        currencyCode?: string;
    }
    interface LifePolicyCollectionItemCreditCardContract extends BOA.Common.Types.ContractBase {
        cCVCode?: string;
        creditCardNumber?: string;
        expiryDate?: string;
        expiryMonth?: string;
        expiryYear?: string;
        journalLogActive?: boolean;
        maskedCardNumber?: string;
    }
    interface LifePolicyContract extends BOA.Common.Types.ContractBase {
        beginPolicyEndDate?: Date;
        beginPolicyEntryDate?: Date;
        beginPolicyStartDate?: Date;
        beginProposalEntryDate?: Date;
        businessKey?: number;
        cancellationDate?: Date;
        cancelReason?: string;
        cancelReasonCode?: string;
        channelId?: number;
        collateralAmount?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionBranchId?: number;
        collectionCreditCardNumber?: string;
        collectionDuration?: number;
        collectionMethod?: string;
        collectionPeriod?: number;
        commission?: number;
        creditAmountWithProfit?: number;
        creditAverageMaturityDate?: Date;
        creditFecId?: number;
        creditInstallmentCount?: number;
        creditPrincipalAmount?: number;
        creditProductCode?: string;
        creditProjectId?: number;
        finalPolicyEndDate?: Date;
        finalPolicyEntryDate?: Date;
        finalPolicyStartDate?: Date;
        finalProposalEntryDate?: Date;
        groupCode?: string;
        hostName?: string;
        insuranceDurationByMonth?: number;
        insuredAccountNumber?: number;
        insuredAddressId?: number;
        insuredAddressText?: string;
        insuredBirthCityId?: number;
        insuredEducationalStatus?: string;
        insuredEmailAddress?: string;
        insuredIdentityNumber?: string;
        insuredIncomeRange?: string;
        insuredPersonId?: number;
        insuredPhoneNumber?: string;
        isInsuredSmoker?: string;
        issueDate?: Date;
        lifePolicyId?: number;
        lifePolicyServiceCallId?: number;
        mainPolicyType?: number;
        operationUserCode?: string;
        payerAccountNumber?: number;
        payerAddressId?: number;
        payerAddressText?: string;
        payerBirthCityId?: number;
        payerEducationalStatus?: string;
        payerEmailAddress?: string;
        payerIncomeRange?: string;
        payerPersonId?: number;
        payerPhoneNumber?: string;
        payerTaxNumber?: string;
        policyBranchId?: number;
        policyEndDate?: Date;
        policyNumber?: number;
        policyStartDate?: Date;
        policyState?: number;
        policyType?: string;
        premium?: number;
        proposalNumber?: number;
        proposalStatus?: string;
        referenceUser?: string;
        referenceUserName?: string;
        resourceCode?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tranDate?: Date;
        transactionBranchId?: number;
        unitId?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        warningMessage?: string;
    }
    interface LifePolicyCreditInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        averageMaturityDate?: Date;
        branchId?: number;
        creditAmountWithProfit?: number;
        creditFecId?: number;
        creditInstallments?: BOA.Types.Kernel.Insurance.Agent.ProjectInstallmentContract[];
        creditPayBackPlanId?: number;
        creditPrincipalAmount?: number;
        creditProjectId?: number;
        creditProposalId?: number;
        creditRisksByDate?: BOA.Types.Kernel.Insurance.Agent.CreditRiskByDateContract[];
        installmentCount?: number;
        insuranceDurationByMonth?: number;
        isFixedMethodCalculation?: boolean;
        kehasCreditProductCode?: string;
        period?: number;
        personId?: number;
        policyStartDate?: Date;
        productCode?: string;
        projectStatus?: number;
    }
    interface LifePolicyDocumentContract extends BOA.Common.Types.ContractBase {
        advantageOverOrderNumber?: number;
        claimDocumentCode?: string;
        claimDocumentId?: number;
        claimDocumentName?: string;
        customerType?: string;
        divitDocId?: string;
        documentStatus?: string;
        documentStatusDescription?: string;
        fileData?: number[];
        fileExtension?: string;
        filePath?: string;
        isMandatory?: boolean;
        policyNumber?: number;
        proposalNumber?: number;
    }
    interface LifePolicyGetPriceContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        creditInformation?: BOA.Types.Kernel.Insurance.Agent.LifePolicyCreditInfoContract;
        insuredPersonalInformation?: BOA.Types.Kernel.Insurance.Agent.LifePolicyPersonInfoContract;
        policyType?: string;
    }
    interface LifePolicyGetProposalContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        collectionInfo?: BOA.Types.Kernel.Insurance.Agent.LifePolicyCollectionInfo;
        creditInfo?: BOA.Types.Kernel.Insurance.Agent.LifePolicyCreditInfoContract;
        groupCode?: string;
        insuredAddress?: BOA.Types.Kernel.Customer.AddressContract;
        insuredEmail?: BOA.Types.Kernel.Customer.PersonEmailContract;
        insuredInfo?: BOA.Types.Kernel.Insurance.Agent.LifePolicyPersonInfoContract;
        isPayerSame?: boolean;
        journalLogActive?: boolean;
        mediatorBranchId?: number;
        mediatorUserId?: number;
        payerAddress?: BOA.Types.Kernel.Customer.AddressContract;
        payerEmail?: BOA.Types.Kernel.Customer.PersonEmailContract;
        payerInfo?: BOA.Types.Kernel.Insurance.Agent.LifePolicyPersonInfoContract;
        policyBranchId?: number;
        policyType?: string;
        referenceUserName?: string;
        resourceCode?: string;
        transactionBranchId?: number;
    }
    interface LifePolicyHealthDeclarationContract extends BOA.Common.Types.ContractBase {
        answer?: string;
        comment?: string;
        lifePolicyId?: number;
        question?: string;
        questionCode?: string;
    }
    interface LifePolicyHealthDeclarationGetQuestionsContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        creditProjectId?: number;
        insuranceDurationByMonth?: number;
        insuredAccountNumber?: number;
        insuredIdentityNumber?: string;
        kehasCreditProductCode?: string;
        policyStartDate?: Date;
        policyType?: string;
    }
    interface LifePolicyOpenContract extends BOA.Common.Types.ContractBase {
        openMode?: BOA.Types.Kernel.Insurance.Agent.LifePolicyOpenMode;
        proposalPayBackPlanOrProjectId?: number;
    }
    interface LifePolicyPdfContract extends BOA.Common.Types.ContractBase {
        policyObject?: number[];
    }
    interface LifePolicyPersonInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        addressList?: BOA.Types.Kernel.Customer.AddressContract[];
        birthCityId?: number;
        birthDate?: Date;
        birthPlace?: string;
        citizenshipCountryCode?: string;
        citizenshipCountryId?: number;
        commercialName?: string;
        creditCardList?: BOA.Types.Kernel.Insurance.Agent.LifePolicyCollectionItemCreditCardContract[];
        educationalStatus?: string;
        emailAddressList?: BOA.Types.Kernel.Customer.PersonEmailContract[];
        fathersName?: string;
        gender?: number;
        genderName?: string;
        healthDeclarationList?: BOA.Types.Kernel.Insurance.Agent.LifePolicyHealthDeclarationContract[];
        identityNumber?: string;
        identityType?: string;
        incomeRange?: string;
        isSmoker?: string;
        name?: string;
        personId?: number;
        personType?: number;
        phoneNumberList?: BOA.Types.Kernel.Insurance.Agent.PhoneContract[];
        professionCode?: number;
        professionName?: string;
        sectorId?: string;
        surname?: string;
    }
    interface LifePolicyPriceContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        collateralAmount?: number;
        commission?: number;
        creditAmountWithProfit?: number;
        creditAverageMaturityDate?: Date;
        creditFecId?: number;
        creditInstallmentCount?: number;
        creditPayBackPlanId?: number;
        creditPrincipalAmount?: number;
        creditProductCode?: string;
        creditProposalId?: number;
        hostName?: string;
        insuranceDurationByMonth?: number;
        insuredIdentityNumber?: string;
        lifePolicyPriceId?: number;
        lifePolicyServiceCallId?: number;
        premium?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LifePolicyRequiredDocumentResultContract extends BOA.Common.Types.ContractBase {
        canBeApproved?: boolean;
        requiredDocuments?: BOA.Types.Kernel.Insurance.Agent.LifePolicyDocumentContract[];
    }
    interface LifePolicyServiceCallContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        callTime?: Date;
        callType?: string;
        creditProjectId?: number;
        creditProposalId?: number;
        errorCode?: string;
        errorMessage?: string;
        hostName?: string;
        identityNumber?: string;
        lifePolicyServiceCallId?: number;
        policyBranchId?: number;
        policyNumber?: number;
        requestXML?: string;
        responseTime?: Date;
        responseXML?: string;
        serviceResult?: BOA.Types.Kernel.Insurance.Agent.LifePolicyServiceResultBaseContract;
        systemDate?: Date;
        tranDate?: Date;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LifePolicyServiceResultBaseContract extends BOA.Common.Types.ContractBase {
        collateralAmount?: number;
        commissionAmount?: number;
        errorCode?: string;
        errorMessage?: string;
        policyEndDate?: Date;
        policyNumber?: number;
        policyStartDate?: Date;
        policyType?: string;
        premiumAmount?: number;
        proposalNumber?: number;
        proposalStatus?: string;
    }
    interface LifePolicyServiceResultContract extends BOA.Types.Kernel.Insurance.Agent.LifePolicyServiceResultBaseContract {
        callTime?: Date;
        requestXML?: string;
        responseTime?: Date;
        responseXML?: string;
    }
    interface OpenBranchInformationContract extends BOA.Common.Types.ContractBase {
        addressText?: string;
        branchId?: string;
        city?: string;
        district?: string;
        eMail?: string;
        faxNumber?: string;
        name?: string;
        openDate?: Date;
        phoneNumber?: string;
        reginalOffice?: string;
        region?: string;
        registryOfficeNo?: string;
        taxNumber?: string;
        taxOffice?: string;
        tradeRegistryNo?: string;
    }
    interface OutgoingServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        outgoingServiceCallId?: number;
        policyNumber?: number;
        requestDate?: Date;
        requestXml?: string;
        responseDate?: Date;
        responseXml?: string;
        resultCode?: string;
        resultMessage?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface PhoneContract extends BOA.Common.Types.ContractBase {
        addressType?: number;
        addressTypeName?: string;
        isDefault?: boolean;
        phoneDisplayText?: string;
        phoneNumber?: string;
        phoneType?: number;
    }
    interface PolicyListOpenContract {
        creditAccountNumber?: number;
        productCode?: string;
    }
    interface PolicyLoansFlowContract extends BOA.Common.Types.ContractBase {
        commandName?: string;
        instanceId?: number;
        stateId?: number;
    }
    interface PolicyLoansRelationContract extends BOA.Common.Types.ContractBase {
        independentSection?: number;
        insurancePolicyId?: number;
        isRowActive?: boolean;
        policyLoansRelationId?: number;
        sourceId?: number;
        sourceType?: number;
        systemDate?: Date;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PolicyOrderBrowseContract extends BOA.Common.Types.ContractBase {
        alertDescription?: string;
        alertNo?: number;
        area?: number;
        brandId?: number;
        brandName?: string;
        businessKey?: number;
        channelId?: number;
        chassisNo?: string;
        city?: string;
        cityName?: string;
        creditAmount?: number;
        district?: string;
        districtName?: string;
        insuranceType?: string;
        insuredAccountNumber?: number;
        insuredIdentityNo?: string;
        insuredName?: string;
        insuredPhoneNumber?: string;
        isPolicyAccepted?: boolean;
        itemId?: string;
        modelId?: number;
        modelName?: string;
        modelYear?: number;
        moduleReference?: string;
        motorNo?: string;
        plate?: string;
        plateType?: number;
        policyBranchName?: string;
        policyHolderAccountNumber?: number;
        policyHolderIdentityNo?: string;
        policyHolderName?: string;
        policyHolderPhoneNumber?: string;
        policyNo?: string;
        policyOrderId?: number;
        productCode?: string;
        resourceCode?: string;
        systemDate?: Date;
        totalPremium?: number;
        tranDate?: Date;
        vehicleUsageTypeId?: number;
        vehicleUsageTypeName?: string;
    }
    interface PolicyOrderContract extends BOA.Common.Types.ContractBase {
        alertDescription?: string;
        alertNumber?: number;
        area?: number;
        block?: string;
        brandId?: number;
        buildingName?: string;
        buildingNo?: string;
        businessKey?: number;
        channelId?: number;
        chassisNo?: string;
        city?: string;
        commonBrandCode?: string;
        creditAmount?: number;
        district?: string;
        estateUsageTypeId?: number;
        flatNo?: string;
        hostName?: string;
        informationList?: BOA.Types.Kernel.Insurance.Agent.PolicyOrderInformation[];
        insuranceCostOfGoods?: string;
        insuranceType?: string;
        insuredAccountNumber?: number;
        insuredIdentityNo?: string;
        insuredIdentityType?: number;
        insuredName?: string;
        insuredPhoneNumber?: string;
        isPolicyAccepted?: boolean;
        itemId?: string;
        modelId?: number;
        modelYear?: number;
        modelYearCode?: string;
        moduleReference?: string;
        motorNo?: string;
        parcel?: string;
        plate?: string;
        plateBody?: string;
        plateCityCode?: string;
        plateType?: number;
        policyBankId?: number;
        policyBranchId?: number;
        policyHolderAccountNumber?: number;
        policyHolderIdentityNo?: string;
        policyHolderIdentityType?: number;
        policyHolderName?: string;
        policyHolderPhoneNumber?: string;
        policyNo?: string;
        policyOrderId?: number;
        processType?: BOA.Types.Kernel.Insurance.Agent.InsuranceConstants.ProposalStatus;
        productCode?: string;
        resourceCode?: string;
        statisticList?: BOA.Types.Kernel.Insurance.Agent.PolicyOrderStatistic[];
        systemDate?: Date;
        totalPremium?: number;
        tramerInquiryKey?: string;
        tranDate?: Date;
        uavtNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        vehicleInsuranceAmount?: number;
        vehicleUsageTypeId?: string;
    }
    interface PolicyOrderExternalContract extends BOA.Common.Types.ContractBase {
        area?: number;
        brand?: number;
        chassisNo?: string;
        city?: string;
        creditAmount?: number;
        district?: string;
        insuranceCostOfGoods?: string;
        insuranceType?: string;
        insuredAccountNumber?: number;
        insuredByAccountNumber?: number;
        insuredByTCKN?: string;
        insuredTCKN?: string;
        itemId?: string;
        model?: number;
        modelYear?: number;
        moduleReference?: string;
        motorNo?: string;
        plateBody?: string;
        plateCityCode?: string;
        plateNumber?: string;
        plateType?: number;
        vehicleUsageId?: string;
    }
    interface PolicyOrderFilterContract extends BOA.Common.Types.ContractBase {
        creditAccountNumber?: number;
        insuranceType?: string;
        insuredAccountNumber?: number;
        insuredTaxNumber?: string;
        insuredTCKN?: string;
        moduleReference?: string;
        policyHolderAccountNumber?: number;
        policyHolderTaxNumber?: string;
        policyHolderTCKN?: string;
        policyNo?: string;
        tranDateFrom?: Date;
        tranDateTo?: Date;
    }
    interface PolicyOrderInformation extends BOA.Common.Types.ContractBase {
        insuranceType?: string;
        name?: string;
        policyOrderId?: number;
        value?: string;
    }
    interface PolicyOrderResultContract extends BOA.Common.Types.ContractBase {
        alertDescription?: string;
        alertNo?: number;
        policyNumber?: string;
        totalPremium?: number;
    }
    interface PolicyOrderStatistic extends BOA.Common.Types.ContractBase {
        code?: string;
        insuranceType?: string;
        policyOrderId?: number;
        value?: string;
        valueDescription?: string;
    }
    interface PolicySummary extends BOA.Common.Types.ContractBase {
        insuranceType?: string;
        insuranceTypeName?: string;
        isCustomerAccepted?: boolean;
        isInsuranceSelected?: boolean;
        isRequired?: boolean;
        policyNo?: string;
        renewPolicyOrder?: boolean;
        totalPremium?: number;
    }
    interface ProductInsuranceRelationContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        insuranceName?: string;
        insuranceType?: string;
        isActive?: boolean;
        isMandatory?: boolean;
        productCode?: string;
        productInsuranceRelationId?: number;
        productName?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProductInsuranceRelationFilterContract extends BOA.Common.Types.ContractBase {
        insuranceType?: string;
        isActive?: boolean;
        isMandatory?: boolean;
        productCode?: string;
    }
    interface ProjectInstallmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        averageMaturityDate?: Date;
        branchId?: number;
        calculationMethod?: number;
        collectionStatus?: string;
        creditAmountWithoutProfit?: number;
        creditAmountWithProfit?: number;
        debtFEC?: number;
        maturityDate?: Date;
        orderNumber?: number;
        payBackPlanId?: number;
        period?: number;
        personId?: number;
        principalAmount?: number;
        productCode?: string;
        projectId?: number;
        projectStatus?: number;
        proposalId?: number;
        remainingPrincipalAmount?: number;
        taxNumber?: string;
    }
    interface RenewalFollowContract extends BOA.Common.Types.ContractBase {
        area?: number;
        assetProjectNumber?: string;
        assignedUserTypeId?: number;
        availabilityDate?: Date;
        commission?: number;
        currencyType?: string;
        demandDate?: Date;
        description?: string;
        insuranceAmount?: number;
        insurancePolicyId?: number;
        insuranceReasonId?: number;
        insuredName?: string;
        insuredTaxNumber?: string;
        lossPayeeBankId?: number;
        lossPayeeBranchId?: number;
        newPolicyNo?: number;
        oldCompanyCode?: string;
        oldPolicyAmount?: number;
        oldPolicyEndDate?: Date;
        oldPolicyNo?: string;
        oldPolicyPremium?: number;
        plateNo?: string;
        policyBranchId?: number;
        policyHolderAccountNumber?: number;
        policyHolderName?: string;
        policyHolderPhoneNumber?: string;
        policyHolderTaxNumber?: string;
        premium?: number;
        productId?: string;
        ptf?: string;
        renewalFollowId?: number;
        renewalStatusId?: number;
        risk?: number;
        riskInfo?: string;
        systemDate?: Date;
        tranDate?: Date;
        uavtNumber?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vehicleRegistrationSerialNumber?: string;
    }
    interface RenewalFollowSyncContract extends BOA.Common.Types.ContractBase {
        errorMessage?: string;
        isSuccessful?: boolean;
        methodName?: string;
        renewalFollowId?: number;
        renewalFollowSyncId?: number;
        systemDate?: Date;
    }
    interface RiskInfoContract {
    }
    interface SBMPolicyAddendumChangesContract extends BOA.Common.Types.ContractBase {
        agency?: string;
        agencyNumber?: string;
        branchCode?: string;
        companyCode?: string;
        identificationNumber?: string;
        identificationType?: string;
        institutionsCode?: string;
        institutionsCodeComment?: string;
        institutionsType?: number;
        institutionsTypeComment?: string;
        plateCityCode?: string;
        plateNumber?: string;
        policyExtraIssuedDate?: Date;
        policyExtraStartingDate?: Date;
        policyExtraType?: string;
        policyIssuedDate?: Date;
        policyNumber?: string;
        policyStartingDate?: Date;
        policyStatus?: string;
        policyStopingDate?: Date;
        product?: string;
        renewalNumber?: string;
    }
    interface ServiceAuthenticationInfo {
        password?: string;
        securityKey?: string;
        userName?: string;
    }
    interface TramerConstants {
    }
    interface TramerLossInfoContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        insurancePolicyId?: number;
        lossAmount?: number;
        lossDate?: Date;
        lossFileNumber?: string;
        systemDate?: Date;
        totalLossAmount?: number;
        tramerQueryPlanId?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TramerPolicyInfoContract extends BOA.Common.Types.ContractBase {
        chassisNo?: string;
        hostName?: string;
        insuranceCompany?: string;
        lossInfoList?: BOA.Types.Kernel.Insurance.Agent.TramerLossInfoContract[];
        motorNo?: string;
        policyEndDate?: Date;
        policyNo?: string;
        policyStartDate?: Date;
        renewalNo?: string;
        systemDate?: Date;
        tramerQueryPlanId?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TramerQueryContract extends BOA.Common.Types.ContractBase {
        insuranceCompany?: string;
        insurancePolicyId?: number;
        insuredTaxNumber?: string;
        journalLogActive?: boolean;
        lastQueryDate?: Date;
        plateNo?: string;
        policyEndDate?: Date;
        policyHolderTaxNumber?: string;
        policyNo?: string;
        securityKey?: string;
        url?: string;
    }
    interface TramerQueryResultContract extends BOA.Common.Types.ContractBase {
        addemdumTypeCode?: string;
        addemdumTypeDescription?: string;
        businessKey?: number;
        errorMessage?: string;
        hostName?: string;
        insuranceCompany?: string;
        insurancePolicyId?: number;
        iPPolicyEndDate?: Date;
        otherInsuranceCompany?: string;
        otherPolicyCompanyCode?: string;
        otherPolicyEndDate?: Date;
        otherPolicyNumber?: string;
        policyEndDate?: Date;
        policyNo?: string;
        queryStatus?: number;
        queryStatusDescription?: string;
        systemDate?: Date;
        tramerQueryResultId?: number;
        tramerResultXml?: string;
        tranDate?: Date;
        userName?: string;
    }
    interface TramerQueryVehicleInfoContract extends BOA.Common.Types.ContractBase {
        brandId?: number;
        chassisNo?: string;
        errorMessage?: string;
        modelId?: number;
        modelYear?: number;
        motorNo?: string;
        policyEndDate?: Date;
        policyNo?: string;
        policyStartDate?: Date;
        queryStatus?: number;
        vehicleInsuranceAmount?: number;
        vehicleUsageTypeId?: number;
    }
    interface TramerUrl {
    }
    interface VehicleInfoQueryContract extends BOA.Common.Types.ContractBase {
        insuredAccountNumber?: number;
        plateNo?: string;
        policyHolderAccountNumber?: number;
    }
}
declare namespace BOA.Types.Kernel.Insurance.Agent.ConstParameter {
    interface Integration {
    }
    interface LifePolicy {
    }
    interface LifePolicyService {
    }
    interface LifePolicyServiceCall {
    }
    interface OpenBranchInformation {
    }
    interface SBMPolicyAddendumChanges {
    }
    interface SecurityHeader {
    }
}
declare namespace BOA.Types.Kernel.Insurance.Agent.InsuranceConstants {
    export const enum CallCenterNotSentReason {
        IsAlreadyInCallCenter = 1,
        CitizenshipIsNotTurkey = 2,
        HasAnotherPolicy = 3,
        PhoneNumberNotFound = 4,
        CustomerPhoneNumbersAreInBlackList = 5
    }
    export const enum CampaignType {
        Policy = 205,
        ProposalPrice = 204
    }
    export const enum CollectionStatus {
        Active = 1,
        Cancelled = 0
    }
    export const enum CollectionTransactionType {
        Collect = 1,
        PayBack = 2
    }
    export const enum CustomerRiskType {
        MUSTERIKARSIZ = 0,
        GRUPKARSIZ = 1
    }
    export const enum InsuranceSource {
        Neova = 1,
        KT = 2
    }
    export const enum IntegrationSyncStatus {
        Waiting = 0,
        Done = 1,
        Warning = 2
    }
    export const enum LifePolicyStatus {
        Proposal = 0,
        Policy = 1,
        CanceledPolicy = 2,
        CancellationRequested = 3
    }
    export const enum PlateType {
        Domestic = 0,
        Foreign = 1,
        New = 2,
        Custom = 3
    }
    export const enum PolicyOrderEntityType {
        Information = 0,
        Statistic = 1
    }
    export const enum PolicyPdfType {
        Policy = 0,
        Information = 1,
        MASAK = 2
    }
    export const enum ProposalStatus {
        Proposal = 0,
        Policy = 1,
        Reject = 2
    }
    export const enum RenewalFollowAssignedUserTypeId {
        Neova = 1,
        CallCenter = 2,
        SigortaBirimi = 3,
        Sube = 4
    }
    export const enum RenewalFollowSyncMethodName {
        InsertNeova = 0,
        CMCustomerNotReached = 1
    }
    export const enum Status {
        Passive = 0,
        Active = 1
    }
    export const enum TramerQueryPlanStatus {
        WaitingForQuery = 0,
        QuerySuccessful = 1,
        Running = 2,
        CompletedWithError = 3
    }
}
declare namespace BOA.Types.Kernel.InternationalBanking {
    interface BankProductLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bankGap?: number;
        bankLimit?: number;
        bankLimitId?: number;
        bankRisk?: number;
        countryGap?: number;
        countryId?: number;
        countryLimit?: number;
        countryRisk?: number;
        groupGap?: number;
        groupId?: number;
        groupLimit?: number;
        groupRisk?: number;
        productCode?: string;
        productGap?: number;
        productLimit?: number;
        productRisk?: number;
        productRiskFactor?: number;
        workGroupId?: number;
    }
    interface BankProductLimitRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        maturityDurationInDays?: number;
        productCode?: string;
        workGroupId?: number;
    }
    interface Common {
    }
    interface NostroVostroInvoiceTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        commissionAccountSuffix?: number;
        commissionAmount?: number;
        costType?: number;
        countryId?: number;
        fec?: number;
        isIncludedInInvoice?: number;
        nostroVostroInvoiceTransactionId?: number;
        priceListId?: number;
        priceListType?: number;
        priceType?: number;
        productCode?: string;
        systemDate?: Date;
    }
    interface NostroVostroInvoiceTransactionRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.InternationalBanking.NostroVostroInvoiceTransactionContract;
    }
    interface VostroAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountNumberAndSuffix?: string;
        accountOpenDate?: Date;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        chargeParameter?: string;
        customerName?: string;
        fec?: number;
        fecIsoCode?: string;
        messageTypes?: string;
        swiftCode?: string;
        vostroAccountId?: number;
    }
}
declare namespace BOA.Types.Kernel.InternationalBanking.Common {
    export const enum TypeOfPrice {
        FREE = 0,
        PER_TRANSACTION = 1
    }
    export const enum TypeOfRecipe {
        STANDART_NOSTRO = 1,
        STANDART_VOSTRO = 2,
        SPECIAL_NOSTRO = 3,
        SPECIAL_VOSTRO = 4
    }
}
declare namespace BOA.Types.Kernel.InternetBanking {
    interface CardNumberAndType {
        cardNumber?: string;
        creditOrDebitCard?: BOA.Types.Kernel.CreditCard.CardType;
    }
    interface ErrorCodeConstants {
    }
    interface Helper {
    }
    interface IpHelper {
    }
    interface IpLocationContract extends BOA.Common.Types.ContractBase {
        cityName?: string;
        endIP?: string;
        latitude?: string;
        longitude?: string;
        regionCode?: string;
        regionName?: string;
        startIP?: string;
        stateName?: string;
    }
    interface IpVerificationContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        endIP?: string;
        ipVerificationId?: number;
        isActive?: boolean;
        regionName?: string;
        startIP?: string;
        userId?: number;
    }
}
declare namespace BOA.Types.Kernel.InternetBanking.IpHelper {
    interface IpStatus {
    }
}
declare namespace BOA.Types.Kernel.Investigation.StockExchange {
    interface DailyStock {
        stocks?: BOA.Types.Kernel.Investigation.StockExchange.StockInformation[];
    }
    interface DailyTransactionContract extends BOA.Common.Types.ContractBase {
        actualOrderList?: BOA.Types.Kernel.Investigation.StockExchange.Order;
        dailyStockList?: BOA.Types.Kernel.Investigation.StockExchange.DailyStock;
        waitingForTransmitOrderList?: BOA.Types.Kernel.Investigation.StockExchange.Order;
        waitingOrderList?: BOA.Types.Kernel.Investigation.StockExchange.Order;
    }
    interface DemandCancelContract extends BOA.Common.Types.ContractBase {
        stockCode?: string;
    }
    interface DemandContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        lot?: string;
        minDemandLot?: string;
        stockCode?: string;
    }
    interface Fund {
        fundCode?: string;
    }
    interface FundAmountBuyControlContract extends BOA.Common.Types.ContractBase {
        fundBlockedPercentage?: string;
        fundCode?: string;
        fundMinAmount?: string;
        fundTotalAmount?: string;
    }
    interface FundBalance {
        balance?: string;
        fundCode?: string;
        fundLot?: string;
        fundName?: string;
        fundPrice?: string;
    }
    interface FundBalanceContract extends BOA.Common.Types.ContractBase {
        fundBalanceList?: BOA.Types.Kernel.Investigation.StockExchange.FundBalanceList;
    }
    interface FundBalanceList {
        fundBalance?: BOA.Types.Kernel.Investigation.StockExchange.FundBalance[];
    }
    interface FundBalanceReportContract extends BOA.Common.Types.ContractBase {
        fundBalanceReportList?: BOA.Types.Kernel.Investigation.StockExchange.FundBalanceReportList;
    }
    interface FundBalanceReportList {
        fund?: BOA.Types.Kernel.Investigation.StockExchange.Fund;
        fundBranch?: BOA.Types.Kernel.Investigation.StockExchange.FundBranch[];
    }
    interface FundBranch {
        branch?: string;
        fundAmount?: string;
    }
    interface FundBuyContract extends BOA.Common.Types.ContractBase {
        fundAmount?: string;
        fundCode?: string;
        fundLot?: string;
    }
    interface FundCancelContract extends BOA.Common.Types.ContractBase {
        fundCode?: string;
        fundPNo?: string;
    }
    interface FundOrder {
        fundAction?: string;
        fundAmount?: string;
        fundCancellable?: string;
        fundCode?: string;
        fundDate?: string;
        fundGHour?: string;
        fundGMinute?: string;
        fundGSecond?: string;
        fundLot?: string;
        fundName?: string;
        fundPNo?: string;
        fundRealAmount?: string;
        fundRealCount?: string;
        fundRealUnitAmount?: string;
        fundRefPrice?: string;
        fundState?: string;
        stockOrderBusinessKey?: string;
    }
    interface FundOrderList {
        stocks?: BOA.Types.Kernel.Investigation.StockExchange.FundOrder[];
    }
    interface FundOrderListContract extends BOA.Common.Types.ContractBase {
        currentFundOrder?: BOA.Types.Kernel.Investigation.StockExchange.FundOrder;
        fundOrderLists?: BOA.Types.Kernel.Investigation.StockExchange.FundOrderList;
    }
    interface FundReferance {
        buyLotMax?: string;
        buyLotMin?: string;
        buyLotMultiple?: string;
        buyTransactionPreference?: string;
        buyValor?: string;
        buyValorOvercomeDay?: string;
        buyValorOvercomeTime?: string;
        buyValorOvercomeTimeHalfDay?: string;
        buyValorPrice?: string;
        cancelFinishTime?: string;
        cancelTimeHalfDay?: string;
        fundBuyPrice?: string;
        fundCode?: string;
        fundDate?: string;
        fundExceptional?: string;
        fundName?: string;
        fundPriceMarginRatio?: string;
        fundSellPrice?: string;
        sellLotMax?: string;
        sellLotMin?: string;
        sellLotMultiple?: string;
        sellValor?: string;
        sellValorOvercomeDay?: string;
        sellValorOvercomeTime?: string;
        sellValorOvercomeTimeHalfDay?: string;
        sellValorPrice?: string;
        transactionFinishTime?: string;
        transactionStartTime?: string;
    }
    interface FundReferanceCodeContract extends BOA.Common.Types.ContractBase {
        referance?: BOA.Types.Kernel.Investigation.StockExchange.FundReferanceList;
    }
    interface FundReferanceList {
        fundList?: BOA.Types.Kernel.Investigation.StockExchange.FundReferance[];
    }
    interface FundSellContract extends BOA.Common.Types.ContractBase {
        fundCode?: string;
        fundLot?: string;
    }
    interface FundUnitBuyControlContract extends BOA.Common.Types.ContractBase {
        fundBlockedAmount?: string;
        fundCode?: string;
        fundLot?: string;
        fundTotalAmount?: string;
    }
    interface MyDemand {
        absoluteLot?: string;
        cancel?: string;
        date?: string;
        demandNo?: string;
        lot?: string;
        offeringType?: string;
        status?: string;
        stockCode?: string;
    }
    interface MyDemandList {
        myDemand?: BOA.Types.Kernel.Investigation.StockExchange.MyDemand[];
    }
    interface MyDemandListContract {
        myDemandList?: BOA.Types.Kernel.Investigation.StockExchange.MyDemandList;
    }
    interface MySukukDemandListContract extends BOA.Common.Types.ContractBase {
        acquiredLOT?: number;
        beginDate?: Date;
        branchName?: string;
        finishDate?: Date;
        isin?: string;
        issuerCustomerName?: string;
        lotPrice?: number;
        minimumLOT?: number;
        paymetTypeName?: string;
        propasalDate?: Date;
        propasalId?: number;
        rentalHouse?: string;
        requestedLOT?: number;
        securityId?: number;
        securityTitle?: string;
        status?: number;
        statusName?: string;
        stockId?: string;
    }
    interface Order {
        detail?: BOA.Types.Kernel.Investigation.StockExchange.OrderDetail;
    }
    interface OrderDetail {
        buyingSumPrice?: string;
        sellingSumPrice?: string;
    }
    interface PostDatedStockBuyContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        lot?: string;
        marketCode?: string;
        orderEndDate?: string;
        orderStartDate?: string;
        referenceNumber?: string;
        seance?: string;
        stockAmount?: string;
        stockCode?: string;
        stockPrice?: string;
    }
    interface PreDemandContract extends BOA.Common.Types.ContractBase {
        lot?: string;
        stockCode?: string;
    }
    interface PublicOfferingReference {
        auctionBeginDate?: Date;
        auctionEndDate?: Date;
        certainCircularFile?: string;
        certainProspectusFile?: string;
        certainSummaryFile?: string;
        cost?: string;
        fec?: number;
        isin?: string;
        issuerCustomerName?: string;
        isSukuk?: string;
        lotAmount?: number;
        maturityDate?: Date;
        minAuctionNominal?: number;
        preCircularFile?: string;
        preProspectusFile?: string;
        rentalHouse?: string;
        securityAuctionId?: number;
        securityId?: number;
        state?: string;
        stockCode?: string;
        stockName?: string;
        title?: string;
    }
    interface PublicOfferingReferenceContract extends BOA.Common.Types.ContractBase {
        reference?: BOA.Types.Kernel.Investigation.StockExchange.PublicOfferingReferenceList;
    }
    interface PublicOfferingReferenceList {
        referanceList?: BOA.Types.Kernel.Investigation.StockExchange.PublicOfferingReference[];
    }
    interface PublicOfferingSukukList {
        auctionBeginDate?: Date;
        auctionEndDate?: Date;
        certainCircularFile?: string;
        certainProspectusFile?: string;
        cost?: string;
        fec?: number;
        isin?: string;
        isSukuk?: string;
        lotAmount?: number;
        minAuctionNominal?: number;
        preCircularFile?: string;
        preProspectusFile?: string;
        rentalHouse?: string;
        securityAuctionId?: number;
        securityId?: number;
        state?: string;
        stockCode?: string;
        stockName?: string;
        title?: string;
    }
    interface ReferenceList {
        reference?: BOA.Types.Kernel.Investigation.StockExchange.SukukReference[];
    }
    interface Stock {
        buyPrice?: number;
        closedAmount?: string;
        lot?: string;
        marketCode?: string;
        stockAmount?: string;
        stockCode?: string;
        stockCost?: string;
        stockName?: string;
        stockProfitLost?: string;
    }
    interface StockAccount {
        accountNumber?: string;
        accountSuffix?: string;
        accountType?: string;
        avaiableBalance?: number;
        bankCode?: string;
        branch?: string;
        branchId?: string;
        currency?: string;
        stockBranchId?: string;
        stockId?: string;
    }
    interface StockBalance {
        lastClosedAmount?: string;
        lot?: string;
        marketCode?: string;
        stockCode?: string;
        stockName?: string;
    }
    interface StockBalanceContract extends BOA.Common.Types.ContractBase {
        avaliableBalance?: string;
        stockBalanceList?: BOA.Types.Kernel.Investigation.StockExchange.StockBalanceList;
    }
    interface StockBalanceList {
        stockBalance?: BOA.Types.Kernel.Investigation.StockExchange.StockBalance[];
    }
    interface StockBuyContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        lot?: string;
        marketCode?: string;
        orderEndDate?: string;
        orderStartDate?: string;
        referenceNumber?: string;
        seance?: string;
        stockAmount?: string;
        stockCode?: string;
        stockPrice?: string;
    }
    interface StockContract {
        paramName?: string;
        paramValue?: string;
    }
    interface StockCustomerContract extends BOA.Common.Types.ContractBase {
        adress?: string;
        agreement?: string;
        birthDate?: string;
        cellPhone?: string;
        customerID?: string;
        district?: string;
        fatherName?: string;
        name?: string;
        stockBranchID?: string;
        stockID?: string;
        surname?: string;
        taxNumber?: string;
        tCIdentityNumber?: string;
    }
    interface StockCustomerPortfolioContract extends BOA.Common.Types.ContractBase {
        fundAmount?: string;
        fXAmount?: string;
        stockAmount?: string;
        stockBalance?: BOA.Types.Kernel.Investigation.StockExchange.StockBalanceContract;
        stockList?: BOA.Types.Kernel.Investigation.StockExchange.StockList;
        sukukAmount?: string;
        sukukList?: BOA.Types.Kernel.Investigation.StockExchange.SukukList;
        t2Amount?: string;
        totalInvestmentAmount?: string;
        totalPortfolioAmount?: string;
    }
    interface StockError {
        errorCode?: string;
        errorDesc?: string;
    }
    interface StockHistoryContract {
        stockBalanceList?: BOA.Types.Kernel.Investigation.StockExchange.StockBalanceContract;
        stockTransactionList?: BOA.Types.Kernel.Investigation.StockExchange.StockTransactionContract;
    }
    interface StockInfoContract extends BOA.Common.Types.ContractBase {
        stockBalance?: BOA.Types.Kernel.Investigation.StockExchange.StockBalance;
        stockReferanceDetailContract?: BOA.Types.Kernel.Investigation.StockExchange.StockReferanceDetailContract;
    }
    interface StockInformation {
        actualAmount?: string;
        lot?: string;
        referanceNumber?: string;
        seanceNumber?: string;
        stockAmount?: string;
        stockCode?: string;
        stockPrice?: string;
        stockProcess?: string;
        stockStatus?: string;
        stockStatusCode?: string;
    }
    interface StockList {
        stock?: BOA.Types.Kernel.Investigation.StockExchange.Stock[];
    }
    interface StockMoneyTransferBalanceContract extends BOA.Common.Types.ContractBase {
        availableBalance?: string;
        stockId?: string;
    }
    interface StockMoneyTransferConfirmContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        id?: string;
        responseRefNo?: string;
    }
    interface StockMoneyTransferResultContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        id?: string;
        responseRefNo?: string;
        state?: string;
    }
    interface StockOrder {
        iMKBNO?: string;
        orderAmount?: string;
        orderCount?: string;
        orderDescription?: string;
        orderStatus?: string;
        orderTotalAmount?: string;
        orderType?: string;
        processedOrderCount?: string;
        referenceNumber?: string;
        seanceNumber?: string;
        stockCode?: string;
        stockMarketCode?: string;
        stockOrderBusinessKey?: string;
    }
    interface StockOrderCancelContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        referenceNumber?: string;
    }
    interface StockOrderList {
        stocks?: BOA.Types.Kernel.Investigation.StockExchange.StockOrder[];
    }
    interface StockOrderListContract extends BOA.Common.Types.ContractBase {
        currentStockOrder?: BOA.Types.Kernel.Investigation.StockExchange.StockOrder;
        stockOrderLists?: BOA.Types.Kernel.Investigation.StockExchange.StockOrderList;
    }
    interface StockOrderPartitionContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        commission?: string;
        referenceNumber?: string;
    }
    interface StockOrderReference {
        baseAmount?: string;
        closingAmount?: string;
        isProcessOpen?: string;
        lastAmount?: string;
        lot?: string;
        marketCode?: string;
        marketType?: string;
        maxAmount?: string;
        maxLot?: string;
        minAmount?: string;
        priceSpaceList?: string[];
        stockCode?: string;
        stockGroup?: string;
        stockName?: string;
    }
    interface StockOrderUpdateContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        commission?: string;
        referenceNumber?: string;
    }
    interface StockReceipt {
        balance?: string;
        description?: string;
        inputAmount?: string;
        outputAmount?: string;
        processDate?: string;
        referanceNumber?: string;
    }
    interface StockReceiptContract extends BOA.Common.Types.ContractBase {
        stockReceiptList?: BOA.Types.Kernel.Investigation.StockExchange.StockReceiptList;
    }
    interface StockReceiptList {
        stockReceipt?: BOA.Types.Kernel.Investigation.StockExchange.StockReceipt[];
    }
    interface StockReferance {
        marketCode?: string;
        stockCode?: string;
        stockGroup?: string;
        stockName?: string;
    }
    interface StockReferanceCodeContract extends BOA.Common.Types.ContractBase {
        referance?: BOA.Types.Kernel.Investigation.StockExchange.StockReferanceList;
    }
    interface StockReferanceCodeDetailContract extends BOA.Common.Types.ContractBase {
        referance?: BOA.Types.Kernel.Investigation.StockExchange.StockReferanceDetailList;
    }
    interface StockReferanceContract extends BOA.Common.Types.ContractBase {
        stockReferanceCode?: BOA.Types.Kernel.Investigation.StockExchange.StockReferanceCodeContract;
        stockReferanceDetail?: BOA.Types.Kernel.Investigation.StockExchange.StockReferanceDetailContract[];
    }
    interface StockReferanceDetail {
        stockName?: string;
        stockTopPrice?: string;
    }
    interface StockReferanceDetailContract extends BOA.Common.Types.ContractBase {
        avaragePrice?: number;
        buyPrice?: number;
        marketCode?: string;
        percentageChange?: number;
        price?: number;
        priceSpaceList?: string[];
        sellPrice?: number;
        stockCode?: string;
        stockName?: string;
        volume?: number;
    }
    interface StockReferanceDetailList {
        stockList?: BOA.Types.Kernel.Investigation.StockExchange.StockReferance[];
    }
    interface StockReferanceList {
        stockList?: BOA.Types.Kernel.Investigation.StockExchange.StockReferance[];
    }
    interface StockReferenceDetail {
        stocks?: BOA.Types.Kernel.Investigation.StockExchange.StockOrderReference[];
    }
    interface StockReferenceDetailContract extends BOA.Common.Types.ContractBase {
        stockReferenceList?: BOA.Types.Kernel.Investigation.StockExchange.StockReferenceDetail;
    }
    interface StockReferenceDetailRequest extends BOA.Common.Types.RequestBase {
        marketCode?: string;
        stockBranchId?: string;
        stockCode?: string;
        stockId?: string;
        taxNumber?: string;
    }
    interface StockReferencePriceSpaceContract extends BOA.Common.Types.ContractBase {
        priceSpaceList?: string[];
    }
    interface StockRequest {
        requestParams?: BOA.Types.Kernel.Investigation.StockExchange.StockContract[];
    }
    interface StockResponse {
        responseParams?: string;
    }
    interface StockSeanceContract extends BOA.Common.Types.ContractBase {
        custodyMarket?: string;
        disketMode?: string;
        internationalMarket?: string;
        quotationMarket?: string;
        regionMarket?: string;
        seanceInfo?: string;
        seanceNo?: string;
    }
    interface StockSellContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        lot?: string;
        marketCode?: string;
        referenceNumber?: string;
        seance?: string;
        stockAmount?: string;
        stockCode?: string;
        validityTime?: string;
    }
    interface StockTransaction {
        isOccurred?: string;
        occurredStockCount?: string;
        session?: string;
        stockAmount?: string;
        stockCode?: string;
        stockCost?: string;
        stockCount?: string;
        stockDate?: string;
        stockOperationType?: string;
        stockReferenceNumber?: string;
    }
    interface StockTransactionContract extends BOA.Common.Types.ContractBase {
        stockBalanceList?: BOA.Types.Kernel.Investigation.StockExchange.StockTransactionList;
        transactionTotal?: string;
        transactionTotalBuy?: string;
        transactionTotalSell?: string;
    }
    interface StockTransactionList {
        transactionList?: BOA.Types.Kernel.Investigation.StockExchange.StockTransaction[];
    }
    interface Sukuk {
        sukukAmount?: string;
        sukukCost?: string;
        sukukCount?: string;
        sukukISINCode?: string;
        sukukPrice?: string;
        transactionLimit?: number;
    }
    interface SukukAccount {
        accountNumber?: string;
        accountSuffix?: string;
        accountType?: string;
        avaiableBalance?: number;
        bankCode?: string;
        branch?: string;
        branchId?: string;
        currency?: string;
        sukukBranchId?: string;
        sukukId?: string;
    }
    interface SukukBuyContract extends BOA.Common.Types.ContractBase {
        lot?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sukukPrice?: string;
    }
    interface SukukCustomerContract extends BOA.Common.Types.ContractBase {
    }
    interface SukukList {
        sukuk?: BOA.Types.Kernel.Investigation.StockExchange.Sukuk[];
    }
    interface SukukReference {
        balance?: string;
        buyPrice?: string;
        currentStock?: string;
        description?: string;
        hasTransactionLimit?: boolean;
        maxStock?: string;
        minBuyCount?: string;
        minSellCount?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sellPrice?: string;
        transactionLimit?: number;
        valor?: string;
    }
    interface SukukReferenceContract extends BOA.Common.Types.ContractBase {
        balance?: string;
        buyPrice?: string;
        currentStock?: string;
        description?: string;
        effectiveDate?: string;
        maxStock?: string;
        minBuyCount?: string;
        minSellCount?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sellPrice?: string;
    }
    interface SukukReferenceListContract extends BOA.Common.Types.ContractBase {
        referenceList?: BOA.Types.Kernel.Investigation.StockExchange.ReferenceList;
    }
    interface SukukSellContract extends BOA.Common.Types.ContractBase {
        lot?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sukukPrice?: string;
    }
    interface ToCurrentAccountContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        responseRefNo?: string;
        stockID?: string;
        transactionId?: string;
    }
    interface ToSavingsAccountContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        responseRefNo?: string;
        stockID?: string;
        transactionId?: string;
    }
}
declare namespace BOA.Types.Kernel.Investment.StockExchange {
    interface AgencyResultMessageContract extends BOA.Common.Types.ContractBase {
        agencyId?: number;
        agencyResultMessageId?: number;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        methodName?: string;
        resultCode?: string;
        resultDescription?: string;
        resultUIDescription?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AvaliableBalanceContract extends BOA.Types.Kernel.Investment.StockExchange.StockResponseBaseContract<BOA.Types.Kernel.Investment.StockExchange.AvaliableBalanceContract> {
        avaliableBalance?: string;
        customerID?: string;
    }
    interface ConfigurationContract extends BOA.Common.Types.ContractBase {
        contentType?: string;
        timeout?: number;
        url?: string;
    }
    interface DailyStockContract extends BOA.Common.Types.ContractBase {
        stocks?: BOA.Types.Kernel.Investment.StockExchange.StockInformationContract[];
    }
    interface DailyTransactionContract extends BOA.Common.Types.ContractBase {
        actualOrderList?: BOA.Types.Kernel.Investment.StockExchange.OrderContract;
        dailyStockList?: BOA.Types.Kernel.Investment.StockExchange.DailyStockContract;
        waitingForTransmitOrderList?: BOA.Types.Kernel.Investment.StockExchange.OrderContract;
        waitingOrderList?: BOA.Types.Kernel.Investment.StockExchange.OrderContract;
    }
    interface DemandCancelContract extends BOA.Common.Types.ContractBase {
        stockCode?: string;
    }
    interface DemandContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        lot?: string;
        minDemandLot?: string;
        stockCode?: string;
    }
    interface ExternalBalanceContract extends BOA.Common.Types.ContractBase {
        externalAccountNumber?: number;
        externalAvailableBalance?: number;
        externalCustomerBranchId?: number;
    }
    interface FundAmountBuyControlContract extends BOA.Common.Types.ContractBase {
        fundBlockedPercentage?: string;
        fundCode?: string;
        fundMinAmount?: string;
        fundTotalAmount?: string;
    }
    interface FundBalance {
        balance?: string;
        fundCode?: string;
        fundLot?: string;
        fundName?: string;
        fundPrice?: string;
    }
    interface FundBalanceContract extends BOA.Common.Types.ContractBase {
        fundBalanceList?: BOA.Types.Kernel.Investment.StockExchange.FundBalanceListContract;
    }
    interface FundBalanceListContract {
        fundBalance?: BOA.Types.Kernel.Investment.StockExchange.FundBalance[];
    }
    interface FundBalanceReportContract extends BOA.Common.Types.ContractBase {
        fundBalanceReportList?: BOA.Types.Kernel.Investment.StockExchange.FundBalanceReportListContract;
    }
    interface FundBalanceReportListContract {
        fund?: BOA.Types.Kernel.Investment.StockExchange.FundContract;
        fundBranch?: BOA.Types.Kernel.Investment.StockExchange.FundBranchContract[];
    }
    interface FundBranchContract {
        branch?: string;
        fundAmount?: string;
    }
    interface FundBuyContract extends BOA.Common.Types.ContractBase {
        fundAmount?: string;
        fundCode?: string;
        fundLot?: string;
    }
    interface FundCancelContract extends BOA.Common.Types.ContractBase {
        fundCode?: string;
        fundPNo?: string;
    }
    interface FundContract {
        fundCode?: string;
    }
    interface FundOrderContract {
        fundAction?: string;
        fundAmount?: string;
        fundCancellable?: string;
        fundCode?: string;
        fundDate?: string;
        fundGHour?: string;
        fundGMinute?: string;
        fundGSecond?: string;
        fundLot?: string;
        fundName?: string;
        fundPNo?: string;
        fundRealAmount?: string;
        fundRealCount?: string;
        fundRealUnitAmount?: string;
        fundRefPrice?: string;
        fundState?: string;
        stockOrderBusinessKey?: string;
    }
    interface FundOrderList {
        stocks?: BOA.Types.Kernel.Investment.StockExchange.FundOrderContract[];
    }
    interface FundOrderListContract extends BOA.Common.Types.ContractBase {
        currentFundOrder?: BOA.Types.Kernel.Investment.StockExchange.FundOrderContract;
        fundOrderLists?: BOA.Types.Kernel.Investment.StockExchange.FundOrderList;
    }
    interface FundReferanceCodeContract extends BOA.Common.Types.ContractBase {
        referance?: BOA.Types.Kernel.Investment.StockExchange.FundReferanceListContract;
    }
    interface FundReferanceContract {
        buyLotMax?: string;
        buyLotMin?: string;
        buyLotMultiple?: string;
        buyTransactionPreference?: string;
        buyValor?: string;
        buyValorOvercomeDay?: string;
        buyValorOvercomeTime?: string;
        buyValorOvercomeTimeHalfDay?: string;
        buyValorPrice?: string;
        cancelFinishTime?: string;
        cancelTimeHalfDay?: string;
        fundBuyPrice?: string;
        fundCode?: string;
        fundDate?: string;
        fundExceptional?: string;
        fundName?: string;
        fundPriceMarginRatio?: string;
        fundSellPrice?: string;
        sellLotMax?: string;
        sellLotMin?: string;
        sellLotMultiple?: string;
        sellValor?: string;
        sellValorOvercomeDay?: string;
        sellValorOvercomeTime?: string;
        sellValorOvercomeTimeHalfDay?: string;
        sellValorPrice?: string;
        transactionFinishTime?: string;
        transactionStartTime?: string;
    }
    interface FundReferanceListContract {
        fundList?: BOA.Types.Kernel.Investment.StockExchange.FundReferanceContract[];
    }
    interface FundSellContract extends BOA.Common.Types.ContractBase {
        fundCode?: string;
        fundLot?: string;
    }
    interface FundUnitBuyControlContract extends BOA.Common.Types.ContractBase {
        fundBlockedAmount?: string;
        fundCode?: string;
        fundLot?: string;
        fundTotalAmount?: string;
    }
    interface IEnumerableExtensions {
    }
    interface MoneyTransferAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        dataContract?: BOA.Types.Kernel.Investment.StockExchange.MoneyTransferContract;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        notificationData?: BOA.Common.Types.NotificationData;
        paymentType?: number;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
        tranType?: number;
    }
    interface MoneyTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        agencyId?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        description?: string;
        externalAccountNumber?: number;
        externalBranchId?: number;
        hasError?: boolean;
        hostIP?: string;
        hostName?: string;
        moneyTransferId?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranReferenceId?: string;
        tranType?: number;
        tranTypeDescription?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MyDemandContract {
        absoluteLot?: string;
        cancel?: string;
        date?: string;
        demandNo?: string;
        lot?: string;
        offeringType?: string;
        status?: string;
        stockCode?: string;
    }
    interface MyDemandList {
        myDemand?: BOA.Types.Kernel.Investment.StockExchange.MyDemandContract[];
    }
    interface MyDemandListContract {
        myDemandList?: BOA.Types.Kernel.Investment.StockExchange.MyDemandList;
    }
    interface MySukukDemandListContract extends BOA.Common.Types.ContractBase {
        acquiredLOT?: number;
        beginDate?: Date;
        branchName?: string;
        finishDate?: Date;
        isin?: string;
        issuerCustomerName?: string;
        lotPrice?: number;
        minimumLOT?: number;
        paymetTypeName?: string;
        propasalDate?: Date;
        propasalId?: number;
        rentalHouse?: string;
        requestedLOT?: number;
        securityId?: number;
        securityTitle?: string;
        status?: number;
        statusName?: string;
        stockId?: string;
    }
    interface OrderContract extends BOA.Common.Types.ContractBase {
        detail?: BOA.Types.Kernel.Investment.StockExchange.OrderDetailContract;
    }
    interface OrderDetailContract extends BOA.Common.Types.ContractBase {
        buyingSumPrice?: string;
        sellingSumPrice?: string;
    }
    interface PostDatedStockBuyContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        lot?: string;
        marketCode?: string;
        orderEndDate?: string;
        orderStartDate?: string;
        referenceNumber?: string;
        seance?: string;
        stockAmount?: string;
        stockCode?: string;
        stockPrice?: string;
    }
    interface PreDemandContract extends BOA.Common.Types.ContractBase {
        lot?: string;
        stockCode?: string;
    }
    interface PublicOfferingReference {
        auctionBeginDate?: Date;
        auctionEndDate?: Date;
        certainCircularFile?: string;
        certainProspectusFile?: string;
        certainSummaryFile?: string;
        cost?: string;
        fec?: number;
        isin?: string;
        issuerCustomerName?: string;
        isSukuk?: string;
        lotAmount?: number;
        maturityDate?: Date;
        minAuctionNominal?: number;
        preCircularFile?: string;
        preProspectusFile?: string;
        rentalHouse?: string;
        securityAuctionId?: number;
        securityId?: number;
        state?: string;
        stockCode?: string;
        stockName?: string;
        title?: string;
    }
    interface PublicOfferingReferenceContract extends BOA.Common.Types.ContractBase {
        reference?: BOA.Types.Kernel.Investment.StockExchange.PublicOfferingReferenceListContract;
    }
    interface PublicOfferingReferenceListContract {
        referanceList?: BOA.Types.Kernel.Investment.StockExchange.PublicOfferingReference[];
    }
    interface PublicOfferingSukukListContract {
        auctionBeginDate?: Date;
        auctionEndDate?: Date;
        certainCircularFile?: string;
        certainProspectusFile?: string;
        cost?: string;
        fec?: number;
        isin?: string;
        isSukuk?: string;
        lotAmount?: number;
        minAuctionNominal?: number;
        preCircularFile?: string;
        preProspectusFile?: string;
        rentalHouse?: string;
        securityAuctionId?: number;
        securityId?: number;
        state?: string;
        stockCode?: string;
        stockName?: string;
        title?: string;
    }
    interface ReferenceListContract {
        reference?: BOA.Types.Kernel.Investment.StockExchange.SukukReference[];
    }
    interface ServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorMessage?: string;
        externalAccountNumber?: number;
        externalBranchId?: number;
        hostName?: string;
        internalAccountNumber?: number;
        isServiceDefinedError?: boolean;
        methodName?: string;
        moneyTransferId?: number;
        requestDate?: Date;
        requestXml?: string;
        responseDate?: Date;
        responseXml?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface StockAccountContract {
        accountNumber?: string;
        accountSuffix?: string;
        accountType?: string;
        avaiableBalance?: number;
        bankCode?: string;
        branch?: string;
        branchId?: string;
        currency?: string;
        stockBranchId?: string;
        stockId?: string;
    }
    interface StockBalance {
        lastClosedAmount?: string;
        lot?: string;
        marketCode?: string;
        stockCode?: string;
        stockName?: string;
    }
    interface StockBalanceContract extends BOA.Common.Types.ContractBase {
        avaliableBalance?: string;
        stockBalanceList?: BOA.Types.Kernel.Investment.StockExchange.StockBalanceListContract;
    }
    interface StockBalanceListContract {
        stockBalance?: BOA.Types.Kernel.Investment.StockExchange.StockBalance[];
    }
    interface StockBuyContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        lot?: string;
        marketCode?: string;
        orderEndDate?: string;
        orderStartDate?: string;
        referenceNumber?: string;
        seance?: string;
        stockAmount?: string;
        stockCode?: string;
        stockPrice?: string;
    }
    interface StockCustomerContract extends BOA.Common.Types.ContractBase {
        customers?: BOA.Types.Kernel.Investment.StockExchange.StockCustomerDetailContract[];
    }
    interface StockCustomerDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchName?: string;
        customerId?: number;
        factorAccountNumber?: number;
        identityNumber?: string;
        internetExternalIndexAmount?: number;
        internetInternalIndexAmount?: number;
        isSpecialCustomer?: boolean;
        ordinoExternalIndexAmount?: number;
        ordinoInternalIndexAmount?: number;
        regionalOfficeName?: string;
        telephoneExternalIndexAmount?: number;
        telephoneInternalIndexAmount?: number;
        transactionDate?: Date;
    }
    interface StockCustomerProgressPaymentContract extends BOA.Common.Types.ContractBase {
        customer?: BOA.Types.Kernel.Investment.StockExchange.StockCustomerContract;
    }
    interface StockErrorContract {
        errorCode?: string;
        errorDesc?: string;
    }
    interface StockExchangeCommon {
    }
    interface StockExternalCustomerContract extends BOA.Common.Types.ContractBase {
        address?: string;
        agreement?: string;
        birthDate?: Date;
        customerExternalAccountNumber?: number;
        customerExternalBranchId?: number;
        customerInternalAccountNumber?: number;
        district?: string;
        fatherName?: string;
        identityNumber?: string;
        mobilePhoneNumber?: string;
        name?: string;
        surname?: string;
        taxNumber?: string;
    }
    interface StockHistoryContract {
        stockBalanceList?: BOA.Types.Kernel.Investment.StockExchange.StockBalance;
        stockTransactionList?: BOA.Types.Kernel.Investment.StockExchange.StockTransaction;
    }
    interface StockInfoContract extends BOA.Common.Types.ContractBase {
        stockBalance?: BOA.Types.Kernel.Investment.StockExchange.StockBalance;
        stockReferanceDetailContract?: BOA.Types.Kernel.Investment.StockExchange.StockReferanceDetail;
    }
    interface StockInformationContract extends BOA.Common.Types.ContractBase {
        actualAmount?: string;
        lot?: string;
        referanceNumber?: string;
        seanceNumber?: string;
        stockAmount?: string;
        stockCode?: string;
        stockPrice?: string;
        stockProcess?: string;
        stockStatus?: string;
        stockStatusCode?: string;
    }
    interface StockOrderCancelContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        referenceNumber?: string;
    }
    interface StockOrderContract {
        iMKBNO?: string;
        orderAmount?: string;
        orderCount?: string;
        orderDescription?: string;
        orderStatus?: string;
        orderTotalAmount?: string;
        orderType?: string;
        processedOrderCount?: string;
        referenceNumber?: string;
        seanceNumber?: string;
        stockCode?: string;
        stockMarketCode?: string;
        stockOrderBusinessKey?: string;
    }
    interface StockOrderList {
        stocks?: BOA.Types.Kernel.Investment.StockExchange.StockOrderContract[];
    }
    interface StockOrderListContract extends BOA.Common.Types.ContractBase {
        currentStockOrder?: BOA.Types.Kernel.Investment.StockExchange.StockOrderContract;
        stockOrderLists?: BOA.Types.Kernel.Investment.StockExchange.StockOrderList;
    }
    interface StockOrderPartitionContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        commission?: string;
        referenceNumber?: string;
    }
    interface StockOrderReferenceContract {
        baseAmount?: string;
        closingAmount?: string;
        isProcessOpen?: string;
        lastAmount?: string;
        lot?: string;
        marketCode?: string;
        marketType?: string;
        maxAmount?: string;
        maxLot?: string;
        minAmount?: string;
        priceSpaceList?: string[];
        stockCode?: string;
        stockGroup?: string;
        stockName?: string;
    }
    interface StockOrderUpdateContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        commission?: string;
        referenceNumber?: string;
    }
    interface StockPortfolioBalanceContract extends BOA.Common.Types.ContractBase {
        portfolio?: BOA.Types.Kernel.Investment.StockExchange.StockPortfolioContract;
    }
    interface StockPortfolioBalanceDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchName?: string;
        cashAmount?: number;
        customerId?: number;
        factorAccountNumber?: number;
        fundAmount?: number;
        fundAmountLocal?: number;
        fundAmountTotal?: number;
        identityNumber?: string;
        isSpecialCustomer?: boolean;
        otherAmount?: number;
        regionalOfficeName?: string;
        stockAmount?: number;
        sukukAmount?: number;
        sukukAmountLocal?: number;
        sukukAmountTotal?: number;
        transactionDate?: Date;
    }
    interface StockPortfolioContract extends BOA.Common.Types.ContractBase {
        balance?: BOA.Types.Kernel.Investment.StockExchange.StockPortfolioBalanceDetailContract[];
    }
    interface StockReceipt {
        balance?: string;
        description?: string;
        inputAmount?: string;
        outputAmount?: string;
        processDate?: string;
        referanceNumber?: string;
    }
    interface StockReceiptContract extends BOA.Common.Types.ContractBase {
        stockReceiptList?: BOA.Types.Kernel.Investment.StockExchange.StockReceiptListContract;
    }
    interface StockReceiptListContract {
        stockReceipt?: BOA.Types.Kernel.Investment.StockExchange.StockReceipt[];
    }
    interface StockReferance {
        marketCode?: string;
        stockCode?: string;
        stockGroup?: string;
        stockName?: string;
    }
    interface StockReferanceCodeContract extends BOA.Common.Types.ContractBase {
        referance?: BOA.Types.Kernel.Investment.StockExchange.StockReferanceListContract;
    }
    interface StockReferanceCodeDetailContract extends BOA.Common.Types.ContractBase {
        referance?: BOA.Types.Kernel.Investment.StockExchange.StockReferanceDetailListContract;
    }
    interface StockReferanceContract extends BOA.Common.Types.ContractBase {
        stockReferanceCode?: BOA.Types.Kernel.Investment.StockExchange.StockReferanceCodeContract;
        stockReferanceDetail?: BOA.Types.Kernel.Investment.StockExchange.StockReferanceDetail[];
    }
    interface StockReferanceDetail {
        stockName?: string;
        stockTopPrice?: string;
    }
    interface StockReferanceDetailContract extends BOA.Common.Types.ContractBase {
        avaragePrice?: number;
        buyPrice?: number;
        marketCode?: string;
        percentageChange?: number;
        price?: number;
        priceSpaceList?: string[];
        sellPrice?: number;
        stockCode?: string;
        stockName?: string;
        volume?: number;
    }
    interface StockReferanceDetailListContract {
        stockList?: BOA.Types.Kernel.Investment.StockExchange.StockReferanceContract[];
    }
    interface StockReferanceListContract {
        stockList?: BOA.Types.Kernel.Investment.StockExchange.StockReferance[];
    }
    interface StockReferenceDetail {
        stocks?: BOA.Types.Kernel.Investment.StockExchange.StockOrderReferenceContract[];
    }
    interface StockReferenceDetailContract extends BOA.Common.Types.ContractBase {
        stockReferenceList?: BOA.Types.Kernel.Investment.StockExchange.StockReferenceDetailContract;
    }
    interface StockReferencePriceSpaceContract extends BOA.Common.Types.ContractBase {
        priceSpaceList?: string[];
    }
    interface StockResponseBaseContract<T> extends BOA.Common.Types.ContractBase {
        dataContract?: T;
        serviceCallContract?: BOA.Types.Kernel.Investment.StockExchange.ServiceCallContract;
    }
    interface StockSeanceContract extends BOA.Common.Types.ContractBase {
        custodyMarket?: string;
        disketMode?: string;
        internationalMarket?: string;
        quotationMarket?: string;
        regionMarket?: string;
        seanceInfo?: string;
        seanceNo?: string;
    }
    interface StockSellContract extends BOA.Common.Types.ContractBase {
        commission?: string;
        lot?: string;
        marketCode?: string;
        referenceNumber?: string;
        seance?: string;
        stockAmount?: string;
        stockCode?: string;
        validityTime?: string;
    }
    interface StockTransaction {
        isOccurred?: string;
        occurredStockCount?: string;
        session?: string;
        stockAmount?: string;
        stockCode?: string;
        stockCost?: string;
        stockCount?: string;
        stockDate?: string;
        stockOperationType?: string;
        stockReferenceNumber?: string;
    }
    interface StockTransactionContract extends BOA.Common.Types.ContractBase {
        stockBalanceList?: BOA.Types.Kernel.Investment.StockExchange.StockTransactionListContract;
        transactionTotal?: string;
        transactionTotalBuy?: string;
        transactionTotalSell?: string;
    }
    interface StockTransactionListContract {
        transactionList?: BOA.Types.Kernel.Investment.StockExchange.StockTransaction[];
    }
    interface SukukAccountContract {
        accountNumber?: string;
        accountSuffix?: string;
        accountType?: string;
        avaiableBalance?: number;
        bankCode?: string;
        branch?: string;
        branchId?: string;
        currency?: string;
        sukukBranchId?: string;
        sukukId?: string;
    }
    interface SukukBuyContract extends BOA.Common.Types.ContractBase {
        lot?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sukukPrice?: string;
    }
    interface SukukCustomerContract extends BOA.Common.Types.ContractBase {
    }
    interface SukukReference {
        balance?: string;
        buyPrice?: string;
        currentStock?: string;
        description?: string;
        hasTransactionLimit?: boolean;
        maxStock?: string;
        minBuyCount?: string;
        minSellCount?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sellPrice?: string;
        transactionLimit?: number;
        valor?: string;
    }
    interface SukukReferenceContract extends BOA.Common.Types.ContractBase {
        balance?: string;
        buyPrice?: string;
        currentStock?: string;
        description?: string;
        effectiveDate?: string;
        maxStock?: string;
        minBuyCount?: string;
        minSellCount?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sellPrice?: string;
    }
    interface SukukReferenceListContract extends BOA.Common.Types.ContractBase {
        referenceList?: BOA.Types.Kernel.Investment.StockExchange.ReferenceListContract;
    }
    interface SukukSellContract extends BOA.Common.Types.ContractBase {
        lot?: string;
        securitiesCode?: string;
        securitiesNumber?: string;
        sukukPrice?: string;
    }
}
declare namespace BOA.Types.Kernel.Investment.StockExchange.StockExchangeCommon {
    export const enum AgencyBalanceWebServiceResponseStatus {
        Undefined = 0,
        Succesful = 1,
        Waiting = 2,
        Cancel = 3
    }
    export const enum AgencyType {
        BMD = 1
    }
    export const enum ProcessType {
        ToInternal = 1,
        ToExternal = 2
    }
    export const enum TransactionStatus {
        Unsuccessful = 0,
        PartiallySuccessful = 1,
        Successful = 2
    }
    export const enum TransferStatus {
        OnProcess = 1,
        Completed = 2,
        Cancelled = 3
    }
}
declare namespace BOA.Types.Kernel.Invoice {
    export const enum SchedulerExeGroup {
        None = 0,
        PaymentSender = 1,
        OrderDebtReceiver = 2,
        OrderPaymentProcess = 4
    }
    interface AccountingReferenceContract extends BOA.Common.Types.ContractBase {
        description?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface ATMAmountsContract extends BOA.Common.Types.ContractBase {
        bankNoteChangeAmount?: number;
        bSMVAmount?: number;
        coinAmount?: number;
        depositAmount?: number;
        goodAmount?: number;
    }
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        authorizedPersonId?: number;
        hostIP?: string;
        hostName?: string;
        relativePersonId?: number;
        sourceId?: number;
        sourceType?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BatchCancelDataContract extends BOA.Common.Types.ContractBase {
        errorMessage?: string;
        isProcessed?: boolean;
        operationId?: number;
        paymentId?: number;
        paymentOrderId?: number;
        systemDate?: Date;
        updateSystemDate?: Date;
    }
    interface ComboData {
        id?: number;
        value?: string;
    }
    interface CommandLine {
        item?: string;
    }
    interface CorporationAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        channelId?: number;
        channelName?: string;
        corporationAccountId?: number;
        corporationId?: number;
        corporationName?: string;
        corporationType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationType;
        debtType?: number;
        debtTypeDescription?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        paymentTypeDescription?: string;
        shortName?: string;
        subCorporationCode?: number;
        subCorporationName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationChannelContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        corporationChannelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workBeginTime?: string;
        workEndTime?: string;
    }
    interface CorporationChannelListContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        corporationChannelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationCityContract extends BOA.Common.Types.ContractBase {
        cityId?: number;
        corporationCityId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationCommissionContract extends BOA.Common.Types.ContractBase {
        commissionKey?: string;
        corporationCommissionId?: number;
        corporationId?: number;
        creditCardType?: string;
        debtType?: number;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configProdValue?: string;
        configTestValue?: string;
        corporationConfigId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationContract extends BOA.Common.Types.ContractBase {
        autoDebtConnectionType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationConnectionType;
        autoPaymentConnectionType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationConnectionType;
        channelId?: number;
        cityId?: number;
        configList?: BOA.Types.Kernel.Invoice.CorporationConfigContract[];
        corporationCode?: string;
        corporationId?: number;
        corporationKey?: string;
        corporationPartitionId?: number;
        corporationType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationType;
        corporationTypeName?: string;
        corporationTypeValue?: number;
        debtTypeList?: BOA.Types.Kernel.Invoice.CorporationDebtTypesContract[];
        hasSubUrl?: boolean;
        hostIP?: string;
        hostName?: string;
        informationMessage?: string;
        isAllowDelayPayment?: number;
        isAllowPartialPayment?: number;
        logo?: number[];
        name?: string;
        paymentConnectionType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationConnectionType;
        paymentOrderConnectionType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationConnectionType;
        queryType?: number;
        reconConnectionType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationConnectionType;
        shortName?: string;
        status?: number;
        systemDate?: Date;
        unconformityDayCount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withProxy?: boolean;
    }
    interface CorporationDebtTypesContract extends BOA.Common.Types.ContractBase {
        corporationDebtTypesId?: number;
        corporationId?: number;
        debtType?: number;
        debtTypeCode?: string;
        debtTypeDescription?: string;
        hostIP?: string;
        hostName?: string;
        isPaymentOrderAllowed?: number;
        languageId?: number;
        queryParameterList?: BOA.Types.Kernel.Invoice.CorporationQueryParamsContract[];
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationDebtTypesDetailContract extends BOA.Common.Types.ContractBase {
        corporationDebtTypesDetailId?: number;
        corporationDebtTypesId?: number;
        debtText?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationErrorContract extends BOA.Common.Types.ContractBase {
        corporationErrorId?: number;
        corporationId?: number;
        errorCode?: string;
        errorDescription?: string;
        errorUIDescription?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        languageName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationInfoMessageContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        corporationInfoMessageId?: number;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        shortText?: string;
        systemDate?: Date;
        text?: string;
        uIId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationListContract extends BOA.Common.Types.ContractBase {
        autoDebtConnectionType?: string;
        autoPaymentConnectionType?: string;
        corporationCode?: string;
        corporationId?: number;
        corporationPartitionId?: number;
        corporationType?: string;
        hasSubUrl?: string;
        hostIP?: string;
        hostName?: string;
        isAllowDelayPayment?: string;
        isAllowPartialPayment?: string;
        name?: string;
        paymentConnectionType?: string;
        paymentOrderConnectionType?: string;
        reconConnectionType?: string;
        shortName?: string;
        statusName?: string;
        systemDate?: Date;
        unconformityDayCount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withProxy?: string;
    }
    interface CorporationPictureContract extends BOA.Common.Types.ContractBase {
        autoDebtConnectionType?: number;
        autoPaymentConnectionType?: number;
        corporationCode?: string;
        corporationId?: number;
        corporationKey?: string;
        corporationPictureId?: number;
        corporationType?: number;
        hasSubUrl?: boolean;
        hostIP?: string;
        hostName?: string;
        isAllowDelayPayment?: number;
        isAllowPartialPayment?: number;
        logo?: any;
        name?: string;
        paymentConnectionType?: number;
        paymentOrderConnectionType?: number;
        queryType?: number;
        reconConnectionType?: number;
        shortName?: string;
        status?: number;
        systemDate?: Date;
        unconformityDayCount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withProxy?: boolean;
    }
    interface CorporationQueryParamsContract extends BOA.Common.Types.ContractBase {
        completionType?: number;
        completionTypeName?: string;
        corporationDebtTypesId?: number;
        corporationQueryParamsId?: number;
        hostIP?: string;
        hostName?: string;
        infoMessage?: string;
        labelName?: string;
        languageId?: number;
        systemDate?: Date;
        uIId?: number;
        uIMask?: string;
        uIVariableLength?: number;
        uIVariableName?: string;
        uIVariableType?: number;
        uIVariableTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationQueryParamsDetailContract extends BOA.Common.Types.ContractBase {
        corporationQueryParamsDetailId?: number;
        corporationQueryParamsId?: number;
        hostIP?: string;
        hostName?: string;
        infoMessage?: string;
        labelName?: string;
        languageId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationScheduleContract extends BOA.Common.Types.ContractBase {
        beginTime?: string;
        corporationId?: number;
        corporationScheduleId?: number;
        endTime?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isDeleteFutureDate?: boolean;
        lastRunTime?: Date;
        methodType?: BOA.Types.Kernel.Invoice.InvoiceCommon.OrderedDebtMethodType;
        paymentBeginTime?: string;
        paymentEndTime?: string;
        paymentLastRunTime?: Date;
        paymentQueryType?: BOA.Types.Kernel.Invoice.InvoiceCommon.OrderedPaymentQueryType;
        paymentRunPeriod?: number;
        queryType?: BOA.Types.Kernel.Invoice.InvoiceCommon.OrderedDebtQueryType;
        runAlways?: boolean;
        runEveryDay?: boolean;
        runPeriod?: number;
        saveType?: BOA.Types.Kernel.Invoice.InvoiceCommon.OrderedDebtSaveType;
        status?: BOA.Types.Kernel.Invoice.InvoiceCommon.ScheduleStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditCardContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditCardNo?: string;
        productType?: string;
    }
    interface DebtContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        corporationPartitionId?: number;
        customerName?: string;
        debtAmount?: number;
        debtExtension?: string;
        debtId?: number;
        debtInsertDate?: Date;
        debtInsertTime?: any;
        debtLateFeeAmount?: number;
        debtType?: number;
        description?: string;
        dueDate?: Date;
        extensions?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        incomingOrderRef?: string;
        incomingRefNumber?: string;
        installmentNumber?: string;
        institutionCode?: string;
        invoiceNumber?: string;
        limitedAmount?: number;
        orderBranchId?: number;
        otherInstallmentNumber?: string;
        outgoingOrderRef?: string;
        paymentOrderId?: number;
        period?: string;
        priority?: number;
        subCorporationCode?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: string;
    }
    interface ErrorWhiteListContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        errorWhiteListId?: number;
        hostIP?: string;
        hostName?: string;
        languageName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FlatFileInvoiceHeaderContract {
        corporationId?: number;
        description?: string;
        destinationFolder?: string;
        rowCount?: number;
        sourceFolder?: string;
        totalAmount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface FlatFileInvoiceMultipleFooterContract {
        rowCount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface FlatFileInvoicePaymentContract {
        dataList?: BOA.Types.Kernel.Invoice.PaymentContract[];
        dueDate?: Date;
        recordCount?: number;
        totalAmount?: number;
        totalLateFeeAmount?: number;
        totalMainAmount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface FlatFileInvoicePaymentOrderContract {
        dataList?: BOA.Types.Kernel.Invoice.PaymentOrderContract[];
        dueDate?: Date;
        recordCount?: number;
        totalAmount?: number;
        totalLateFeeAmount?: number;
        totalMainAmount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface FlatFileKKBPaymentContract {
        dataList?: BOA.Types.Kernel.KKBPackage.PackageContract[];
        transactionDate?: Date;
        workDate?: Date;
    }
    interface IFlatFileInvoice {
        dueDate?: Date;
        recordCount?: number;
        totalAmount?: number;
        totalLateFeeAmount?: number;
        totalMainAmount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface IFlatFileKKBPackage {
        transactionDate?: Date;
        workDate?: Date;
    }
    interface InvoiceChannelContract extends BOA.Common.Types.ContractBase {
        afterTomorrow?: Date;
        beforeYesterday?: Date;
        channelId?: number;
        channelName?: string;
        dbTimeout?: number;
        isActive?: number;
        today?: Date;
        tomorrow?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        yesterday?: Date;
    }
    interface InvoiceCommon {
    }
    interface OfflineReconDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        channelId?: number;
        cityCode?: number;
        corporationCode?: string;
        corporationId?: number;
        debtType?: number;
        dueDate?: Date;
        extension?: string;
        inComingRefNumber?: string;
        installmentNumber?: string;
        institutionCode?: string;
        invoiceNumber?: string;
        lateFeeAmount?: number;
        offlineReconDetailId?: number;
        otherInstallmentNumber?: string;
        outGoingRefNumber?: string;
        period?: string;
        status?: number;
        tellerId?: number;
        tranDate?: Date;
        userName?: string;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        paymentContract?: BOA.Types.Kernel.Invoice.PaymentContract;
        paymentType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface PaymentCancelInfoContract extends BOA.Common.Types.ContractBase {
        cancelBusinessKey?: number;
        hostIP?: string;
        hostName?: string;
        paymentCancelInfoId?: number;
        paymentId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentCenterCommissionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        commissionKey?: string;
        commissionSerializeId?: number;
        hostName?: string;
        paymentCenterAccountNumber?: number;
        paymentCenterAccountSuffix?: number;
        paymentCenterBranchId?: number;
        paymentCenterId?: number;
        paymentCount?: number;
        systemDate?: Date;
        tranDate?: Date;
        unitAmount?: number;
        userName?: string;
    }
    interface PaymentCenterConstants {
    }
    interface PaymentCenterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        code?: string;
        commissionKey?: string;
        commissionSerializeId?: number;
        debtQueryLimit?: number;
        hostIP?: string;
        hostName?: string;
        maxTranDate?: Date;
        name?: string;
        paymentCenterId?: number;
        paymentLimit?: number;
        serviceUserName?: string;
        systemDate?: Date;
        tranDate?: Date;
        unitAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentContract extends BOA.Types.Kernel.Invoice.DebtContract {
        accountInfo?: BOA.Types.Kernel.Invoice.PaymentDetailAccountInfoContract;
        accountingReference?: BOA.Types.Kernel.Invoice.AccountingReferenceContract;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        aTMAmounts?: BOA.Types.Kernel.Invoice.ATMAmountsContract;
        branchId?: number;
        branchName?: string;
        bsmwAmount?: number;
        businessKey?: number;
        cardInfo?: BOA.Types.Kernel.Invoice.PaymentDetailCardInfoContract;
        cardNumber?: string;
        cardNumberMask?: string;
        cashPayerPhoneNumber?: string;
        channelId?: number;
        channelName?: string;
        commissionAmount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionKey?: string;
        commissionSerializeId?: number;
        corporationAccountNumber?: number;
        corporationAccountSuffix?: number;
        corporationName?: string;
        corporationType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationType;
        costLedgerId?: number;
        costUserName?: string;
        debtTypeDescription?: string;
        extension?: string;
        generalStatus?: string;
        hasDebtCommission?: boolean;
        hasError?: number;
        hasErrorName?: string;
        hasPaymentCommission?: boolean;
        idendityNumber?: string;
        isCorporationPayment?: boolean;
        lateFeeAmount?: number;
        mainBusinessKey?: number;
        oldSystemItem?: boolean;
        originalRequestData?: string;
        originalResponseData?: string;
        outgoingRefNumber?: string;
        payAmount?: number;
        paymentId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        relativePersonId?: number;
        resourceId?: number;
        shortName?: string;
        status?: BOA.Types.Kernel.Invoice.InvoiceCommon.PaymentStatus;
        statusName?: string;
        statusStr?: string;
        thirdPersonId?: number;
        totalAmount?: number;
        totalPaymentAmount?: number;
        tranDate?: Date;
        tranDate2?: Date;
        tranTime?: any;
        tranWorkGroupId?: number;
        updateUserFullName?: string;
        userFullName?: string;
        wFInstanceId?: number;
        workDate?: Date;
        workGroupId?: number;
    }
    interface PaymentControlContract extends BOA.Common.Types.ContractBase {
        channelName?: string;
        maxTranDate?: Date;
        maxTranTime?: any;
        name?: string;
        paymentCount?: number;
        shortName?: string;
        sumAmount?: number;
        sumTotalAmount?: number;
    }
    interface PaymentDetailAccountInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        paymentDetailAccountInfoId?: number;
        paymentId?: number;
    }
    interface PaymentDetailCardInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        cancelReferenceNumber?: string;
        cardNumber?: string;
        cardType?: string;
        fec?: number;
        paymentDetailCardInfoId?: number;
        paymentId?: number;
        provisionNumber?: string;
        referenceNumber?: string;
    }
    interface PaymentEmailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        channelId?: number;
        corporationId?: number;
        corporationShortName?: string;
        dueDate?: Date;
        hostIP?: string;
        hostName?: string;
        installmentNumber?: string;
        institutionCode?: string;
        invoiceNumber?: string;
        mainBusinessKey?: number;
        paymentEmailId?: number;
        paymentType?: number;
        personEmail?: string;
        productType?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentEmailRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.Invoice.PaymentEmailContract;
    }
    interface PaymentGroupContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        paymentAmount?: number;
        paymentCancelAmount?: number;
        paymentCancelCount?: number;
        paymentCount?: number;
    }
    interface PaymentNotificationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        channelId?: number;
        corporationId?: number;
        corporationShortName?: string;
        dueDate?: Date;
        hostIP?: string;
        hostName?: string;
        installmentNumber?: string;
        institutionCode?: string;
        invoiceNumber?: string;
        mainBusinessKey?: number;
        paymentType?: number;
        productType?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentNotificationRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.Invoice.PaymentNotificationContract;
    }
    interface PaymentOrderAvailableCardsContract extends BOA.Common.Types.ContractBase {
        cardDescription?: string;
        cardType?: string;
        hostIP?: string;
        hostName?: string;
        isBusiness?: number;
        paymentOrderAvailableCardsId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderChangeContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        corporationId?: number;
        endDate?: Date;
        newInstallmentNumber?: string;
        newInstitutionCode?: string;
        oldInstallmentNumber?: string;
        oldInstitutionCode?: string;
    }
    interface PaymentOrderCommunicationContract extends BOA.Common.Types.ContractBase {
        communicationType?: number;
        paymentOrderCommunicationId?: number;
        paymentOrderId?: number;
        paymentOrderResultType?: number;
    }
    interface PaymentOrderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        channelId?: number;
        corporationId?: number;
        corporationName?: string;
        costLedgerId?: number;
        costUserName?: string;
        debtType?: number;
        divitInstanceId?: string;
        extensions?: string;
        hostIP?: string;
        hostName?: string;
        incomingOrderRef?: string;
        insertDate?: Date;
        insertTime?: Date;
        installmentNumber?: string;
        institutionCode?: string;
        isAllowPaymentwithMultipleSuffix?: boolean;
        limitedAmount?: number;
        limitedCreditCardAmount?: number;
        oldSystemItem?: boolean;
        onlySave?: boolean;
        originalRequestData?: string;
        originalResponseData?: string;
        otherInstallmentNumber?: string;
        outgoingOrderRef?: string;
        ownerType?: number;
        paymentOrderCommunicationList?: BOA.Types.Kernel.Invoice.PaymentOrderCommunicationContract[];
        paymentOrderDetailList?: BOA.Types.Kernel.Invoice.PaymentOrderDetailContract[];
        paymentOrderId?: number;
        paymentStartDate?: Date;
        relativePersonId?: number;
        shortName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        thirdPersonId?: number;
        tranDate?: Date;
        tranWorkGroupId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workgroupId?: number;
    }
    interface PaymentOrderDebtContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        channelId?: number;
        corporationId?: number;
        corporationName?: string;
        debtType?: number;
        dueDate?: Date;
        extensions?: string;
        incomingOrderRef?: string;
        installmentNumber?: string;
        institutionCode?: string;
        limitedAmount?: number;
        outgoingOrderRef?: string;
        paymentOrderId?: number;
    }
    interface PaymentOrderDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditCardNumber?: string;
        orderNumber?: number;
        paymentOrderDetailId?: number;
        paymentOrderId?: number;
        productType?: string;
    }
    interface PaymentOrderGroupContract extends BOA.Common.Types.ContractBase {
        orderCount?: number;
        status?: BOA.Types.Kernel.Invoice.InvoiceCommon.PaymentOrderStatus;
    }
    interface PaymentOrderHistoryContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        debtAmount?: number;
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        paymentOrderId?: number;
        systemDate?: Date;
        userName?: string;
        workDate?: Date;
    }
    interface PaymentOrderListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        channelName?: string;
        corporationId?: number;
        corporationType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationType;
        debtTypeDescription?: string;
        extensions?: string;
        finishOrderInsertDate?: Date;
        incomingOrderReference?: string;
        insertDate?: Date;
        installmentNumber?: string;
        institutionCode?: string;
        limitedAmount?: number;
        limitedCreditCardAmount?: number;
        outgoingOrderReference?: string;
        ownerType?: string;
        paymentOrderId?: number;
        shortName?: string;
        startOrderInsertDate?: Date;
        status?: number;
        statusName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workGroupId?: number;
    }
    interface PaymentOrderReconContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        branchId?: number;
        corporationCode?: string;
        corporationCount?: number;
        corporationId?: number;
        corporationOrderCancelCount?: number;
        corporationOrderCount?: number;
        corporationType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationType;
        endDate?: Date;
        endTime?: any;
        hostIP?: string;
        hostName?: string;
        insertDate?: Date;
        lastReconDate?: Date;
        orderCancelCount?: number;
        orderCount?: number;
        orderReconType?: number;
        originalRequestData?: string;
        originalResponseData?: string;
        paymentOrderReconDetailList?: BOA.Types.Kernel.Invoice.PaymentOrderReconDetailContract[];
        paymentOrderReconId?: number;
        reconDate?: Date;
        reconType?: number;
        reconTypeName?: string;
        shortName?: string;
        startDate?: Date;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderReconDefinitionContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        corporationId?: number;
        endTime?: any;
        hostIP?: string;
        hostName?: string;
        paymentOrderReconDefinitionId?: number;
        reconType?: number;
        reconUIType?: number;
        systemDate?: Date;
        unconfirmityDay?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderReconDetailContract extends BOA.Common.Types.ContractBase {
        localPaymentOrderContract?: BOA.Types.Kernel.Invoice.PaymentOrderContract;
        remotePaymentOrderContract?: BOA.Types.Kernel.Invoice.PaymentOrderContract;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        branchId?: number;
        cancelAmount?: number;
        cancelCount?: number;
        corporationCancelAmount?: number;
        corporationCancelCount?: number;
        corporationCode?: string;
        corporationCount?: number;
        corporationId?: number;
        corporationPaymentAmount?: number;
        corporationPaymentCount?: number;
        corporationType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationType;
        endTime?: any;
        hostIP?: string;
        hostName?: string;
        lastReconDate?: Date;
        originalRequestData?: string;
        originalResponseData?: string;
        paymentAmount?: number;
        paymentCount?: number;
        paymentGroupList?: BOA.Types.Kernel.Invoice.PaymentGroupContract[];
        paymentList?: BOA.Types.Kernel.Invoice.PaymentContract[];
        paymentOrderCancelCount?: number;
        paymentOrderCount?: number;
        paymentReconDetailList?: BOA.Types.Kernel.Invoice.PaymentReconDetailContract[];
        paymentReconId?: number;
        reconDate?: Date;
        reconType?: number;
        reconTypeName?: string;
        shortName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconDefinitionContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        corporationId?: number;
        endTime?: any;
        hasDetailedPaymentList?: boolean;
        hasOrderRecon?: boolean;
        hostIP?: string;
        hostName?: string;
        paymentReconDefinitionId?: number;
        reconType?: number;
        reconUIType?: number;
        systemDate?: Date;
        unconfirmityDay?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconDetailContract extends BOA.Common.Types.ContractBase {
        localPaymentContract?: BOA.Types.Kernel.Invoice.PaymentContract;
        remotePaymentContract?: BOA.Types.Kernel.Invoice.PaymentContract;
    }
    interface PaymentSenderErrorContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        paymentSenderErrorId?: number;
        systemDate?: Date;
        userName?: string;
        workDate?: Date;
    }
    interface PaymentSMSContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        channelId?: number;
        corporationId?: number;
        corporationShortName?: string;
        dueDate?: Date;
        hostIP?: string;
        hostName?: string;
        installmentNumber?: string;
        institutionCode?: string;
        invoiceNumber?: string;
        mainBusinessKey?: number;
        paymentSMSId?: number;
        paymentType?: number;
        personGSM?: string;
        productType?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentSMSRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.Invoice.PaymentSMSContract;
    }
    interface ReconRelationContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        reconRelationId?: number;
        relatedCorporationId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RemoteConfig {
    }
    interface ShellProcess {
    }
    interface SubCorporationContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        subCorporationCode?: number;
        subCorporationId?: number;
        subCorporationName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TcpConnectionManagerContract extends BOA.Common.Types.ContractBase {
        bankReference?: string;
        clientConnection?: any;
        clientNetworkStream?: any;
        clientSslStream?: any;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        iP?: string;
        isNeedLogoff?: boolean;
        isNeedLogon?: boolean;
        lastHeartbeat?: Date;
        originalRequestData?: string;
        originalResponseData?: string;
        port?: number;
        remoteSubId?: number;
        serverName?: string;
        status?: BOA.Types.Kernel.Invoice.InvoiceCommon.TcpConnectionStatus;
        systemDate?: Date;
        transmissionDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TcpRemoteSubDefinitionContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        remoteSubId?: number;
        serverName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TempDebtContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        corporationPartitionId?: number;
        dueDate?: Date;
        installmentNumber?: string;
        institutionCode?: string;
        invoiceNumber?: string;
    }
    interface TransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        beginTranDate?: Date;
        branchName?: string;
        businessKey?: number;
        corporationId?: number;
        corporationName?: string;
        corporationType?: BOA.Types.Kernel.Invoice.InvoiceCommon.CorporationType;
        description?: string;
        endTranDate?: Date;
        hostIP?: string;
        hostName?: string;
        shortName?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        transferAccountNumber?: number;
        transferAccountSuffix?: number;
        transferDate?: Date;
        transferDefinitionId?: number;
        transferId?: number;
        transferType?: number;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TransferDefinitionContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        corporationId?: number;
        corporationName?: string;
        corporationProcessType?: number;
        debtType?: number;
        debtTypeDescription?: string;
        description?: string;
        firstTransferDate?: Date;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        paymentTypeDescription?: string;
        shortName?: string;
        subCorporationCode?: number;
        subCorporationName?: string;
        systemDate?: Date;
        transferAccountNumber?: number;
        transferAccountSuffix?: number;
        transferBlokeDay?: number;
        transferBlokeType?: number;
        transferDateList?: Date[];
        transferDefinitionDetailContract?: BOA.Types.Kernel.Invoice.TransferDefinitionDetailContract[];
        transferDefinitionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TransferDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        pastDay?: number;
        systemDate?: Date;
        transferDay?: number;
        transferDefinitionDetailId?: number;
        transferDefinitionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workDay?: number;
    }
    interface TransferDetailContract extends BOA.Common.Types.ContractBase {
    }
    interface TransferErrorContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        beginTranDate?: Date;
        branchName?: string;
        businessKey?: number;
        corporationId?: number;
        corporationName?: string;
        description?: string;
        endTranDate?: Date;
        errorCode?: number;
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        shortName?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        transferDate?: Date;
        transferDefinitionId?: number;
        transferErrorId?: number;
        transferId?: number;
        tranTime?: any;
        userName?: string;
    }
    interface UniqueKey {
    }
    interface XmlSerializerHelper {
    }
}
declare namespace BOA.Types.Kernel.Invoice.Extensions {
    interface ByteExtensions {
    }
    interface DateTimeExtensions {
    }
    interface DecimalExtensions {
    }
    interface IEnumerableExtensions {
    }
    interface IntExtensions {
    }
    interface LongExtensions {
    }
    interface PredicateBuilder {
    }
    interface StringExtensions {
    }
    interface TcpClientExtensions {
    }
    interface XmlExtensions {
    }
}
declare namespace BOA.Types.Kernel.Invoice.InvoiceCommon {
    export const enum CommunicitaionType {
        Email = 1,
        Sms = 2
    }
    export const enum CompletionType {
        BeginZero = 1,
        BeginSpace = 2,
        EndSpace = 3,
        NoCompletion = 0
    }
    export const enum CorporationConnectionType {
        Online = 1,
        Offline = 2
    }
    export const enum CorporationErrorType {
        All = 1,
        OnlyUI = 2,
        OnlyBatch = 3
    }
    export const enum CorporationProcessType {
        Fatura = 1,
        Kontor = 2
    }
    export const enum CorporationStatus {
        Active = 1,
        Passive = 2
    }
    export const enum CorporationType {
        All = 0,
        NaturalGas = 1,
        Electricity = 2,
        Water = 3,
        Telecominication = 4,
        Other = 5,
        MunicipalityTax = 6,
        SiteSubscription = 7
    }
    export const enum DebtType {
        All = 0,
        Invoice = 1,
        Subscribe = 2,
        Deposit = 3,
        Land = 4,
        Terrain = 5,
        Cleanliness = 6,
        Estate = 7
    }
    export const enum OrderedDebtMethodType {
        GetDebtList = 1,
        GetOrderedDebtList = 2
    }
    export const enum OrderedDebtQueryType {
        ByDate = 1,
        ByInstallmentNumber = 2
    }
    export const enum OrderedDebtSaveType {
        ALL = 1,
        OnlyDueDate = 2
    }
    export const enum OrderedPaymentQueryType {
        None = 1,
        ByDebtInsertDate = 2
    }
    export const enum PaymentCenterTransactionType {
        DebtQuery = 1,
        Payment = 2,
        PaymentCancel = 3,
        BalanceQuery = 4
    }
    export const enum PaymentOrderOwnerType {
        Customer = 1,
        Company = 2
    }
    export const enum PaymentOrderResultType {
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum PaymentOrderStatus {
        Active = 1,
        Passive = 2,
        ActiveOnlyLocal = 3,
        PassiveOnlyLocal = 4
    }
    export const enum PaymentStatus {
        Accounting = 1,
        Notification = 2,
        Cancel = 3,
        CancelFromRecon = 4,
        CancelApproving = 5
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum QueryType {
        Standard = 1,
        Selective = 2
    }
    export const enum ReconStatus {
        Empty = 0,
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum ReconType {
        Automatic = 1,
        Manual = 2
    }
    export const enum ScheduleStatus {
        Error = 0,
        Idle = 1,
        Delete = 2,
        GetDebt = 3,
        Import = 4,
        Payment = 5
    }
    export const enum TcpConnectionStatus {
        Logon = 1,
        Logoff = 2
    }
    export const enum TransferType {
        Manual = 1,
        Automatic = 2
    }
    export const enum UI {
        Payment = 1,
        PaymentOrder = 2
    }
    export const enum UIVariableType {
        Numeric = 1,
        AlphaNumeric = 2
    }
    export const enum WaitingType {
        DayBased = 1,
        CalenderDay = 2,
        WorkingDay = 3,
        Monthly = 4
    }
}
declare namespace BOA.Types.Kernel.KAS.EFT {
    export const enum PaymentAccountType {
        None = 0,
        Account = 1,
        GeneralLedger = 2,
        Cahce = 3
    }
    interface BalanceManagementContract extends BOA.Types.Kernel.KAS.EFT.GeneralMessageContractBase {
        accountSuffix?: number;
        amount?: number;
        balance?: number;
        paymentType?: string;
        receiverAccountNumber?: string;
        receiverAccountNumberParamCode?: string;
        receiverName?: string;
        reiverAccountSuffix?: string;
        senderAccountNumber?: string;
    }
    interface BalanceTransferContract extends BOA.Types.Kernel.KAS.EFT.GeneralMessageContractBase {
        amount?: number;
        balance?: number;
        iD?: number;
        systemName?: string;
    }
    interface EFTCustomerGeneralPaymentContract extends BOA.Types.KAS.PaymentHeaderContract {
        beginDate?: Date;
        capital?: number;
        chargeAmount?: number;
        commissionAmount?: number;
        correspondentBankBillNumber?: number;
        creditCardNumber?: string;
        description?: string;
        endDate?: Date;
        fec?: string;
        fecAmount?: number;
        fer?: number;
        gIBTransferType?: number;
        incomeAmount?: number;
        incomeRate?: number;
        operationNumber?: string;
        paymentId?: number;
        paymentType?: BOA.Types.KAS.PaymentTypes;
        receiverAddress?: string;
        receiverFatherName?: string;
        receiverPhoneNumber?: string;
        referenceNumber?: string;
        relationalProcessDate?: Date;
        relationalQueryToken?: number;
        returnCode?: string;
        senderBankBillNumber?: number;
        senderPhoneNumber?: string;
        taxAmount?: number;
    }
    interface EFTListContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        channelName?: string;
        customerBranchName?: string;
        description?: string;
        errorCode?: string;
        errorDescription?: string;
        kASProcessDate?: Date;
        kASReceiveDate?: Date;
        listId?: number;
        messageSendDate?: Date;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: number;
        paymentBranchId?: number;
        paymentBusinessKey?: number;
        priority?: number;
        processNumber?: string;
        processType?: string;
        queryToken?: number;
        receiverAccountNumber?: string;
        receiverBankName?: string;
        receiverBranchCode?: number;
        receiverBranchName?: string;
        receiverName?: string;
        receiverParticipantCode?: number;
        referenceNumber?: string;
        relationalQueryToken?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultText?: string;
        returnCode?: string;
        senderAccountNumber?: string;
        senderBankName?: string;
        senderBranchCode?: number;
        senderBranchName?: string;
        senderName?: string;
        senderParticipantCode?: number;
        startUserName?: string;
        state?: number;
        stateDescription?: string;
        transactionBranchId?: number;
        transactionBranchName?: string;
        uSDAmount?: number;
    }
    interface EndOfDayEFTContract extends BOA.Types.KAS.MessegeHeaderContract {
        balance?: number;
        claimAmount?: number;
        claimMessageCount?: number;
        dayBeginBalance?: number;
        deptAmount?: number;
        deptMessageCount?: number;
        participantCode?: number;
        systemDate?: Date;
        systemName?: string;
        tranDate?: Date;
    }
    interface GeneralMessageContractBase extends BOA.Common.Types.ContractBase {
        description?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageRoute?: number;
        messageSendDate?: Date;
        priority?: number;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface GetEFTPaymentResponseContract extends BOA.Common.Types.ContractBase {
        errorList?: BOA.Types.KAS.ErrorContract[];
        isEndOfDay?: boolean;
        kASResponseDate?: Date;
        paymentList?: BOA.Types.KAS.IEFTContract[];
        pendingMessage?: string;
        responseNumber?: string;
        waitingRequestNumber?: string;
    }
    interface IEFTPaymentContract {
    }
    interface IncomingCorrespondentPaymentContract extends BOA.Types.KAS.MessegeHeaderContract {
        amount?: number;
        authorizedPersonID?: number;
        beginDate?: Date;
        birthDate?: Date;
        birthPlace?: string;
        brokerAccountNumber?: string;
        brokerName?: string;
        channelId?: number;
        chargeDetail?: string;
        customerId?: string;
        description?: string;
        descriptionText?: string;
        divitId?: string;
        endDate?: Date;
        errorCode?: string;
        gIBTransferType?: number;
        hostName?: string;
        incomingId?: number;
        information?: string;
        isAuthorizedOrOrder?: number;
        isEndOfDay?: boolean;
        isMatched?: boolean;
        isSwiftMessageSent?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        lastReceiveOrg?: string;
        lastReceiveOrgAccountNumber?: string;
        lastReceiverAccountNumber?: string;
        lastReceiverName?: string;
        otherSenderInfo?: string;
        passportNumber?: string;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: number;
        paymentBranchId?: number;
        paymentSource?: string;
        paymentType?: string;
        prenotificationReferenceNumber?: string;
        receiverAccountNumber?: string;
        receiverCityCode?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        receiverOrg?: string;
        receiverOrgAccountNumber?: string;
        referenceNumber?: string;
        relationalMessageDate?: Date;
        relationalQueryToken?: number;
        relativePersonId?: number;
        requestNumber?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        returnCode?: string;
        senderAccountNumber?: string;
        senderAddress?: string;
        senderCityCode?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        sendingInfo?: string;
        sourceType?: string;
        state?: BOA.Types.KAS.IncomingEFTStates;
        statusReason?: number;
        swfAccountNumber?: string;
        swfSenderName?: string;
        swfSenderOrgName?: string;
        swftSenderOrgAccountNumber?: string;
        swiftReferenceNumber?: string;
        systemDate?: Date;
        thirdPersonId?: number;
        transactionBranchId?: number;
        transferToEFT?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InComingEFTContract extends BOA.Types.KAS.MessegeHeaderContract {
        address?: string;
        amount?: number;
        authorizedPersonID?: number;
        beginDate?: Date;
        birthDate?: Date;
        birthPlace?: string;
        businessKey?: number;
        capital?: number;
        channelId?: number;
        chargeAmount?: number;
        commissionAmount?: number;
        correspondentBankBillNumber?: number;
        creditCardNumber?: string;
        customerId?: string;
        description?: string;
        endDate?: Date;
        endOfDayBalance?: number;
        endOfDayDebit?: number;
        fec?: string;
        fecAmount?: number;
        fer?: number;
        hostName?: string;
        incomeAmount?: number;
        incomeRate?: number;
        incomingEFTId?: number;
        isAuthorizedOrOrder?: number;
        isEndOfDay?: boolean;
        isMatched?: boolean;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        nationality?: string;
        operationNumber?: string;
        passportNumber?: string;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: number;
        paymentBranchId?: number;
        paymentSource?: string;
        paymentType?: string;
        processInfo?: string;
        receiverAccountNumber?: string;
        receiverAddress?: string;
        receiverCityCode?: string;
        receiverFatherName?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        receiverPhoneNumber?: string;
        referenceNumber?: string;
        relationalMessageDate?: Date;
        relationalQueryToken?: number;
        relationType?: number;
        requestNumber?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        returnCode?: string;
        returnDescription?: string;
        senderAccountNumber?: string;
        senderBankBillNumber?: number;
        senderCityCode?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        senderPhoneNumber?: string;
        state?: BOA.Types.KAS.IncomingEFTStates;
        statusReason?: number;
        swiftReferenceNumber?: string;
        systemDate?: Date;
        taxAmount?: number;
        transactionBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
    }
    interface InComingEFTRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        channelId?: number;
        correspondentPayment?: BOA.Types.Kernel.KAS.EFT.IncomingCorrespondentPaymentContract;
        correspondentPaymentOut?: BOA.Types.Kernel.KAS.EFT.OutGoingCorrespondentPaymentContract;
        dataContract?: BOA.Types.Kernel.KAS.EFT.InComingEFTContract;
        errorMessageList?: string[];
        hostName?: string;
        id?: number;
        inComingEFTId?: number;
        increaseBalance?: BOA.Types.Kernel.KAS.EFT.InComingEFTContract;
        marketPayment?: BOA.Types.Kernel.KAS.EFT.IncomingTCMBMarketPaymentContract;
        msgAmount?: number;
        msgComment?: string;
        msgCreditCardNumber?: string;
        msgEndMessageMarker?: string;
        msgEnteranceTime?: string;
        msgGroupType?: string;
        msgMessageCode?: string;
        msgPartitionNumber?: string;
        msgPaymentSource?: string;
        msgPriority?: number;
        msgReceiverAccountNumber?: string;
        msgReceiverBankCode?: string;
        msgReceiverBranchCode?: string;
        msgReceiverCitizenshipId?: string;
        msgReceiverCityCode?: string;
        msgReceiverName?: string;
        msgReceiverPhone?: string;
        msgRecievedFlag?: string;
        msgReferenceNumber?: string;
        msgSenderAccountNumber?: string;
        msgSenderBankCode?: string;
        msgSenderBranchCode?: string;
        msgSenderCitizenshipId?: string;
        msgSenderCityCode?: string;
        msgSenderName?: string;
        msgSenderPhone?: string;
        msgSequenceNumber?: string;
        msgSystemCode?: string;
        msgTransactionDate?: Date;
        msgTransactionTime?: string;
        outMarketPayment?: BOA.Types.Kernel.KAS.EFT.OutGoingMarketPaymentContract;
        participanPaymentOut?: BOA.Types.Kernel.KAS.EFT.OutGoingEFTContract;
        participantPayment?: BOA.Types.Kernel.KAS.EFT.InComingEFTContract;
        paymentAccount?: string;
        paymentAccountType?: number;
        paymentReturn?: BOA.Types.Kernel.KAS.EFT.InComingEFTContract;
        processType?: string;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverBranchId?: number;
        relationType?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        returnProcessType?: string;
        state?: number;
        stateDetail?: number;
        statusReason?: number;
        systemDate?: Date;
        transactionBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
    }
    interface InComingEFTTranContract extends BOA.Common.Types.ContractBase {
        approveUserName?: string;
        businessKey?: number;
        hostName?: string;
        inComingEFTId?: number;
        processType?: string;
        reverseBusinessKey?: number;
        state?: number;
        stateDescription?: string;
        tranDate?: Date;
        tranRef?: string;
        tranType?: BOA.Types.KAS.IncomingEFTTranType;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface InComingEFTTranRequest extends BOA.Common.Types.RequestBase {
        approveUserName?: string;
        businessKey?: number;
        dataContract?: BOA.Types.Kernel.KAS.EFT.InComingEFTTranContract;
        hostName?: string;
        inComingEFTId?: number;
        reverseBusinessKey?: number;
        state?: number;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface IncomingTCMBMarketPaymentContract extends BOA.Types.KAS.MessegeHeaderContract {
        accountNumber?: string;
        amount?: number;
        beginDate?: Date;
        behalfFirmCode?: string;
        behalfIdentity?: string;
        behalfType?: string;
        bidDate?: Date;
        bidNumber?: string;
        bidType?: string;
        businessKey?: number;
        cBCorrespondAccountNumber?: string;
        cBCorrespondName?: string;
        channelId?: number;
        correspondAccountNumber?: string;
        correspondName?: string;
        endDate?: Date;
        fecAmount?: number;
        fecRate?: number;
        fecType?: string;
        hostName?: string;
        incomeRate?: number;
        incomingId?: number;
        info?: string;
        marketCode?: string;
        paymentType?: string;
        period?: string;
        quantity?: number;
        reference?: string;
        requestNumber?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        state?: BOA.Types.KAS.IncomingEFTStates;
        systemDate?: Date;
        term?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
        valueDate?: Date;
    }
    interface IncomingTCMBMarketPaymentRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: string;
        amount?: number;
        beginDate?: Date;
        behalfFirmCode?: string;
        behalfIdentity?: string;
        behalfType?: string;
        bidDate?: Date;
        bidNumber?: string;
        bidType?: string;
        businessKey?: number;
        cBCorrespondAccountNumber?: string;
        cBCorrespondName?: string;
        channelId?: number;
        correspondAccountNumber?: string;
        correspondName?: string;
        dataContract?: BOA.Types.Kernel.KAS.EFT.IncomingTCMBMarketPaymentContract;
        endDate?: Date;
        fecAmount?: number;
        fecRate?: number;
        fecType?: string;
        hostName?: string;
        incomeRate?: number;
        incomingId?: number;
        info?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageSendDate?: Date;
        paymentType?: string;
        period?: string;
        priority?: number;
        processType?: string;
        quantity?: number;
        queryToken?: number;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        reference?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        systemDate?: Date;
        term?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
        valueDate?: Date;
    }
    interface OutGoingCorrespondentPaymentContract extends BOA.Types.Kernel.KAS.EFT.GeneralMessageContractBase {
        address?: string;
        amount?: number;
        authorizedPersonID?: number;
        beginDate?: Date;
        birthDate?: Date;
        birthPlace?: string;
        brokerAccountNumber?: string;
        brokerName?: string;
        businessKey?: number;
        channelId?: number;
        chargeDetail?: string;
        cost?: number;
        customerId?: string;
        descriptionText?: string;
        divitId?: string;
        endDate?: Date;
        errorCode?: string;
        gIBTransferType?: number;
        hostName?: string;
        information?: string;
        isAuthorized?: boolean;
        isAuthorizedOrOrder?: number;
        isEndOfDay?: boolean;
        isMatched?: boolean;
        isOrder?: boolean;
        isSwiftMessageSent?: string;
        lastReceiveOrg?: string;
        lastReceiveOrgAccountNumber?: string;
        lastReceiverAccountNumber?: string;
        lastReceiverName?: string;
        otherSenderInfo?: string;
        outGoingId?: number;
        passportNumber?: string;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: BOA.Types.Kernel.KAS.EFT.PaymentAccountType;
        paymentBranchId?: number;
        paymentSource?: string;
        paymentType?: string;
        prenotificationReferenceNumber?: string;
        receiverAccountNumber?: string;
        receiverCityCode?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        receiverOrg?: string;
        receiverOrgAccountNumber?: string;
        referenceNumber?: string;
        relationalMessageDate?: Date;
        relationalQueryToken?: number;
        relativePersonId?: number;
        returnCode?: string;
        senderAccountNumber?: string;
        senderAddress?: string;
        senderBirthDate?: Date;
        senderBirthPlace?: string;
        senderCityCode?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        senderPassportNo?: string;
        senderTaxOffice?: string;
        sendingInfo?: string;
        sourceType?: string;
        stateDescription?: string;
        statusReason?: number;
        swfAccountNumber?: string;
        swfSenderName?: string;
        swfSenderOrgName?: string;
        swftSenderOrgAccountNumber?: string;
        swiftReferenceNumber?: string;
        thirdPersonId?: number;
        totalAmount?: number;
        transactionBranchId?: number;
        transferToEFT?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        workFlowInstanceId?: number;
    }
    interface OutGoingCorrespondentPaymentSendRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.KAS.EFT.OutGoingCorrespondentPaymentContract;
        errorMessageList?: string[];
    }
    interface OutGoingEFTContract extends BOA.Types.Kernel.KAS.EFT.GeneralMessageContractBase {
        address?: string;
        amount?: number;
        beginDate?: Date;
        birthDate?: Date;
        birthPlace?: string;
        businessKey?: number;
        capital?: number;
        channelId?: number;
        chargeAmount?: number;
        commissionAmount?: number;
        correspondentBankBillNumber?: number;
        creditCardNumber?: string;
        customerId?: string;
        divitId?: string;
        endDate?: Date;
        errorCode?: string;
        fec?: string;
        fecAmount?: number;
        fer?: number;
        gIBTransferType?: number;
        hostName?: string;
        ibanNotDeclared?: boolean;
        incomeAmount?: number;
        incomeRate?: number;
        isAuthorized?: boolean;
        isEndOfDay?: boolean;
        isMatched?: boolean;
        nationality?: string;
        operationNumber?: string;
        outGoingId?: number;
        passportNumber?: string;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: BOA.Types.Kernel.KAS.EFT.PaymentAccountType;
        paymentBranchId?: number;
        paymentSource?: string;
        paymentType?: string;
        processInfo?: string;
        receiverAccountNumber?: string;
        receiverAddress?: string;
        receiverBankName?: string;
        receiverBranchName?: string;
        receiverCityCode?: string;
        receiverFatherName?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        receiverParticipantName?: string;
        receiverPhoneNumber?: string;
        referenceNumber?: string;
        relationalMessageDate?: Date;
        relationalQueryToken?: number;
        relativePersonId?: number;
        returnCode?: string;
        senderAccountNumber?: string;
        senderAddress?: string;
        senderBankBillNumber?: number;
        senderBirthDate?: Date;
        senderBirthPlace?: string;
        senderCityCode?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        senderPassportNo?: string;
        senderPersonType?: number;
        senderPhoneNumber?: string;
        senderTaxOffice?: string;
        stateDescription?: string;
        statusReason?: number;
        systemDate?: Date;
        taxAmount?: number;
        thirdPersonId?: number;
        transactionBranchId?: number;
        transferToEFT?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        withoutLimit?: number;
        workFlowInstanceId?: number;
    }
    interface OutgoingEFTQueueCancellationContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        priority?: number;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        relationalQueryToken?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OutgoingEFTQueueChangeContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        newPriority?: number;
        priority?: number;
        processType?: string;
        queryToken?: string;
        receiverBankName?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        relationalQueryToken?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OutGoingEFTRequestTEMP extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.KAS.EFT.OutGoingEFTContract;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface OutGoingEFTSendRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.KAS.EFT.OutGoingEFTContract;
        errorMessageList?: string[];
    }
    interface OutGoingEFTTranContract extends BOA.Common.Types.ContractBase {
        approveUserName?: string;
        businessKey?: number;
        errorCode?: string;
        outGoingEFTId?: number;
        processType?: string;
        reverseBusinessKey?: number;
        state?: number;
        stateDescription?: string;
        tranDate?: Date;
        tranDescription?: string;
        tranRef?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface OutGoingEFTTranRequest extends BOA.Common.Types.RequestBase {
        approveUserName?: string;
        businessKey?: number;
        dataContract?: BOA.Types.Kernel.KAS.EFT.OutGoingEFTTranContract;
        errorCode?: string;
        hostName?: string;
        outGoingEFTId?: number;
        reverseBusinessKey?: number;
        state?: number;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface OutGoingMarketPaymentContract extends BOA.Types.Kernel.KAS.EFT.GeneralMessageContractBase {
        address?: string;
        amount?: number;
        bidDate?: Date;
        bidNumber?: number;
        bidType?: number;
        businessKey?: number;
        channelId?: number;
        customerId?: string;
        hostName?: string;
        ibanNotDeclared?: boolean;
        information?: string;
        marketCode?: string;
        outGoingId?: number;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: BOA.Types.Kernel.KAS.EFT.PaymentAccountType;
        paymentBranchId?: number;
        paymentSource?: string;
        paymentType?: string;
        paymentWhom?: string;
        processInfo?: string;
        qantity?: number;
        receiverAccountNumber?: string;
        receiverAddress?: string;
        receiverCityCode?: string;
        receiverFatherName?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        receiverPhoneNumber?: string;
        reference?: string;
        relativePersonId?: number;
        senderAccountNumber?: string;
        senderAddress?: string;
        senderBirthDate?: Date;
        senderBirthPlace?: string;
        senderCityCode?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        senderPassportNo?: string;
        senderPersonType?: number;
        senderPhoneNumber?: string;
        senderTaxOffice?: string;
        stateDescription?: string;
        thirdPersonId?: number;
        transactionBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        valueCode?: string;
        whomCorporateCode?: string;
        whomIdentityNumber?: number;
        workFlowInstanceId?: number;
    }
    interface PriorityContract extends BOA.Common.Types.ContractBase {
        limitAmount?: number;
        priorityNumber?: number;
        processType?: string;
        resourceCode?: string;
        state?: number;
    }
    interface QueueErrorContract extends BOA.Types.KAS.MessegeHeaderContract {
        errorCode?: string;
        relationalQueryToken?: number;
    }
    interface RelationsContract extends BOA.Common.Types.ContractBase {
        mainMessageId?: number;
        mainMessageType?: number;
        msgAmount?: number;
        msgMessageCode?: string;
        msgMessageType?: string;
        msgReceiverBankName?: string;
        msgReceiverBranchName?: string;
        msgReferenceNumber?: string;
        msgSenderBankName?: string;
        msgSenderBranchName?: string;
        msgTransactionDate?: Date;
        relatedMessageId?: number;
        relatedMessageType?: number;
        relationType?: number;
        relationTypeDescription?: string;
        stateDescription?: string;
        stateDetailDescription?: string;
        userName?: string;
    }
    interface SendEFTPaymentRequestContract extends BOA.Common.Types.ContractBase {
        paymentList?: BOA.Types.KAS.IEFTContract[];
    }
    interface SendEFTPaymentResponseContract extends BOA.Common.Types.ContractBase {
        errorMesaageList?: BOA.Types.KAS.ErrorMesaageContract[];
        responseTime?: Date;
        result?: BOA.Types.KAS.ResultContract;
    }
}
declare namespace BOA.Types.Kernel.KAS.EMKT {
    interface GetEMKTPaymentResponseContract extends BOA.Common.Types.ContractBase {
        errorList?: BOA.Types.KAS.ErrorContract[];
        isEndOfDay?: boolean;
        kASResponseDate?: Date;
        paymentList?: BOA.Types.Kernel.KAS.EMKT.IEMKTPaymentContract[];
        pendingMessage?: string;
        responseNumber?: string;
        waitingRequestNumber?: string;
    }
    interface IEMKTPaymentContract {
    }
    interface IncomingEMKTDataUpdatedNotificationContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostName?: string;
        interestPayDate?: Date;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        storageCode?: string;
        systemDate?: Date;
        updateDate?: Date;
        updatedDataType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateType?: string;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
    }
    interface IncomingEMKTDirectDebitNotificationContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        creditedParticipant?: number;
        description?: string;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        outStorageCode?: string;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
    }
    interface IncomingEMKTECRNotificationContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        broker?: number;
        cancellationType?: string;
        cancelledAmount?: number;
        cancelledQuantity?: number;
        description?: string;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        noticeType?: string;
        processNumber?: number;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IncomingEMKTInterestRefundNotificationContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostName?: string;
        interestRefundDate?: Date;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        refundStorageInfo?: BOA.Types.Kernel.KAS.EMKT.RefundStorageInfo[];
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
    }
    interface IncomingEMKTMKKOperationNotificationContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        description?: string;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        notificationType?: string;
        processNumber?: number;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userReference?: string;
        valueCode?: string;
    }
    interface IncomingEMKTMKKValueSellContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        description?: string;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        mKKValueBuyer?: number;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        salesTranNumber?: number;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userReference?: string;
    }
    interface IncomingEMKTOperationNotificationContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        broker?: string;
        description?: string;
        hostName?: string;
        inStoreCode?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        notificationType?: string;
        outStoreCode?: string;
        processNumber?: number;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        remainingAmount?: number;
        remainingQuantity?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userReference?: string;
        valueCode?: string;
    }
    interface IncomingEMKTRefundNotificationContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        refundDate?: Date;
        refundStorageInfo?: BOA.Types.Kernel.KAS.EMKT.RefundStorageInfo[];
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
    }
    interface IncomingEMKTRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.KAS.EMKT.IEMKTPaymentContract;
        errorMessageList?: string[];
    }
    interface IncomingEMKTValueSellContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        description?: string;
        hostName?: string;
        inPieceBuyIndicator?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        outStorageCode?: string;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        returnAmount?: number;
        returnDate?: Date;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        typeOfAssetSale?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userReference?: string;
        valueCode?: string;
    }
    interface IncomingEMKTValueTransferContract extends BOA.Common.Types.ContractBase {
        broker?: string;
        description?: string;
        inStorageCode?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        outStorageCode?: string;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
    }
    interface OutgoingEMKTMKKValueBuyContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        description?: string;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        mKKValueBuyer?: number;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        salesTranNumber?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userReference?: string;
    }
    interface OutgoingEMKTRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        b85NotificationType?: string;
        d01Contract?: BOA.Types.Kernel.KAS.EMKT.OutgoingEMKTValueSellContract;
        d03Contract?: BOA.Types.Kernel.KAS.EMKT.OutgoingEMKTValueBuyContract;
        d04Contract?: BOA.Types.Kernel.KAS.EMKT.OutgoingEMKTMKKValueBuyContract;
        dataContract?: BOA.Types.Kernel.KAS.EMKT.IEMKTPaymentContract;
        errorMessageList?: string[];
    }
    interface OutgoingEMKTValueBuyContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        description?: string;
        hostName?: string;
        inPieceBuyIndicator?: string;
        inStorageCode?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        salesTransactionNumber?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userReference?: string;
    }
    interface OutgoingEMKTValueSellCancellationContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostName?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        processNumber?: string;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OutgoingEMKTValueSellContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        description?: string;
        hostName?: string;
        inPieceBuyIndicator?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        outStorageCode?: string;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        returnAmount?: number;
        returnDate?: Date;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        typeOfAssetSale?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        userReference?: string;
        valueCode?: string;
    }
    interface OutgoingEMKTValueTransferContract extends BOA.Common.Types.ContractBase {
        broker?: string;
        description?: string;
        inStorageCode?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageSendDate?: Date;
        outStorageCode?: string;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueCode?: string;
    }
    interface RefundStorageInfo extends BOA.Common.Types.ContractBase {
        id?: number;
        notificationId?: number;
        quantity?: number;
        storageCode?: string;
    }
    interface SendEMKTPaymentRequestContract extends BOA.Common.Types.ContractBase {
        paymentList?: BOA.Types.Kernel.KAS.EMKT.IEMKTPaymentContract[];
    }
    interface SendEMKTPaymentResponseContract extends BOA.Common.Types.ContractBase {
        errorMesaageList?: BOA.Types.KAS.ErrorMesaageContract[];
        responseTime?: Date;
        result?: BOA.Types.KAS.ResultContract;
    }
}
declare namespace BOA.Types.Kernel.KAS.IHS {
    interface GeneralMessageContractBase extends BOA.Common.Types.ContractBase {
        description?: string;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageRoute?: number;
        messageSendDate?: Date;
        priority?: number;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface GeneralPurposeMessageListRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.KAS.MessageGeneralPurposeInfoContract;
    }
    interface GetIHSPaymentResponseContract extends BOA.Common.Types.ContractBase {
        errorList?: BOA.Types.KAS.ErrorContract[];
        isEndOfDay?: boolean;
        kASResponseDate?: Date;
        messageList?: BOA.Types.Kernel.KAS.IHS.IIHSContract[];
        pendingMessage?: string;
        responseNumber?: string;
        waitingRequestNumber?: string;
    }
    interface IHSCommon {
    }
    interface IIHSContract {
    }
    interface IIHSRequest {
    }
    interface IncomingIHSMarketOperationNoticeContract extends BOA.Common.Types.ContractBase {
        accoountNumber?: string;
        amount?: number;
        businessKey?: number;
        correspondentAccountNumber?: string;
        correspondentName?: string;
        description?: string;
        endDate?: Date;
        fecAmount?: number;
        fecRate?: number;
        fecType?: string;
        id?: number;
        info1?: string;
        info2?: string;
        info3?: string;
        info4?: string;
        info5?: string;
        info6?: string;
        interestRate?: number;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        matureDate?: Date;
        messageGroup?: number;
        messageSendDate?: Date;
        mMTransactionDescription?: string;
        period?: string;
        price?: number;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        reference?: string;
        refundAmount?: number;
        relatedQueryToken?: string;
        resourceCode?: string;
        returnPrice?: number;
        returnValueDate?: Date;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        startDate?: Date;
        systemDate?: Date;
        tCMBCorrespondentAccountNumber?: string;
        tCMBCorrespondentName?: string;
        valueCode?: string;
        valueDate?: Date;
    }
    interface IncomingIHSMarketOperationNoticeGetRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.KAS.IHS.IncomingIHSMarketOperationNoticeContract;
    }
    interface IncomingIHSRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.KAS.IHS.IIHSContract;
        errorMessageList?: string[];
    }
    interface OutgoingDIBSContract extends BOA.Types.Kernel.KAS.IHS.GeneralMessageContractBase {
        amount?: number;
        borrowLendRatio?: number;
        description?: string;
        dIBSDescription?: string;
        dIBSOfferType?: string;
        dIBSOperationType?: string;
        dIBSType?: number;
        dIBSValueCode?: string;
        divisibilityIndicator?: string;
        hostName?: string;
        info1?: string;
        info2?: string;
        info3?: string;
        info4?: string;
        info5?: string;
        info6?: string;
        interestRate?: number;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        maturityType?: string;
        messageId?: number;
        messageRoute?: number;
        messageSendDate?: Date;
        mMType?: number;
        offsetAmount?: number;
        priority?: number;
        processType?: string;
        quantity?: number;
        queryToken?: string;
        quotationCode?: number;
        quotationNumber?: number;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        relationalQueryToken?: string;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        transactionValueDate?: Date;
        transactionValueType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OutgoingDIBSSendRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.KAS.IHS.OutgoingDIBSContract;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface OutgoingIHSSendRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.KAS.IHS.IIHSContract;
        errorMessageList?: string[];
    }
    interface OutgoingOfferContract extends BOA.Types.Kernel.KAS.IHS.GeneralMessageContractBase {
        actualAmount?: number;
        auctionNumber?: string;
        auctionType?: string;
        description?: string;
        hostName?: string;
        interestSharePercentage?: number;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageId?: number;
        messageRoute?: number;
        messageSendDate?: Date;
        offerAmount?: number;
        offerPrice?: number;
        offerType?: string;
        offerValueCode?: string;
        priority?: number;
        processType?: string;
        queryToken?: string;
        receiverBranchCode?: number;
        receiverParticipantCode?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        resultCode?: string;
        senderBranchCode?: number;
        senderParticipantCode?: number;
        state?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OutgoingOfferSendRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.KAS.IHS.OutgoingOfferContract;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface PriorityContract extends BOA.Common.Types.ContractBase {
        priorityNumber?: number;
        resourceCode?: string;
        state?: number;
    }
    interface SendIHSRequestContract extends BOA.Common.Types.ContractBase {
        iHSList?: BOA.Types.Kernel.KAS.IHS.IIHSContract[];
    }
    interface SendIHSResponseContract extends BOA.Common.Types.ContractBase {
        errorMesaageList?: BOA.Types.KAS.ErrorMesaageContract[];
        responseTime?: Date;
        result?: BOA.Types.KAS.ResultContract;
    }
}
declare namespace BOA.Types.Kernel.KAS.IHS.IHSCommon {
    export const enum IHSTypes {
        Offer = 1,
        DIBS = 2
    }
}
declare namespace BOA.Types.Kernel.KEP {
    export const enum AddressBookType {
        Internal = 1,
        External = 2
    }
    export const enum CorporationStatus {
        Active = 1,
        Passive = 2
    }
    export const enum KepMailServerStatus {
        Existed = 0,
        Deleted = 1
    }
    export const enum KepMailStatus {
        UnRead = 0,
        Read = 1,
        UnSent = 2,
        Sent = 3,
        Cancel = 4
    }
    export const enum MailAddressType {
        From = 1,
        To = 2,
        Cc = 3,
        OriginalFrom = 4,
        OriginalTo = 5,
        OriginalCc = 6,
        ValidSentAddresses = 7,
        ValidUnSentAddresses = 8,
        InvalidAddresses = 9
    }
    export const enum MailTransactionStatus {
        Unknow = 0,
        MailIsExist = 1,
        MailInserted = 2
    }
    export const enum MailTransactionType {
        Insert = 1,
        Index = 2,
        SetStatusRead = 3,
        SetStatusUnRead = 4,
        Sent = 5,
        InsertEvidence = 6
    }
    export const enum RuleOperations {
        Equal = 1,
        In = 2
    }
    interface AddressBookContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressBookId?: number;
        addressTypeDescription?: string;
        addressTypeId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        nameWithAddress?: string;
        personalName?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface AddressBookRightsContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        addressBookId?: number;
        hostIP?: string;
        hostName?: string;
        roleName?: string;
        systemDate?: Date;
        userFullName?: string;
        userName?: string;
        workgroupName?: string;
    }
    interface AuthenticationContact extends BOA.Common.Types.ContractBase {
        sessionEndDate?: Date;
        sessionEndDateSpecified?: boolean;
        sessionPassword?: string;
        sessionStartDate?: Date;
        sessionStartDateSpecified?: boolean;
        sessionToken?: string;
    }
    interface CorporationConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configProdValue?: string;
        configTestValue?: string;
        corporationConfigId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationContract extends BOA.Common.Types.ContractBase {
        configList?: BOA.Types.Kernel.KEP.CorporationConfigContract[];
        corporationId?: number;
        corporationKey?: string;
        hostIP?: string;
        hostName?: string;
        name?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KepConstants {
    }
    interface MailAddressContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressType?: string;
        corporationId?: number;
        mailField?: number;
        mailId?: number;
        nameWithAddress?: string;
        personalName?: string;
    }
    interface MailAttachmentContract extends BOA.Common.Types.ContractBase {
        fileContent?: number[];
        fileDescription?: string;
        fileName?: string;
    }
    interface MailContract extends BOA.Common.Types.ContractBase {
        allSuccess?: boolean;
        attachmentList?: BOA.Types.Kernel.KEP.MailAttachmentContract[];
        bodyText?: string;
        ccAddressList?: BOA.Types.Kernel.KEP.MailAddressContract[];
        ccAddressListOfOriginalMessage?: BOA.Types.Kernel.KEP.MailAddressContract[];
        corporation?: BOA.Types.Kernel.KEP.CorporationContract;
        corporationId?: number;
        corporationName?: string;
        divitInstanceId?: any;
        eventCode?: string;
        evidenceInfo?: BOA.Types.Kernel.KEP.MailEvidenceContract;
        evidenceList?: BOA.Types.Kernel.KEP.MailEvidenceContract[];
        folderName?: string;
        fromAddress?: string;
        fromAddressId?: number;
        fromAddressOfOriginalMessage?: BOA.Types.Kernel.KEP.MailAddressContract;
        fromPersonalName?: string;
        hostIp?: string;
        hostName?: string;
        isDeletedFromServer?: number;
        isEvidence?: boolean;
        isEvidenceDescription?: string;
        kepMessageId?: string;
        mailId?: number;
        message?: number[];
        messageIdByRemmd?: string;
        messageUId?: number;
        parentMailId?: number;
        poolCode?: string;
        poolName?: string;
        relatedKepMessageId?: string;
        seen?: boolean;
        sentDate?: Date;
        simplifiedEventCode?: string;
        size?: number;
        sizeKiloByte?: number;
        status?: number;
        statusDescription?: string;
        subject?: string;
        subjectOfOriginalMessage?: string;
        systemDate?: Date;
        toAddressList?: BOA.Types.Kernel.KEP.MailAddressContract[];
        toAddressListOfOriginalMessage?: BOA.Types.Kernel.KEP.MailAddressContract[];
        uaMessageId?: string;
        userFullName?: string;
        userName?: string;
        workGroupId?: number;
        xtrRemIletiId?: string;
        xTrRemIletiTip?: string;
    }
    interface MailEvidenceContract extends BOA.Common.Types.ContractBase {
        content?: number[];
        creationTime?: Date;
        details?: string;
        evidenceAccounts?: string;
        evidenceGuid?: string;
        evidenceType?: string;
        evidenceTypeDescription?: string;
        mailId?: number;
        source?: string;
    }
    interface MailReceiveResultContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        mailId?: number;
        messageId?: string;
        messageUId?: number;
        poolCode?: string;
        status?: BOA.Types.Kernel.KEP.MailTransactionStatus;
        subject?: string;
    }
    interface MailSendResultContract extends BOA.Common.Types.ContractBase {
        allSuccess?: boolean;
        invalidAddresses?: BOA.Types.Kernel.KEP.MailAddressContract[];
        mailId?: number;
        messageId?: string;
        validSentAddresses?: BOA.Types.Kernel.KEP.MailAddressContract[];
        validUnsentAddresses?: BOA.Types.Kernel.KEP.MailAddressContract[];
    }
    interface MailTransactionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        mailId?: number;
        systemDate?: Date;
        transactionId?: number;
        transactionType?: number;
        transactionTypeDescription?: string;
        userFullName?: string;
        userName?: string;
    }
    interface PoolDefinitionContract extends BOA.Common.Types.ContractBase {
        poolCode?: string;
        poolName?: string;
    }
    interface PoolRightContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        hostIP?: string;
        hostName?: string;
        poolCode?: string;
        poolName?: string;
        roleName?: string;
        systemDate?: Date;
        userCode?: string;
        userName?: string;
        userNameSurname?: string;
        workgroupName?: string;
    }
    interface PoolRuleContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        isValid?: boolean;
        poolCode?: string;
        poolName?: string;
        poolRuleDetailList?: BOA.Types.Kernel.KEP.PoolRuleDetailContract[];
        ruleId?: number;
        ruleName?: string;
        ruleOrder?: number;
        systemDate?: Date;
        userFullName?: string;
        userName?: string;
    }
    interface PoolRuleDetailContract extends BOA.Common.Types.ContractBase {
        detailId?: number;
        detailOrder?: number;
        field?: string;
        fieldDescription?: string;
        filterValue?: string;
        operation?: number;
        operationDescription?: string;
        ruleId?: number;
    }
}
declare namespace BOA.Types.Kernel.KEP.KepConstants {
    interface DefaultValues {
    }
    interface Divit {
    }
    interface MimeTypes {
    }
    interface ParameterTypes {
    }
    interface RuleFields {
    }
}
declare namespace BOA.Types.Kernel.KIM {
    export const enum OperationSource {
        None = 0,
        Intranet = 1,
        CallCenter = 2,
        Internet = 3,
        Order = 4,
        BillingSystem = 5,
        ATM = 6,
        All = 7,
        Batch = 8,
        Branch = 9,
        IVR = 10,
        Kiosk = 11,
        Mobile = 12,
        POS = 13
    }
    interface BillInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerId?: number;
        debitTypeContract?: BOA.Types.Kernel.KIM.DebitTypeContract;
        originatorContract?: BOA.Types.Kernel.KIM.OriginatorContract;
        paymentPeriod?: number;
        sun?: string;
        utilityCompanyCode?: number;
        utilityCompanyName?: string;
    }
    interface DebitTypeContract extends BOA.Common.Types.ContractBase {
        debitTypeDescription?: string;
        debitTypeId?: number;
    }
    interface OriginatorContract extends BOA.Common.Types.ContractBase {
        branchId?: string;
        cityId?: number;
        companyCode?: number;
        operationSource?: BOA.Types.Kernel.KIM.OperationSource;
        userId?: string;
    }
}
declare namespace BOA.Types.Kernel.KKB {
    export const enum AccountHolderTypes {
        MainApplicant = 1,
        Joint = 2,
        Surety = 3,
        CollateralProvider = 4,
        AdditionalHolder = 5,
        Other = 8,
        Unknown = 9
    }
    export const enum AccountSpecialStatus {
        WriteOff = 1,
        Deceased = 2,
        GoneAway = 3,
        Dispute = 4,
        Arrangement = 5,
        Query = 6
    }
    export const enum AccountStatus {
        OpenActive = 0,
        ClosedRegularly = 21,
        ClosedForUsageRisk = 32,
        ClosedStillRecovering = 81,
        ClosedRecovered = 82,
        ClosedWrittenOff = 83,
        ClosedUnknown = 89,
        Unknown = 99
    }
    export const enum AddressIndicator {
        Current = 0,
        Previous = 1,
        LinkedAddress = 2,
        Other = 8,
        Unknown = 9
    }
    export const enum AddressType {
        Residential = 1,
        Postal = 2,
        POBox = 3,
        Business = 4,
        Other = 8,
        Unknown = 9
    }
    export const enum CollectionType {
        Default = 0,
        Litigation = 1,
        DefaultAndLitigation = 2,
        CouldNotFind = 3
    }
    export const enum CorporateQueryFilterType {
        ByKKBId = 0,
        ByQueryFilter = 1
    }
    export const enum CorporateQueryPurpose {
        KrediTalebiDegerlendirme = 1,
        RiskIzleme = 2
    }
    export const enum CorporateReportType {
        IzlemeRaporu = 1,
        IstihbaratRaporu = 2
    }
    export const enum CurrencyCode {
        TL = 949,
        USD = 840,
        EURO = 280
    }
    export const enum EmployerIndicator {
        Current = 0,
        Previous = 1,
        Other = 8,
        Unknown = 9
    }
    export const enum FinanceType {
        Unknown = 0,
        RetailLoan = 1,
        PersonalLoan = 2,
        Mortgage = 3,
        AutoCredit = 5,
        CreditCard = 23,
        Overdraft = 26,
        ExistingRetailCustomer = 50,
        ExistingCommercialCustomer = 60,
        CommercialCreditApplication = 61,
        SearchAgainForAnExistingApplication = 90
    }
    export const enum FrequencyOfPaymentsFlag {
        Weekly = 0,
        Monthly = 1,
        TwoMonthly = 2,
        ThreeMontly = 3,
        FourMontly = 4,
        SixMontly = 6,
        Annually = 12,
        Variable = 98,
        Unknown = 99
    }
    export const enum GenderType {
        Male = 1,
        Female = 2,
        Reserved = 3,
        Unknown = 9
    }
    export const enum HasNonPerformingLoan {
        Yes = 0,
        No = 1
    }
    export const enum IdentityType {
        Passport = 1,
        DrivingLicence = 2,
        NationalIdentityCard = 3,
        PersonalTaxNumber = 5,
        NationalCitizenshipNumber = 6,
        Other = 8,
        Unknown = 9
    }
    export const enum IncomePeriod {
        Annual = 0,
        Monthly = 1,
        Weekly = 2,
        Casual = 3,
        Other = 8,
        Unknown = 9
    }
    export const enum InterestRateFlag {
        FixedRate = 1,
        VariableRate = 2,
        Other = 8,
        Unknown = 9
    }
    export const enum IsKKBQueried {
        UnQueried = 0,
        Queried = 1,
        InvalidIdentityNo = 2
    }
    export const enum KKBQueryFilter {
        ByKKBId = 0,
        ByTaxNumber = 1,
        ByCustomerNo = 2
    }
    export const enum MaritalStatus {
        Single = 1,
        Married = 2,
        Separated = 6,
        Divorced = 7,
        Widowed = 8,
        Other = 98,
        Unknown = 99
    }
    export const enum MethodOfPayment {
        GiroPaymentBook = 1,
        DirectDebit = 2,
        PrenotifiedDirectDebit = 3,
        BillOfExchange = 4,
        StandingOrder = 5,
        Cash = 6,
        BankCheque = 7,
        CreditCard = 8,
        Other = 98,
        Unknown = 99
    }
    export const enum PaymentPerformanceFlag {
        Bad = 0,
        Indeterminate = 1,
        Good = 2
    }
    export const enum PersonTypeEnumForKKB {
        Firm = 10,
        Person = 20
    }
    export const enum PurposeOfFinance {
        NewCar = 1,
        UsedCar = 2,
        Truck = 3,
        Motorbike = 4,
        OtherRecReationalVehicle = 5,
        Furniture = 6,
        Hifi = 7,
        HouseHoldAppiances = 8,
        Clothes = 9,
        Travel = 10,
        Boat = 11,
        House = 12,
        SettleDebts = 13,
        Wedding = 14,
        Education = 15,
        PersonalComputers = 16,
        Decoration = 17,
        Deposit = 18,
        Investment = 19,
        Health = 20,
        Hobby = 21,
        Commercial = 22,
        Other = 98,
        Unknown = 99
    }
    export const enum QueryType {
        Info = 999,
        CreditCardApplication = 51,
        IndividualCreditApplication = 52
    }
    export const enum QuestionType {
        Combo = 0,
        Input = 1
    }
    export const enum ResidentialStatus {
        Owner = 1,
        BuyingWithBond = 2,
        Rented = 3,
        LivingWithParents = 4,
        LivingWithOthers = 5,
        HousingProvidedByTheEmployer = 6,
        Other = 8,
        Unknown = 9
    }
    export const enum RiskReportAssetType {
        Individual = 0,
        Corporate = 1
    }
    export const enum RiskReportOperationResult {
        OperationSucceedDataExists = 0,
        OperationSucceedDataNotExist = 1,
        WebServiceDataControlError = 2,
        DatabaseError = 3,
        SystemError = 4,
        WebUIError = 5
    }
    export const enum RiskReportQueryPurpose {
        Customer = 0,
        Enquiry = 1
    }
    export const enum RiskReportReportType {
        Detail = 0,
        Summary = 1
    }
    interface ApplicantToPersonContract extends BOA.Common.Types.ContractBase {
        creditApplicant?: BOA.Types.Kernel.KKB.IndividualCreditApplicantContract;
        personInfo?: BOA.Types.Kernel.KKB.IndividualPersonInfoContract;
    }
    interface CollectionContract extends BOA.Common.Types.ContractBase {
        accountHolderTypeDescription?: string;
        collectionBalance?: number;
        collectionTypeDescription?: string;
        creditKey?: any;
        date?: Date;
        financeTypeDescription?: string;
        outstandingDebt?: number;
        personUniqueKey?: any;
    }
    interface CommonQueryContract extends BOA.Common.Types.ContractBase {
        amount?: string;
        id?: number;
        name?: string;
        tardesQueryId?: number;
    }
    interface CommonResultContract extends BOA.Common.Types.ContractBase {
        expense?: string;
        hostName?: string;
        income?: string;
        netIncome?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface CorporateConstants {
    }
    interface CorporateCreditCounts {
        assuranceCount?: number;
        creditCount?: number;
        otherInfo?: string;
        source?: string;
    }
    interface CorporateCreditDetail {
        delayedAmount?: number;
        delayedCount?: number;
        finalDate?: Date;
        lastMonthActuallyCashedOverdueInterest?: number;
        lastMonthDueAmount?: number;
        lastMonthTotalPaidAmount?: number;
        lastMonthTotalPaidFinancingCost?: number;
        overdueInterest?: number;
        riskGroupCode?: number;
        riskGroupCodeDescription?: string;
        riskGroupCodeName?: string;
        source?: string;
        totalPaidAmount?: number;
        totalProfitlessRisk?: number;
        totalRisk?: number;
        unpaidFinancingCost?: number;
    }
    interface CorporateCreditPayment extends BOA.Common.Types.ContractBase {
        currencyCode?: string;
        ledgerAccountNumber?: string;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentStatus?: string;
        paymentType?: number;
        paymentTypeName?: string;
        source?: string;
        totalDelayedDays?: number;
    }
    interface CorporateQueryContract extends BOA.Common.Types.ContractBase {
        creditApplicationDate?: Date;
        creditInfo?: BOA.Types.Kernel.KKB.CorporateQueryCreditContract[];
        customerId?: number;
        firmInfo?: BOA.Types.Kernel.KKB.CorporateQueryFirmContract;
        forceOnline?: boolean;
        isCredit?: boolean;
        isRequestedSkor?: boolean;
        kKBId?: number;
        personInfo?: BOA.Types.Kernel.KKB.CorporateQueryPersonContract;
        personType?: BOA.Types.Kernel.KKB.PersonTypeEnumForKKB;
        queryFilterType?: BOA.Types.Kernel.KKB.CorporateQueryFilterType;
        queryPurpose?: number;
        reportType?: number;
        resourceCode?: string;
    }
    interface CorporateQueryCreditContract extends BOA.Common.Types.ContractBase {
        creditCcy?: string;
        creditType?: string;
        creditValor?: string;
    }
    interface CorporateQueryFirmContract extends BOA.Common.Types.ContractBase {
        creditRelationType?: number;
        foundationDate?: Date;
        identityCardType?: number;
        identityNumber?: string;
        phoneNumber?: string;
        taxDepartment?: string;
        title?: string;
    }
    interface CorporateQueryOpenContract extends BOA.Common.Types.ContractBase {
        kKBId?: number;
        query?: BOA.Types.Kernel.KKB.CorporateQueryContract;
        queryFilter?: BOA.Types.Kernel.KKB.CorporateQueryFilterType;
        reportLogResult?: BOA.Types.Kernel.KKB.CorporateQueryReportContract;
    }
    interface CorporateQueryPersonContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        creditRelationType?: number;
        fatherName?: string;
        gender?: string;
        identityCardType?: number;
        identityNumber?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        phoneNumber?: string;
        surname?: string;
    }
    interface CorporateQueryReportContract extends BOA.Common.Types.ContractBase {
        address?: string;
        birthDate?: Date;
        customerNo?: number;
        dataType?: number;
        departmentName?: string;
        foundationDate?: Date;
        fullName?: string;
        homeAddress?: string;
        isOnline?: boolean;
        middleName?: string;
        name?: string;
        queryDate?: Date;
        queryId?: number;
        queryPersonType?: number;
        queryPersonTypeDesc?: string;
        queryPurpose?: number;
        queryPurposeDesc?: string;
        relation?: number;
        reportType?: number;
        reportTypeDesc?: string;
        roleName?: string;
        surname?: string;
        taxNumber?: string;
        taxOffice?: string;
        tranDate?: Date;
        userFullName?: string;
        userName?: string;
    }
    interface CorporateRedemptionPlanFrozenCreditDetail {
        description?: string;
        fifthGroup?: string;
        fourthGroup?: string;
        thirdGroup?: string;
    }
    interface CorporateResponseApplicantContract extends BOA.Common.Types.ContractBase {
        applicant?: BOA.Types.Kernel.KKB.CorporateResponseTRBECA;
        corporation?: BOA.Types.Kernel.KKB.CorporateResponseCorporationInfo[];
        person?: BOA.Types.Kernel.KKB.CorporateResponsePersonInfo[];
    }
    interface CorporateResponseAssuranceGroupInfo extends BOA.Common.Types.ContractBase {
        assuranceCount?: number;
        groupCode?: number;
        sourceCount?: number;
        totalAmount?: number;
    }
    interface CorporateResponseAssuranceInfo extends BOA.Common.Types.ContractBase {
        assurance?: BOA.Types.Kernel.KKB.CorporateResponseTRBEGR;
        assuranceRealty?: BOA.Types.Kernel.KKB.CorporateResponseTRBEGM[];
        guarantor?: BOA.Types.Kernel.KKB.CorporateResponseRelationInfo[];
    }
    interface CorporateResponseAssuranceSummary {
        assuranceAmount?: number;
        assuranceGroup?: number;
        assuranceGroupDescription?: string;
        assuranceTypeCode?: number;
        assuranceTypeDescription?: string;
        toolTip?: string;
    }
    interface CorporateResponseAssuranceTableInfo {
        assuranceSourceCount?: number;
        assuranceTableSource?: BOA.Types.Kernel.KKB.CorporateResponseAssuranceTableSourceInfo[];
        assuranceType?: number;
        assuranceTypeDescription?: string;
        totalAmount?: number;
    }
    interface CorporateResponseAssuranceTableSourceInfo {
        sourceAlias?: string;
        sourceCode?: number;
        totalAmount?: number;
    }
    interface CorporateResponseAssuranceView extends BOA.Common.Types.ContractBase {
        assuranceInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEGR[];
        assuranceSummary?: BOA.Types.Kernel.KKB.CorporateResponseAssuranceSummary[];
        guarantyDetailCorporation?: BOA.Types.Kernel.KKB.CorporateResponseViewCorporation[];
        guarantyDetailPerson?: BOA.Types.Kernel.KKB.CorporateResponseViewPerson[];
        voucheeDetailCorporationList?: BOA.Types.Kernel.KKB.CorporateResponseViewCorporation[];
        voucheeDetailPersonList?: BOA.Types.Kernel.KKB.CorporateResponseViewPerson[];
    }
    interface CorporateResponseAssuranceViewAssuranceInfo {
        assuranceAmount?: number;
        assuranceDate?: Date;
        assuranceGroup?: number;
        assuranceGroupDescription?: string;
        assuranceTypeCode?: number;
        assuranceTypeDescription?: string;
        currencyCode?: number;
        currencySymbol?: string;
        marketPrice?: number;
        mIDESNumber?: string;
        source?: string;
    }
    interface CorporateResponseAssuranceViewGuarantySummary {
        guarantyCount?: number;
        guarantyName?: string;
    }
    interface CorporateResponseBouncedChequeInfo extends BOA.Common.Types.ContractBase {
        bouncedCheque?: BOA.Types.Kernel.KKB.CorporateResponseTRBECK;
        corporation?: BOA.Types.Kernel.KKB.CorporateResponseTRBETC;
        person?: BOA.Types.Kernel.KKB.CorporateResponseTRBEGC;
    }
    interface CorporateResponseBouncedChequeYearGroupInfo extends BOA.Common.Types.ContractBase {
        bouncedChequeAmount?: number;
        bouncedChequeCount?: number;
        totalBouncedChequeAmount?: number;
        totalBouncedChequeCount?: number;
        year?: number;
    }
    interface CorporateResponseCcyInfo {
        ccyCode?: number;
        computedRate?: number;
        rate?: number;
        rateDate?: Date;
        ratePower?: number;
    }
    interface CorporateResponseContract extends BOA.Common.Types.ContractBase {
        currencyInfo?: BOA.Types.Kernel.KKB.CorporateResponseCurrencyContract;
        entityList?: BOA.Types.Kernel.KKB.CorporateResponseEntity[];
        logID?: number;
        resultInfo?: BOA.Types.Kernel.KKB.CorporateResponseResultInfo;
    }
    interface CorporateResponseCorporationInfo extends BOA.Common.Types.ContractBase {
        corporationMutableInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEFV;
        corporationPermanentInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEFC;
    }
    interface CorporateResponseCorporationRelationInfo extends BOA.Common.Types.ContractBase {
        identityNumber?: string;
        identityType?: number;
        identityTypeDesc?: string;
        relationType?: number;
        relationTypeDesc?: string;
        title?: string;
    }
    interface CorporateResponseCreditInfo extends BOA.Common.Types.ContractBase {
        creditAccountInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEAC;
        creditAssuranceInfo?: BOA.Types.Kernel.KKB.CorporateResponseAssuranceInfo[];
        creditPaymentInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEAP[];
        creditPaymentPlanInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEIP[];
    }
    interface CorporateResponseCreditPackageInfo extends BOA.Common.Types.ContractBase {
        creditCcy?: string;
        creditType?: string;
        creditValor?: string;
    }
    interface CorporateResponseCurrencyContract extends BOA.Common.Types.ContractBase {
        ccyInfoList?: BOA.Types.Kernel.KKB.CorporateResponseCcyInfo[];
        fCcyCount?: number;
        lCcyCode?: number;
    }
    interface CorporateResponseCustomerFirmInfo {
        address?: string;
        customerId?: number;
        customerName?: string;
        foundationDate?: Date;
        identityType?: number;
        personId?: number;
        taxNumber?: string;
        taxOffice?: string;
        title?: string;
    }
    interface CorporateResponseCustomerPersonInfo {
        birthDate?: Date;
        birthPlace?: string;
        customerId?: number;
        fatherName?: string;
        homeAddress?: string;
        homeZipCode?: string;
        identityNumber1?: string;
        identityType1?: number;
        middleName?: string;
        motherName?: string;
        name?: string;
        surname?: string;
        workAddress?: string;
        workZipCode?: string;
    }
    interface CorporateResponseEntity extends BOA.Common.Types.ContractBase {
        applicant?: BOA.Types.Kernel.KKB.CorporateResponseApplicantContract[];
        bouncedCheque?: BOA.Types.Kernel.KKB.CorporateResponseBouncedChequeInfo[];
        scoreDataInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBESR[];
        shareHolderRelation?: BOA.Types.Kernel.KKB.CorporateResponseTRBEHI[];
        sourceData?: BOA.Types.Kernel.KKB.CorporateResponseSourceDataContract[];
        summary?: BOA.Types.Kernel.KKB.CorporateResponseSummaryContract;
        title?: string;
    }
    interface CorporateResponseLimitRiskDelayInfo {
        cashLimit?: number;
        cashLimitToolTip?: string;
        cashRisk?: number;
        cashRiskToolTip?: string;
        delayedAccountCount?: number;
        groupLimit?: number;
        groupRisk?: number;
        nonCashLimit?: number;
        nonCashLimitToolTip?: string;
        nonCashRisk?: number;
        nonCashRiskToolTip?: string;
        otherRisk?: number;
        reviseTerm?: string;
        reviseTermDate?: Date;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        totalDelayedAmount?: number;
        totalLimit?: number;
        totalLimitToolTip?: string;
        totalRisk?: number;
        totalRiskToolTip?: string;
    }
    interface CorporateResponsePartnershipInfo extends BOA.Common.Types.ContractBase {
        dataType?: number;
        identityNumber?: string;
        identityType?: number;
    }
    interface CorporateResponsePersonInfo extends BOA.Common.Types.ContractBase {
        personMutableInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEIV;
        personPermanentInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBEIC;
    }
    interface CorporateResponsePersonReference extends BOA.Common.Types.ContractBase {
        dataType?: number;
        referenceNumber?: string;
        referenceType?: number;
        sourceCode?: number;
    }
    interface CorporateResponsePersonRelationInfo extends BOA.Common.Types.ContractBase {
        middleName?: string;
        name?: string;
        relationType?: number;
        relationTypeDesc?: string;
        surname?: string;
        taxNumber?: string;
        tCIdentityNumber?: string;
    }
    interface CorporateResponsePhone extends BOA.Common.Types.ContractBase {
        countryCode?: string;
        phoneNumber?: string;
        regionCode?: string;
    }
    interface CorporateResponseProhibitoryFulcrumAndScopeInfo extends BOA.Common.Types.ContractBase {
        is_2886_DIK?: boolean;
        is_2886_DIK_BI?: boolean;
        is_2886_DIK_KI?: boolean;
        is_2886_DIK_TI?: boolean;
        is_4734_KIK?: boolean;
        is_4735_KISK?: boolean;
        is_Other?: boolean;
        is_Other_BI?: boolean;
        is_Other_KI?: boolean;
        is_Other_TI?: boolean;
    }
    interface CorporateResponseRedemptionPlanView {
        creditDetail?: BOA.Types.Kernel.KKB.CorporateCreditDetail[];
        frozenCreditDetail?: BOA.Types.Kernel.KKB.CorporateRedemptionPlanFrozenCreditDetail[];
        paymentList?: BOA.Types.Kernel.KKB.CorporateCreditPayment[];
        paymentPlanList?: BOA.Types.Kernel.KKB.CorporateCreditPayment[];
    }
    interface CorporateResponseReferenceNumber extends BOA.Common.Types.ContractBase {
        dataType?: number;
        reference?: string;
        sourceCode?: number;
    }
    interface CorporateResponseRelationInfo extends BOA.Common.Types.ContractBase {
        corporation?: BOA.Types.Kernel.KKB.CorporateResponseCorporationInfo;
        person?: BOA.Types.Kernel.KKB.CorporateResponsePersonInfo;
    }
    interface CorporateResponseResultInfo extends BOA.Common.Types.ContractBase {
        error?: string;
        hasError?: boolean;
        isOnlineResult?: boolean;
        kKBReferenceNumber?: string;
        kTCustomerId?: number;
        kTGroupId?: number;
        kTGroupName?: string;
        kTLogID?: number;
        kTQueryDate?: Date;
        kTQueryUserID?: string;
        purpose?: number;
        referenceNumber?: string;
        reportType?: number;
        taxNumber?: string;
        title?: string;
        transactionResult?: string;
        warningMessages?: BOA.Types.Kernel.KKB.CorporateResponseWarningMessageInfo[];
    }
    interface CorporateResponseScoreContract {
        finarScore?: number;
        gDSScore?: number;
        logID?: number;
        onlineLogDate?: Date;
        queryResult?: BOA.Types.Kernel.KKB.CorporateResponseContract;
    }
    interface CorporateResponseShareholderInfo extends BOA.Common.Types.ContractBase {
        dataType?: number;
        identityNumber?: string;
        identityType?: number;
    }
    interface CorporateResponseSourceDataContract extends BOA.Common.Types.ContractBase {
        assurance?: BOA.Types.Kernel.KKB.CorporateResponseAssuranceInfo[];
        auctionBan?: BOA.Types.Kernel.KKB.CorporateResponseTRBEIY[];
        corporation?: BOA.Types.Kernel.KKB.CorporateResponseCorporationInfo;
        creditAccountInfo?: BOA.Types.Kernel.KKB.CorporateResponseCreditInfo[];
        importExport?: BOA.Types.Kernel.KKB.CorporateResponseTRBEIT[];
        memzuc?: BOA.Types.Kernel.KKB.CorporateResponseTRBERH[];
        person?: BOA.Types.Kernel.KKB.CorporateResponsePersonInfo;
        relation?: BOA.Types.Kernel.KKB.CorporateResponseRelationInfo[];
        source?: string;
    }
    interface CorporateResponseSourceDataTypeInfo extends BOA.Common.Types.ContractBase {
        dataTypes?: string;
        sourceCode?: number;
    }
    interface CorporateResponseSummaryContract extends BOA.Common.Types.ContractBase {
        assuranceSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOT;
        assuranceSummaryNew?: BOA.Types.Kernel.KKB.CorporateResponseTRBEON;
        bouncedChequeSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOC;
        corporateRelationSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOF;
        creditSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOB;
        guarantorCreditSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOK;
        limitRiskSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOL;
        limitRiskSummaryNew?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOM;
        personRelationSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOI;
        responseSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOH;
        warningSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOU;
    }
    interface CorporateResponseTRBEAC extends BOA.Common.Types.ContractBase {
        accountClosingDate?: Date;
        accountPrivateStatusCode?: number;
        actualLimitAmount?: number;
        actualLimitDate?: Date;
        amount1?: number;
        amount10?: number;
        amount11?: number;
        amount12?: number;
        amount13?: number;
        amount14?: number;
        amount15?: number;
        amount16?: number;
        amount17?: number;
        amount18?: number;
        amount19?: number;
        amount2?: number;
        amount20?: number;
        amount21?: number;
        amount3?: number;
        amount4?: number;
        amount5?: number;
        amount6?: number;
        amount7?: number;
        amount8?: number;
        amount9?: number;
        branchCityCode?: string;
        branchCode?: string;
        commissionPaymentCode?: number;
        commissionRate?: number;
        creditAccountReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponseReferenceNumber;
        creditRelationCode?: number;
        creditUsageIntention?: string;
        creditUsageIntentionCode?: number;
        currencyCode?: number;
        date1?: Date;
        date2?: Date;
        date3?: Date;
        date4?: Date;
        date5?: Date;
        decree?: boolean;
        departmentCode?: string;
        draweeCountryCode?: number;
        draweeIdentityNumber?: string;
        draweeName?: string;
        draweeTaxNumber?: string;
        firstUsageDate?: Date;
        formerAccountNumber?: string;
        getGroup?: number;
        groupAmount2?: number;
        groupAmount3?: number;
        groupAmount4?: number;
        groupAmount5?: number;
        groupDate2?: Date;
        groupDate3?: Date;
        groupDate4?: Date;
        groupDate5?: Date;
        initialLimitAmount?: number;
        initialLimitDate?: Date;
        interestPaymentCode?: number;
        interestRate?: number;
        lastUpdateDate?: Date;
        lastUsageDate?: Date;
        ledgerAccountNumber?: string;
        mIDESNumber?: string;
        principalPaymentCode?: number;
        productReferenceNumber?: string;
        queryKBBReferenceNumber?: string;
        querySourceReferenceNumber?: string;
        reservedArea1?: number;
        reservedArea4?: string;
        riskGroupCode?: number;
        riskGroupCodeDescription?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        term?: number;
        termCode?: string;
        totalDelayCount?: number;
    }
    interface CorporateResponseTRBEAP extends BOA.Common.Types.ContractBase {
        creditAccountReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponseReferenceNumber;
        identityNumber?: string;
        identityType?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        paymentAmount?: number;
        paymentCurrencyCode?: number;
        paymentDate?: Date;
        paymentOrderNo?: string;
        paymentType?: number;
        paymentTypeName?: string;
        reservedArea1?: string;
        sourceCode?: number;
        sourceDataType?: number;
        totalDelayedDays?: number;
    }
    interface CorporateResponseTRBECA extends BOA.Common.Types.ContractBase {
        branchCode?: string;
        creditApplicationDate?: Date;
        creditApplicationRejectReason?: number;
        creditApplicationResult?: number;
        creditPackagesInfo?: BOA.Types.Kernel.KKB.CorporateResponseCreditPackageInfo[];
        creditProductCount?: number;
        departmentCode?: string;
        kKBReferenceNumber?: string;
        kTReferenceNumber?: string;
        lastTaxAmount?: number;
        lastTaxYear?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        onlineTransactionSource?: number;
        queryDateTime?: Date;
        queryPurpose?: number;
        relationCount?: number;
        sourceAlias?: string;
        sourceCode?: number;
        sourceType?: number;
        userID?: string;
    }
    interface CorporateResponseTRBECK extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        appropriateDate?: Date;
        bankName?: string;
        branchName?: string;
        branchNo?: number;
        chequeAmount?: number;
        isUnMatchReferenceNumber?: boolean;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        orderDate?: Date;
        orderNo?: string;
        partnerAccountIdentifier?: string;
        paymentCurrencyCode?: number;
        paymentCurrencyDesc?: string;
        paymentDate?: Date;
        personType?: string;
        personTypeCode?: string;
        previousStatusCode?: string;
        previousStatusDate?: Date;
        previousStatusDesc?: string;
        reservedArea1?: string;
        serialNo?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        statusCode?: string;
        statusDesc?: string;
    }
    interface CorporateResponseTRBEFC extends BOA.Common.Types.ContractBase {
        address?: string;
        addressZipCode?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        chainOfCommerce?: string;
        commerceRegistryNumber?: number;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        corporationType?: number;
        corporationTypeName?: string;
        country?: string;
        countryCode?: number;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        customerTypeDescription?: string;
        departmentCode?: string;
        foundationDate?: Date;
        guarantorAmount?: number;
        identityNumber?: string;
        identityType?: number;
        identityTypeDesc?: string;
        isMatch?: boolean;
        lastUpdateDate?: Date;
        matchReason?: string;
        mIDESNumber?: string;
        partnershipRate?: number;
        personReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponsePersonReference;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        reservedArea1?: string;
        reservedArea2?: string;
        reservedArea3?: number;
        reservedArea4?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        taxDepartment?: string;
        title?: string;
    }
    interface CorporateResponseTRBEFV extends BOA.Common.Types.ContractBase {
        activitySubject?: string;
        activityTypeCode?: string;
        capacityUsagePercent?: number;
        capacityUsageRatePeriod?: number;
        chamberOfArtisan?: string;
        corporateForeignCurrencyCreditLimit?: number;
        corporateLocalCurrencyCreditLimit?: number;
        corporationTotalLimit?: number;
        faxNumber1?: string;
        faxNumber2?: string;
        faxNumber3?: string;
        formattedFaxNumber1?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedFaxNumber2?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedFaxNumber3?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedPhoneNumber1?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedPhoneNumber2?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedPhoneNumber3?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedPhoneNumber4?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedPhoneNumber5?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        groupCode?: string;
        groupLimit?: number;
        groupName?: string;
        groupRisk?: number;
        imkbRate?: number;
        limitCurrencyCode?: number;
        mbSectorCode?: string;
        mbSectorDescription?: string;
        paidCapitalAmount?: number;
        paidCapitalYear?: number;
        phoneNumber1?: string;
        phoneNumber2?: string;
        phoneNumber3?: string;
        phoneNumber4?: string;
        phoneNumber5?: string;
        registeredCapitalAmount?: number;
        registeredCapitalYear?: number;
        reservedArea?: string;
        revenueAmount?: number;
        revenueCurrencyCode?: number;
        revenueCurrencyDescription?: string;
        revenueYear?: number;
        reviseTermDate?: Date;
        sectorCode?: string;
        sectorDescription?: string;
        sourceWorkBeginDate?: Date;
        totalCustomerNumber?: number;
        totalEmployeeNumber?: number;
        website?: string;
    }
    interface CorporateResponseTRBEGC extends BOA.Common.Types.ContractBase {
        address?: string;
        addressCityCode?: number;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceCityCode?: number;
        fatherName?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        reservedArea1?: string;
        surName?: string;
        taxIDNumber?: string;
        tCIDNumber?: string;
    }
    interface CorporateResponseTRBEGM extends BOA.Common.Types.ContractBase {
        address?: string;
        assuranceReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponseReferenceNumber;
        blockNumber?: string;
        branchCityCode?: string;
        branchCode?: string;
        cityCode?: number;
        cityName?: string;
        departmentCode?: string;
        expertiseAmount?: number;
        expertiseCode?: number;
        expertiseDate?: Date;
        expertiserCode?: number;
        expertiserName?: string;
        floor?: number;
        landRate?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        pageNumber?: string;
        parcel?: string;
        plot?: string;
        realtyAmount?: number;
        realtyType?: number;
        reservedArea1?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        townCode?: number;
        townName?: string;
    }
    interface CorporateResponseTRBEGR extends BOA.Common.Types.ContractBase {
        assuranceAmount?: number;
        assuranceDate?: Date;
        assuranceGroup?: number;
        assuranceGroupDescription?: string;
        assuranceReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponseReferenceNumber;
        assuranceTLAmount?: number;
        assuranceTypeCode?: number;
        assuranceTypeDescription?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        currencyCode?: number;
        currencyName?: string;
        departmentCode?: string;
        expirationDate?: Date;
        guaranteeAmount?: number;
        guarantorCount?: number;
        lastUpdateDate?: Date;
        marketPrice?: number;
        mIDESNumber?: string;
        personReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponsePersonReference;
        realtyCount?: number;
        relationCode?: number;
        relationDescription?: string;
        reservedArea1?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceDataTypeDescription?: string;
        status?: boolean;
        statusDescription?: string;
        totalChequeOrDepositCount?: number;
    }
    interface CorporateResponseTRBEHI extends BOA.Common.Types.ContractBase {
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        partnership?: BOA.Types.Kernel.KKB.CorporateResponsePartnershipInfo;
        partnershipRate?: number;
        partnershipTitle?: string;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        reservedArea1?: string;
        shareholder?: BOA.Types.Kernel.KKB.CorporateResponseShareholderInfo;
        shareholderCorporateTitle?: string;
        shareholderMiddleName?: string;
        shareholderName?: string;
        shareholderPersonTitle?: string;
        shareholderSurName?: string;
        signAuthorizationCode?: string;
        signAuthorizationDesc?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceDataTypeDescription?: string;
    }
    interface CorporateResponseTRBEIC extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        departmentCode?: string;
        fatherName?: string;
        gender?: number;
        genderDesc?: string;
        guarantorAmount?: number;
        homeAddress?: string;
        homeAddressZipCode?: string;
        identityNumber1?: string;
        identityNumber2?: string;
        identityNumber3?: string;
        identityNumber4?: string;
        identityType1?: number;
        identityType1Desc?: string;
        identityType2?: number;
        identityType2Desc?: string;
        identityType3?: number;
        identityType3Desc?: string;
        identityType4?: number;
        identityType4Desc?: string;
        isMatch?: boolean;
        isValidBirthDate?: boolean;
        lastUpdateDate?: Date;
        matchReason?: string;
        mIDESNumber?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        nationality?: number;
        nationalityDesc?: string;
        partnershipRate?: number;
        personReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponsePersonReference;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        reservedArea1?: string;
        reservedArea2?: string;
        reservedArea3?: string;
        reservedArea4?: string;
        reservedArea5?: number;
        reservedArea6?: string;
        signAuthorizationCode?: number;
        signAuthorizationDesc?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        surName?: string;
        title?: string;
        workAddress?: string;
        workAddressZipCode?: string;
    }
    interface CorporateResponseTRBEIP extends BOA.Common.Types.ContractBase {
        accountReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponseReferenceNumber;
        currencyType?: number;
        identityNumber?: string;
        identityType?: number;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        orderNo?: string;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentType?: number;
        paymentTypeName?: string;
        reservedArea1?: string;
        sourceCode?: number;
        sourceDataType?: number;
    }
    interface CorporateResponseTRBEIT extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchCityCode?: string;
        branchCode?: string;
        countryCode1?: number;
        countryCode2?: number;
        countryCode3?: number;
        countryCode4?: number;
        countryCode5?: number;
        currencyCode?: number;
        departmentCode?: string;
        indicator?: string;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        orderNo?: string;
        period?: number;
        personReferenceNumber?: BOA.Types.Kernel.KKB.CorporateResponsePersonReference;
        reservedArea1?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        year?: number;
    }
    interface CorporateResponseTRBEIV extends BOA.Common.Types.ContractBase {
        birthCityCode?: number;
        birthCityName?: string;
        birthTownCode?: number;
        birthTownName?: string;
        birthVillageName?: string;
        cellPhoneNumber?: string;
        educationStatus?: string;
        educationStatusCode?: number;
        email?: string;
        faxNumber?: string;
        fileOrderNumber?: number;
        filePageNumber?: number;
        fileVolumeNumber?: number;
        formattedCellPhoneNumber?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedFaxNumber?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedHomePhoneNumber?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formattedWorkPhoneNumber?: BOA.Types.Kernel.KKB.CorporateResponsePhone;
        formerLastName?: string;
        homePhoneNumber?: string;
        occupation?: string;
        occupationCode?: number;
        reservedArea1?: string;
        workPhoneNumber?: string;
    }
    interface CorporateResponseTRBEIY extends BOA.Common.Types.ContractBase {
        announcementDate?: Date;
        auctionFoundationAddress?: string;
        auctionFoundationCityCode?: number;
        auctionFoundationCityName?: string;
        auctionFoundationEmail?: string;
        auctionFoundationFaxNumber?: string;
        auctionFoundationFaxRegionCode?: string;
        auctionFoundationName?: string;
        auctionFoundationPhoneNumber?: string;
        auctionFoundationPhoneRegionCode?: string;
        auctionFoundationTownCode?: number;
        auctionFoundationTownName?: string;
        auctionFoundationZipCode?: string;
        auctionNumber?: string;
        branchCode?: string;
        departmentCode?: string;
        description?: string;
        lastUpdateDate?: Date;
        mIDESNumber?: string;
        officialJournalNumber?: number;
        prohibitoryBeginDate?: Date;
        prohibitoryDecisionFoundation?: string;
        prohibitoryDecisionMinistryCode?: number;
        prohibitoryDecisionMinistryName?: string;
        prohibitoryEndDate?: Date;
        prohibitoryFulcrumAndScope?: BOA.Types.Kernel.KKB.CorporateResponseProhibitoryFulcrumAndScopeInfo;
        prohibitoryPeriod?: number;
        publishingDate?: Date;
        reservedArea1?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: string;
        updateUser?: string;
        verifyDate?: Date;
        verifyUser?: string;
    }
    interface CorporateResponseTRBEOB extends BOA.Common.Types.ContractBase {
        aC_CashActualLimitCount?: number;
        aC_CashActualLimitSourceCount?: number;
        aC_CashRiskCount?: number;
        aC_CashRiskSourceCount?: number;
        aC_FirstUsageDate?: Date;
        aC_LastUsageDate?: Date;
        aC_NonCashActualLimitCount?: number;
        aC_NonCashActualLimitSourceCount?: number;
        aC_NonCashRiskCount?: number;
        aC_NonCashRiskSourceCount?: number;
        aC_OtherActualLimitCount?: number;
        aC_OtherActualLimitSourceCount?: number;
        aC_OtherRiskCount?: number;
        aC_OtherRiskSourceCount?: number;
        aC_SourceCount?: number;
        aC_TotalCashLimit?: number;
        aC_TotalCashRisk?: number;
        aC_TotalNonCashLimit?: number;
        aC_TotalNonCashRisk?: number;
        aC_TotalOtherLimit?: number;
        aC_TotalOtherRisk?: number;
        iC_3G_FirstDate?: Date;
        iC_3G_LastDate?: Date;
        iC_3G_SourceCount?: number;
        iC_3G_TotalActualRisk?: number;
        iC_3G_TotalRisk?: number;
        iC_4G_FirstDate?: Date;
        iC_4G_LastDate?: Date;
        iC_4G_SourceCount?: number;
        iC_4G_TotalActualRisk?: number;
        iC_4G_TotalRisk?: number;
        iC_5G_FirstDate?: Date;
        iC_5G_LastDate?: Date;
        iC_5G_SourceCount?: number;
        iC_5G_TotalActualRisk?: number;
        iC_5G_TotalRisk?: number;
        oC_TotalActualRisk?: number;
    }
    interface CorporateResponseTRBEOC extends BOA.Common.Types.ContractBase {
        bouncedChequeCount?: number;
        bouncedChequeYearGroup?: BOA.Types.Kernel.KKB.CorporateResponseBouncedChequeYearGroupInfo[];
        currentMonth?: string;
        currentMonthBouncedChequeAmount?: number;
        currentMonthBouncedChequeCount?: number;
        currentMonthTotalBouncedChequeAmount?: number;
        currentMonthTotalBouncedChequeCount?: number;
        totalBouncedChequeCount?: number;
        yearCount?: number;
    }
    interface CorporateResponseTRBEOF extends BOA.Common.Types.ContractBase {
        corporationRelation?: BOA.Types.Kernel.KKB.CorporateResponseCorporationRelationInfo[];
        relationCount?: number;
    }
    interface CorporateResponseTRBEOH extends BOA.Common.Types.ContractBase {
        assuranceSourceCount?: number;
        bouncedChequeSourceCount?: number;
        corporationSourceCount?: number;
        creditSourceCount?: number;
        groupInfoSourceCount?: number;
        guarantorSourceCount?: number;
        sourceDataType?: BOA.Types.Kernel.KKB.CorporateResponseSourceDataTypeInfo[];
        totalSourceCount?: number;
    }
    interface CorporateResponseTRBEOI extends BOA.Common.Types.ContractBase {
        personRelation?: BOA.Types.Kernel.KKB.CorporateResponsePersonRelationInfo[];
        relationCount?: number;
    }
    interface CorporateResponseTRBEOK extends BOA.Common.Types.ContractBase {
        aC_CashActualLimitCount?: number;
        aC_CashActualLimitSourceCount?: number;
        aC_CashRiskCount?: number;
        aC_CashRiskSourceCount?: number;
        aC_FirstUsageDate?: Date;
        aC_LastUsageDate?: Date;
        aC_NonCashActualLimitCount?: number;
        aC_NonCashActualLimitSourceCount?: number;
        aC_NonCashRiskCount?: number;
        aC_NonCashRiskSourceCount?: number;
        aC_OtherActualLimitCount?: number;
        aC_OtherActualLimitSourceCount?: number;
        aC_OtherRiskCount?: number;
        aC_OtherRiskSourceCount?: number;
        aC_SourceCount?: number;
        aC_TotalCashLimit?: number;
        aC_TotalCashRisk?: number;
        aC_TotalNonCashLimit?: number;
        aC_TotalNonCashRisk?: number;
        aC_TotalOtherLimit?: number;
        aC_TotalOtherRisk?: number;
        iC_3G_FirstDate?: Date;
        iC_3G_LastDate?: Date;
        iC_3G_SourceCount?: number;
        iC_3G_TotalActualRisk?: number;
        iC_3G_TotalRisk?: number;
        iC_4G_FirstDate?: Date;
        iC_4G_LastDate?: Date;
        iC_4G_SourceCount?: number;
        iC_4G_TotalActualRisk?: number;
        iC_4G_TotalRisk?: number;
        iC_5G_FirstDate?: Date;
        iC_5G_LastDate?: Date;
        iC_5G_SourceCount?: number;
        iC_5G_TotalActualRisk?: number;
        iC_5G_TotalRisk?: number;
        oC_TotalActualRisk?: number;
    }
    interface CorporateResponseTRBEOL extends BOA.Common.Types.ContractBase {
        totalLimitAmount?: number;
        totalLimitSourceCount?: number;
        totalRiskAmount?: number;
        totalRiskSourceCount?: number;
    }
    interface CorporateResponseTRBEOM extends BOA.Common.Types.ContractBase {
        limitRiskDelayList?: BOA.Types.Kernel.KKB.CorporateResponseLimitRiskDelayInfo[];
        noticeMemberCount?: number;
    }
    interface CorporateResponseTRBEON extends BOA.Common.Types.ContractBase {
        assuranceCount?: number;
        guarantorAssuranceCount?: number;
        guarantorAssuranceSourceCount?: number;
        guarantorTotalAmount?: number;
    }
    interface CorporateResponseTRBEOT extends BOA.Common.Types.ContractBase {
        assuranceGroup?: BOA.Types.Kernel.KKB.CorporateResponseAssuranceGroupInfo[];
        assuranceGroupCount?: number;
        assuranceGuaranteeAmount?: number;
        assuranceGuaranteeCount?: number;
        assuranceGuaranteeSourceCount?: number;
    }
    interface CorporateResponseTRBEOU extends BOA.Common.Types.ContractBase {
        auctionBanCount?: number;
        auctionBanEndDate?: Date;
        prohibitoryFulcrumAndScope?: BOA.Types.Kernel.KKB.CorporateResponseProhibitoryFulcrumAndScopeInfo;
        totalAuctionBanCount?: number;
    }
    interface CorporateResponseTRBERH extends BOA.Common.Types.ContractBase {
        identityNumber?: string;
        identityType?: number;
        memzucDetail?: BOA.Types.Kernel.KKB.CorporateResponseTRBERT[];
        mIDESNumber?: string;
        noticeCycle?: string;
        riskCount?: number;
    }
    interface CorporateResponseTRBERT extends BOA.Common.Types.ContractBase {
        accrualOfInterestCommission?: number;
        creditLimitAmount?: number;
        reeskontCommission?: number;
        riskCode?: number;
        riskDescription?: string;
        termAmount_01_12?: number;
        termAmount_12_24?: number;
        termAmount_24plus?: number;
        totalCorporationCount?: number;
    }
    interface CorporateResponseTRBESR extends BOA.Common.Types.ContractBase {
        exceptionCode?: number;
        exceptionDescription?: string;
        rating?: number;
        reasonCode1?: number;
        reasonCode2?: number;
        reasonCode3?: number;
        reasonCode4?: number;
        reasonDescription1?: string;
        reasonDescription2?: string;
        reasonDescription3?: string;
        reasonDescription4?: string;
        reservedArea1?: string;
        scoreCardVersion?: number;
        scoreCompanyCode?: string;
        scoreCompanyName?: string;
        scoreValue?: number;
    }
    interface CorporateResponseTRBETC extends BOA.Common.Types.ContractBase {
        address?: string;
        addressCityCode?: number;
        reservedArea1?: string;
        taxNumber?: string;
        title?: string;
    }
    interface CorporateResponseViewContract extends BOA.Common.Types.ContractBase {
        assuranceRealty?: BOA.Types.Kernel.KKB.CorporateResponseTRBEGM[];
        assuranceView?: BOA.Types.Kernel.KKB.CorporateResponseAssuranceView;
        auctionBan?: BOA.Types.Kernel.KKB.CorporateResponseTRBEIY[];
        bouncedChequeDetail?: BOA.Types.Kernel.KKB.CorporateResponseTRBECK[];
        corporationRelationList?: BOA.Types.Kernel.KKB.CorporateResponseCorporationRelationInfo[];
        logId?: number;
        personRelationList?: BOA.Types.Kernel.KKB.CorporateResponsePersonRelationInfo[];
        redemptionPlanView?: BOA.Types.Kernel.KKB.CorporateResponseRedemptionPlanView;
        responseContract?: BOA.Types.Kernel.KKB.CorporateResponseContract;
        resultInfo?: BOA.Types.Kernel.KKB.CorporateResponseResultInfo;
        shareHolderRelation?: BOA.Types.Kernel.KKB.CorporateResponseTRBEHI[];
        sourceCorporationInfo?: BOA.Types.Kernel.KKB.CorporateResponseViewCorporation[];
        summaryView?: BOA.Types.Kernel.KKB.CorporateSummaryViewContract;
    }
    interface CorporateResponseViewCorporation {
        activitySubject?: string;
        activityTypeCode?: string;
        address?: string;
        addressZipCode?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        capacityUsagePercent?: number;
        capacityUsageRatePeriod?: number;
        chainOfCommerce?: string;
        chamberOfArtisan?: string;
        commerceRegistryNumber?: number;
        corporateForeignCurrencyCreditLimit?: number;
        corporateLocalCurrencyCreditLimit?: number;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        corporationTotalLimit?: number;
        corporationType?: number;
        corporationTypeName?: string;
        country?: string;
        countryCode?: number;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        customerTypeDescription?: string;
        departmentCode?: string;
        faxNumber1?: string;
        faxNumber2?: string;
        faxNumber3?: string;
        foundationDate?: Date;
        groupCode?: string;
        groupLimit?: number;
        groupName?: string;
        groupRisk?: number;
        guarantorAmount?: number;
        identityNumber?: string;
        identityType?: number;
        identityTypeDesc?: string;
        imkbRate?: number;
        isMatch?: boolean;
        lastUpdateDate?: Date;
        limitCurrencyCode?: number;
        matchReason?: string;
        mbSectorCode?: string;
        mbSectorDescription?: string;
        mIDESNumber?: string;
        paidCapitalAmount?: number;
        paidCapitalYear?: number;
        partnershipRate?: number;
        phoneNumber1?: string;
        phoneNumber2?: string;
        phoneNumber3?: string;
        phoneNumber4?: string;
        phoneNumber5?: string;
        registeredCapitalAmount?: number;
        registeredCapitalYear?: number;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        reservedArea?: string;
        reservedArea1?: string;
        reservedArea2?: string;
        reservedArea3?: number;
        reservedArea4?: string;
        revenueAmount?: number;
        revenueCurrencyCode?: number;
        revenueCurrencyDescription?: string;
        revenueYear?: number;
        reviseTermDate?: Date;
        sectorCode?: string;
        sectorDescription?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        sourceWorkBeginDate?: Date;
        taxDepartment?: string;
        title?: string;
        totalCustomerNumber?: number;
        totalEmployeeNumber?: number;
        website?: string;
    }
    interface CorporateResponseViewLeasingLimitRisk {
        creditLimitAmount?: number;
        identityNumber?: string;
        identityType?: number;
        noticeCycle?: string;
        riskCode?: number;
        riskDescription?: string;
        source?: string;
        totalRisk?: number;
        usageRate?: number;
    }
    interface CorporateResponseViewPerson {
        birthCityCode?: number;
        birthCityName?: string;
        birthDate?: Date;
        birthPlace?: string;
        birthTownCode?: number;
        birthTownName?: string;
        birthVillageName?: string;
        branchCityCode?: string;
        branchCityName?: string;
        branchCode?: string;
        cellPhoneNumber?: string;
        corporationRelationType?: number;
        corporationRelationTypeName?: string;
        creditRelationType?: number;
        creditRelationTypeDescription?: string;
        customerType?: string;
        departmentCode?: string;
        educationStatus?: string;
        educationStatusCode?: number;
        email?: string;
        fatherName?: string;
        faxNumber?: string;
        fileOrderNumber?: number;
        filePageNumber?: number;
        fileVolumeNumber?: number;
        formerLastName?: string;
        gender?: number;
        genderDesc?: string;
        guarantorAmount?: number;
        homeAddress?: string;
        homeAddressZipCode?: string;
        homePhoneNumber?: string;
        identityNumber1?: string;
        identityNumber2?: string;
        identityNumber3?: string;
        identityNumber4?: string;
        identityType1?: number;
        identityType1Desc?: string;
        identityType2?: number;
        identityType2Desc?: string;
        identityType3?: number;
        identityType3Desc?: string;
        identityType4?: number;
        identityType4Desc?: string;
        isValidBirthDate?: boolean;
        lastUpdateDate?: Date;
        matchReason?: string;
        mIDESNumber?: string;
        middleName?: string;
        motherName?: string;
        name?: string;
        nationality?: number;
        nationalityDesc?: string;
        occupation?: string;
        occupationCode?: number;
        partnershipRate?: number;
        relationBeginDate?: Date;
        relationEndDate?: Date;
        relationPersonTitle?: string;
        signAuthorizationCode?: number;
        signAuthorizationDesc?: string;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceDataType?: number;
        sourceType?: number;
        surName?: string;
        title?: string;
        workAddress?: string;
        workAddressZipCode?: string;
        workPhoneNumber?: string;
    }
    interface CorporateResponseWarningMessageInfo extends BOA.Common.Types.ContractBase {
        message?: string;
        messageCode?: string;
        orderNo?: number;
    }
    interface CorporateSummaryAssuranceView {
        assuranceCount?: number;
        assuranceDetailList?: BOA.Types.Kernel.KKB.CorporateSummaryViewAssuranceDetail[];
        guarantorAssuranceCount?: number;
        guarantorAssuranceSourceCount?: number;
        guarantorTotalAmount?: number;
    }
    interface CorporateSummaryViewAssuranceDetail {
        assuranceSourceCount?: number;
        assuranceType?: number;
        assuranceTypeDescription?: string;
        assuranceTypeTotalAmount?: number;
        source?: string;
        sourceAlias?: string;
        sourceCode?: number;
        sourceTotalAmount?: number;
        toolTip?: string;
    }
    interface CorporateSummaryViewContract extends BOA.Common.Types.ContractBase {
        assuranceInfo?: BOA.Types.Kernel.KKB.CorporateSummaryAssuranceView;
        bouncedChequeSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOC;
        creditAssuranceCount?: BOA.Types.Kernel.KKB.CorporateCreditCounts[];
        creditSummary?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOB;
        customerTitle?: string;
        groupCode?: string;
        groupName?: string;
        leasingLimitRiskDetail?: BOA.Types.Kernel.KKB.CorporateResponseViewLeasingLimitRisk[];
        paymentPerformance?: BOA.Types.Kernel.KKB.CorporateSummaryViewPaymentPerformance[];
        resultMessage?: string;
        scoreFinarException?: string;
        scoreFinarHasValue?: boolean;
        scoreFinarScoreReasons?: string;
        scoreFinarValue?: number;
        scoreGDSException?: string;
        scoreGDSHasValue?: boolean;
        scoreGDSScoreReasons?: string;
        scoreGDSValue?: number;
        scoreInfo?: BOA.Types.Kernel.KKB.CorporateResponseTRBESR[];
        sourceBasedLimitRisk?: BOA.Types.Kernel.KKB.CorporateResponseLimitRiskDelayInfo[];
        statistics?: BOA.Types.Kernel.KKB.CorporateResponseTRBEOH;
        taxNumber?: string;
    }
    interface CorporateSummaryViewPaymentPerformance {
        finalDate?: Date;
        lastMonthActuallyCashedOverdueInterest?: number;
        lastMonthDueAmount?: number;
        lastMonthDueFinancingCost?: number;
        lastMonthTotalPaidAmount?: number;
        lastMonthTotalPaidFinancingCost?: number;
        openDelayedAmountTL?: number;
        openMaxDelayDaysCount?: number;
        source?: string;
        totalActuallyCashedOverdueInterest?: number;
        totalDelayCount?: number;
        totalDelayedDaysCount?: number;
        unpaidFinancingCost?: number;
    }
    interface CreditToPersonContract extends BOA.Common.Types.ContractBase {
        creditAccount?: BOA.Types.Kernel.KKB.IndividualCreditAccountContract;
        personInfo?: BOA.Types.Kernel.KKB.IndividualPersonInfoContract;
    }
    interface EstimatedFinancialReportContract extends BOA.Common.Types.ContractBase {
        calculatedExpense?: number;
        calculatedIncome?: number;
        estimatedExpense?: number;
        estimatedIncome?: number;
        monthlyFinancialLiability?: number;
        monthlyInstallmentAmountPayable?: number;
    }
    interface FileFormatContract extends BOA.Common.Types.ContractBase {
        contractName?: string;
        deleteFileFormatDetailIdList?: number[];
        description?: string;
        fileFormatId?: number;
        groupCode?: string;
        groupCodeDescription?: string;
        hostName?: string;
        name?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface FileFormatDetailContract extends BOA.Common.Types.ContractBase {
        dataType?: number;
        dataTypeDescription?: string;
        defaultValueText?: string;
        description?: string;
        fileFormatDetailId?: number;
        fileFormatId?: number;
        hostName?: string;
        isUpdated?: boolean;
        length?: number;
        name?: string;
        sort?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueText?: string;
        valueType?: number;
        valueTypeDescription?: string;
    }
    interface HouseholdDetailsContract extends BOA.Common.Types.ContractBase {
        any_Litigation_Accounts?: string;
        averageLimitAmount?: number;
        averageLoanAmount?: number;
        exclusionCode?: number;
        highest_Bureau_Score?: number;
        highestAge?: number;
        householdScore?: number;
        householdSummaryList?: BOA.Types.Kernel.KKB.HouseholdSummaryContract[];
        limitUtilization_Ratio_for_CreditCards?: string;
        limitUtilizationRatio_forOverdrafts?: string;
        lowestAge?: number;
        maximumAmountOfConsumerLoans?: number;
        maximumAmountOfMortgageLoans?: number;
        maximumLimitOfCreditCards?: number;
        maximumLimitOfOverdrafts?: number;
        maximumOutstandingBalanceOfConsumerLoans?: number;
        maximumOutstandingBalanceOfCreditCards?: number;
        maximumOutstandingBalanceOfMortgageLoans?: number;
        maximumOutstandingBalanceOfOverdrafts?: number;
        month_Of_Update?: string;
        numberOfConsumerLoansInArrears?: number;
        numberOfCreditCardsInArrears?: number;
        numberOfFemalesInHousehold?: number;
        numberOfMalesInHousehold?: number;
        numberOfMortgageLoansInArrears?: number;
        numberOfOverdraftsInArrears?: number;
        numberOfPeopleInHousehold?: number;
        numberOfRelationships?: number;
        numberOfTotalCommercialCreditApplications_inLast1Year?: number;
        numberOfTotalPersonalCreditApplications_inLast1Year?: number;
        reserved_Filler?: string;
        the_Earliest_Start_Date_of_Credits?: Date;
        the_Latest_Start_Date_of_Credits?: Date;
        theNumberOf_Active_ConsumerLoan_Accounts_inLitigation?: number;
        theNumberOf_Active_CreditCard_Accounts_inLitigation?: number;
        theNumberOf_Active_MortgageLoan_Accounts_inLitigation?: number;
        theNumberOf_Active_Overdraft_Accounts_inLitigation?: number;
        theNumberOf_ConsumerLoans_inLitigation?: number;
        theNumberOf_CreditCards_inLitigation?: number;
        theNumberOf_MortgageLoans_inLitigation?: number;
        theNumberOf_Overdrafts_inLitigation?: number;
        theNumberOfActive_ConsumerLoanAccounts?: number;
        theNumberOfActive_CreditCardAccounts?: number;
        theNumberOfActive_MortgageLoanAccounts?: number;
        theNumberOfActive_OverdraftAccounts?: number;
        total_Monthly_Instalment_Amount?: number;
        totalAmountOfConsumerLoans?: number;
        totalAmountOfCreditCardLimits?: number;
        totalAmountOfMortgageLoans?: number;
        totalAmountOfOverdraftLimits?: number;
        totalOutstandingBalance?: number;
        totalOutstandingBalanceOf_ConsumerLoans_inLitigation?: number;
        totalOutstandingBalanceOf_CreditCards_inLitigation?: number;
        totalOutstandingBalanceOf_MortgageLoans_inLitigation?: number;
        totalOutstandingBalanceOf_Overdrafts_inLitigation?: number;
        totalOutstandingBalanceOfConsumerLoans?: number;
        totalOutstandingBalanceOfConsumerLoansInArrears?: number;
        totalOutstandingBalanceOfCreditCards?: number;
        totalOutstandingBalanceOfCreditCardsInArrears?: number;
        totalOutstandingBalanceOfMortgageLoans?: number;
        totalOutstandingBalanceOfMortgageLoansInArrears?: number;
        totalOutstandingBalanceOfOverdrafts?: number;
        totalOutstandingBalanceOfOverdraftsInArrears?: number;
        worst_Bureau_Score?: number;
        worst_CII_Index?: number;
        worstPaymentStatus?: string;
        worstPaymentStatusInLast12_months?: string;
        worstPaymentStatusInLast3_months?: string;
        worstPaymentStatusInLast6_months?: string;
    }
    interface HouseholdSummaryContract extends BOA.Common.Types.ContractBase {
        arrearsCount?: number;
        arrearsDebtAmount?: number;
        count?: number;
        financeType?: string;
        limitFullnessRatio?: string;
        maximumCreditAmount?: number;
        maximumDebt?: number;
        numberOfAccountsInLigitation?: number;
        numberOfActiveAccountsInLigitation?: number;
        totalArrearsDebtInLigitation?: number;
        totalCreditAmount?: number;
        totalDebtAmount?: number;
    }
    interface IndividualApplicantSummary extends BOA.Common.Types.ContractBase {
        bestMatchToInputApplicants?: string;
        numberOfIndexEntries?: number;
        reasonForApplicantReturn?: string;
    }
    interface IndividualBrueauScoreContract extends BOA.Common.Types.ContractBase {
        applicantNumber?: number;
        cII?: string;
        cIIExclusionCode?: string;
        dataTypeFlag?: string;
        exclusionCode?: string;
        fraudFlag?: string;
        modelType?: string;
        reasonCode1?: string;
        reasonCode2?: string;
        reasonCode3?: string;
        reasonCode4?: string;
        score?: number;
    }
    interface IndividualConstants {
    }
    interface IndividualCreditAccountContract extends BOA.Common.Types.ContractBase {
        accountPaymentStatus?: string;
        accountSpecialStatus?: string;
        accountSpecialStatusDescription?: string;
        accountSpecialStatusEnd?: Date;
        accountSpecialStatusStart?: Date;
        accountStatus?: string;
        accountStatusDescription?: string;
        amountFinanced?: number;
        applicationReferenceNumber?: string;
        arrearsBalance?: number;
        bankName?: string;
        closedDate?: Date;
        creditBalanceIndicator?: number;
        creditLimit?: number;
        cumulativeNumberOfMissedPayments?: number;
        currencyCode?: number;
        currencyDivisor?: number;
        customerAccountNumber?: string;
        dateOfLastPayment?: Date;
        debitInterestBearingBalance?: number;
        defaultDate?: Date;
        depositAmount?: number;
        durationOfAgrement?: string;
        fecCode?: string;
        fecId?: number;
        finalInstallmentAmount?: number;
        financeType?: BOA.Types.Kernel.KKB.FinanceType;
        financeTypeDescription?: string;
        frequencyOfPayments?: BOA.Types.Kernel.KKB.FrequencyOfPaymentsFlag;
        frequencyOfPaymentsDescription?: string;
        installmentAmount?: number;
        interestRateFlag?: BOA.Types.Kernel.KKB.InterestRateFlag;
        interestRateFlagDescription?: string;
        key?: any;
        lastPaymentAmount?: number;
        litigationDate?: Date;
        methodOfPayment?: BOA.Types.Kernel.KKB.MethodOfPayment;
        methodOfPaymentDescription?: string;
        monthOfLastUpdate?: Date;
        numberofAccountHolders?: number;
        numberOfInstallment?: number;
        originalDefaultBalance?: number;
        originalLitigationBalance?: number;
        outstandingInstallmentCount?: number;
        ownDataFlag?: boolean;
        paymentPerformanceFlag?: BOA.Types.Kernel.KKB.PaymentPerformanceFlag;
        persons?: BOA.Types.Kernel.KKB.IndividualPersonInfoContract[];
        purchasedItemReference?: string;
        purposeOfFinance?: string;
        purposeOfFinanceDescription?: string;
        reasonWriteOffClosure?: string;
        revisedFrequencyOfPayments?: BOA.Types.Kernel.KKB.FrequencyOfPaymentsFlag;
        revisedFrequencyOfPaymentsDescription?: string;
        revisedInstallment_Amount?: number;
        revisedNumberOfInstallments?: number;
        revisedStartDate?: Date;
        startDate?: Date;
        totalInstallmentLimit?: number;
        totalInstallmentsBalance?: number;
        totalOutstandingBalance?: number;
        userCompanyName?: string;
        worstPaymentStatus?: string;
        writeOffRecoveredDate?: Date;
    }
    interface IndividualCreditAccountSummaryContract {
        activeLimit?: number;
        creditCount?: number;
        defaultDate?: Date;
        fillRate?: number;
        fillRatePersentageText?: string;
        financeType?: BOA.Types.Kernel.KKB.FinanceType;
        financeTypeDescription?: string;
        installmentAmount?: number;
        lastPeriodCreditCardPaymentAmount?: number;
        lastPeriodCreditPaymentAmount?: number;
        lastPeriodPayment?: number;
        litigationDate?: Date;
        openCreditCount?: number;
        openDate?: Date;
        originalDefaultBalance?: number;
        originalLitigationBalance?: number;
        outstandingDebt?: number;
        totalLimit?: number;
    }
    interface IndividualCreditApplicantContract extends BOA.Common.Types.ContractBase {
        amountFinanced?: number;
        applicantDate?: Date;
        applicationReferenceNumber?: string;
        bankName?: string;
        currencyCode?: number;
        currencyDivisor?: number;
        depositAmount?: number;
        fecCode?: string;
        fecId?: number;
        finalInstalmentAmount?: number;
        financeType?: BOA.Types.Kernel.KKB.FinanceType;
        financeTypeDescription?: string;
        frequencyOfPayments?: BOA.Types.Kernel.KKB.FrequencyOfPaymentsFlag;
        frequencyOfPaymentsDescription?: string;
        generatedReferenceNumber?: string;
        installmentAmount?: number;
        interestRateFlag?: BOA.Types.Kernel.KKB.InterestRateFlag;
        interestRateFlagDescription?: string;
        key?: any;
        methodOfPayment?: BOA.Types.Kernel.KKB.MethodOfPayment;
        methodOfPaymentDescription?: string;
        numberOfApplicants?: number;
        numberOfInstallment?: number;
        ownDataFlag?: boolean;
        persons?: BOA.Types.Kernel.KKB.IndividualPersonInfoContract[];
        purchasedItemReference?: string;
        purposeOfFinance?: string;
        purposeOfFinanceDescription?: string;
        requestedCreditLimit?: number;
        userCompanyName?: string;
    }
    interface IndividualCreditSummaryContract extends BOA.Common.Types.ContractBase {
        allAccInLegalMainNumberOfOwnAccounts?: number;
        allAccInLegalNonMainNumberOfAccounts?: number;
        allAccInLegalNonMainNumberOfOwnAccounts?: number;
        allAccInLegalNonMainTimeFromMostRecentDefault?: number;
        allAccInLegalNonMainTotalOutstBalance?: number;
        allAccInLegalNumberOfAccounts?: number;
        allAccInLegalTimeFromMostRecentDefault?: number;
        allAccInLegalTotalOutstBalance?: number;
        allAccNotUpdatedNonMainNumberOfAccounts?: number;
        allAccNotUpdatedNonMainWorstPymtStatusLast12Months?: number;
        allAccNotUpdatedNumberOfAccounts?: number;
        allAccNotUpdatedWorstPymtStatusLast12Months?: number;
        closeAccWPSTimeRecentMonths?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNonMainNumberOfAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNonMainNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNonMainTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNumberOfAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus0DUXLast12MonthsActiveTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNonMainNumberOfAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNonMainNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNonMainTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNumberOfAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus1To2Last12MonthsActiveTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNonMainNumberOfAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNonMainNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNonMainTimeFromRecentClosed?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNumberOfAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffNumberofOwnAccounts?: number;
        closedAccWorstPymtStatus3To6Last12MonthsActiveorWrittenOffTimeFromRecentClosed?: number;
        monthlyCommitmentMainOrJoint?: number;
        openAcc12WorstPaymentStatus0To6?: string;
        openAcc12WorstPaymentStatus7To12?: string;
        openAcc4To12WorstPaymentStatus0To6?: string;
        openAcc4To12WorstPaymentStatus7To12?: string;
        openAllAccCount?: number;
        openedAccAllTotalBalanceExclMortgage?: number;
        openedAccAllTotalBalanceOnlyMortgage?: number;
        openedAccAllWorstPymntStatus7To12Months?: string;
        openedAccCurrPymtStatus0NumberOfAccounts?: number;
        openedAccCurrPymtStatus0TotalBalance?: number;
        openedAccCurrPymtStatus1To6MontlyCommitment?: number;
        openedAccCurrPymtStatus1To6NumberOfAccounts?: number;
        openedAccCurrPymtStatus1To6TotalBalance?: number;
        openedAccCurrPymtStatusOtherMontlyCommitment?: number;
        openedAccCurrPymtStatusOtherNumberOfAccounts?: number;
        openedAccCurrPymtStatusOtherTotalBalance?: number;
        openedAccMontlyCommitment?: number;
        openedAccOpenedInLast12MonthsAgoNumberOfAccounts?: number;
        openedAccOpenedInLast12MonthsAgoTotalBalanceExclMortgage?: number;
        openedAccOpenedInLast12MonthsAgoTotalBalanceOnlyMortgage?: number;
        openedAccOpenedInLast3MonthsNumberOfAccounts?: number;
        openedAccOpenedInLast3MonthsTotalBalanceExclMortgage?: number;
        openedAccOpenedInLast3MonthsTotalBalanceOnlyMortgage?: number;
        openedAccOpenedInLast3MonthsWorstPaymentStatus?: string;
        openedAccOpenedInLast4To12MonthsNumberOfAccounts?: number;
        openedAccOpenedInLast4To12MonthsTotalBalanceExclMortgage?: number;
        openedAccOpenedInLast4To12MonthsTotalBalanceOnlyMortgage?: number;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        totalNoOfReordsRetrieved?: number;
        totalOutBalAllRecsRetrieved?: number;
        worstCurrentPaymentStatus?: string;
        worstEverPaymentStatus?: string;
    }
    interface IndividualCreditSummaryViewContract extends BOA.Common.Types.ContractBase {
        creditSummary?: BOA.Types.Kernel.KKB.IndividualCreditSummaryContract;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        personalDebtIndex?: number;
        personSummaryList?: BOA.Types.Kernel.KKB.IndividualPersonSummaryViewContract[];
        score?: number;
        warning?: BOA.Types.Kernel.KKB.IndividualWarningContract;
        worstCurrentPaymentStatus?: string;
        worstEverPaymentStatus?: string;
    }
    interface IndividualExtensions {
    }
    interface IndividualPersonAddressContract extends BOA.Common.Types.ContractBase {
        addressCurrentIndicator?: BOA.Types.Kernel.KKB.AddressIndicator;
        addressCurrentIndicatorDescription?: string;
        addressFromDate?: Date;
        addressLine?: string;
        addressToDate?: Date;
        addressType?: BOA.Types.Kernel.KKB.AddressType;
        addressTypeDescription?: string;
        postCode?: string;
    }
    interface IndividualPersonContract {
        accountHolderType?: BOA.Types.Kernel.KKB.AccountHolderTypes;
        accountHolderTypeAbreviation?: string;
        accountHolderTypeDescription?: string;
        aliasSurname?: string;
        companyName?: string;
        dateOfBirth?: Date;
        fathersForename?: string;
        forename1?: string;
        forename2?: string;
        gender?: BOA.Types.Kernel.KKB.GenderType;
        genderDescription?: string;
        mothersForename?: string;
        mothersMaidenSurname?: string;
        placeOfBirth?: string;
        placeOfBirthCode?: string;
        primaryIdentityNumber?: string;
        primaryIdentityType?: BOA.Types.Kernel.KKB.IdentityType;
        primaryIdentityTypeDescription?: string;
        regionProvinceOfBirth?: string;
        secondaryIdentityType?: BOA.Types.Kernel.KKB.IdentityType;
        secondaryIdentityTypeDescription?: string;
        seondaryIdentityNumber?: string;
        surname?: string;
        surnameSuffix?: string;
        title?: string;
    }
    interface IndividualPersonDetailContract extends BOA.Common.Types.ContractBase {
        celluarTelephoneNumber?: string;
        creditCardsHeld?: string;
        homeTelephoneNumber?: string;
        income?: number;
        incomeFrequencyFlag?: BOA.Types.Kernel.KKB.IncomePeriod;
        incomeFrequencyFlagDescription?: string;
        incomeNetFlag?: number;
        maritalStatus?: BOA.Types.Kernel.KKB.MaritalStatus;
        maritalStatusDescription?: string;
        numberOfDependants?: number;
        numberOfDependantsWithIncome?: number;
        occupationCodeDescription?: string;
        residentialStatus?: BOA.Types.Kernel.KKB.ResidentialStatus;
        residentialStatusDescription?: string;
        workTelephoneNumber?: string;
    }
    interface IndividualPersonEmployerContract extends BOA.Common.Types.ContractBase {
        addressLine?: string;
        employerCurrentIndicator?: BOA.Types.Kernel.KKB.EmployerIndicator;
        employerCurrentIndicatorDescription?: string;
        employerName?: string;
        employmentEndDate?: Date;
        employmentStartDate?: Date;
        postCode?: string;
        telephoneNumber?: string;
    }
    interface IndividualPersonInfoContract extends BOA.Common.Types.ContractBase {
        addresses?: BOA.Types.Kernel.KKB.IndividualPersonAddressContract[];
        applicationSummary?: BOA.Types.Kernel.KKB.IndividualApplicantSummary;
        employers?: BOA.Types.Kernel.KKB.IndividualPersonEmployerContract[];
        isRequestedPerson?: boolean;
        key?: any;
        person?: BOA.Types.Kernel.KKB.IndividualPersonContract;
        personDetail?: BOA.Types.Kernel.KKB.IndividualPersonDetailContract;
        uniqueKey?: any;
    }
    interface IndividualPersonSummaryViewContract extends BOA.Common.Types.ContractBase {
        accountHolderType?: BOA.Types.Kernel.KKB.AccountHolderTypes;
        accountHolderTypeDescription?: string;
        applicantCount?: number;
        bankCount?: number;
        collectionList?: BOA.Types.Kernel.KKB.CollectionContract[];
        creditSummaryList?: BOA.Types.Kernel.KKB.IndividualCreditAccountSummaryContract[];
        displayName?: string;
        includedPersonNameList?: string[];
        isRequestedPerson?: boolean;
        key?: any;
        name?: string;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        personalDebtIndex?: number;
        personSingularData?: BOA.Types.Kernel.KKB.PersonSingularDataContract;
        score?: number;
        surname?: string;
        totalMaxPaymentAmount?: number;
        worstCurrentPaymentStatus?: string;
        worstEverPaymentStatus?: string;
    }
    interface IndividualQueryContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        customerId?: number;
        fatherName?: string;
        forceOnline?: boolean;
        gender?: string;
        identityCardType?: string;
        identityNumber?: string;
        isKKBQueried?: number;
        isPersonel?: boolean;
        kKBDefaultQueryType?: string;
        kKBId?: number;
        kKBQueryType?: string;
        mernisErrorMessage?: string;
        motherName?: string;
        name?: string;
        personListforQueryId?: number;
        resourceCode?: string;
        secondName?: string;
        surname?: string;
        userId?: number;
    }
    interface IndividualQueryOpenContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        identityNumber?: string;
        kKBDefaultQueryType?: string;
        kKBId?: number;
        queryFilter?: BOA.Types.Kernel.KKB.KKBQueryFilter;
        resourceCode?: string;
    }
    interface IndividualResponseContract extends BOA.Common.Types.ContractBase {
        brueauScoreInfo?: BOA.Types.Kernel.KKB.IndividualBrueauScoreContract;
        creditAccounts?: BOA.Types.Kernel.KKB.IndividualCreditAccountContract[];
        creditApplicants?: BOA.Types.Kernel.KKB.IndividualCreditApplicantContract[];
        creditSummaryList?: BOA.Types.Kernel.KKB.IndividualCreditSummaryContract[];
        householdDetails?: BOA.Types.Kernel.KKB.HouseholdDetailsContract;
        logDate?: Date;
        logID?: number;
        personalDebtIndex?: number;
        querySystem?: string;
        score?: number;
        warnings?: BOA.Types.Kernel.KKB.IndividualWarningContract[];
    }
    interface IndividualResponseScoreContract {
        logID?: number;
        numOfAllAcountInTwoMonths?: number;
        numOfOneLatencyAboveIs0InLast3Months?: number;
        numOfOneLatencyAboveIs0InLast6Months?: number;
        numOfOneLatencyIs0InLast1Month?: number;
        numOfTwoLatencyIs0InLast1Month?: number;
        numOfTwoLatencyIs0InLast6Months?: number;
        onlineLogDate?: Date;
        queryResult?: BOA.Types.Kernel.KKB.IndividualResponseContract;
        score?: number;
    }
    interface IndividualResponseViewContract extends BOA.Common.Types.ContractBase {
        applicantToPersonList?: BOA.Types.Kernel.KKB.ApplicantToPersonContract[];
        creditSummaryView?: BOA.Types.Kernel.KKB.IndividualCreditSummaryViewContract;
        creditToPersonList?: BOA.Types.Kernel.KKB.CreditToPersonContract[];
        householdInfoView?: BOA.Types.Kernel.KKB.HouseholdDetailsContract;
        logId?: number;
        onlineLogDate?: Date;
    }
    interface IndividualWarningContract extends BOA.Common.Types.ContractBase {
        companyName?: string;
        companyReferenceNumber?: string;
        fraudCategory?: number;
        lastUpdateDate?: Date;
        ownDataFlag?: boolean;
        persons?: BOA.Types.Kernel.KKB.IndividualPersonInfoContract[];
        suppliedDate?: Date;
        warningMessage?: string;
    }
    interface KKBCommonConstants {
    }
    interface LKSConstants {
    }
    interface NoticeEnums {
    }
    interface PersonSingularDataContract extends BOA.Common.Types.ContractBase {
        applicantCount?: number;
        bankCount?: number;
        lastPeriodTotalCreditCardPaymentAmount?: number;
        lastPeriodTotalCreditPaymentAmount?: number;
        lastPeriodTotalPayment?: number;
        openedAccsAllWorstPymntStatus0To6Months?: string;
        totalMaxPaymentAmount?: number;
        worstPaymentStatus?: string;
        worstPaymentStatusOnActiveAccounts?: string;
    }
    interface RiskCentralizationContract extends BOA.Common.Types.ContractBase {
        contractName?: string;
        deleteFileFormatDetailIdList?: number[];
        description?: string;
        fileFormatId?: number;
        groupCode?: string;
        groupCodeDescription?: string;
        hostName?: string;
        name?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface RiskReportConstants {
    }
    interface RiskReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        assetType?: string;
        commissionKey?: number;
        creditRatingRequested?: boolean;
        errorCode?: string;
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        querierWorkgroupId?: number;
        queryPurpose?: BOA.Types.Kernel.KKB.RiskReportQueryPurpose;
        reportContent?: number[];
        reportType?: string;
        riskReportId?: number;
        systemDate?: Date;
        taxNumber?: string;
        userName?: string;
    }
    interface RiskReportQueryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        assetType?: BOA.Types.Kernel.KKB.RiskReportAssetType;
        assetTypeQueryValue?: string;
        birthDate?: Date;
        birthPlace?: string;
        chamberOfCommerce?: string;
        creditRatingRequested?: boolean;
        establishmentDate?: Date;
        fathersName?: string;
        firstName?: string;
        homeAddress?: string;
        homePostCode?: string;
        identityNumber?: string;
        mothersName?: string;
        queryPurpose?: BOA.Types.Kernel.KKB.RiskReportQueryPurpose;
        reportType?: BOA.Types.Kernel.KKB.RiskReportReportType;
        reportTypeQueryValue?: string;
        secondName?: string;
        surname?: string;
        taxNumber?: string;
        taxOffice?: string;
        title?: string;
        tradeRegistryNo?: number;
        workAddress?: string;
        workPostCode?: string;
    }
    interface StaffQueryConstants {
    }
    interface StaffQueryContract extends BOA.Common.Types.ContractBase {
        administrativeOrLegalFollowRegistration?: number;
        administrativeOrLegalFollowRegistrationDesc?: string;
        applicantCount?: number;
        creditKey?: any;
        customerId?: number;
        hasNonPerformingLoan?: number;
        hasNonPerformingLoanDesc?: string;
        hostName?: string;
        identityNumber?: string;
        lastPeriodCreditCardAmountToPayTL?: number;
        lastPeriodCreditCardPaymentAmountTL?: number;
        lastPeriodCreditPaymentAmountTL?: number;
        lastPeriodOverdraftPaymentAmountTL?: number;
        lastPeriodTotalMonthlyPaymentAmount?: number;
        lastYearOpenedLoanCount?: number;
        lastYearOpenedNonPerformingLoanAmount?: number;
        name?: string;
        nonPerformingLoanAmount?: number;
        personalDebtIndex?: number;
        personUniqueKey?: any;
        queryDate?: Date;
        queryDateBegin?: Date;
        queryDateEnd?: Date;
        queryLogId?: number;
        region?: string;
        riskBegin?: number;
        riskEnd?: number;
        score?: number;
        scoreBegin?: number;
        scoreEnd?: number;
        staffQueryId?: number;
        systemDate?: Date;
        title?: string;
        totalConsumerLoanDebtTL?: number;
        totalCreditCardDebtTL?: number;
        totalDebt?: number;
        totalLimitTL?: number;
        totalMortgageDebtTL?: number;
        totalOverdraftDebtTL?: number;
        totalRiskTL?: number;
        unit?: string;
        userId?: number;
        userIdBegin?: number;
        userIdEnd?: number;
        userName?: string;
        workgroupId?: number;
    }
    interface TardesConstants {
    }
    interface TardesCreditContract extends BOA.Common.Types.ContractBase {
        creditId?: number;
        creditInstallment?: number;
        creditName?: string;
        creditTerm?: number;
        demandAmount?: number;
        interestRate?: string;
        maxDemandTerm?: number;
        maxInstallment?: number;
        maxInterestRate?: number;
        minDemandTerm?: number;
        minInstallment?: number;
        minInterestRate?: number;
        tardesQueryId?: number;
    }
    interface TardesCreditEvaluationContract extends BOA.Common.Types.ContractBase {
        creditId?: string;
        creditName?: string;
        demandInstallment?: string;
        demandInterestRate?: string;
        demandTerm?: string;
        hostName?: string;
        proposedLimit?: string;
        proposedTerm?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface TardesIncomeExpenseContract extends BOA.Common.Types.ContractBase {
        categoryId?: string;
        expenseValue?: string;
        hostName?: string;
        incomeName?: string;
        incomeValue?: string;
        netIncome?: string;
        rateOfGrossIncome?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface TardesProductContract extends BOA.Common.Types.ContractBase {
        productCountDaa?: string;
        productId?: number;
        productionCategoryId?: number;
        productName?: string;
        tardesQueryId?: number;
    }
    interface TardesProductEvaluationContract extends BOA.Common.Types.ContractBase {
        expense?: string;
        grossIncome?: string;
        hostName?: string;
        netIncome?: string;
        productCountDaa?: string;
        productId?: string;
        productName?: string;
        proposedLimit?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        term?: string;
        userName?: string;
        workingCapitalRequirement?: string;
    }
    interface TardesProductionCategoryContract extends BOA.Common.Types.ContractBase {
        categoryId?: number;
        categoryName?: string;
        hostName?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
        zipCode?: number;
    }
    interface TardesQualityScoreContract extends BOA.Common.Types.ContractBase {
        categoryName?: string;
        hostName?: string;
        qualityResult?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
    interface TardesQueryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        advanceList?: BOA.Types.Kernel.KKB.CommonQueryContract[];
        bankLoanList?: BOA.Types.Kernel.KKB.CommonQueryContract[];
        branchId?: number;
        cityId?: number;
        creditEvaluationList?: BOA.Types.Kernel.KKB.TardesCreditEvaluationContract[];
        creditList?: BOA.Types.Kernel.KKB.TardesCreditContract[];
        creditPersonList?: BOA.Types.Kernel.KKB.TardesQueryContract[];
        divitInstanceId?: any;
        hostName?: string;
        identityNumber?: string;
        incExpAgriNonAgricultural?: BOA.Types.Kernel.KKB.CommonResultContract[];
        incExpListByProductType?: BOA.Types.Kernel.KKB.TardesIncomeExpenseContract[];
        incExpNonAgricultural?: BOA.Types.Kernel.KKB.CommonResultContract[];
        nonAgriculturalExpenseList?: BOA.Types.Kernel.KKB.CommonQueryContract[];
        nonAgriculturalIncomeList?: BOA.Types.Kernel.KKB.CommonQueryContract[];
        productEvaluationList?: BOA.Types.Kernel.KKB.TardesProductEvaluationContract[];
        productionCategoryList?: BOA.Types.Kernel.KKB.TardesProductionCategoryContract[];
        productList?: BOA.Types.Kernel.KKB.TardesProductContract[];
        productListByCategoriId?: BOA.Types.Kernel.KKB.TardesProductContract[];
        qualityScoreByProductType?: BOA.Types.Kernel.KKB.TardesQualityScoreContract[];
        questionList?: BOA.Types.Kernel.KKB.TardesQuestionContract[];
        questionListByCategoriId?: BOA.Types.Kernel.KKB.TardesQuestionContract[];
        relatedAccountNumber?: number;
        relatedCustomerName?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        title?: string;
        tranBeginDate?: Date;
        tranDate?: Date;
        tranEndDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workgroupName?: string;
    }
    interface TardesQuestionContract extends BOA.Common.Types.ContractBase {
        categoryId?: number;
        categoryName?: string;
        hostName?: string;
        questionAnswer?: string;
        questionForm?: string;
        questionId?: number;
        questionName?: string;
        questionOptionList?: BOA.Types.Kernel.KKB.TardesQuestionOptionContract[];
        questionType?: string;
        systemDate?: Date;
        tardesQueryId?: number;
        typeId?: number;
        typeName?: string;
        userName?: string;
    }
    interface TardesQuestionOptionContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        optionText?: string;
        optionValue?: string;
        questionId?: number;
        systemDate?: Date;
        tardesQueryId?: number;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.KKB.Corporate.ResponseView {
    interface CorporateResponseViewStatistics {
    }
}
declare namespace BOA.Types.Kernel.KKB.CorporateConstants {
    interface Currency {
    }
    interface DefaultValues {
    }
    interface ParameterTypes {
    }
    interface ResourceCodes {
    }
}
declare namespace BOA.Types.Kernel.KKB.Extensions {
    interface DateTimeExtensions {
    }
    interface DecimalExtensions {
    }
    interface StringExtensions {
    }
}
declare namespace BOA.Types.Kernel.KKB.IndividualConstants {
    interface Collection {
    }
    interface CollectionTypeDescription {
    }
    interface DefaultValues {
    }
    interface ParameterTypes {
    }
    interface Reports {
    }
    interface ResourceCodes {
    }
    interface ResponseErrorCodes {
    }
}
declare namespace BOA.Types.Kernel.KKB.KKBCommonConstants {
    interface Commission {
    }
    interface Messages {
    }
    interface Notice {
    }
}
declare namespace BOA.Types.Kernel.KKB.LKSConstants {
    interface ResourceCodes {
    }
}
declare namespace BOA.Types.Kernel.KKB.NoticeEnums {
    export const enum DataType {
        TextLeft = 1,
        Int = 2,
        Date = 3,
        Reserved = 4,
        Numeric32 = 6,
        Numeric35 = 7,
        TextRight = 8,
        IntWithNoZero = 9
    }
    export const enum ValueType {
        Value = 1,
        Constant = 2
    }
}
declare namespace BOA.Types.Kernel.KKB.RiskReportConstants {
    interface AssetTypeCodes {
    }
    interface Formats {
    }
    interface ParameterTypes {
    }
    interface ReportTypeCodes {
    }
}
declare namespace BOA.Types.Kernel.KKB.StaffQueryConstants {
    export const enum EodName {
        StaffQuery = 0
    }
}
declare namespace BOA.Types.Kernel.KKB.TardesConstants {
    interface TardesUrl {
    }
}
declare namespace BOA.Types.Kernel.KKBPackage {
    interface DocumentContract extends BOA.Common.Types.ContractBase {
        address?: string;
        branchName?: string;
        channelInformation?: string;
        detailContract?: BOA.Types.Kernel.KKBPackage.PackageDetailContract;
        documentData?: number[];
        documentExtention?: string;
        documentId?: string;
        documentName?: string;
        email?: string;
        findeksCorporateMembershipId?: number;
        findeksIndividualMembershipId?: number;
        findeksMembershipDocumentId?: number;
        packageCode?: string;
        personType?: number;
        phoneNumber?: string;
        taxNumber?: string;
        title?: string;
    }
    interface FindeksDocumentApprovalResponseContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        resultCode?: string;
    }
    interface FindeksGetDocumentResponseContract extends BOA.Common.Types.ContractBase {
        documentList?: BOA.Types.Kernel.KKBPackage.DocumentContract[];
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        resultCode?: string;
    }
    interface FindeksPackageInquiryResponseContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        packageContract?: BOA.Types.Kernel.KKBPackage.PackageContract;
        resultCode?: string;
    }
    interface FindeksSendDocumentResponseContract extends BOA.Common.Types.ContractBase {
        documentList?: BOA.Types.Kernel.KKBPackage.DocumentContract[];
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        resultCode?: string;
    }
    interface KKBCommon {
    }
    interface PackageContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        adressContract?: BOA.Types.Kernel.Customer.AdressContract;
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cancelBusinessKey?: number;
        cancelProvisionNumber?: string;
        cancelSystemDate?: Date;
        cancelUserName?: string;
        cardNumber?: string;
        channelId?: number;
        detailContract?: BOA.Types.Kernel.KKBPackage.PackageDetailContract;
        divitInstanceId?: string;
        documentList?: BOA.Types.Kernel.KKBPackage.DocumentContract[];
        errorCode?: string;
        errorMessage?: string;
        errorMessageDetail?: string;
        hasError?: number;
        hostName?: string;
        iBAN?: string;
        isCancellable?: boolean;
        kKBChannelInfo?: string;
        kKBPackageSellId?: number;
        kKBPaymentInfo?: string;
        membershipId?: string;
        packageId?: number;
        paymentId?: number;
        paymentType?: number;
        personType?: number;
        provisionNumber?: string;
        resultCode?: string;
        sellerFullName?: string;
        sellerTCKN?: string;
        status?: BOA.Types.Kernel.KKBPackage.KKBCommon.PackageStatus;
        systemDate?: Date;
        taxNumber?: string;
        tCKN?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PackageDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        code?: string;
        firstReportCreateDate?: Date;
        isSellWithInstallment?: boolean;
        kKBPackageSellId?: number;
        membershipId?: string;
        mustCreateReportDate?: boolean;
        name?: string;
        packageId?: number;
        personType?: number;
        saleType?: string;
        taxNumber?: string;
        tCKN?: string;
        type?: string;
        typeDefinition?: string;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        packageContract?: BOA.Types.Kernel.KKBPackage.PackageContract;
        paymentType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface PaymentErrorContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        kKBPackageSellId?: number;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface PaymentSenderErrorContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        packageId?: number;
        paymentSenderErrorId?: number;
        systemDate?: Date;
        userName?: string;
        workDate?: Date;
    }
    interface ServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorCode?: string;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        outgoingServiceCallId?: number;
        requestDate?: Date;
        requestXML?: string;
        responseDate?: Date;
        responseXML?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface WebServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        password?: string;
        timeout?: number;
        url?: string;
        username?: string;
    }
}
declare namespace BOA.Types.Kernel.KKBPackage.KKBCommon {
    export const enum DivitDocumentId {
        SaleAgreementDocument = 1362,
        PreInformation = 1363
    }
    export const enum DivitStatus {
        Active = 0,
        Passive = 1
    }
    export const enum DocumentType {
        PreInformation = 6,
        SaleAgreementDocument = 5
    }
    export const enum ListType {
        A = 1,
        P = 2,
        T = 3
    }
    export const enum PackageStatus {
        Accounting = 1,
        Sale = 2,
        Approved = 3,
        Cancel = 4
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        Card = 3,
        Findeks = 4
    }
    export const enum PersonType {
        Individual = 0,
        Corporate = 1
    }
    export const enum SaleType {
        YENI_PAKET = 1,
        UPGRADE = 2
    }
    export const enum WebServiceType {
        Membership = 1,
        Document = 2,
        General = 3,
        Package = 4
    }
}
declare namespace BOA.Types.Kernel.LateCharge {
    interface CollectingChannelContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
    }
    interface CollectingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        bsmv?: number;
        businesskey?: number;
        channelId?: number;
        collectingId?: number;
        collectionAmountTL?: number;
        collectionFEC?: number;
        collectionFecName?: string;
        collectionFER?: number;
        collectionSource?: number;
        collectionStatus?: number;
        hostName?: string;
        isActive?: boolean;
        lCRId?: number;
        portfolioClass?: number;
        remainingAmount?: number;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface Constants {
    }
    interface LateChargeAccountingContract {
        accountingDescription?: string;
        channelId?: number;
        collectionAccountBranchId?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAmount?: number;
        collectionAmountTL?: number;
        collectionFEC?: number;
        collectionFECGroup?: number;
        collectionFER?: number;
        collectionSource?: number;
        collectionStatus?: number;
        customerStatus?: number;
        debtFECType?: number;
        forgoAmount?: number;
        instalmentId?: number;
        instalmentType?: number;
        isLeasing?: boolean;
        isWithBSMV?: boolean;
        lateChargeAccountNumber?: number;
        lateChargeAccountSuffix?: number;
        lateChargeAmount?: number;
        lateChargeBranchId?: number;
        lateChargeFEC?: number;
        lCRId?: number;
        portfolioClass?: number;
        projectCollectionId?: number;
        vATRate?: number;
    }
    interface LateChargeAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        bITTAmount?: number;
        bSMVRate?: number;
        collectionAccountBranchId?: number;
        collectionAccountNumber?: number;
        collectionAccountSuffix?: number;
        collectionAmount?: number;
        collectionAmountTL?: number;
        collectionFEC?: number;
        collectionFECGroup?: number;
        collectionFER?: number;
        collectionSource?: number;
        debtFECType?: number;
        isLeasing?: boolean;
        isWithBSMV?: boolean;
        lateChargeAccountNumber?: number;
        lateChargeAccountSuffix?: number;
        lateChargeAmount?: number;
        lateChargeBranchId?: number;
        lateChargeFEC?: number;
        lCAccountingType?: number;
        principalAmount?: number;
        vATAmount?: number;
        vATRate?: number;
    }
    interface LateChargeCollectionContract {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        bSMVRate?: number;
        collectedAmount?: number;
        debtFECType?: number;
        debtFECTypeName?: string;
        detailDescription?: string;
        isLeasing?: boolean;
        isWithBSMV?: number;
        lateChargeFEC?: number;
        lateChargeFECName?: string;
        lCRId?: number;
        maturityDate?: Date;
        netLateChargeAmount?: number;
        orderNumber?: number;
        portfolioClass?: number;
        vATRate?: number;
    }
    interface LateChargeContract extends BOA.Common.Types.ContractBase {
        accounSuffix?: number;
        accountNumber?: number;
        amount?: number;
        branchId?: number;
        cancelForgoId?: number;
        chargedType?: number;
        chargedTypeName?: string;
        collectingAmount?: number;
        customerClass?: number;
        customerStatus?: number;
        forgoAmount?: number;
        forgoTestAmount?: number;
        hostName?: string;
        installmentTypeName?: string;
        instalmentPursuitId?: number;
        instalmentType?: number;
        isActive?: boolean;
        isWithBSMV?: boolean;
        lCRId?: number;
        netLateChargeAmount?: number;
        projectCollectionId?: number;
        remainAmount?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface LateChargeForgoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchName?: string;
        canceledAmount?: number;
        cancelForgoId?: number;
        customerClass?: number;
        customerGroupName?: string;
        customerName?: string;
        description?: string;
        forgoId?: number;
        groupNumber?: string;
        hostName?: string;
        installmentOrderNumber?: number;
        installmentTypeName?: string;
        lawyerDate?: Date;
        lawyerName?: string;
        lCRId?: number;
        processStatusName?: string;
        projectTypeName?: string;
        regionName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface LateChargeReportContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        branchId?: number;
        channelName?: string;
        collectedBSMV?: number;
        collectingContract?: BOA.Types.Kernel.LateCharge.CollectingContract;
        collectionSourceName?: string;
        customerName?: string;
        detailDescription?: string;
        endDate?: Date;
        fec?: number;
        firstDate?: Date;
        forgoAmount?: number;
        groupName?: string;
        groupNo?: number;
        installmentMaturityDate?: Date;
        installmentOrderNumber?: number;
        instalmentOrder?: number;
        instalmentTypeName?: string;
        lateChargeContract?: BOA.Types.Kernel.LateCharge.LateChargeContract;
        lawyerDate?: Date;
        lawyerName?: string;
        locationContract?: BOA.Types.Kernel.LateCharge.LocationContract;
        portfolioClassName?: string;
        principalEUR?: number;
        principalTL?: number;
        principalUSD?: number;
        profitability?: number;
        projectId?: number;
        projectPayBackPlanInstallmentId?: number;
        projectType?: string;
        statusName?: string;
    }
    interface LocationContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchName?: string;
        districtId?: number;
        districtName?: string;
    }
}
declare namespace BOA.Types.Kernel.LateCharge.Constants {
    interface CancelStatus {
    }
    interface ForgoStatus {
    }
    interface InstallmentType {
    }
    interface StatusMessages {
    }
}
declare namespace BOA.Types.Kernel.LawOperations {
    interface AssetEvaluationReportContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        aERFECCode?: number;
        aERProcessId?: number;
        aERReportDateBegin?: Date;
        aERReportDateEnd?: Date;
        aERUnitCorpRespAuthorization?: number;
        aERUnitRetailRespAuthorization?: number;
        aERViewDetail?: string;
        aERViewName?: string;
        aERViewType?: number;
        assetEvaluationReportId?: number;
        assetEvaluationReportStatusCode?: number;
        assetEvaluationReportStatusId?: number;
        assetEvaluationReportStatusName?: string;
        assetResolutionId?: number;
        channelId?: number;
        estimatedValue?: number;
        fecId?: number;
        hostIP?: string;
        hostName?: string;
        lawyerId?: number;
        notificationDate?: Date;
        reportDate?: Date;
        salePrice?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        viewDate?: Date;
        wFInstanceId?: number;
    }
    interface AssetEvaluationReportViewContract extends BOA.Common.Types.ContractBase {
        assetEvaluationReportId?: number;
        assetEvaluationReportViewId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userId?: string;
        userName?: string;
        viewDate?: Date;
        viewType?: number;
        viewTypeName?: string;
    }
    interface AssetExpertiseContract extends BOA.Common.Types.ContractBase {
        assetExpertiseId?: number;
        assetResolutionId?: number;
        expertiseDate?: Date;
        expertiseFirm?: string;
        expertiseValue?: number;
        fecId?: number;
        fecName?: string;
        hostIP?: string;
        hostName?: string;
        promptSaleValue?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AssetInquiryInfoContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        assetInformation?: string;
        assetInquiryId?: number;
        assetType?: number;
        assetTypeString?: string;
        channelId?: number;
        channelName?: string;
        customerId?: number;
        description?: string;
        distraintOrderNumber?: number;
        hostIP?: string;
        hostName?: string;
        inquiryDate?: Date;
        inquiryDateEnd?: Date;
        inquiryDateStart?: Date;
        inquiryResult?: number;
        inquiryResultString?: string;
        inquiryType?: number;
        inquiryTypeString?: string;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        name?: string;
        personId?: number;
        personRelationType?: number;
        personTypeAndName?: string;
        systemDate?: Date;
        taxNumber?: string;
        userName?: string;
    }
    interface AssetNoteContract extends BOA.Common.Types.ContractBase {
        assetEvaluationReportId?: number;
        assetNoteId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        noteDate?: Date;
        systemDate?: Date;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userId?: string;
        userName?: string;
    }
    interface AssetResolutionContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        accountNumber?: number;
        assetEvaluationReportContract?: BOA.Types.Kernel.LawOperations.AssetEvaluationReportContract;
        assetEvaluationReportViewContract?: BOA.Types.Kernel.LawOperations.AssetEvaluationReportViewContract;
        assetEvaluationReportViewList?: BOA.Types.Kernel.LawOperations.AssetEvaluationReportViewContract[];
        assetExpertiseContract?: BOA.Types.Kernel.LawOperations.AssetExpertiseContract;
        assetExpertiseList?: BOA.Types.Kernel.LawOperations.AssetExpertiseContract[];
        assetNoteContract?: BOA.Types.Kernel.LawOperations.AssetNoteContract;
        assetNoteList?: BOA.Types.Kernel.LawOperations.AssetNoteContract[];
        assetResolutionDetailContract?: BOA.Types.Kernel.LawOperations.AssetResolutionDetailContract;
        assetResolutionId?: number;
        assetResolutionProcessId?: number;
        assetResolutionStatusCode?: string;
        assetResolutionStatusId?: number;
        assetResolutionStatusName?: string;
        assetTypeName?: string;
        auctionNoteList?: BOA.Types.Kernel.LawOperations.AssetNoteContract[];
        auctionSaleContract?: BOA.Types.Kernel.LawOperations.AuctionSaleContract;
        auctionSaleDetailContract?: BOA.Types.Kernel.LawOperations.AuctionSaleDetailContract;
        auctionSaleDetailList?: BOA.Types.Kernel.LawOperations.AuctionSaleDetailContract[];
        auctionSaleViewContract?: BOA.Types.Kernel.LawOperations.AuctionSaleViewContract;
        auctionSaleViewList?: BOA.Types.Kernel.LawOperations.AuctionSaleViewContract[];
        branchId?: number;
        branchName?: string;
        channelId?: number;
        collateralId?: number;
        customerClassName?: string;
        customerName?: string;
        detailDescription?: string;
        hostIP?: string;
        hostName?: string;
        isAuctionSale?: boolean;
        lawyerFundTrackingId?: number;
        mainDescription?: string;
        openType?: number;
        portfolioClass?: string;
        sector?: string;
        statusDefinitionId?: number;
        statusName?: string;
        systemDate?: Date;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AssetResolutionDetailContract extends BOA.Common.Types.ContractBase {
        areaInExpertise?: number;
        areaInReferee?: number;
        assetResolutionDetailId?: number;
        assetResolutionId?: number;
        automobileInsuranceAmount?: number;
        currentSituation?: string;
        damageInformation?: string;
        deedLien?: string;
        deedOwner?: string;
        deedType?: string;
        fuelType?: string;
        furtherMortgage?: string;
        furtherPledge?: string;
        hostIP?: string;
        hostName?: string;
        kDVR?: number;
        marketStudyHighestAmount?: number;
        marketStudyLowestAmount?: number;
        mTV?: number;
        realEstateType?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AssetViewContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        accountNumber?: number;
        aERFECCode?: string;
        aERProcessId?: number;
        aERViewDetail?: string;
        aERViewName?: string;
        aERViewType?: number;
        assetEvaluationReportId?: number;
        assetEvaluationReportStatusCode?: string;
        assetEvaluationReportStatusId?: number;
        assetEvaluationReportStatusName?: string;
        assetResolutionId?: number;
        assetResolutionProcessId?: number;
        assetResolutionStatusCode?: string;
        assetResolutionStatusId?: number;
        assetResolutionStatusName?: string;
        assetTypeName?: string;
        auctionSaleId?: number;
        auctionSaleProcessId?: number;
        auctionSaleStatusCode?: string;
        auctionSaleStatusId?: number;
        auctionSaleStatusName?: string;
        auctionSaleView?: number;
        auctionSaleViewName?: string;
        bidAmount?: number;
        branchId?: number;
        branchName?: string;
        buyer?: number;
        buyerDescription?: string;
        collateralId?: number;
        complementarySaleDate?: string;
        customerClassName?: string;
        customerName?: string;
        detailDescription?: string;
        estimatedValue?: number;
        expertiseDate?: Date;
        expertiseFirm?: string;
        expertiseValue?: number;
        fecId?: number;
        firstSaleDate?: string;
        hostIP?: string;
        hostName?: string;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        mainDescription?: string;
        notificationDate?: Date;
        reportDate?: Date;
        saleAuctionType?: number;
        saleAuctionTypeName?: string;
        secondSaleDate?: string;
        systemDate?: Date;
        type?: number;
        userName?: string;
        viewDate?: Date;
        viewDetail?: string;
    }
    interface AuctionSaleContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        assetEvaluationReportId?: number;
        aSUnitCorpRespAuthorization?: number;
        aSUnitRetailRespAuthorization?: number;
        auctionSaleId?: number;
        auctionSaleProcessId?: number;
        auctionSaleStatusCode?: string;
        auctionSaleStatusId?: number;
        auctionSaleStatusName?: string;
        auctionSaleView?: number;
        auctionSaleViewName?: string;
        bidAmount?: number;
        buyer?: number;
        buyerDescription?: string;
        channelId?: number;
        complementarySaleDate?: Date;
        firstSaleDate?: Date;
        firstSaleDateBegin?: Date;
        firstSaleDateEnd?: Date;
        hostIP?: string;
        hostName?: string;
        lawyerId?: number;
        saleAuctionType?: number;
        saleAuctionTypeName?: string;
        saleFinalizationDate?: Date;
        salePrice?: number;
        secondSaleDate?: Date;
        secondSaleDateBegin?: Date;
        secondSaleDateEnd?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        viewDate?: Date;
        viewDetail?: string;
        wFInstanceId?: number;
    }
    interface AuctionSaleDetailContract extends BOA.Common.Types.ContractBase {
        auctionSaleDetailId?: number;
        auctionSaleId?: number;
        auctionType?: number;
        auctionTypeName?: string;
        hostIP?: string;
        hostName?: string;
        saleDate?: Date;
        salePrice?: number;
        salePriceRate?: number;
        saleTime?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AuctionSaleViewContract extends BOA.Common.Types.ContractBase {
        auctionSaleId?: number;
        auctionSaleViewId?: number;
        bidAmount?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userId?: string;
        userName?: string;
        viewDate?: Date;
        viewType?: number;
        viewTypeName?: string;
    }
    interface BusinessSummaryContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        description?: string;
        mainProcessId?: number;
        processDefinitionCode?: string;
        processDefinitionId?: number;
        processName?: string;
        referenceTableId?: number;
        statusDefinitionCode?: string;
        statusDefinitionId?: number;
        statusName?: string;
    }
    interface CollateralContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        collateralAmount?: number;
        collateralDate?: Date;
        collateralDefinitionId?: number;
        collateralId?: number;
        collateralName?: string;
        customerName?: string;
        description?: string;
        divitId?: string;
        divitInstanceId?: string;
        expiryDate?: Date;
        fec?: number;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        initialCollateralAmount?: number;
        initialFEC?: number;
        initialFECCode?: string;
        state?: number;
        stateName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableAmountUSD?: number;
        usageInCustomerControl?: number;
        usageInCustomerControlName?: string;
        userName?: string;
    }
    interface CommunicationContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        accountNumber?: number;
        channelId?: number;
        channelName?: string;
        communicationId?: number;
        contactPerson?: string;
        description?: string;
        detailType?: number;
        detailTypeName?: string;
        endingDate?: Date;
        hostIP?: string;
        hostName?: string;
        lawyerFundTrackingId?: number;
        phone?: string;
        startingDate?: Date;
        systemDate?: Date;
        tranDate?: Date;
        type?: number;
        typeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DetailProcessContract extends BOA.Common.Types.ContractBase {
        afterProcessDetailDefinitionCode?: string;
        afterProcessDetailDefinitionId?: number;
        processDefinitionId?: number;
        processDetailDefinitionId?: number;
        processDetailLinkDefinitionId?: number;
        processId?: number;
        relatedProcessId?: number;
        relationType?: number;
        runOrder?: number;
    }
    interface DocumentDefinitionContract extends BOA.Common.Types.ContractBase {
        divitDocumentId?: number;
        documentCount?: number;
        documentDefinitionCode?: string;
        documentDefinitionId?: number;
        documentLabel?: string;
        headQuarterDivitId?: string;
        isMandatory?: number;
        lawyerDivitId?: string;
        orderNumber?: number;
        processDetailDefinitionId?: number;
        processDetailDocumentDefinitionId?: number;
    }
    interface DocumentModel {
        description?: string;
        documentDefinitionContract?: BOA.Types.Kernel.LawOperations.DocumentDefinitionContract;
        documentType?: BOA.Types.Kernel.LawOperations.DocumentTypeModel;
        documentTypeId?: number;
        filePath?: string;
        id?: number;
    }
    interface DocumentTypeModel {
        documentTypeId?: number;
        documentTypeName?: string;
    }
    interface LawyerAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: number;
        accountTypeMandatory?: number;
        accountTypeName?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        lawyerAccountId?: number;
        lawyerId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LawyerAdvanceAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.LawOperations.LawyerAdvanceContract;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface LawyerAdvanceContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        accountNumber?: number;
        advanceAccountNumber?: number;
        advanceAccountSuffix?: number;
        advanceBranchId?: number;
        advanceTranType?: number;
        advanceTranTypeName?: string;
        amount?: number;
        approveUnit?: number;
        beginDate?: Date;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        currentAccountNumber?: number;
        currentAccountSuffix?: number;
        currentBranchId?: number;
        description?: string;
        endDate?: Date;
        fecId?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        languageId?: number;
        lawyerAdvancedId?: number;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface LawyerContract extends BOA.Common.Types.ContractBase {
        address?: string;
        cityId?: number;
        cityName?: string;
        countyId?: number;
        countyName?: string;
        email?: string;
        ftpLink?: string;
        getAccountList?: BOA.Types.Kernel.LawOperations.LawyerAccountContract[];
        isSoftCopy?: boolean;
        lawyerId?: number;
        lawyerName?: string;
        phone?: string;
        selectedBranchIds?: number[];
        state?: boolean;
        username?: string;
    }
    interface LawyerContractBase extends BOA.Common.Types.ContractBase {
        documentListToBeDownloaded?: BOA.Types.Kernel.DMS.FileServerDocumentExtended[];
        headQuarterDivitId?: string;
        lawyerDivitId?: string;
        processDetailId?: number;
        processId?: number;
        processType?: number;
        statusCode?: string;
        statusId?: number;
        statusName?: string;
    }
    interface LawyerExpenseAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.LawOperations.LawyerExpenseContract;
        isCancelTransaction?: boolean;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface LawyerExpenseContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        advanceAccountNumber?: number;
        advanceAccountSuffix?: number;
        advanceBranchId?: number;
        advanceDecision?: number;
        advanceDecisionName?: string;
        amount?: number;
        approveUnit?: number;
        bankAmount?: number;
        beginDate?: Date;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        chargeName?: string;
        customerAmount?: number;
        description?: string;
        detailContract?: BOA.Types.Kernel.LawOperations.LawyerExpenseDetailContract;
        endDate?: Date;
        excelFileName?: string;
        expenseAccountNumber?: number;
        expenseAccountSuffix?: number;
        expenseBranchId?: number;
        expenseDate?: Date;
        expenseDetailList?: BOA.Types.Kernel.LawOperations.LawyerExpenseDetailContract[];
        expenseName?: string;
        fecId?: number;
        fecName?: string;
        hostIp?: string;
        hostName?: string;
        lawyerAdvanceId?: number;
        lawyerExpenseDetailId?: number;
        lawyerExpenseId?: number;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        paymentType?: number;
        systemDate?: Date;
        tableNo?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface LawyerExpenseDetailAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.LawOperations.LawyerExpenseDetailContract;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface LawyerExpenseDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        chargeName?: string;
        chargeType?: number;
        costJournalId?: number;
        costType?: number;
        customerName?: string;
        description?: string;
        expenseAccountNumber?: number;
        expenseAccountSuffix?: number;
        expenseBranchId?: number;
        expenseDate?: Date;
        expenseName?: string;
        expenseType?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        lawyerExpenseDetailId?: number;
        lawyerExpenseId?: number;
        lawyerFundTrackingId?: number;
        paymentType?: number;
        reverseBusinessKey?: number;
        reverseLawyerAdvanceId?: number;
        reverseWFInstanceId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LawyerFundTrackingListContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        branchId?: number;
        branchName?: string;
        checker1?: string;
        checker2?: string;
        closeDate?: Date;
        commissionDebit?: number;
        customerClassId?: number;
        customerClassIdList?: number[];
        customerClassName?: string;
        customerName?: string;
        customerNo?: number;
        customerNoFilter?: string;
        customerStatusId?: number;
        customerStatusIdList?: number[];
        customerStatusName?: string;
        endDate?: Date;
        eurDebit?: number;
        givingDate?: Date;
        insolvencyCertificate?: string;
        insolvencyCertificateDate?: Date;
        isActive?: boolean;
        isLocked?: boolean;
        isWorkflow?: boolean;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        lawyerStatu?: string;
        logBeginDate?: Date;
        logEndDate?: Date;
        maker?: string;
        operationOrder?: number;
        operationType?: number;
        operationTypeName?: string;
        protokol?: string;
        regionalOfficeId?: number;
        regionalOfficeName?: string;
        status?: number;
        systemDate?: Date;
        takenDate?: Date;
        tlDebit?: number;
        usdDebit?: number;
    }
    interface LawyerNextStatusContract extends BOA.Common.Types.ContractBase {
        afterStatusDefinitionId?: number;
        beforeStatusDefinitionId?: number;
        definitionId?: number;
        description?: string;
        dictionaryId?: number;
        dictionaryName?: string;
        isActive?: boolean;
        languageId?: number;
        lawyerFundTrackingId?: number;
        mainProcessId?: number;
        orderNumber?: number;
        processDefinitionId?: number;
        processDetailDefinitionCode?: string;
        processDetailDefinitionId?: number;
        processId?: number;
        processTransactionType?: number;
        referenceTableId?: number;
        roleId?: number;
        statusActionType?: number;
        transactionDefinitionId?: number;
    }
    interface LawyerNotificationContract extends BOA.Common.Types.ContractBase {
        bccEmailAddress?: string;
        ccEmailAddress?: string;
        emailBody?: string;
        emailSubject?: string;
        notificationRoleId?: string;
        notificationUnit?: number;
        processDetailId?: number;
        processDetailNotificationDefinitionId?: number;
        toEmailAddress?: string;
    }
    interface LawyerNotificationRequest extends BOA.Common.Types.RequestBase {
        lawyerNotificationContract?: BOA.Types.Kernel.LawOperations.LawyerNotificationContract;
    }
    interface LawyerOperationConstants {
    }
    interface LawyerProcessContract extends BOA.Common.Types.ContractBase {
        assetInquiry?: BOA.Types.Kernel.LawOperations.AssetInquiryInfoContract;
        assetResolution?: BOA.Types.Kernel.LawOperations.AssetResolutionContract;
        beforeProcessDetailId?: number;
        channelId?: number;
        communication?: BOA.Types.Kernel.LawOperations.CommunicationContract;
        documentList?: BOA.Types.Kernel.LawOperations.DocumentModel[];
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        lawyerAdvance?: BOA.Types.Kernel.LawOperations.LawyerAdvanceContract;
        lawyerExpense?: BOA.Types.Kernel.LawOperations.LawyerExpenseContract;
        lawyerId?: number;
        paymentPromise?: BOA.Types.Kernel.LawOperations.PaymentPromiseContract;
        proceeding?: BOA.Types.Kernel.LawOperations.ProceedingContract;
        processDetailDefinitionId?: number;
        processDetailLinkDefinitionId?: number;
        processId?: number;
        processList?: BOA.Types.Kernel.LawOperations.LawyerContractBase[];
        processRelationId?: number;
        processType?: number;
        processTypeCode?: string;
        referenceTableId?: number;
        relatedProcessId?: number;
        relationType?: number;
        roleId?: number;
        tranDate?: Date;
        tranDescription?: string;
        updateHostName?: string;
        updateUserName?: string;
        uploadDocumentList?: BOA.Types.Kernel.LawOperations.Pack.UploadDocumentPack[];
        userName?: string;
    }
    interface LawyerProcessDetailContractBase extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        processDetailId?: number;
        userName?: string;
    }
    interface LawyerProcessDetailDocumentContract extends BOA.Types.Kernel.LawOperations.LawyerProcessDetailContractBase {
        divitDocumentId?: number;
        documentDefinitionId?: number;
        documentName?: string;
        processDetailDocumentDefinitionId?: number;
    }
    interface LawyerProcessDetailNotificationContract extends BOA.Types.Kernel.LawOperations.LawyerProcessDetailContractBase {
        informationId?: number;
        notificationUnit?: number;
        processDetailNotificationDefinitionId?: number;
    }
    interface OtherPartyProxyFeeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        channelName?: string;
        collectionAmount?: number;
        collectionDetailList?: BOA.Types.Kernel.LawOperations.OtherPartyProxyFeeDetailContract[];
        collectionTypeList?: number[];
        customerClassId?: number;
        customerClassList?: number[];
        customerClassName?: string;
        customerName?: string;
        description?: string;
        entitledFeeAmount?: number;
        feeAmount?: number;
        groupName?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        isRiskEnd?: number;
        lastRiskDate?: Date;
        lastRiskInfo?: number;
        lawyerFeeTableDefinitionId?: number;
        lawyerFeeTableDefinitionName?: string;
        lawyerFundTrackingId?: number;
        lawyerGivenDate?: Date;
        lawyerGivenDebtInfo?: string;
        lawyerId?: number;
        lawyerList?: number[];
        lawyerName?: string;
        lawyerStatus?: number;
        lawyerTakenDate?: Date;
        maximumPayableFeeAmount?: number;
        maximumPayRate?: number;
        netFeeAmount?: number;
        otherPartyProxyFeeId?: number;
        payRate?: number;
        periodBeginDate?: Date;
        periodEndDate?: Date;
        previousFeeAmount?: number;
        proceedingAmount?: number;
        proceedingAmountForCalculation?: number;
        proceedingDetailList?: BOA.Types.Kernel.LawOperations.OtherPartyProxyFeeDetailContract[];
        statusCode?: string;
        statusName?: string;
        stoppageAmount?: number;
        stoppageRate?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vATAmount?: number;
        vATRate?: number;
        wFInstanceId?: number;
    }
    interface OtherPartyProxyFeeDetailContract extends BOA.Common.Types.ContractBase {
        detailAmount?: number;
        detailFeeAmount?: number;
        detailType?: number;
        detailTypeName?: string;
        feeRate?: number;
        hostIP?: string;
        hostName?: string;
        intervalAmount?: number;
        otherPartyProxyFeeDetailId?: number;
        otherPartyProxyFeeId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentPromiseContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        channelId?: number;
        channelName?: string;
        customerId?: number;
        description?: string;
        endingDate?: Date;
        fecCode?: string;
        fecId?: number;
        hostIP?: string;
        hostName?: string;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        name?: string;
        paymentPromiseId?: number;
        personId?: number;
        personName?: string;
        personRelationType?: number;
        personTypeAndName?: string;
        promiseAmount?: number;
        promiseDate?: Date;
        startingDate?: Date;
        systemDate?: Date;
        taxNumber?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonContact extends BOA.Common.Types.ContractBase {
        contactDetailType?: number;
        contactInformation?: string;
        contactType?: number;
        contactTypeName?: string;
        isDefault?: boolean;
        personId?: number;
        referenceTableId?: number;
    }
    interface ProceedingContract extends BOA.Types.Kernel.LawOperations.LawyerContractBase {
        beginDate?: Date;
        description?: string;
        endDate?: Date;
        executionOffice?: string;
        fileNumber?: string;
        hostIP?: string;
        hostName?: string;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        personList?: BOA.Types.Kernel.LawOperations.ProceedingPersonContract[];
        proceedingAmount?: number;
        proceedingDate?: Date;
        proceedingId?: number;
        proceedingType?: number;
        proceedingTypeName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface ProceedingPersonContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        personId?: number;
        personName?: string;
        personTypeName?: string;
        proceedingId?: number;
        proceedingPersonId?: number;
        relationDetail?: string;
        relationType?: number;
        relationTypeName?: string;
        rowNumber?: number;
        selected?: boolean;
        taxNumber?: string;
        updateHostName?: string;
        updateUserName?: string;
        userName?: string;
    }
    interface ProcessHistoryContract extends BOA.Common.Types.ContractBase {
        afterStatusDefinitionId?: number;
        afterStatusName?: string;
        beforeStatusDefinitionId?: number;
        beforeStatusName?: string;
        channelId?: number;
        channelName?: string;
        lawyerFundTrackingId?: number;
        lawyerId?: number;
        lawyerName?: string;
        processDefinitionId?: number;
        processDetailId?: number;
        processId?: number;
        processName?: string;
        roleId?: number;
        roleName?: string;
        statusActionType?: number;
        systemDate?: Date;
        tranDate?: Date;
        tranDescription?: string;
        tranName?: string;
        transactionDefinitionId?: number;
        userName?: string;
    }
    interface ProcessReturn extends BOA.Common.Types.ContractBase {
        processDetailId?: number;
        processId?: number;
    }
    interface ProtocolPaymentPlanContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beginDate?: Date;
        collectionAmount?: number;
        customerName?: string;
        customerSegment?: number;
        customerSegmentName?: string;
        departmentName?: string;
        endDate?: Date;
        fec?: number;
        fecName?: string;
        groupName?: string;
        groupNo?: number;
        lawyerDate?: Date;
        lawyerId?: number;
        lawyerName?: string;
        paymentAmount?: number;
        paymentDate?: Date;
        paymentSeqNo?: number;
        planId?: number;
        protocolId?: number;
        tranDate?: Date;
        tranDepartment?: number;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.LawOperations.AssetExpertiseContract {
    export const enum ResponseType {
        Ok = 1,
        Cancel = 2
    }
}
declare namespace BOA.Types.Kernel.LawOperations.Enumeration {
    export const enum LawyerModuleEnumeration {
        GeneralInformation = 0,
        Collateral = 1,
        ProcessSummary = 2,
        RelatedPeople = 3,
        ProcessHistory = 4,
        Communication = 5,
        AssetInquiryInfo = 6,
        PaymentPromise = 7,
        AssetResolution = 8,
        Advance = 9,
        Expense = 10,
        CollectionList = 11,
        RiskInfo = 12
    }
    interface LawyerEnums {
    }
}
declare namespace BOA.Types.Kernel.LawOperations.Enumeration.LawyerEnums {
    interface ContractualProxyFeeExcelColumnNames {
    }
    interface LawyerAdvanceTransactionTypes {
    }
    interface LawyerExpenseAdvanceDecisionTypes {
    }
    interface LawyerExpenseChargeTypes {
    }
    interface LawyerExpenseExcelColumnNames {
    }
    interface LawyerOperationParameters {
    }
    interface LawyerOperationsOtherEnums {
    }
    interface LawyerOperationsResourceCodes {
    }
    interface LawyerOperationsWorkflowTokens {
    }
    interface ProcessDefinitionCodes {
    }
    interface StatusDefinitionCodes {
    }
}
declare namespace BOA.Types.Kernel.LawOperations.Pack {
    interface DocumentPack {
        divitId?: string;
        divitInstanceId?: string;
        documentList?: BOA.Types.Kernel.DMS.FileServerDocumentExtended[];
        flowId?: any;
        lawyerModule?: BOA.Types.Kernel.LawOperations.Enumeration.LawyerModuleEnumeration;
        moduleId?: number;
    }
    interface DownloadedDocumentPack {
        documentContent?: BOA.Types.Kernel.DMS.DocumentContent;
        errorMessage?: string;
        fileServerDocumentExtended?: BOA.Types.Kernel.DMS.FileServerDocumentExtended;
        hasError?: boolean;
    }
    interface UploadDocumentPack {
        description?: string;
        divitId?: string;
        documentContent?: number[];
        documentDefinitionId?: number;
        documentId?: number;
        documentTypeId?: number;
        documentTypeName?: string;
        fileName?: string;
        processDetailDefinitionId?: number;
        processDetailDocumentDefinitionId?: number;
    }
    interface UploadDocumentPackView {
        uploadDocumentList?: BOA.Types.Kernel.LawOperations.Pack.UploadDocumentPack[];
    }
}
declare namespace BOA.Types.Kernel.LetterOfGuarantee {
    export const enum LetterOfGuaranteeHistoryStates {
        InformationEntriesMade = 1,
        Approved = 2,
        ConditionallyApproved = 3,
        Denied = 4,
        Printed = 5,
        PartiallyReturned = 6,
        Returned = 7,
        Indemnified = 8,
        PartiallyIndemnified = 9,
        RefundsCanceled = 10,
        ChangeRequested = 11,
        ChangeRequestApproved = 12,
        ChangeRequestDenied = 13,
        DurationExtensionRequested = 14,
        DurationExtensionRequestApproved = 15,
        DurationExtensionRequestDenied = 16,
        SubmittedToBranchOrder = 17,
        PrintedAtTheOfficialBranch = 18,
        ReturnedToSuperiorBranch = 19,
        ConfirmationLetterPrinted = 20,
        SampleLetterPrinted = 21,
        TransferFromOldLetterOfGuarantee = 22,
        ExtensionLetterPrinted = 23,
        PreliminaryInjunctionStart = 24,
        PreliminaryInjunctionStop = 25,
        PrintedAgain = 26,
        CommissionChangeRequested = 27,
        CommissionChangeRequestApproved = 28,
        CommissionChangeRequestDenied = 29,
        PrintedAgainAtTheOfficialBranch = 30,
        StartOfTheNewLetterOfGuarantee = 31,
        AnnotatedApproved = 32,
        LetterOfGuaranteeDurationExtensionPrinted = 33,
        LetterOfGuaranteeDurationExtensionConfirmationPrinted = 34
    }
    interface bnkTMDurumSorgu extends BOA.Common.Types.ContractBase {
        bnkTmOutputBean?: BOA.Types.Kernel.LetterOfGuarantee.bnkTMDurumSorgu.bnkTmOutputBeanContract;
        hataAciklama?: string;
        hataKodu?: string;
        islemSonucu?: string;
    }
    interface BranchDataContract extends BOA.Common.Types.ContractBase {
        automaticSendQuantity?: any;
        branchId?: number;
        branchLimit?: number;
        branchName?: string;
        gMCautionaryLimit?: number;
        minFormNumber?: number;
        usedFm?: number;
        usedTl?: number;
        usedTotal?: number;
    }
    interface BranchLimitContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchLimit?: number;
        branchName?: string;
        capitalReserve?: number;
        confirmationCode?: number;
        deposit?: number;
        fecAmount?: number;
        fecId?: number;
        isDirty?: boolean;
        numberOfAutoDelivery?: number;
        numberOfMinForms?: number;
        requestedQuantity?: number;
        systemDate?: Date;
        tlAmount?: number;
        totalAmount?: number;
    }
    interface CommonType {
    }
    interface CorrespondentBanksContract extends BOA.Common.Types.ContractBase {
        accountId?: string;
        accountNumber?: number;
        accountSuffix?: number;
        bicCode?: string;
        branchId?: number;
        correspondentName?: string;
        fec?: number;
        fecCode?: string;
        kTAccountNumber?: string;
    }
    interface LetterOfGuaranteeContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        allocationStatus?: number;
        amountInWords?: string;
        amountOfLetter?: number;
        amountOfLetterTRY?: number;
        amountOfLetterWithFec?: string;
        annualCommissionAmount?: number;
        attachedCustomerName?: string;
        attachedLetterAmount?: number;
        attachedLetterNumber?: number;
        attachedLetterSubject?: string;
        authorizedPerson1?: number;
        authorizedPerson2?: number;
        balanceAmount?: number;
        balanceLimit?: number;
        bankName?: string;
        bParentProductCode?: string;
        branchEMailList?: string;
        branchLimit?: number;
        branchName?: string;
        branchOffical1?: string;
        branchOffical2?: string;
        branchOfficalOfConfirmationLetter1?: string;
        branchOfficalOfConfirmationLetter2?: string;
        branchWorkGroupId?: number;
        businessKey?: number;
        calculatedCommissionAmount?: number;
        channelId?: number;
        commissionAmount?: number;
        commissionBSMVRate?: number;
        commissionBusinessKey?: number;
        commissionFECId?: number;
        commissionFirstRate?: number;
        commissionInstanceId?: number;
        commissionKey?: string;
        commissionLastRate?: number;
        commissionPaymentBusinessKey?: number;
        commissionRate?: number;
        commissionSerializeId?: number;
        concernedCustomerId?: number;
        concernedCustomerName?: string;
        concernedName?: string;
        concernedType?: string;
        confirmPerson1?: number;
        confirmPerson2?: number;
        confirmPersonJob1?: string;
        confirmPersonJob2?: string;
        confirmPersonName1?: string;
        confirmPersonName2?: string;
        confirmTemplate?: string;
        confirmText?: string;
        controlId?: number;
        correspondentBankAccountNumber?: number;
        correspondentBankAccountNumberForKT?: number;
        correspondentBankAccountSuffix?: number;
        creditId?: number;
        customerClassName?: string;
        customerId?: number;
        customerName?: string;
        customerPortfolioBranchId?: number;
        customerPortfolioClass?: number;
        customerPortfolioOwner?: string;
        customerSegment?: number;
        customerType?: string;
        date?: Date;
        dateOfInjunction?: Date;
        dateOfInjunctionCount?: number;
        dateOfInjunctionCountString?: string;
        dayCountOfYear?: number;
        dBKuveyt2KomisyonId?: number;
        debitId?: number;
        debitorAccountSuffix?: number;
        divitFlowId?: string;
        durationType?: string;
        durationYearCount?: number;
        errorInfo?: string;
        exceptionCompleteDate?: Date;
        exceptionDesciription?: string;
        exceptionTroubleshootDate?: Date;
        extendedMaturityCount?: number;
        extendedMaturityCountString?: string;
        extendedMaturityDate?: Date;
        extendedMaturityForCustomer?: Date;
        extendedMaturityInstanceId?: number;
        fecCode?: string;
        fecCoinName?: string;
        fecId?: number;
        fecName?: string;
        fromBranchId?: number;
        fundAllocationId?: number;
        fundAllocationOId?: string;
        fundPaymentInstanceId?: number;
        gMSignature1?: string;
        gMSignature2?: string;
        incentiveId?: number;
        increasingAmountType?: number;
        installmentDayCount?: number;
        installmentOptionDayCount?: number;
        installmentPeriod?: number;
        installmentStartDate?: Date;
        isActive?: number;
        isApproveNeeded?: boolean;
        isBranchApprove?: number;
        isBuildingAndEngineering?: string;
        isCloseAllCommands?: boolean;
        isCommercialBranch?: number;
        isCommissionApproveNeeded?: boolean;
        isCreditApprove?: boolean;
        isDateOfInjunction?: boolean;
        isEditableByUser?: boolean;
        isEditedByUser?: boolean;
        isExemptionDateDisabled?: boolean;
        isHaveAdvanceLetterCurrencyDate?: boolean;
        isHaveLetterSummary?: boolean;
        isLetterAmountChanged?: boolean;
        isMaturityConfirm?: number;
        isOldLetter?: number;
        isPrinted?: boolean;
        isPrinterError?: boolean;
        isReverseAccounting?: number;
        isSaveSignaturesOnScreen?: number;
        isTemplateChanged?: boolean;
        isTemplateLastChanged?: boolean;
        jobOfBranchOffical1?: string;
        jobOfBranchOffical2?: string;
        jobOfBranchOfficalOfConfirmationLetter?: string;
        jobOfBranchOfficalOfConfirmationLetter2?: string;
        kuveytTurkCustomerNumber?: number;
        lastAmountOfLetter?: number;
        lastCommissionCalculateDate?: Date;
        lastCommissionEndDate?: Date;
        lastExtendedMaturityCount?: number;
        lastExtendedMaturityDate?: Date;
        lastExtendedMaturityDateControl?: Date;
        lastLetterNumber?: number;
        letterDate?: Date;
        letterId?: number;
        letterNumber?: number;
        letterOfGuaranteeType?: string;
        letterOfGuaranteeTypeId?: number;
        letterState?: string;
        letterStateId?: number;
        letterSubject?: string;
        letterSummarySubjectId?: number;
        letterTextSpecialExpression?: string;
        letterType?: number;
        limitType?: string;
        maturityCount?: number;
        maturityCountString?: string;
        maturityDate?: Date;
        minCommissionApprovalRate?: number;
        newControlId?: number;
        notes?: string;
        officialBranchEMailList?: string;
        officialBranchId?: number;
        officialBranchName?: string;
        oldLetterStateId?: number;
        oldSystemLetterId?: number;
        oldTemplateId?: number;
        organizationId?: number;
        otherCondition?: string;
        parameterList?: BOA.Types.Kernel.LetterOfGuarantee.ParameterContract[];
        parentProductCode?: string;
        patternList?: BOA.Types.Kernel.LetterOfGuarantee.ParameterContract[];
        personId?: number;
        printedDate?: Date;
        printedFormBusinessKey?: number;
        printedText?: string;
        printPlace?: string;
        privateSectorControlId?: number;
        privateSectorControlIdForExtention?: number;
        processId?: number;
        productCode?: string;
        productName?: string;
        publicInterestExpression?: string;
        rebateAmount?: number;
        rebateInstanceId?: number;
        rECautionaryLimit?: number;
        regionWorkGroupId?: number;
        requestedCommissionAmount?: number;
        requestedCommissionAmountNotBSMV?: number;
        resourceIdList?: number[];
        restAmount?: number;
        restAmountInWords?: string;
        restitutionAmount?: number;
        restitutionControlAmount?: number;
        sectorBankId?: number;
        sectorLeafLevelId?: number;
        sectorLeafLevelName?: string;
        sectorRootLevelId?: number;
        sectorRootLevelName?: string;
        subFlowResult?: boolean;
        superiorBranchEMail?: string;
        superiorBranchId?: number;
        superiorBranchName?: string;
        tempDivitId?: string;
        templateDefinition?: string;
        templateId?: number;
        templateText?: string;
        toBranchId?: number;
        totalCommissionAmount?: number;
        totalDayCountOfYear?: number;
        totalLimit?: number;
        tRIdentity?: number;
        usedLimit?: number;
        workFlowExplanation?: string;
        workFlowInstanceId?: number;
        workGroupIdList?: number[];
    }
    interface LetterOfGuaranteeForCustomerTransferContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        amountInWords?: string;
        amountOfLetter?: number;
        amountOfLetterTRY?: number;
        amountOfLetterWithFec?: string;
        annualCommissionAmount?: number;
        attachedCustomerName?: string;
        attachedLetterAmount?: number;
        attachedLetterNumber?: number;
        attachedLetterSubject?: string;
        authorizedPerson1?: number;
        authorizedPerson2?: number;
        balanceAmount?: number;
        balanceLimit?: number;
        bankName?: string;
        bParentProductCode?: string;
        branchLimit?: number;
        branchName?: string;
        branchOffical1?: string;
        branchOffical2?: string;
        branchOfficalOfConfirmationLetter1?: string;
        branchOfficalOfConfirmationLetter2?: string;
        branchWorkGroupId?: number;
        businessKey?: number;
        calculatedCommissionAmount?: number;
        commissionAmount?: number;
        commissionBSMVRate?: number;
        commissionBusinessKey?: number;
        commissionFECId?: number;
        commissionFirstRate?: number;
        commissionInstanceId?: number;
        commissionKey?: string;
        commissionLastRate?: number;
        commissionPaymentBusinessKey?: number;
        commissionRate?: number;
        commissionSerializeId?: number;
        concernedCustomerId?: number;
        concernedCustomerName?: string;
        concernedName?: string;
        concernedType?: string;
        confirmPerson1?: number;
        confirmPerson2?: number;
        confirmPersonJob1?: string;
        confirmPersonJob2?: string;
        confirmPersonName1?: string;
        confirmPersonName2?: string;
        confirmTemplate?: string;
        confirmText?: string;
        controlId?: number;
        creditId?: number;
        customerId?: number;
        customerName?: string;
        customerPortfolioClass?: number;
        customerType?: string;
        date?: Date;
        dateOfInjunction?: Date;
        dateOfInjunctionCount?: number;
        dateOfInjunctionCountString?: string;
        dayCountOfYear?: number;
        dBKuveyt2KomisyonId?: number;
        debitId?: number;
        debitorAccountSuffix?: number;
        divitFlowId?: string;
        durationType?: string;
        durationYearCount?: number;
        extendedMaturityCount?: number;
        extendedMaturityCountString?: string;
        extendedMaturityDate?: Date;
        extendedMaturityInstanceId?: number;
        fecCode?: string;
        fecCoinName?: string;
        fecId?: number;
        fecName?: string;
        fundAllocationId?: number;
        fundAllocationOId?: string;
        fundPaymentInstanceId?: number;
        gMSignature1?: string;
        gMSignature2?: string;
        incentiveId?: number;
        increasingAmountType?: number;
        installmentDayCount?: number;
        installmentOptionDayCount?: number;
        installmentPeriod?: number;
        installmentStartDate?: Date;
        isActive?: number;
        isApproveNeeded?: boolean;
        isBranchApprove?: number;
        isBuildingAndEngineering?: string;
        isCloseAllCommands?: boolean;
        isCommercialBranch?: number;
        isCommissionApproveNeeded?: boolean;
        isDateOfInjunction?: boolean;
        isEditableByUser?: boolean;
        isEditedByUser?: boolean;
        isLetterAmountChanged?: boolean;
        isMaturityConfirm?: number;
        isOldLetter?: number;
        isPrinted?: boolean;
        isPrinterError?: boolean;
        isReverseAccounting?: number;
        isSaveSignaturesOnScreen?: number;
        isTemplateChanged?: boolean;
        isTemplateLastChanged?: boolean;
        jobOfBranchOffical1?: string;
        jobOfBranchOffical2?: string;
        jobOfBranchOfficalOfConfirmationLetter?: string;
        jobOfBranchOfficalOfConfirmationLetter2?: string;
        kuveytTurkCustomerNumber?: number;
        lastAmountOfLetter?: number;
        lastCommissionCalculateDate?: Date;
        lastCommissionEndDate?: Date;
        lastExtendedMaturityCount?: number;
        lastExtendedMaturityDate?: Date;
        lastExtendedMaturityDateControl?: Date;
        lastLetterNumber?: number;
        letterDate?: Date;
        letterId?: number;
        letterNumber?: number;
        letterOfGuaranteeType?: string;
        letterOfGuaranteeTypeId?: number;
        letterState?: string;
        letterStateId?: number;
        letterSubject?: string;
        letterTextSpecialExpression?: string;
        letterType?: number;
        limitType?: string;
        maturityCount?: number;
        maturityCountString?: string;
        maturityDate?: Date;
        minCommissionApprovalRate?: number;
        newControlId?: number;
        officialBranchEMailList?: string;
        officialBranchId?: number;
        officialBranchName?: string;
        oldLetterStateId?: number;
        oldSystemLetterId?: number;
        oldTemplateId?: number;
        otherCondition?: string;
        parameterList?: BOA.Types.Kernel.LetterOfGuarantee.ParameterContract[];
        parentProductCode?: string;
        patternList?: BOA.Types.Kernel.LetterOfGuarantee.ParameterContract[];
        personId?: number;
        printedDate?: Date;
        printedFormBusinessKey?: number;
        printedText?: string;
        printPlace?: string;
        privateSectorControlId?: number;
        productCode?: string;
        productName?: string;
        publicInterestExpression?: string;
        rebateAmount?: number;
        rebateInstanceId?: number;
        rECautionaryLimit?: number;
        regionWorkGroupId?: number;
        requestedCommissionAmount?: number;
        requestedCommissionAmountNotBSMV?: number;
        resourceIdList?: number[];
        restAmount?: number;
        restAmountInWords?: string;
        restitutionAmount?: number;
        restitutionControlAmount?: number;
        sectorLeafLevelId?: number;
        sectorLeafLevelName?: string;
        sectorRootLevelId?: number;
        sectorRootLevelName?: string;
        subFlowResult?: boolean;
        superiorBranchId?: number;
        superiorBranchName?: string;
        tempDivitId?: string;
        templateDefinition?: string;
        templateId?: number;
        templateText?: string;
        totalCommissionAmount?: number;
        totalDayCountOfYear?: number;
        totalLimit?: number;
        tRIdentity?: number;
        usedLimit?: number;
        workFlowExplanation?: string;
        workFlowInstanceId?: number;
        workGroupIdList?: number[];
    }
    interface LetterOfGuaranteeHistoryContract extends BOA.Common.Types.ContractBase {
        exceptionCompleteDate?: Date;
        exceptionDesciription?: string;
        exceptionTroubleshootDate?: Date;
        hostIP?: string;
        hostName?: string;
        letterId?: number;
        letterNumber?: number;
        letterOfGuaranteeHistoryId?: number;
        letterStateId?: number;
        letterStateName?: string;
        processId?: number;
        processName?: string;
        processTime?: string;
        systemDate?: Date;
        userName?: string;
        workGroupId?: number;
        workGroupName?: string;
    }
    interface LetterOfGuaranteeLimitContract extends BOA.Common.Types.ContractBase {
        branchLimit?: number;
        fecCode?: string;
        rECautionaryLimit?: number;
        totalLimit?: number;
        usedLimit?: number;
        usedLimitYP?: number;
    }
    interface LetterOfGuaranteeListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amountOfLetter?: number;
        amountOfLetterEnd?: number;
        amountOfLetterStart?: number;
        attachedLetterNumber?: number;
        authorizedPerson1?: string;
        authorizedPerson2?: string;
        branchId?: number;
        businessKey?: number;
        channel?: string;
        channelId?: number;
        commissionAmount?: number;
        commissionBusinessKey?: number;
        commissionInstanceId?: number;
        commissionPaymentBusinessKey?: number;
        commissionRate?: number;
        commissionSerializedId?: number;
        concernedCustomerId?: number;
        concernedCustomerName?: string;
        concernedCustomerType?: string;
        concernedName?: string;
        cusSectorName1?: string;
        cusSectorName2?: string;
        customerClassId?: number;
        customerClassName?: string;
        customerName?: string;
        customerType?: string;
        dateOfInjunction?: Date;
        dateOfInjunctionCount?: number;
        dateOfInjunctionEnd?: Date;
        durationType?: number;
        durationTypeName?: string;
        exceptionCompleteDate?: Date;
        exceptionDesciription?: string;
        exceptionTroubleshootDate?: Date;
        extendedMaturityDate?: Date;
        extendedMaturityForCustomer?: Date;
        extendedMaturityInstanceId?: number;
        fecCode?: string;
        fecId?: number;
        formOfLetter?: number;
        fundAllocationId?: string;
        fundPaymentInstanceId?: number;
        guaranteeType?: number;
        injunction?: string;
        installmentType?: string;
        isAllSelected?: number;
        isBuildingAndEngineering?: string;
        isDeletedShow?: boolean;
        isIncentive?: boolean;
        isMinimumLetterInfo?: boolean;
        letterDate?: Date;
        letterDateEnd?: Date;
        letterId?: number;
        letterNumber?: number;
        letterNumberEnd?: number;
        letterStateId?: number;
        letterStateName?: string;
        letterSubject?: string;
        letterTextSpecialExpression?: string;
        letterType?: string;
        limitType?: string;
        limitTypeName?: string;
        maturityDate?: Date;
        maturityDateEnd?: Date;
        notes?: string;
        officialBranchId?: number;
        officialBranchName?: string;
        officialRegionId?: number;
        payAmount?: number;
        printedDate?: Date;
        printedDateEnd?: Date;
        processDate?: Date;
        processDateEnd?: Date;
        productCode?: string;
        rebate?: string;
        rebateInstanceId?: number;
        recordDate?: Date;
        recordDateEnd?: Date;
        recordOrder?: string;
        recordOrderName?: string;
        refound?: number;
        refoundDate?: Date;
        refoundDateEnd?: Date;
        regionId?: number;
        regionName?: string;
        restAmount?: number;
        restitution?: string;
        returnAmount?: number;
        returnDate?: Date;
        returnDateEnd?: Date;
        selectedLetterStatusList?: any;
        superiorBranchEMail?: string;
        superiorBranchName?: string;
        superiorRegionId?: number;
        templateDefinition?: string;
        templateId?: number;
        tranDate?: Date;
        tranDateEnd?: Date;
        typeOfLetter?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface LetterOfGuaranteePracticalInfoContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        iD?: number;
        productCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LetterOfIntentContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        amountOfLetter?: number;
        amountOfLetterStr?: string;
        approvementLetterStateString?: string;
        approvementState?: number;
        authorizedPerson1?: number;
        authorizedPerson1Name?: string;
        authorizedPerson2?: number;
        authorizedPerson2Name?: string;
        authorizedPersonConfirmLetter1?: number;
        authorizedPersonConfirmLetter2?: number;
        authorizedPersonJob1?: string;
        authorizedPersonJob2?: string;
        balance?: number;
        bankName?: string;
        bankReferenceNumber?: string;
        branchName?: string;
        businessKey?: number;
        commissionAmount?: number;
        commissionSerializeId?: number;
        commissionSerializeIdTransfer?: number;
        confirmApprovementState?: number;
        confirmLetterBranch?: string;
        confirmLetterCustomerName?: string;
        confirmLetterDate?: Date;
        confirmLetterNo?: string;
        confirmLetterResult?: string;
        confirmLetterStateString?: string;
        confirmPersonName?: string;
        confirmPrintedDate?: Date;
        confirmResultCode?: number;
        confirmSubject?: string;
        confirmWorkFlowInstanceId?: number;
        customerClassName?: string;
        customerId?: number;
        customerIdStr?: string;
        customerName?: string;
        customerTitle?: string;
        divitId?: string;
        equivalentCommissionAmount?: number;
        estimatedMaturityPeriod?: number;
        estimatedMaturityPeriodStr?: string;
        fecId?: number;
        fecName?: string;
        formattedDate?: string;
        fromFEC?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isLetterTemplateEnabled?: boolean;
        isTemplateEdited?: number;
        jobName?: string;
        letterNumber?: string;
        letterOfIntentId?: number;
        letterOfIntentIdMax?: number;
        letterOfIntentIdMin?: number;
        letterPrintDate?: Date;
        letterState?: number;
        letterSubject?: string;
        nameOfBusiness?: string;
        officalBranchId?: number;
        organizationId?: number;
        paramCodeParameter?: string;
        paramDescriptionParameter?: string;
        parameterContractList?: BOA.Types.Kernel.LetterOfGuarantee.ParameterContract[];
        paramValue2Parameter?: string;
        paramValue3Parameter?: string;
        paramValueParameter?: string;
        parentProductCode?: string;
        patternDefinition?: string;
        patternText?: string;
        personId?: number;
        personName?: string;
        printedConfirmText?: string;
        printedDate?: Date;
        printedDateMax?: Date;
        printedDateMin?: Date;
        printedText?: string;
        productCode?: string;
        profitRate?: number;
        profitRateStr?: string;
        recordDate?: Date;
        selectedCustomer?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        systemDate?: Date;
        systemDateMax?: Date;
        systemDateMin?: Date;
        templateDefinition?: string;
        templateId?: number;
        templateIdConfirm?: number;
        textOfLetter?: string;
        textOfLetterConfirm?: string;
        textOfTemplate?: string;
        textOfTemplateConfirm?: string;
        tKDKCustomerTCKN?: string;
        toFEC?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface LetterOfReferenceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amountOfLetter?: number;
        approvementName?: string;
        approvementState?: number;
        attachedLetterId?: number;
        attachedLetterNumber?: number;
        attachedLetterState?: string;
        authorizedConfirmJob1?: string;
        authorizedConfirmJob1EN?: string;
        authorizedConfirmJob2?: string;
        authorizedConfirmJob2EN?: string;
        authorizedConfirmName?: string;
        authorizedConfirmName1?: string;
        authorizedConfirmName2?: string;
        authorizedPerson1?: string;
        authorizedPerson2?: string;
        authorizedPersonConfirm?: number;
        authorizedPersonConfirm1?: number;
        authorizedPersonConfirm2?: number;
        authorizedPersonId1?: number;
        authorizedPersonId2?: number;
        authorizedPersonJob1?: string;
        authorizedPersonJob1EN?: string;
        authorizedPersonJob2?: string;
        authorizedPersonJob2EN?: string;
        authorizedPersonJobConfirm?: string;
        authorizedPersonJobConfirm1?: string;
        authorizedPersonJobConfirm2?: string;
        authorizedPersonJobConfirmEN?: string;
        bankName?: string;
        bankReferenceNumber?: string;
        blockedCashLimit?: number;
        blockedCashLimitInWords?: string;
        blockedCashLimitInWordsEN?: string;
        blockedNonCashLimit?: number;
        blockedNonCashLimitInWords?: string;
        blockedNonCashLimitInWordsEN?: string;
        branchCommandStep?: number;
        branchId?: number;
        businessKey?: number;
        cashLimitInWords?: string;
        cashLoanLimit?: number;
        cashLoanRisk?: number;
        cashRiskInWords?: string;
        cashRiskInWordsEN?: string;
        cityName?: string;
        commissionAmount?: number;
        commissionSerializeId?: number;
        concernedCustomerName?: string;
        concernedId?: number;
        concernedName?: string;
        concernedNamePreview?: string;
        concernedTypeDescription?: string;
        concernedTypeId?: number;
        confirmApprvementState?: number;
        confirmBranchName?: string;
        confirmLetterText?: string;
        confirmTemplateId?: number;
        confirmTextAddition?: string;
        confirmWorkFlowInstanceId?: number;
        convertedAS?: number;
        convertedCCP?: number;
        currency?: number;
        customerActiveSize?: number;
        customerBranch?: string;
        customerCCPLimit?: number;
        customerId?: number;
        customerName?: string;
        customerType?: string;
        externalGuaranteeLimit?: number;
        fecCode?: string;
        fecId?: number;
        fecName?: string;
        formattedDate?: string;
        freeDeposit?: number;
        freeDepositInWords?: string;
        fundAllocationId?: string;
        gMSignature1?: string;
        gMSignature2?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isActiveLimitExceeded?: boolean;
        isActiveSizeExceeded?: boolean;
        isAllControlTrue?: boolean;
        isCashlimitSendApprove?: boolean;
        isCCPExceeded?: boolean;
        isConcernedTypePrivate?: boolean;
        isCorporateBranch?: number;
        isEGLExceeded?: boolean;
        isEnglishLetter?: boolean;
        isEnteredEndMethod?: boolean;
        isGMApprove?: boolean;
        isLimitThresholdExceeded?: boolean;
        isOldLetter?: boolean;
        isOpen?: boolean;
        isRegionSendApprove?: boolean;
        isSendApproveAgain?: boolean;
        isTemplateEdited?: boolean;
        jobName?: string;
        jobNameInEnglish?: string;
        letterId?: number;
        letterNumber?: string;
        letterNumberEnd?: number;
        letterOfRefeenceId?: number;
        letterOfRefeenceIdEnd?: number;
        letterState?: number;
        letterStateText?: string;
        letterSubject?: string;
        letterTypeDescription?: string;
        letterTypeId?: number;
        limitParameter?: number;
        multiplier?: number;
        nameOfBusiness?: string;
        nonCashLimitInWords?: string;
        nonCashLoanLimit?: number;
        nonCashLoanRisk?: number;
        nonCashRiskInWords?: string;
        nonCashRiskInWordsEn?: string;
        officalBranchId?: number;
        officalBranchName?: string;
        organizationId?: number;
        paramCodeParameter?: string;
        paramDescriptionParameter?: string;
        parameterContractList?: BOA.Types.Kernel.LetterOfGuarantee.ParameterContract[];
        paramValue2Parameter?: string;
        paramValue3Parameter?: string;
        paramValueParameter?: string;
        parentProductCode?: string;
        patternDefinition?: string;
        patternText?: string;
        personId?: number;
        personName?: string;
        printedConfirmText?: string;
        printedDate?: Date;
        printedDateEnd?: Date;
        printedText?: string;
        processDate?: Date;
        processDateEnd?: Date;
        productCode?: string;
        recordDate?: Date;
        recordDateEnd?: Date;
        regionWorkGroupId?: number;
        subFlowResult?: boolean;
        superiorBranchId?: number;
        superiorBranchName?: string;
        systemDate?: Date;
        tempDivitId?: string;
        templateDefinition?: string;
        templateId?: number;
        textOfLetter?: string;
        textOfTemplate?: string;
        totalLimit?: number;
        totalLimitInWordsEN?: string;
        totalUnusedLimits?: number;
        unUsedCashLoanLimit?: number;
        unUsedCashLoanLimitInWords?: string;
        unUsedNonCashLoanLimit?: number;
        unUsedNonCashLoanLimitInWords?: string;
        updatedCashLoanLimit?: number;
        updatedNonCashLoanLimit?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usdTotalBlockedCashLimit?: number;
        uSDTotalBlockedLimit?: number;
        usdTotalBlockedNonCashLimit?: number;
        useId?: number;
        userName?: string;
        workFlowInstanceId?: number;
        workGroupId?: number;
    }
    interface OrganizationContract extends BOA.Common.Types.ContractBase {
        id?: number;
        isSelectedEntry?: boolean;
        name?: string;
    }
    interface OverDueLetterOfGuaranteeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amountOfLetter?: number;
        branchId?: number;
        concernedCustomerName?: string;
        concernedName?: string;
        fecId?: number;
        letterId?: number;
        letterNumber?: number;
        letterSubject?: string;
        maturityDate?: Date;
        name?: string;
        superiorBranchId?: number;
    }
    interface ParameterContract extends BOA.Common.Types.ContractBase {
        error?: BOA.Common.Types.Result;
        parameter?: string;
        parameterDateValue?: Date;
        parameterDateValue2?: Date;
        parameterDecimalValue?: number;
        parameterDecimalValue2?: number;
        parameterDecimalValue3?: number;
        parameterDecimalValue4?: number;
        parameterDescription?: string;
        parameterId?: number;
        parameterIntValue?: number;
        parameterValue?: string;
        parameterValue2?: string;
        parameterValue3?: string;
        parameterValue4?: string;
        parameterValue5?: string;
        parameterVisibilityValue?: any;
    }
    interface PatternContract extends BOA.Common.Types.ContractBase {
        conditionDesc?: string;
        conditionValue2?: string;
        conditionValueDesc?: string;
        controlType?: string;
        controlTypeDesc?: string;
        controlValue?: string;
        hostIP?: string;
        hostName?: string;
        isactive?: number;
        letterType?: number;
        logicalOperator?: string;
        paramCode?: string;
        paramCodeCondition?: string;
        paramCodeConType?: string;
        paramCodeConValue?: string;
        paramCodeParameter?: string;
        paramDescription?: string;
        paramDescriptionCondition?: string;
        paramDescriptionConType?: string;
        paramDescriptionConValue?: string;
        paramDescriptionParameter?: string;
        parameterListValue?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue2Parameter?: string;
        paramValue3?: string;
        paramValue3Parameter?: string;
        paramValueCondition?: string;
        paramValueConType?: string;
        paramValueConValue?: string;
        paramValueParameter?: string;
        patternDefinition?: string;
        patternGroupDesc?: string;
        patternId?: number;
        patternText?: string;
        patternTpye?: number;
        selectedCondition?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PatternListContract extends BOA.Common.Types.ContractBase {
        isactive?: string;
        paramDescription?: string;
        paramValue?: string;
        patternDefinition?: string;
        patternId?: number;
    }
    interface PrintedFormContract extends BOA.Common.Types.ContractBase {
        approvalDate?: Date;
        approvalDateEnd?: Date;
        autoDeliveryFormCount?: number;
        branchApprovalDate?: Date;
        branchApprovalDateEnd?: Date;
        branchId?: number;
        branchName?: string;
        collateralId?: number;
        description?: string;
        isActive?: number;
        isActiveState?: string;
        isAllocateToOPM?: number;
        isAllocateToOPMString?: string;
        minimumFormCount?: number;
        printedDate?: Date;
        printedDateEnd?: Date;
        printedFormHistoryId?: number;
        processId?: number;
        quantity?: number;
        referenceNumber?: number;
        referenceNumberEnd?: number;
        referenceNumberStart?: number;
        referenceState?: number;
        requestDate?: Date;
        requestDateEnd?: Date;
        startedUserEmail?: string;
        systemUser?: string;
        userName?: string;
        workGroupId?: number;
    }
    interface PrintedFormDemandContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        endNumberConfirm?: number;
        isActive?: number;
        printedFormId?: number;
        printedFormRequestId?: number;
        quantity?: number;
        referenceEndNumber?: number;
        referenceStartNumber?: number;
        requestState?: string;
        requestStateId?: number;
        selectedId?: number;
        startNumberConfirm?: number;
        systemUser?: string;
        updateSystemUser?: string;
    }
    interface ProductFeaturesContract extends BOA.Common.Types.ContractBase {
        allotmentGroupCode?: string;
        allotmentMainGroupCode?: string;
        allotmentProductCode?: string;
        bParentProductCode?: string;
        commissionKey?: string;
        durationType?: number;
        fecList?: BOA.Types.Kernel.General.FECContract[];
        isActive?: number;
        isEBid?: string;
        letterType?: number;
        limitType?: number;
        parameterList?: BOA.Types.Kernel.LetterOfGuarantee.ParameterContract[];
        parentProductCode?: string;
        personType?: number;
        productCode?: string;
        productGroup?: string;
        productName?: string;
        productType?: string;
        sectorType?: number;
    }
    interface ProductNode extends BOA.Common.Types.GenericNode<BOA.Types.Kernel.LetterOfGuarantee.ProductNode> {
        iconPath?: string;
        isLeaf?: boolean;
        product?: BOA.Types.Kernel.LetterOfGuarantee.ProductFeaturesContract;
    }
    interface TemplateContract extends BOA.Common.Types.ContractBase {
        allocationOfFundName?: string;
        amountInWords?: string;
        amountOfLetter?: number;
        amountOfLetterStr?: string;
        annualCommissionAmount?: number;
        authorizedPerson1?: number;
        authorizedPerson1Name?: string;
        authorizedPerson2?: number;
        authorizedPerson2Name?: string;
        authorizedPersonJob1?: string;
        authorizedPersonJob2?: string;
        bankName?: string;
        bParentProductCode?: string;
        branchId?: number;
        branchLimit?: number;
        branchName?: string;
        branchOffical1?: string;
        branchOffical2?: string;
        colleteral?: string;
        commissionRate?: string;
        concernedCustomerName?: string;
        concernedId?: number;
        concernedName?: string;
        concernedNameHeader?: string;
        confirmLetterBranch?: string;
        confirmLetterCustomerName?: string;
        confirmLetterDate?: Date;
        confirmLetterNo?: string;
        confirmLetterResult?: string;
        confirmPersonJob1?: string;
        confirmPersonJob2?: string;
        confirmPersonName?: string;
        confirmPersonName1?: string;
        confirmPersonName2?: string;
        confirmSubject?: string;
        countryName?: string;
        customerIdStr?: string;
        customerName?: string;
        customerTitle?: string;
        date?: Date;
        dateOfInjunction?: Date;
        durationType?: string;
        estimatedMaturityPeriodStr?: string;
        explanation?: string;
        extendedMaturityDate?: Date;
        fecCode?: string;
        formattedDate?: string;
        formOfLetter?: string;
        fundAllocationLetterType?: number;
        hostIP?: string;
        hostName?: string;
        incentiveType?: string;
        instanceId?: number;
        isActive?: number;
        isActiveInt?: number;
        isWorkFlowEdit?: boolean;
        jobOfBranchOffical1?: string;
        jobOfBranchOffical2?: string;
        letterDate?: Date;
        letterId?: number;
        letterNumber?: string;
        letterSubject?: string;
        letterTextSpecialExpression?: string;
        letterType?: number;
        limitType?: string;
        maturityDate?: Date;
        officialBranchName?: string;
        operantBranchName?: string;
        paramCodeParameter?: string;
        paramDescriptionParameter?: string;
        paramValue2Parameter?: string;
        paramValue3Parameter?: string;
        paramValueParameter?: string;
        parentProductCode?: string;
        patternDefinition?: string;
        patternText?: string;
        printedDate?: Date;
        printPlace?: string;
        productCode?: string;
        productName?: string;
        profitRateStr?: string;
        projectType?: string;
        publicInterestExpression?: string;
        rECautionaryLimit?: number;
        recordDate?: Date;
        refound?: string;
        restAmount?: number;
        restAmountInWords?: string;
        superiorBranchName?: string;
        systemDate?: Date;
        tempDivitId?: string;
        templateDefinition?: string;
        templateForm?: string;
        templateId?: number;
        templateText?: string;
        templateType?: string;
        tenderId?: string;
        tKDKCustomerTCKN?: string;
        totalCommissionAmount?: number;
        totalLimit?: number;
        typeOfLetter?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usedLimit?: number;
        userName?: string;
    }
    interface TemplateListContract extends BOA.Common.Types.ContractBase {
        instanceId?: number;
        isactive?: number;
        isActiveDescription?: string;
        parentProductCode?: string;
        productCode?: string;
        productName?: string;
        templateDefinition?: string;
        templateId?: number;
        templateText?: string;
    }
    interface WorkFlowContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        queryToken?: string;
        resourceId?: number;
    }
}
declare namespace BOA.Types.Kernel.LetterOfGuarantee.bnkTMDurumSorgu {
    interface bnkTmOutputBeanContract extends BOA.Common.Types.ContractBase {
        tmBakiye?: string;
        tmBakiyeDoviz?: string;
        tmBankaEftKod?: string;
        tmBankaSorguZaman?: string;
        tmDuzenlemeTarih?: string;
        tmLehdarAdSoyad?: string;
        tmLehdarUnvan?: string;
        tmMuhatapAdSoyad?: string;
        tmMuhatapUnvan?: string;
        tmSiraNo?: string;
        tmSubeKod?: string;
        tmTutar?: string;
        tmTutarDoviz?: string;
        tmVadeBilgi?: string;
        tmVadeTarih?: string;
    }
}
declare namespace BOA.Types.Kernel.LetterOfGuarantee.CommonType {
    export const enum ApprovementState {
        Saved = 1,
        SentApprove = 2,
        Approved = 3,
        Rejected = 4,
        Printed = 5
    }
    export const enum ConcernedType {
        Public = 1,
        Private = 2,
        Indefinite = 3
    }
    export const enum LetterType {
        Domestic = 1,
        Foreign = 2,
        Indefinite = 3
    }
}
declare namespace BOA.Types.Kernel.LetterOfGuarantee.LetterFeatures {
    interface ConfirmContract extends BOA.Common.Types.ContractBase {
        confirmPerson1?: number;
        confirmPerson2?: number;
        confirmPersonJob1?: string;
        confirmPersonJob2?: string;
        confirmPersonName1?: string;
        confirmPersonName2?: string;
        confirmTemplate?: string;
        confirmText?: string;
        isBranchApprove?: number;
        isChangeable?: boolean;
        isMaturityConfirm?: number;
        isOpen?: boolean;
        isPrintable?: boolean;
    }
    interface InstallmentContract extends BOA.Common.Types.ContractBase {
        installmentAmount?: number;
        installmentBSMVAmount?: number;
        installmentBSMVFEC?: number;
        installmentBSMVFECCode?: string;
        installmentCountId?: number;
        installmentDate?: Date;
        installmentDayCount?: number;
        installmentFEC?: number;
        installmentFECCode?: string;
        installmentId?: number;
        installmentPaidAmount?: number;
        installmentPaidBSMVAmount?: number;
        installmentTotalAmount?: number;
        installmentTotalFEC?: number;
        installmentTotalFECCode?: string;
        installmentTotalTLAmount?: number;
        installmentTotalTLFEC?: number;
        installmentTotalTLFECCode?: string;
        letterId?: number;
    }
    interface RebateContract extends BOA.Common.Types.ContractBase {
        actionReasonCode?: string;
        actionReasonCodeDescription?: string;
        amount?: number;
        amountOfClaim?: number;
        amountOfClaimFec?: string;
        branchId?: number;
        branchName?: string;
        code?: string;
        customerSegment?: number;
        customerToAccountNumber?: number;
        customerToAccountSuffix?: number;
        customerToBranchId?: number;
        customerToLedgerId?: number;
        date?: Date;
        description?: string;
        id?: number;
        isActive?: number;
        rate?: number;
        recordDate?: Date;
        salesSlipNumber?: number;
        userId?: number;
        userName?: string;
    }
    interface UserScreenInfoContract extends BOA.Common.Types.ContractBase {
        attachedLetterInfo?: boolean;
        disposalInfo?: boolean;
        letterInfo?: boolean;
        limitInfo?: boolean;
        otherInfo?: boolean;
        surrenderInfo?: boolean;
        termsAllocationFund?: boolean;
    }
}
declare namespace BOA.Types.Kernel.LetterOfGuarantee.LetterOfIntentContract {
    interface CommonStateOfIntentLetter {
    }
}
declare namespace BOA.Types.Kernel.Loans {
    interface LoansInstalmentDetailContract {
        accountNumber?: number;
        bITTDiscountAmount?: number;
        businessKey?: number;
        collectedBITTAmount?: number;
        collectedPrincipalAmount?: number;
        collectedProfitAmount?: number;
        collectedRUSFAmount?: number;
        collectedVATAmount?: number;
        fec?: string;
        fecCode?: number;
        instalmentAmount?: number;
        loanAmount?: number;
        loanType?: string;
        loanTypeValue?: number;
        maturityDate?: Date;
        orderNumber?: number;
        paymentAmount?: number;
        paymentAmountIndexedToFEC?: number;
        paymentDate?: Date;
        paymentStatus?: string;
        paymentStatusCode?: string;
        paymentType?: number;
        principalDiscountAmount?: number;
        productName?: string;
        profitDiscountAmount?: number;
        projectFinishDate?: Date;
        projectNumber?: number;
        projectStartDate?: Date;
        remainDept?: number;
        remainInstallmentCount?: number;
        remainMainDept?: number;
        rUSFDiscountAmount?: number;
        totalLoanAmount?: number;
        vATDiscountAmount?: number;
    }
}
declare namespace BOA.Types.Kernel.Loans.Allotment {
    export const enum CalculationType {
        None = 0,
        Vertical = 1,
        Horizontal = 2,
        All = 3,
        Value = 4,
        Value_Vertical = 5,
        Value_Horizontal = 6
    }
    export const enum VariableTypes {
        All = 0,
        FinancialItem = 1,
        TableItem = 2,
        FactorItem = 4,
        VariableItem = 8,
        ConditionTemplate = 16
    }
    interface AllotmentBankInquiryContract extends BOA.Common.Types.ContractBase {
        allotmentMainId?: number;
        bankInquiryId?: number;
    }
    interface AllotmentCollateralLimitContract extends BOA.Common.Types.ContractBase {
        allotmentCollateralLimitId?: number;
        allotmentId?: number;
        approvedCashLimit?: number;
        approvedNonCashLimit?: number;
        approvedTotalLimit?: number;
        collateralDefinitionId?: number;
        collateralName?: string;
        customerName?: string;
        demandCashLimit?: number;
        demandNonCashLimit?: number;
        demandTotalLimit?: number;
        isCollateralDefinitionSelected?: boolean;
        isDeleted?: boolean;
        previousAllotmentId?: number;
        previousCashLimit?: number;
        previousNonCashLimit?: number;
        previousTotalLimit?: number;
    }
    interface AllotmentCommentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentCommentId?: number;
        allotmentId?: number;
        branchComment?: string;
        commentType?: number;
        customerName?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        systemDate?: Date;
        textValue?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        warningType?: number;
    }
    interface AllotmentConstants {
        customerFinancialTable?: BOA.Types.Kernel.Loans.Allotment.FinancialTableDefinitionContract;
        financialTableAll?: BOA.Types.Kernel.Loans.Allotment.FinancialTableDefinitionContract;
    }
    interface AllotmentConstraintContract extends BOA.Common.Types.ContractBase {
        allotmentConstraintId?: number;
        allotmentId?: number;
        amount?: number;
        collateralDefinitionId?: number;
        constraintDetail?: string;
        constraintDetailList?: BOA.Types.Kernel.Loans.Allotment.AllotmentConstraintDetailContract[];
        name?: string;
        type?: number;
        typeName?: string;
    }
    interface AllotmentConstraintDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentConstraintDetailId?: number;
        allotmentConstraintId?: number;
        customerName?: string;
        productId?: number;
        productName?: string;
    }
    interface AllotmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        allotmentMainId?: number;
        allotmentQuestionResultList?: BOA.Types.Kernel.Loans.Allotment.AllotmentQuestionResultContract[];
        allotmentStatusName?: string;
        applicationProductInfoList?: BOA.Types.Kernel.Loans.Allotment.ProductContract[];
        applicationResult?: string;
        approvalDate?: Date;
        authorityType?: number;
        authorityTypeName?: string;
        beneficiaryType?: number;
        bMRMaturityDate?: Date;
        branchId?: number;
        branchName?: string;
        circularId?: number;
        collateralLimitList?: BOA.Types.Kernel.Loans.Allotment.AllotmentCollateralLimitContract[];
        commentList?: BOA.Types.Kernel.Loans.Allotment.AllotmentCommentContract[];
        committeeDecisionNumber?: string;
        committeeId?: number;
        committeeName?: string;
        committeeProjection?: number;
        constraintList?: BOA.Types.Kernel.Loans.Allotment.AllotmentConstraintContract[];
        currentBranchId?: number;
        customerDetailName?: string;
        customerEstablishmentDate?: Date;
        customerName?: string;
        customerPersonType?: number;
        customerSegment?: string;
        customerSubType?: string;
        customerSubTypeName?: string;
        customerType?: string;
        customerTypeName?: string;
        effectiveFirm?: number;
        fec?: number;
        firmControl?: number;
        firmType?: number;
        grade?: string;
        gradeDescription?: string;
        groupNumber?: number;
        guarantorCount?: number;
        guarantorList?: BOA.Types.Kernel.Loans.Allotment.AllotmentGuarantorContract[];
        hasICL?: number;
        hostIP?: string;
        hostName?: string;
        htmlInformation?: string;
        isAnalysisPilotBranch?: boolean;
        isChequeReport?: number;
        isCutOff?: number;
        isDeposit?: number;
        isEditable?: boolean;
        isExceptionalProduct?: number;
        isPotential?: number;
        isRejectButtonReadOnly?: boolean;
        isRejected?: boolean;
        issuedDate?: Date;
        isTreasure?: number;
        kKBScore?: number;
        maturityDate?: Date;
        model?: number;
        modelType?: number;
        modelTypeName?: string;
        number?: string;
        previousAllotmentId?: number;
        productLimitList?: BOA.Types.Kernel.Loans.Allotment.AllotmentProductLimitContract[];
        productRiskList?: BOA.Types.Kernel.Loans.Allotment.AllotmentMainRiskContract[];
        promissoryNoteUsage?: number;
        reason?: number;
        reasonApproveEdit?: boolean;
        reasonEditable?: boolean;
        reasonName?: string;
        regionId?: number;
        rejectReason?: string;
        rejectReasonList?: BOA.Types.Kernel.Loans.Allotment.AllotmentRejectReasonContract[];
        rejectStatus?: number;
        reportNumber?: string;
        reportType?: number;
        reportValidityDate?: Date;
        ruleVersionId?: number;
        score?: number;
        secondApproveDate?: Date;
        secondApproveUserName?: string;
        segmentName?: string;
        share?: number;
        status?: number;
        systemDate?: Date;
        topLimit?: BOA.Types.Kernel.Loans.Allotment.AllotmentTopLimitContract;
        tranDate?: Date;
        type?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        workGroupId?: number;
    }
    interface AllotmentControlResultContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        controlName?: string;
        customerName?: string;
        description?: string;
        formCode?: string;
        formName?: string;
        severity?: BOA.Common.Types.Severity;
        severityDescription?: string;
        warningType?: number;
    }
    interface AllotmentCopyContract extends BOA.Common.Types.ContractBase {
        fromAllotmentId?: number;
        toAllotmentIdList?: number[];
    }
    interface AllotmentDivitApproveContract extends BOA.Common.Types.ContractBase {
        allotmentMainId?: number;
        documentId?: number;
        documentName?: string;
        hostName?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface AllotmentExtension {
    }
    interface AllotmentFinancialTableItemChartContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentFinancialTableItemChartId?: number;
        allotmentId?: number;
        code?: string;
        financialTableItemDefinitionId?: number;
        financialTableItemDefinitionName?: string;
        firmType?: number;
        groupNumber?: number;
        itemValue?: number;
        periodId?: number;
        periodYear?: number;
        periodYearName?: string;
    }
    interface AllotmentGuarantorContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentGuarantorId?: number;
        allotmentId?: number;
        approvedAmount?: number;
        customerName?: string;
        demandAmount?: number;
        description?: string;
        personId?: number;
        previousAllotmentId?: number;
        previousAmount?: number;
        sharePercent?: number;
    }
    interface AllotmentHelper {
    }
    interface AllotmentHistoryContract extends BOA.Common.Types.ContractBase {
        allotmentHistoryId?: number;
        allotmentId?: number;
        hostIP?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranType?: number;
        tranTypeName?: string;
        userFullName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface AllotmentListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentCommiteeList?: BOA.Types.Kernel.Loans.Allotment.AllotmentListContract[];
        allotmentDate?: Date;
        allotmentId?: number;
        allotmentMainId?: number;
        allotmentStatusName?: string;
        allotmentSystemDate?: Date;
        allotmentUserName?: string;
        approvedCashBlockedLimit?: number;
        approvedCashLimit?: number;
        approvedNonCashBlockedLimit?: number;
        approvedNonCashLimit?: number;
        approvedTotalBlockedLimit?: number;
        approvedTotalLimit?: number;
        authorityType?: number;
        authorityTypeIdList?: number[];
        authorityTypeName?: string;
        branchClass?: string;
        branchEmail?: string;
        branchGmType?: string;
        branchId?: number;
        branchIdList?: number[];
        branchName?: string;
        channelId?: number;
        channelName?: string;
        circularId?: number;
        circularNumber?: string;
        committeeDecisionNumber?: string;
        committeeId?: number;
        committeeIdList?: number[];
        committeeLink?: string;
        committeeName?: string;
        committeeSendDate?: Date;
        committeeSequenceNumber?: number;
        committeeStatus?: number;
        committeeStatusName?: string;
        customerGroupName?: string;
        customerName?: string;
        customerSector?: number;
        customerSectorIdList?: number[];
        customerSegment?: string;
        customerSubType?: string;
        customerSubTypeIdList?: string[];
        customerSubTypeName?: string;
        customerType?: string;
        customerTypeIdList?: string[];
        customerTypeName?: string;
        effectiveAccountNumber?: number;
        effectiveCustomerName?: string;
        email?: string;
        firmType?: number;
        firmTypeName?: string;
        firstApproveDate?: Date;
        firstApproveUserName?: string;
        grade?: string;
        groupNumber?: number;
        htmlInformation?: string;
        isExceptionalProduct?: number;
        lastTransactionName?: string;
        managementId?: number;
        managementName?: string;
        maturityDate?: Date;
        maturityDateBegin?: Date;
        maturityDateEnd?: Date;
        number?: string;
        previousAllotmentDate?: Date;
        previousCommitteeDecisionNumber?: string;
        previousCommitteeName?: string;
        previousMaturityDate?: Date;
        productLimitAmount?: number;
        productName?: string;
        productRiskAmount?: number;
        productRowList?: number[];
        reason?: number;
        reasonIdList?: number[];
        reasonName?: string;
        reginalOfficeId?: number;
        reginalOfficeName?: string;
        regionId?: number;
        regionIdList?: number[];
        regionName?: string;
        reportNumber?: string;
        ruleInstanceId?: number;
        ruleVersionId?: number;
        score?: number;
        secondApproveDate?: Date;
        secondApproveUserName?: string;
        status?: number;
        statusIdList?: number[];
        thirdApproveDate?: Date;
        thirdApproveUserName?: string;
        totalCashRisk?: number;
        totalNonCashRisk?: number;
        totalRisk?: number;
        tranDateBegin?: Date;
        tranDateEnd?: Date;
        unitId?: number;
        unitName?: string;
        wFInstanceId?: number;
    }
    interface AllotmentMainCommitteeSignatoryContract extends BOA.Common.Types.ContractBase {
        allotmentMainCommitteeSignatoryId?: number;
        allotmentMainId?: number;
        sequenceNumber?: number;
        signatoryUserFullName?: string;
        signatoryUserName?: string;
        signatoryUserRoleName?: string;
        status?: number;
        userId?: number;
    }
    interface AllotmentMainContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentCopyInfo?: BOA.Types.Kernel.Loans.Allotment.AllotmentCopyContract;
        allotmentList?: BOA.Types.Kernel.Loans.Allotment.AllotmentContract[];
        allotmentMainCommitteeSignatoryContractList?: BOA.Types.Kernel.Loans.Allotment.AllotmentMainCommitteeSignatoryContract[];
        allotmentMainFormOpenType?: BOA.Types.Kernel.Loans.Allotment.Enums.AllotmentFormOpenType;
        allotmentMainId?: number;
        allotmentScale?: number;
        allotmentScaleName?: string;
        allotmentStatusName?: string;
        analyzerName?: string;
        authorityType?: number;
        authorityTypeName?: string;
        beneficiaryType?: number;
        beneficiaryTypeName?: string;
        branchClass?: string;
        branchId?: number;
        branchName?: string;
        branchSendDate?: Date;
        branchSendUserName?: string;
        channelId?: number;
        chequeResult?: number;
        circular?: BOA.Types.Kernel.Loans.Allotment.CircularContract;
        circularId?: number;
        circularName?: string;
        committee?: BOA.Types.Kernel.Loans.Allotment.CommitteeContract;
        committeeApprovalDate?: Date;
        committeeDecisionNumber?: string;
        committeeId?: number;
        committeeName?: string;
        committeeSendDate?: Date;
        committeeStatus?: number;
        customerGroupName?: string;
        customerName?: string;
        customerType?: string;
        customerTypeName?: string;
        effectiveAccountNumber?: number;
        effectiveFirmBranchId?: number;
        effectiveFirmName?: string;
        emailCustomerTable?: string;
        exceptional?: number;
        firmType?: number;
        firmTypeName?: string;
        firstApproveDate?: Date;
        firstApproveUserName?: string;
        generalFullName?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        isAnalysisPilotBranch?: boolean;
        isExceptional?: boolean;
        isKKDSPilot?: boolean;
        isSelectByAllotment?: boolean;
        isWorkFlowRejected?: boolean;
        model?: number;
        ownerType?: number;
        point?: number;
        portfolioOwner?: string;
        portfolioOwnerEmail?: string;
        portfolioOwnerName?: string;
        regionId?: number;
        regionManagerEmail?: string;
        regionName?: string;
        ruleInstanceId?: number;
        secondApproveDate?: Date;
        secondApproveUserName?: string;
        selectedAllotment?: BOA.Types.Kernel.Loans.Allotment.AllotmentContract;
        selectedCustomer?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        signatoryResult?: number;
        smeResult?: number;
        status?: number;
        systemDate?: Date;
        thirdApproveDate?: Date;
        thirdApproveUserName?: string;
        tranDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userClass?: string;
        userFullName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface AllotmentMainRiskContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        allotmentMainRiskId?: number;
        amount?: number;
        customerName?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        mainGroupCode?: string;
        mainGroupName?: string;
        productId?: number;
        productName?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface AllotmentPresentationContract extends BOA.Common.Types.ContractBase {
        allotmentMainId?: number;
        allotmentPresentationId?: number;
        firmType?: number;
        hostIP?: string;
        hostName?: string;
        pageNumber?: number;
        systemDate?: Date;
        textValue?: string;
        textValueInEnglish?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AllotmentProductCollateralLimitContract extends BOA.Common.Types.ContractBase {
        allotmentProductCollateralLimitId?: number;
        allotmentProductLimitId?: number;
        approvedLowerAmount?: number;
        approvedMandatoryType?: number;
        approvedMarginPercent?: number;
        approvedUpperAmount?: number;
        collateralDefinitionId?: number;
        collateralName?: string;
        demandLowerAmount?: number;
        demandMandatoryType?: number;
        demandMarginPercent?: number;
        demandUpperAmount?: number;
        isCircularMandatory?: boolean;
        isCollateralDefinitionSelected?: boolean;
        mortgageList?: BOA.Types.Kernel.Loans.Allotment.AllotmentProductCollateralLimitMortgageContract[];
        previousLowerAmount?: number;
        previousMandatoryType?: number;
        previousMarginPercent?: number;
        previousUpperAmount?: number;
        productId?: number;
        productName?: string;
    }
    interface AllotmentProductCollateralLimitMortgageContract extends BOA.Common.Types.ContractBase {
        allotmentProductCollateralLimitId?: number;
        allotmentProductCollateralLimitMortgageId?: number;
        block?: string;
        city?: string;
        committeeRate?: number;
        county?: string;
        district?: string;
        expertiseAmount?: number;
        expertiseDate?: Date;
        expertiseReportNumber?: string;
        firmName?: string;
        isReleasable?: number;
        parcel?: string;
        plot?: string;
        section?: string;
    }
    interface AllotmentProductLimitContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        allotmentProductCollateralLimitList?: BOA.Types.Kernel.Loans.Allotment.AllotmentProductCollateralLimitContract[];
        allotmentProductLimitId?: number;
        approvedAdvancePercent?: number;
        approvedCollateralRequestDate?: Date;
        approvedCurrentRisk?: number;
        approvedFECUsage?: number;
        approvedLimit?: number;
        approvedMaximumAverageMaturity?: number;
        approvedMaximumMaturity?: number;
        approvedMinimumAverageMaturity?: number;
        approvedMinimumMaturity?: number;
        approvedProductValidityDate?: Date;
        approvedProjectBased?: number;
        customerName?: string;
        demandAdvancePercent?: number;
        demandCollateralRequestDate?: Date;
        demandCurrentRisk?: number;
        demandFECUsage?: number;
        demandLimit?: number;
        demandMaximumAverageMaturity?: number;
        demandMaximumMaturity?: number;
        demandMinimumAverageMaturity?: number;
        demandMinimumMaturity?: number;
        demandProductValidityDate?: Date;
        demandProjectBased?: number;
        mainGroupCode?: string;
        name?: string;
        parentProductId?: number;
        previousAdvancePercent?: number;
        previousAllotmentId?: number;
        previousAllotmentProductCollateralLimitList?: BOA.Types.Kernel.Loans.Allotment.AllotmentProductCollateralLimitContract[];
        previousCollateralRequestDate?: Date;
        previousFECUsage?: number;
        previousLimit?: number;
        previousMaximumAverageMaturity?: number;
        previousMaximumMaturity?: number;
        previousMinimumAverageMaturity?: number;
        previousMinimumMaturity?: number;
        previousProductValidityDate?: Date;
        previousProjectBased?: number;
        productCode?: string;
        productId?: number;
        productName?: string;
        productType?: string;
        relationshipTypeid?: number;
        relationshipTypeName?: string;
        taxNumber?: string;
    }
    interface AllotmentQuestionResultContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        allotmentQuestionResultId?: number;
        question?: string;
        questionDefinitionId?: number;
        resultDescription?: string;
        resultValue?: number;
    }
    interface AllotmentRejectReasonContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        allotmentRejectReasonId?: number;
        description?: string;
        hostIP?: string;
        rejectReason?: number;
        rejectReasonDescription?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface AllotmentReturnContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        allotmentReturnId?: number;
        customerName?: string;
        description?: string;
        firmType?: number;
        groupName?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        reasonTypeName?: string;
        returnReasonList?: BOA.Types.Kernel.Loans.Allotment.AllotmentReturnReasonContract[];
        screenType?: number;
        screenTypeName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface AllotmentReturnReasonContract extends BOA.Common.Types.ContractBase {
        allotmentReturnId?: number;
        allotmentReturnReasonId?: number;
        reasonType?: number;
        reasonTypeName?: string;
    }
    interface AllotmentStatusReviseAuthorityContract extends BOA.Common.Types.ContractBase {
        allotmentStatusReviseAuthorityId?: number;
        approvePool?: string;
        authorityType?: number;
        customerType?: string;
        fromStatus?: number;
        hostIP?: string;
        hostName?: string;
        starterType?: number;
        systemDate?: Date;
        toStatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AllotmentStatusReviseCommitteeSignatoryContract extends BOA.Common.Types.ContractBase {
        allotmentStatusReviseCommitteeSignatoryId?: number;
        allotmentStatusReviseId?: number;
        sequenceNumber?: number;
        signatoryUserFullName?: string;
        signatoryUserName?: string;
    }
    interface AllotmentStatusReviseContract extends BOA.Common.Types.ContractBase {
        allotmentDataContract?: BOA.Types.Kernel.Loans.Allotment.AllotmentContract;
        allotmentId?: number;
        allotmentMainId?: number;
        allotmentReviseApproveType?: BOA.Types.Kernel.Loans.Allotment.Enums.ReviseApproveType;
        allotmentStatusReviseId?: number;
        canSendApprove?: boolean;
        committeeDecisionNumber?: string;
        committeeId?: number;
        committeeList?: BOA.Types.Kernel.Loans.Allotment.CommitteeContract[];
        committeeName?: string;
        currentMaturityDate?: Date;
        currentStatus?: number;
        currentStatusName?: string;
        customerGroupCodeName?: string;
        description?: string;
        emailReviseTable?: string;
        hostIP?: string;
        hostName?: string;
        newMaturityDate?: Date;
        newStatus?: number;
        newStatusDescription?: string;
        portfolioOwner?: string;
        portfolioOwnerEmail?: string;
        regionManagerEmail?: string;
        reviseAuthorityDataContract?: BOA.Types.Kernel.Loans.Allotment.AllotmentStatusReviseAuthorityContract;
        reviseCommitteeSignatoryList?: BOA.Types.Kernel.Loans.Allotment.AllotmentStatusReviseCommitteeSignatoryContract[];
        reviseReasonList?: BOA.Types.Kernel.Loans.Allotment.AllotmentStatusReviseReasonContract[];
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface AllotmentStatusReviseReasonContract extends BOA.Common.Types.ContractBase {
        allotmentStatusReviseId?: number;
        allotmentStatusReviseReasonId?: number;
        description?: string;
        reason?: number;
        reasonDescription?: string;
    }
    interface AllotmentSummaryContract extends BOA.Common.Types.ContractBase {
        allotmentSummaryId?: number;
        allotmentSummaryName?: string;
        approvedCollateralDescription?: string;
        approvedLimitAmount?: number;
        demandCollateralDescription?: string;
        demandLimitAmount?: number;
        parentAllotmentSummaryId?: number;
        previousCollateralDescription?: string;
        previousLimitAmount?: number;
    }
    interface AllotmentTopLimitContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        allotmentTopLimitId?: number;
        approvedCashBlockedLimit?: number;
        approvedCashLimit?: number;
        approvedNonCashBlockedLimit?: number;
        approvedNonCashLimit?: number;
        approvedTotalBlockedLimit?: number;
        approvedTotalLimit?: number;
        currentCashRisk?: number;
        currentNonCashRisk?: number;
        currentRisk?: number;
        customerName?: string;
        demandCashBlockedLimit?: number;
        demandCashLimit?: number;
        demandNonCashBlockedLimit?: number;
        demandNonCashLimit?: number;
        demandTotalBlockedLimit?: number;
        demandTotalLimit?: number;
        previousAllotmentId?: number;
        previousCashBlockedLimit?: number;
        previousCashLimit?: number;
        previousNonCashBlockedLimit?: number;
        previousNonCashLimit?: number;
        previousTotalBlockedLimit?: number;
        previousTotalLimit?: number;
    }
    interface AnalysisCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        address?: string;
        allotmentId?: number;
        allotmentMainId?: number;
        asset?: number;
        authorizedPersonEmailAddress?: string;
        authorizedPersonMobilePhoneNumber?: string;
        authorizedPersonName?: string;
        authorizedPersonPhoneNumber?: string;
        authorizedPersonTitle?: string;
        balanceSheet?: number;
        branchId?: number;
        branchName?: string;
        businessActivityArea?: string;
        commercialTitle?: string;
        consolidation?: number;
        consolidationDescription?: string;
        consolidationPercent?: number;
        customerInfoId?: number;
        customerName?: string;
        customerQuarterList?: BOA.Types.Kernel.Loans.Allotment.CustomerQuarterContract[];
        customerShareHolderList?: BOA.Types.Kernel.Loans.Allotment.CustomerShareHolderContract[];
        customerShareholderPersonList?: BOA.Types.Kernel.Loans.Allotment.CustomerShareholderPersonContract[];
        customerType?: string;
        customerTypeName?: string;
        effectiveFirm?: number;
        equity?: number;
        establishmentDate?: Date;
        firmType?: number;
        groupName?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        isReadOnlyControl?: boolean;
        netSales?: number;
        oldConsolidation?: number;
        oldConsolidationPercent?: number;
        parentSectorCode?: string;
        parentSectorName?: string;
        period?: number;
        personId?: number;
        personType?: number;
        publiclyTradedRatio?: number;
        regionId?: number;
        regionName?: string;
        sectorName?: string;
        sectorNo?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        visitList?: BOA.Types.Kernel.Loans.Allotment.CustomerVisitContract[];
        webAddress?: string;
    }
    interface AnalysisRequestTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        analysisRequestTransactionId?: number;
        description?: string;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        isWorkFlowContinue?: boolean;
        responsibleUserCode?: string;
        responsibleUserFullName?: string;
        systemDate?: Date;
        transactionType?: number;
        transactionTypeDescription?: string;
        userFullName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface AuthorizedCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        authorizedCustomerId?: number;
        authorizedCustomerOpenType?: BOA.Types.Kernel.Loans.Allotment.Enums.AuthorizedCustomerOpenType;
        branchId?: number;
        currentStatus?: number;
        customerGroupName?: string;
        customerName?: string;
        firmType?: number;
        firmTypeName?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        lastRequestTransaction?: BOA.Types.Kernel.Loans.Allotment.AnalysisRequestTransactionContract;
        lastTransactionTypeName?: string;
        requestTransactionList?: BOA.Types.Kernel.Loans.Allotment.AnalysisRequestTransactionContract[];
        responsibleUserCode?: string;
        responsibleUserFullName?: string;
        responsibleUserId?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userEmail?: string;
        userName?: string;
    }
    interface BankInquiryBankContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        bankId?: number;
        bankInquiryBankId?: number;
        bankInquiryId?: number;
        bankName?: string;
        description?: string;
        firmCashLimit?: number;
        firmCashReceivedCollateral?: string;
        firmCashRequestedCollateral?: string;
        firmCashRisk?: number;
        firmLimit?: number;
        firmNonCashLimit?: number;
        firmNonCashReceivedCollateral?: string;
        firmNonCashRequestedCollateral?: string;
        firmNonCashRisk?: number;
        firmReceivedCollateral?: string;
        firmRequestedCollateral?: string;
        firmRisk?: number;
        firmTotalLimit?: number;
        firmTotalRisk?: number;
        groupCashLimit?: number;
        groupCashReceivedCollateral?: string;
        groupCashRequestedCollateral?: string;
        groupCashRisk?: number;
        groupLimit?: number;
        groupNonCashLimit?: number;
        groupNonCashReceivedCollateral?: string;
        groupNonCashRequestedCollateral?: string;
        groupNonCashRisk?: number;
        groupNumber?: number;
        groupReceivedCollateral?: string;
        groupRequestedCollateral?: string;
        groupRisk?: number;
        groupTotalLimit?: number;
        groupTotalRisk?: number;
        guarantor?: string;
        hostIP?: string;
        hostName?: string;
        isTotalColumn?: number;
        languageId?: number;
        limitType?: string;
        promissoryNoteUsage?: string;
        revisedDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface BankInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        approverUser?: string;
        bankInquiryBankList?: BOA.Types.Kernel.Loans.Allotment.BankInquiryBankContract[];
        bankInquiryCustomerList?: BOA.Types.Kernel.Loans.Allotment.BankInquiryCustomerContract[];
        bankInquiryId?: number;
        currentCashLimit?: number;
        currentNonCashLimit?: number;
        currentTotalLimit?: number;
        customerName?: string;
        demandCashLimit?: number;
        demandNonCashLimit?: number;
        demandTotalLimit?: number;
        description?: string;
        endorsment?: number;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        lastPeriodAnalysisDate?: Date;
        lastPeriodId?: number;
        previousBankInquiryId?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface BankInquiryCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bankInquiryCustomerId?: number;
        bankInquiryId?: number;
        customerName?: string;
        description?: string;
        effectiveFirm?: number;
        externalInquiryCount?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        risk?: number;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface BranchLimitMaturityContract extends BOA.Common.Types.ContractBase {
        branchEmail?: string;
        branchId?: number;
        branchName?: string;
        commercialExcelPath?: string;
        commercialLimitMaturityList?: BOA.Types.Kernel.Loans.Allotment.AllotmentListContract[];
        corporateLimitExcelPath?: string;
        corporateLimitMaturityList?: BOA.Types.Kernel.Loans.Allotment.AllotmentListContract[];
        individualLimitExcelPath?: string;
        individualLimitMaturityList?: BOA.Types.Kernel.Loans.Allotment.AllotmentListContract[];
        kOBI1LimitMaturityList?: BOA.Types.Kernel.Loans.Allotment.AllotmentListContract[];
        kOBI2LimitMaturityList?: BOA.Types.Kernel.Loans.Allotment.AllotmentListContract[];
        kobi1LimitExcelPath?: string;
        kobi2LimitExcelPath?: string;
    }
    interface CheckCollectionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        balanceTL?: number;
        countCustom?: number;
        customerName?: string;
        fecCode?: string;
        status?: string;
    }
    interface CircularCollateralLimitContract extends BOA.Common.Types.ContractBase {
        cashLimit?: number;
        circularCollateralLimitId?: number;
        circularId?: number;
        collateralDefinitionId?: number;
        collateralName?: string;
        firmType?: number;
        firmTypeName?: string;
        nonCashLimit?: number;
        totalLimit?: number;
    }
    interface CircularConstraintContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        circularConstraintId?: number;
        circularConstraintProductList?: BOA.Types.Kernel.Loans.Allotment.CircularConstraintProductContract[];
        circularId?: number;
        collateralDefinitionId?: number;
        collateralName?: string;
        constraintTypeName?: string;
        firmType?: number;
        firmTypeName?: string;
        name?: string;
        type?: number;
    }
    interface CircularConstraintProductContract extends BOA.Common.Types.ContractBase {
        circularConstraintId?: number;
        circularConstraintProductId?: number;
        productId?: number;
        productName?: string;
    }
    interface CircularContract extends BOA.Common.Types.ContractBase {
        approvalDate?: Date;
        authorityType?: number;
        authorityTypeName?: string;
        cashBailNetSalesPercent?: number;
        cashLimitNetSalesPercent?: number;
        circularCollateralLimitList?: BOA.Types.Kernel.Loans.Allotment.CircularCollateralLimitContract[];
        circularConstraintList?: BOA.Types.Kernel.Loans.Allotment.CircularConstraintContract[];
        circularId?: number;
        circularProductLimitList?: BOA.Types.Kernel.Loans.Allotment.CircularProductLimitContract[];
        circularTopLimitList?: BOA.Types.Kernel.Loans.Allotment.CircularTopLimitContract[];
        class?: string;
        className?: string;
        customerScale?: number;
        customerScaleName?: string;
        customerType?: string;
        customerTypeName?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        nonCashBailNetSalesPercent?: number;
        nonCashLimitNetSalesPercent?: number;
        number?: number;
        revisionReason?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        version?: number;
        wFInstanceId?: number;
    }
    interface CircularProductCollateralLimitContract extends BOA.Common.Types.ContractBase {
        circularProductCollateralLimitId?: number;
        circularProductLimitId?: number;
        collateralDefinitionId?: number;
        collateralName?: string;
        lowerAmount?: number;
        mandatoryType?: number;
        marginPercent?: number;
        upperAmount?: number;
    }
    interface CircularProductLimitContract extends BOA.Common.Types.ContractBase {
        advancePercent?: number;
        bailNetSalesPercent?: number;
        circularId?: number;
        circularProductCollateralLimitList?: BOA.Types.Kernel.Loans.Allotment.CircularProductCollateralLimitContract[];
        circularProductLimitId?: number;
        limit?: number;
        limitNetSalesPercent?: number;
        maximumAverageMaturity?: number;
        maximumMaturity?: number;
        minimumAverageMaturity?: number;
        minimumMaturity?: number;
        productId?: number;
        productName?: string;
        productType?: string;
        productTypeId?: number;
    }
    interface CircularTopLimitContract extends BOA.Common.Types.ContractBase {
        cashBlockedLimit?: number;
        cashLimit?: number;
        circularId?: number;
        circularTopLimitId?: number;
        firmType?: number;
        firmTypeName?: string;
        nonCashBlockedLimit?: number;
        nonCashLimit?: number;
        totalBlockedLimit?: number;
        totalLimit?: number;
    }
    interface CollateralChequeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        amount?: number;
        amountRate?: number;
        countCustom?: number;
        countCustomRate?: number;
        customerName?: string;
        groupNumber?: number;
        id?: number;
        languageId?: number;
        parentId?: number;
        status?: string;
        statusName?: string;
    }
    interface CollateralTransportContract extends BOA.Common.Types.ContractBase {
        collateralTransportId?: number;
        fromCollateralId?: number;
        fromCollateralName?: string;
        hostIP?: string;
        hostName?: string;
        sequenceNumber?: number;
        systemDate?: Date;
        toCollateralId?: number;
        toCollateralName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface CommitmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        amount?: number;
        approvedPayment?: number;
        beginDate?: Date;
        city?: number;
        cityName?: string;
        commitmentId?: number;
        completionPercent?: number;
        cost?: number;
        country?: number;
        county?: number;
        countyName?: string;
        currentCost?: number;
        currentEstimatedCost?: number;
        currentProggressPayment?: number;
        customerName?: string;
        description?: string;
        endDate?: Date;
        escalationFactor?: number;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        jointVenture?: string;
        jointVentureDescription?: string;
        latitude?: string;
        longitude?: string;
        name?: string;
        pendingPayment?: number;
        profitDescription?: string;
        projectOwner?: string;
        shareHolderPercent?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CommitteeAccessPointContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        committeeAccessPointId?: number;
        committeeId?: number;
        hostIP?: string;
        hostName?: string;
        roleName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CommitteeContract extends BOA.Common.Types.ContractBase {
        approvalDate?: Date;
        authorityType?: number;
        authorityTypeDescription?: string;
        beginDate?: Date;
        cashBlockedLimit?: number;
        cashLimit?: number;
        code?: string;
        committeeAccessPointContractList?: BOA.Types.Kernel.Loans.Allotment.CommitteeAccessPointContract[];
        committeeId?: number;
        committeeSignatoryContractList?: BOA.Types.Kernel.Loans.Allotment.CommitteeSignatoryContract[];
        customerType?: string;
        customerTypeName?: string;
        endDate?: Date;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        nonCashBlockedLimit?: number;
        nonCashLimit?: number;
        regionId?: number;
        regionName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        totalBlockedLimit?: number;
        totalLimit?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface CommitteeSignatoryContract extends BOA.Common.Types.ContractBase {
        approvalDate?: Date;
        committeeId?: number;
        committeeName?: string;
        committeeSignatoryId?: number;
        email?: string;
        hostIP?: string;
        hostName?: string;
        name?: string;
        roleName?: string;
        sequenceNumber?: number;
        signatoryUserName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface CommitteeSignatoryHistoryContract extends BOA.Common.Types.ContractBase {
        approvalDate?: Date;
        committeeId?: number;
        committeeName?: string;
        committeeSignatoryHistoryId?: number;
        committeeSignatoryId?: number;
        endSystemDate?: Date;
        endUpdateSystemDate?: Date;
        hostIP?: string;
        hostName?: string;
        name?: string;
        roleName?: string;
        sequenceNumber?: number;
        signatoryUserName?: string;
        systemDate?: Date;
        transactionType?: number;
        transactionTypeName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ConstructionBalanceContract extends BOA.Common.Types.ContractBase {
        constructionBalancenId?: number;
        constructionId?: number;
        currentAmount?: number;
        expectedAmount?: number;
        realEstateType?: number;
    }
    interface ConstructionCommitmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        beginDate?: Date;
        city?: number;
        cityName?: string;
        commitmentId?: number;
        completionPercent?: number;
        constructionId?: number;
        country?: number;
        countryName?: string;
        county?: number;
        countyName?: string;
        currentCost?: number;
        currentCostCompleted?: number;
        currentCostGoingOn?: number;
        currentIncome?: number;
        currentIncomeCompleted?: number;
        currentIncomeGoingOn?: number;
        currentProfit?: number;
        currentProfitCompleted?: number;
        currentProfitGoingOn?: number;
        customerName?: string;
        description?: string;
        endDate?: Date;
        firmType?: number;
        groupNumber?: number;
        latitude?: string;
        longitude?: string;
        name?: string;
        projectOwner?: string;
        projectType?: number;
        projectTypeName?: string;
    }
    interface ConstructionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        annualRentalAmount?: number;
        beginDate?: Date;
        city?: number;
        cityName?: string;
        completionPercent?: number;
        constructionArea?: number;
        constructionBalanceList?: BOA.Types.Kernel.Loans.Allotment.ConstructionBalanceContract[];
        constructionDetachedSectionList?: BOA.Types.Kernel.Loans.Allotment.ConstructionDetachedSectionContract[];
        constructionId?: number;
        country?: number;
        county?: number;
        countyName?: string;
        customerName?: string;
        description?: string;
        endDate?: Date;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        jointVenture?: string;
        jointVentureDescription?: string;
        landAcquisitionDate?: Date;
        landArea?: number;
        landCost?: number;
        landCreditAmount?: number;
        landDescription?: string;
        landOwner?: string;
        landOwnersEquity?: number;
        latitude?: string;
        longitude?: string;
        name?: string;
        profitSharingAdvanceAmount?: number;
        profitSharingDescription?: string;
        profitSharingFirstInstallmentDate?: Date;
        profitSharingGuarantorBank?: string;
        profitSharingInstallmentAmount?: number;
        profitSharingLandArea?: number;
        profitSharingLastInstallmentDate?: Date;
        profitSharingPaymentPeriod?: number;
        profitSharingStateAgency?: number;
        profitSharingStateAgencyAmount?: number;
        profitSharingStateAgencyPercent?: number;
        profitSharingTenderdate?: Date;
        profitSharingTenderprice?: number;
        projectOwner?: string;
        projectType?: number;
        projectTypeName?: string;
        rentableArea?: number;
        rentalFEC?: number;
        systemDate?: Date;
        tradableArea?: number;
        tranDate?: Date;
        unitMontlyRentalAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        webAddress?: string;
    }
    interface ConstructionDetachedSectionContract extends BOA.Common.Types.ContractBase {
        constructionDetachedSectionId?: number;
        constructionId?: number;
        currentSaleCount?: number;
        expectedCount?: number;
        realEstateType?: number;
        realEstateTypeName?: string;
        sharePercent?: number;
        shareRate?: number;
    }
    interface CreditApprovalContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        authorityType?: number;
        authorityTypeName?: string;
        branchId?: number;
        branchName?: string;
        creditApprovalSegmentType?: BOA.Types.Kernel.Loans.Allotment.Enums.CreditApprovalSegmentType;
        customerSegment?: string;
        customerSubType?: string;
        customerType?: string;
        customerTypeName?: string;
        regionId?: number;
        status?: number;
        workGroupId?: number;
    }
    interface CreditRiskLimitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agencyCount?: number;
        allotmentId?: number;
        creditRiskLimitId?: number;
        customerName?: string;
        customerType?: string;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        inquiryCreditRiskLimitId?: number;
        isColorFulProfitAccrualAmount0?: boolean;
        isColorFulProfitAccrualAmount1?: boolean;
        isColorFulProfitAccrualAmount2?: boolean;
        isColorFulProfitAccrualAmount3?: boolean;
        isColorFulProfitAccrualAmount4?: boolean;
        isColorFulProfitAccrualAmount5?: boolean;
        itemValueList?: BOA.Types.Kernel.Loans.Allotment.CreditRiskLimitItemContract[];
        limitAmount?: number;
        longTermRiskAmount?: number;
        midTermRiskAmount?: number;
        month?: number;
        parentId?: number;
        periodList?: BOA.Types.Kernel.Loans.Allotment.CustomerPeriodContract[];
        profitAccrualAmount?: number;
        profitRediscountAmount?: number;
        riskCode?: number;
        riskCodeGroupName?: string;
        riskCodeName?: string;
        shortTermRiskAmount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface CreditRiskLimitItemContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agencyCount?: number;
        allotmentId?: number;
        creditRiskLimitId?: number;
        customerName?: string;
        customerType?: string;
        firmType?: number;
        groupNumber?: number;
        headerName?: string;
        hostIP?: string;
        hostName?: string;
        limitAmount?: number;
        longTermRiskAmount?: number;
        midTermRiskAmount?: number;
        month?: number;
        parentId?: number;
        profitAccrualAmount?: number;
        profitRediscountAmount?: number;
        riskAmount?: number;
        riskCode?: number;
        riskCodeGroupName?: string;
        riskCodeName?: string;
        riskRate?: number;
        shortTermRiskAmount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface CurrentCollateralContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        balance?: number;
        collateralDefinitionId?: number;
        collateralName?: string;
        currentCollateralAmount?: number;
        desiredCollateralAmount?: number;
        groupNumber?: number;
        languageId?: number;
    }
    interface CustomerActivityCommentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        activityProcess?: string;
        activityType?: string;
        allotmentId?: number;
        capacityUsage?: string;
        columnDescription?: string;
        columnName?: string;
        customerActivityCommentId?: number;
        customerName?: string;
        headCount?: number;
        highSessionMonth?: string;
        hostIP?: string;
        hostName?: string;
        lowSessionMonth?: string;
        purchaseMarketWorkType?: string;
        saledProduct?: string;
        salesMarketWorkType?: string;
        stock?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerActivityContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        activityType?: number;
        activityTypeName?: string;
        allotmentId?: number;
        amount?: number;
        cashPaymentFEC?: number;
        cashPaymentFECName?: string;
        cashPaymentRate?: number;
        cashPaymentRateString?: string;
        customerActivityDetailList?: BOA.Types.Kernel.Loans.Allotment.CustomerActivityDetailContract[];
        customerActivityDetailSummaryList?: BOA.Types.Kernel.Loans.Allotment.CustomerActivityDetailSummaryContract[];
        customerActivityId?: number;
        customerName?: string;
        description?: string;
        firmName?: string;
        hostIP?: string;
        hostName?: string;
        maturityDayCount?: number;
        maturityPaymentFEC?: number;
        maturityPaymentFECName?: string;
        maturityPaymentRate?: number;
        maturityPaymentType?: number;
        maturityPaymentTypeName?: string;
        product?: number;
        productName?: string;
        stockCount?: number;
        supplyRate?: number;
        supplyRateString?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface CustomerActivityDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        amountRate?: number;
        countryId?: number;
        countryName?: string;
        customerActivityDetailId?: number;
        customerActivityId?: number;
        firmName?: string;
        taxNumber?: string;
    }
    interface CustomerActivityDetailSummaryContract extends BOA.Common.Types.ContractBase {
        amount1?: number;
        amount2?: number;
        amount3?: number;
        amount4?: number;
        amountRate1?: number;
        amountRate2?: number;
        amountRate3?: number;
        amountRate4?: number;
        countryId?: number;
        countryName?: string;
        customerActivityDetailId?: number;
        customerActivityId?: number;
        firmName?: string;
        taxNumber?: string;
    }
    interface CustomerCashCreditRiskFinancialItemContract extends BOA.Common.Types.ContractBase {
        longCashRisk?: number;
        longFinancialItem?: number;
        month?: number;
        periodId?: number;
        shortCashRisk?: number;
        shortFinancialItem?: number;
        year?: number;
    }
    interface CustomerFinancialItemContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        allotmentMainId?: number;
        code?: string;
        correctedValue?: number;
        customerFinancialItemId?: number;
        customerType?: string;
        financialDiscountMasterId?: number;
        financialItemDefinitionId?: number;
        financialItemDefinitionIdList?: number[];
        financialItemDefinitionName?: string;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        isLeaf?: number;
        itemValueList?: BOA.Types.Kernel.Loans.Allotment.CustomerFinancialItemValueContract[];
        level?: number;
        originalValue?: number;
        parentCode?: string;
        parentId?: number;
        periodId?: number;
        periodList?: BOA.Types.Kernel.Loans.Allotment.CustomerPeriodContract[];
        sequenceNumber?: number;
        sign?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workflowInstanceId?: number;
    }
    interface CustomerFinancialItemValueContract extends BOA.Common.Types.ContractBase {
        code?: string;
        correctedValue?: number;
        correctionAmount?: number;
        customerFinancialItemId?: number;
        discountValue?: number;
        fileType?: string;
        originalValue?: number;
        period?: BOA.Types.Kernel.Loans.Allotment.CustomerPeriodContract;
    }
    interface CustomerFinancialTableControlContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        customerFinancialTableControlId?: number;
        description?: string;
        financialTableControlDefinitionId?: number;
        message?: string;
        messageType?: string;
        messageTypeName?: string;
        periodName?: string;
        result?: number;
    }
    interface CustomerFinancialTableItemContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        appearance?: number;
        code?: string;
        customerFinancialTableItemId?: number;
        financialTableDefinitionId?: number;
        financialTableItemDefinitionId?: number;
        financialTablelItemName?: string;
        firmType?: number;
        firstPeriodId?: number;
        firstPeriodItemDescription?: string;
        firstPeriodItemDescriptionExist?: number;
        firstPeriodItemValue?: number;
        formula?: string;
        fourthPeriodId?: number;
        fourthPeriodItemDescription?: string;
        fourthPeriodItemDescriptionExist?: number;
        fourthPeriodItemValue?: number;
        groupNumber?: number;
        isLeaf?: number;
        itemValue?: number;
        itemValueHorizontal?: number;
        itemValueList?: BOA.Types.Kernel.Loans.Allotment.CustomerFinancialTableItemValueContract[];
        itemValueVertical?: number;
        parentId?: number;
        periodId?: number;
        secondPeriodId?: number;
        secondPeriodItemDescription?: string;
        secondPeriodItemDescriptionExist?: number;
        secondPeriodItemValue?: number;
        sequenceNumber?: number;
        thirdPeriodId?: number;
        thirdPeriodItemDescription?: string;
        thirdPeriodItemDescriptionExist?: number;
        thirdPeriodItemValue?: number;
    }
    interface CustomerFinancialTableItemResponseContract extends BOA.Common.Types.ContractBase {
        financialTableItemList?: BOA.Types.Kernel.Loans.Allotment.CustomerFinancialTableItemContract[];
        periodList?: BOA.Types.Kernel.Loans.Allotment.CustomerPeriodContract[];
    }
    interface CustomerFinancialTableItemValueContract extends BOA.Common.Types.ContractBase {
        itemDescription?: string;
        itemValue?: number;
        itemValueHorizontal?: number;
        itemValueVertical?: number;
        periodId?: number;
    }
    interface CustomerHistoryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        customerHistoryId?: number;
        description?: string;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface CustomerManagementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        customerManagementId?: number;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        managementStructure?: string;
        risk?: string;
        riskReductionFactor?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerPeriodAccountNumberContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerName?: string;
        customerPeriodId?: number;
        groupNumber?: number;
    }
    interface CustomerPeriodContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        allotmentMainId?: number;
        analysisDataType?: number;
        analysisDataTypeName?: string;
        analysisPeriodIndex?: number;
        customerFinancialItemList?: BOA.Types.Kernel.Loans.Allotment.CustomerFinancialItemContract[];
        customerPeriodAccountNumberContractList?: BOA.Types.Kernel.Loans.Allotment.CustomerPeriodAccountNumberContract[];
        customerPeriodId?: number;
        customerType?: string;
        dataChangeStatus?: number;
        financialDataTransfered?: boolean;
        financialDataType?: BOA.Types.Kernel.Loans.Allotment.Enums.FinancialDataType;
        firmType?: number;
        groupNumber?: number;
        month?: number;
        periodId?: number;
        periodName?: string;
        quarter?: number;
        reportOwner?: number;
        reportOwnerName?: string;
        sourceType?: number;
        sourceTypeName?: string;
        status?: number;
        valueIndex?: number;
        year?: number;
    }
    interface CustomerQuarterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        hostIP?: string;
        hostName?: string;
        month?: number;
        name?: string;
        quarter?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerRelationsContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        personId?: number;
        personName?: string;
        personType?: string;
        personTypeId?: number;
        relation?: string;
        share?: number;
    }
    interface CustomerRiskInformationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        fec?: string;
        isCurrencyBased?: number;
        isProfitable?: number;
        productCode?: string;
        riskType?: number;
    }
    interface CustomerShareHolderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cityId?: number;
        cityName?: string;
        countyId?: number;
        countyName?: string;
        customerInfoId?: number;
        customerName?: string;
        customerShareHolderId?: number;
        effectivePartner?: number;
        effectivePartnerExperience?: number;
        hostIP?: string;
        hostName?: string;
        profitShareRatio?: number;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerShareholderPersonContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerInfoId?: number;
        customerName?: string;
        customerShareholderPersonId?: number;
        parentAccountNumber?: number;
        parentName?: string;
        parentPersonId?: number;
        personId?: number;
        risk?: number;
        shareRatio?: number;
        totalLimit?: number;
    }
    interface CustomerShareHolderResumeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        birthDate?: Date;
        birthPlace?: string;
        customerShareHolderResumeId?: number;
        experience?: string;
        hostIP?: string;
        hostName?: string;
        nativePlace?: number;
        nativePlaceName?: string;
        personId?: number;
        resume?: string;
        shareHolderName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerSWOTContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        customerSWOTId?: number;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        opportunity?: string;
        strength?: string;
        systemDate?: Date;
        threat?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        weaknes?: string;
    }
    interface CustomerTradeRegistryGazetteContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        customerTradeRegistryGazetteId?: number;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        noticeType?: number;
        pageNumber?: number;
        record?: string;
        recordDate?: Date;
        systemDate?: Date;
        title?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerTypePeriodContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerType?: string;
        customerTypeName?: string;
        firstPeriodId?: number;
        firstPeriodName?: string;
        fourthAnalysisDataType?: number;
        fourthPeriodId?: number;
        fourthPeriodName?: string;
        hostIP?: string;
        hostName?: string;
        secondPeriodId?: number;
        secondPeriodName?: string;
        systemDate?: Date;
        thirdPeriodId?: number;
        thirdPeriodName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerVisitContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        authorizedPersonName?: string;
        customerVisitId?: number;
        date?: Date;
        firstContactUserName?: string;
        hostIP?: string;
        hostName?: string;
        secondContactUserName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DomesticLetterOfGuaranteeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        allotmentId?: number;
        amountOfLetter?: number;
        concernedName?: string;
        customerName?: string;
        durationTypeName?: string;
        fecCode?: string;
        fecId?: number;
        groupNumber?: number;
        id?: number;
        isActive?: number;
        languageId?: number;
        letterNumber?: number;
        letterStateId?: number;
        letterStateName?: string;
        letterSubject?: string;
        limitType?: string;
        maturityDate?: Date;
        parentId?: number;
        printedDate?: Date;
        productCode?: string;
        productName?: string;
        remainderProjectAmount?: number;
        returnDate?: Date;
        subProductName?: string;
        superiorBranchId?: number;
        superiorBranchName?: string;
    }
    interface EfficiencyContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        currentBalance?: number;
        customerName?: string;
        expected?: number;
        expense?: number;
        groupId?: number;
        groupName?: string;
        groupNumber?: number;
        id?: number;
        income?: number;
        monthlyAverageBalance?: number;
        net?: number;
        parentId?: number;
        participationBalance?: number;
        queryDate?: Date;
        totalBalance?: number;
        year?: number;
        yearName?: string;
    }
    interface Enums {
    }
    interface EstateContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        acquireDate?: Date;
        activityField?: number;
        allotmentId?: number;
        amount?: number;
        bankHypothec?: number;
        bankHypothecName?: string;
        block?: number;
        city?: number;
        cityName?: string;
        collateralId?: number;
        county?: number;
        countyName?: string;
        currentAmount?: number;
        customerName?: string;
        description?: string;
        estateId?: number;
        estateType?: number;
        estateTypeName?: string;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        indoorArea?: number;
        latitude?: string;
        lien?: number;
        lienDescription?: string;
        lienName?: string;
        longitude?: string;
        outdoorArea?: number;
        ownership?: number;
        ownershipName?: string;
        ownerType?: number;
        ownerTypeName?: string;
        parcel?: number;
        plate?: string;
        realEstateActivityAreaType?: BOA.Types.Kernel.Loans.Allotment.Enums.EstateType;
        rentalIncome?: number;
        summary?: string;
        surface?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ExceptionalAllocationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allocationStatus?: string;
        exceptionalBeginDate?: Date;
        exceptionalCode?: number;
        exceptionalEndDate?: Date;
        exceptionalName?: string;
        exceptionalStatus?: string;
    }
    interface ExceptionalPeriodContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        analysisDataType?: number;
        exceptionalPeriodId?: number;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        periodId?: number;
        periodName?: string;
        quarter?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface ExternalInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        description?: string;
        externalInquiryId?: number;
        externalInquiryShareHolderList?: BOA.Types.Kernel.Loans.Allotment.ExternalInquiryShareHolderContract[];
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ExternalInquiryShareHolderContract extends BOA.Common.Types.ContractBase {
        customerName?: string;
        externalInquiryId?: number;
        externalInquiryShareHolderId?: number;
        inquiryBlackListCorporationCount?: string;
        inquiryBlackListCorporationList?: BOA.Types.Kernel.Loans.Allotment.InquiryBlackListCorporationContract[];
        inquiryBlackListIndividualCount?: string;
        inquiryBlackListIndividualList?: BOA.Types.Kernel.Loans.Allotment.InquiryBlackListIndividualContract[];
        inquiryCourtBannedBouncedCheckCorpCount?: string;
        inquiryCourtBannedBouncedCheckCorpList?: BOA.Types.Kernel.Loans.Allotment.InquiryCourtBannedBouncedCheckCorpContract[];
        inquiryCourtBannedBouncedCheckIndividualCount?: string;
        inquiryCourtBannedBouncedCheckIndividualList?: BOA.Types.Kernel.Loans.Allotment.InquiryCourtBannedBouncedCheckIndividualContract[];
        inquiryEDistraintCount?: string;
        inquiryEDistraintList?: BOA.Types.Kernel.Loans.Allotment.InquiryEDistraintContract[];
        inquiryLevyRecordsCount?: string;
        inquiryLevyRecordsList?: BOA.Types.Kernel.Loans.Allotment.InquiryLevyRecordsContract[];
        inquiryOfficialCorrespondenceCount?: string;
        inquiryOfficialCorrespondenceList?: BOA.Types.Kernel.Loans.Allotment.InquiryOfficialCorrespondenceContract[];
        inquiryProvisionalInjunctionChequeCorporationCount?: string;
        inquiryProvisionalInjunctionChequeCorporationList?: BOA.Types.Kernel.Loans.Allotment.InquiryProvisionalInjunctionChequeCorporationContract[];
        inquiryProvisionalInjunctionChequeIndividualCount?: string;
        inquiryProvisionalInjunctionChequeIndividualList?: BOA.Types.Kernel.Loans.Allotment.InquiryProvisionalInjunctionChequeIndividualContract[];
        inquiryTCMBBouncedCheckCorpCount?: string;
        inquiryTCMBBouncedCheckCorpList?: BOA.Types.Kernel.Loans.Allotment.InquiryTCMBBouncedCheckCorpContract[];
        inquiryTCMBBouncedCheckIndividualCount?: string;
        inquiryTCMBBouncedCheckIndividualList?: BOA.Types.Kernel.Loans.Allotment.InquiryTCMBBouncedCheckIndividualContract[];
        inquiryTCMBProtestedBillsCount?: string;
        inquiryTCMBProtestedBillsList?: BOA.Types.Kernel.Loans.Allotment.InquiryTCMBProtestedBillsContract[];
        inquiryUYAPCourtBannedBouncedCheckCount?: string;
        inquiryUYAPCourtBannedBouncedCheckList?: BOA.Types.Kernel.Loans.Allotment.InquiryUYAPCourtBannedBouncedCheckContract[];
        personId?: number;
        taxNumber?: string;
    }
    interface FactorAnswerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        allotmentMainId?: number;
        answerName?: string;
        answerValue?: number;
        balanceSheet?: number;
        explanation?: string;
        factorAnswerDefinitionId?: number;
        factorAnswerId?: number;
        factorDefinitionId?: number;
        factorName?: string;
        groupName?: string;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FactorAnswerDefinitionContract extends BOA.Common.Types.ContractBase {
        answerValue?: number;
        factorAnswerDefinitionId?: number;
        factorDefinitionId?: number;
        groupName?: string;
        hostIP?: string;
        hostName?: string;
        isExplanationRequired?: number;
        name?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FactorDefinitionContract extends BOA.Common.Types.ContractBase {
        code?: string;
        description?: string;
        factorAnswerDefinitionList?: BOA.Types.Kernel.Loans.Allotment.FactorAnswerDefinitionContract[];
        factorDefinitionId?: number;
        factorGroupId?: number;
        groupName?: string;
        hostName?: string;
        name?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FactorGroupContract extends BOA.Common.Types.ContractBase {
        factorGroupId?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        reportType?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialCommentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        commentType?: number;
        commentTypeName?: string;
        description?: string;
        financialCommentId?: number;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        periodId?: number;
        periodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialDiscountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        amount?: number;
        balance?: number;
        customerName?: string;
        financialDiscountId?: number;
        financialDiscountMasterId?: number;
        financialItemDefinitionId?: number;
        financialItemDefinitionName?: string;
        sequenceNumber?: number;
        sign?: number;
        signName?: string;
    }
    interface FinancialDiscountMasterContract extends BOA.Common.Types.ContractBase {
        allotmentMainId?: number;
        description?: string;
        financialDiscountContractList?: BOA.Types.Kernel.Loans.Allotment.FinancialDiscountContract[];
        financialDiscountMasterId?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        periodId?: number;
        periodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialItemContraAccountDefinitionContract extends BOA.Common.Types.ContractBase {
        contraAccountFinancialItemDefinitionCode?: string;
        contraAccountFinancialItemDefinitionId?: number;
        contraAccountFinancialItemDefinitionName?: string;
        financialItemContraAccountDefinitionId?: number;
        financialItemDefinitionCode?: string;
        financialItemDefinitionId?: number;
        financialItemDefinitionName?: string;
        status?: number;
    }
    interface FinancialItemCorrectionContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        amount?: number;
        correctedBalance?: number;
        financialItemCorrectionId?: number;
        financialItemCorrectionMasterId?: number;
        financialItemDefinitionId?: number;
        financialItemDefinitionName?: string;
        originalBalance?: number;
        sequenceNumber?: number;
        sign?: number;
        signName?: string;
    }
    interface FinancialItemCorrectionMasterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        correctionType?: number;
        customerPeriod?: BOA.Types.Kernel.Loans.Allotment.CustomerPeriodContract;
        description?: string;
        financialItemCorrectionContractList?: BOA.Types.Kernel.Loans.Allotment.FinancialItemCorrectionContract[];
        financialItemCorrectionMasterId?: number;
        hostIP?: string;
        hostName?: string;
        periodId?: number;
        periodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialItemDefinitionContract extends BOA.Common.Types.ContractBase {
        balanceSheet?: number;
        code?: string;
        description?: string;
        financialItemDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        isLeaf?: number;
        itemTypeCode?: string;
        name?: string;
        nameInEnglish?: string;
        parentCode?: string;
        parentId?: number;
        sequenceNumber?: number;
        sign?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialItemDefinitionNode extends BOA.Common.Types.GenericTreeNode<BOA.Types.Kernel.Loans.Allotment.FinancialItemDefinitionNode> {
        financialItem?: BOA.Types.Kernel.Loans.Allotment.FinancialItemDefinitionContract;
    }
    interface FinancialItemTrendExplanationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        customerType?: string;
        description?: string;
        financialItemTrendExplanationId?: number;
        financialTableItemDefinitionId?: number;
        financialTableItemName?: string;
        financialTableName?: string;
        firmType?: number;
        firstPeriodId?: number;
        firstPeriodName?: string;
        firstPeriodValue?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        rate?: number;
        reasonType?: number;
        secondPeriodId?: number;
        secondPeriodName?: string;
        secondPeriodValue?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialTableControlDefinitionContract extends BOA.Common.Types.ContractBase {
        analysisDataType?: number;
        analysisDataTypeName?: string;
        balanceSheet?: number;
        description?: string;
        financialTableControlDefinitionId?: number;
        financialTableDefinitionId?: number;
        formula?: string;
        hostIP?: string;
        hostName?: string;
        message?: string;
        messageType?: string;
        messageTypeName?: string;
        orderNumber?: number;
        status?: number;
        systemDate?: Date;
        tableName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialTableDefinitionContract extends BOA.Common.Types.ContractBase {
        balanceSheet?: number;
        calculationType?: number;
        code?: string;
        decimalDigitCount?: number;
        financialTableDefinitionId?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        nameInEnglish?: string;
        sequenceNumber?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        verticalCalculationDenominator?: string;
    }
    interface FinancialTableItemDefinitionContract extends BOA.Common.Types.ContractBase {
        appearance?: number;
        balanceSheet?: number;
        code?: string;
        financialTableDefinitionId?: number;
        financialTableItemDefinitionId?: number;
        formula?: string;
        hostIP?: string;
        hostName?: string;
        isLeaf?: number;
        name?: string;
        nameInEnglish?: string;
        orderNumber?: number;
        parentId?: number;
        reportVisibilityStatus?: number;
        status?: number;
        systemDate?: Date;
        tableCode?: string;
        tableName?: string;
        tableOrderNumber?: number;
        treeCode?: string;
        treeParentCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface FinancialTableItemDefinitionNode extends BOA.Common.Types.GenericNode<BOA.Types.Kernel.Loans.Allotment.FinancialTableItemDefinitionNode> {
        item?: BOA.Types.Kernel.Loans.Allotment.FinancialTableItemDefinitionContract;
    }
    interface FinancialVariableContract extends BOA.Common.Types.ContractBase {
        code?: string;
        financialVariableId?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        periodId?: number;
        periodName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        variableValue?: number;
    }
    interface FixedAssetContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        amount?: number;
        brand?: string;
        collateralId?: number;
        count?: number;
        customerName?: string;
        description?: string;
        distressStatus?: number;
        distressStatusName?: string;
        fixedAssetId?: number;
        fixedAssetSubType?: number;
        fixedAssetSubTypeName?: string;
        fixedAssetSubTypeText?: string;
        fixedAssetType?: number;
        fixedAssetTypeName?: string;
        hostIP?: string;
        hostName?: string;
        plateNumber?: string;
        pledgeDescription?: string;
        registryNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vehicleModel?: string;
        year?: number;
    }
    interface ForeignLetterOfGuaranteeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        amountOfLetter?: number;
        amountOfLetterTL?: number;
        bankName?: string;
        beneficiaryName?: string;
        countryName?: string;
        customerName?: string;
        definiteName?: string;
        expiryDate?: Date;
        fecCode?: string;
        garantiExpiry?: Date;
        groupNumber?: number;
        guaranteeStatus?: string;
        id?: number;
        isActive?: number;
        kGDefiniteName?: string;
        kontrExpiryDate?: Date;
        languageId?: number;
        letterSubject?: string;
        parentId?: number;
        productName?: string;
        reference?: string;
        remainderProjectAmount?: number;
        remainderProjectAmountTL?: number;
        subProductName?: string;
        superiorBranchName?: string;
        tranDate?: Date;
    }
    interface GeneralCheckCollectionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        amount?: number;
        amountRate?: number;
        countCustom?: number;
        countCustomRate?: number;
        customerName?: string;
        groupNumber?: number;
        id?: number;
        languageId?: number;
        parentId?: number;
        status?: string;
        statusName?: string;
    }
    interface GeneralInfoActivityContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        contactPerson?: string;
        firstAuthorizedPerson?: string;
        reasonName?: string;
        secondAuthorizedPerson?: string;
        tranDate?: Date;
    }
    interface GeneralInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        activityList?: BOA.Types.Kernel.Loans.Allotment.GeneralInfoActivityContract[];
        addressText?: string;
        authorizedPerson?: string;
        authorizedPersonTitle?: string;
        branchName?: string;
        creditRiskGroup?: string;
        customerName?: string;
        customerSegment?: string;
        email?: string;
        establishmentDate?: Date;
        establishmentDateText?: string;
        fieldOfActivity?: string;
        guarantorList?: BOA.Types.Kernel.Loans.Allotment.GeneralInfoGuarantorContract[];
        mobilePhoneNumber?: string;
        nace?: string;
        organizationTitle?: string;
        phoneNumber?: string;
        regionName?: string;
        url?: string;
    }
    interface GeneralInfoGuarantorContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cityName?: string;
        countyName?: string;
        customerName?: string;
        personId?: number;
        sharePercent?: number;
    }
    interface InformationNoteContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        commentType?: number;
        commentTypeName?: string;
        customerName?: string;
        description?: string;
        firmType?: number;
        groupName?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        informationNoteId?: number;
        roleName?: string;
        roleUserName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        workGroupName?: string;
    }
    interface InquiryBlackListCorporationContract extends BOA.Common.Types.ContractBase {
        address?: string;
        allotmentId?: number;
        bankruptcyClaimedBy?: string;
        bankruptcyCourtInfo?: string;
        bidProhibitedDate?: Date;
        bidProhibitingAgency?: string;
        blackListCorporationID?: number;
        blackListName?: string;
        blackListTypeID?: number;
        city?: number;
        companyType?: number;
        companyTypeDescription?: string;
        county?: number;
        customerNumber?: number;
        delayedBankruptcyClaimedBy?: string;
        delayedBankruptcyCourtInfo?: string;
        description?: string;
        firstAuthorizedPersonLastName?: string;
        firstAuthorizedPersonMidName?: string;
        firstAuthorizedPersonName?: string;
        inquiryBlackListCorporationId?: number;
        inquiryListTypeId?: number;
        inquirySource?: number;
        inquirySourceDescription?: string;
        neighborhood?: string;
        phone?: string;
        secondAuthorizedPersonLastName?: string;
        secondAuthorizedPersonMidName?: string;
        secondAuthorizedPersonName?: string;
        sSKDebtAmount?: number;
        status?: number;
        taxNumber?: string;
        taxOffice?: string;
        taxOwedAmount?: number;
        title?: string;
        tradeRegisterNumber?: string;
        tradeRegisterOffice?: string;
    }
    interface InquiryBlackListIndividualContract extends BOA.Common.Types.ContractBase {
        address?: string;
        allotmentId?: number;
        auctionProhibitedDate?: Date;
        auctionProhibitingAgency?: string;
        bankruptcyClaimedBy?: string;
        bankruptcyCourtInformation?: string;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        blackListName?: string;
        blackListPersonalID?: number;
        blackListTypeID?: number;
        city?: number;
        county?: number;
        customerNumber?: number;
        delayedBankruptcyClaimedBy?: string;
        delayedBankruptcyCourtInformation?: string;
        description?: string;
        fathersName?: string;
        firstName?: string;
        identityNumber?: string;
        inquiryBlackListIndividualId?: number;
        inquiryListTypeId?: number;
        inquirySource?: number;
        jobTitle?: string;
        lastName?: string;
        mothersName?: string;
        neighborhood?: string;
        phone?: string;
        previousLastName?: string;
        sSKDebtAmount?: number;
        status?: number;
        taxOffice?: string;
        taxOwedAmount?: number;
    }
    interface InquiryCorporateKKBContract extends BOA.Common.Types.ContractBase {
        collateralCustomerCheque?: number;
        collateralGuarantee?: number;
        collateralOther?: number;
        collateralPledge?: number;
        firmLimit?: number;
        firmRisk?: number;
        groupLimit?: number;
        groupRisk?: number;
        guarantorName?: string;
        inquiryCorporateKKBCashLimitList?: BOA.Types.Kernel.Loans.Allotment.InquiryCorporateKKBLimitContract[];
        inquiryCorporateKKBId?: number;
        inquiryCorporateKKBLimitId?: number;
        kKBLogId?: number;
        lateAccountCount?: number;
        lateTotalAmount?: number;
        limitTypeId?: number;
        limitTypeName?: string;
        parentId?: number;
        sourceBank?: string;
        sourceBankName?: string;
        totalLimit?: number;
        totalRisk?: number;
    }
    interface InquiryCorporateKKBLimitContract extends BOA.Common.Types.ContractBase {
        firmLimit?: number;
        firmRisk?: number;
        groupLimit?: number;
        groupRisk?: number;
        inquiryCorporateKKBId?: number;
        inquiryCorporateKKBLimitId?: number;
        limitTypeId?: number;
        totalLimit?: number;
        totalRisk?: number;
    }
    interface InquiryCorporateKKBRelationContract extends BOA.Common.Types.ContractBase {
        corporationName?: string;
        kKBLogId?: number;
        relationTypeId?: number;
    }
    interface InquiryCourtBannedBouncedCheckCorpContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        bannedPeriodDay?: string;
        bannedPeriodMonth?: string;
        bannedPeriodYear?: string;
        courtAprovelDate?: string;
        courtBannedBouncedCheckCorpID?: number;
        courtDecisionDate?: string;
        courtName?: string;
        courtRecordDate?: string;
        courtRecordNumber?: string;
        customerNumber?: number;
        decisionNo?: string;
        eDD?: number;
        inquiryCourtBannedBouncedCheckCorpId?: number;
        inquiryListTypeId?: number;
        personType?: string;
        status?: number;
        taxNumber?: string;
        title?: string;
        tradeRegisterNumber?: string;
        type?: string;
    }
    interface InquiryCourtBannedBouncedCheckIndividualContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        bannedPeriodDay?: string;
        bannedPeriodMonth?: string;
        bannedPeriodYear?: string;
        birthDate?: Date;
        birthPlaceText?: string;
        courtAprovalDate?: string;
        courtBannedBouncedCheckIndividualID?: number;
        courtDecisionDate?: string;
        courtName?: string;
        courtRecordDate?: string;
        courtRecordNumber?: string;
        customerNumber?: number;
        decisionNumber?: string;
        eDD?: number;
        fathersName?: string;
        firstName?: string;
        identityNumber?: string;
        inquiryCourtBannedBouncedCheckIndividualId?: number;
        inquiryListTypeId?: number;
        lastName?: string;
        mothersName?: string;
        personType?: string;
        status?: number;
        taxNumber?: string;
        type?: string;
        typeDescription?: string;
    }
    interface InquiryEDistraintContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        eDistraintId?: number;
        fathersName?: string;
        firstName?: string;
        hBNO?: string;
        identificationNumber?: string;
        inquiryEDistraintId?: number;
        inquiryListTypeId?: number;
        lastName?: string;
        officeTaxNumber?: string;
        oId?: string;
        requestDate?: Date;
        taxOfficeCode?: string;
        title?: string;
        transactionDate?: Date;
        transactionStatus?: number;
        transactionStatusName?: string;
        transactionType?: number;
        transactionTypeName?: string;
        withholdingAmount?: number;
    }
    interface InquiryKKBContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        customerName?: string;
        detail?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        inquiryKKBId?: number;
        inquiryKKBShareHolderList?: BOA.Types.Kernel.Loans.Allotment.InquiryKKBShareHolderContract[];
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InquiryKKBShareHolderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerName?: string;
        detail?: string;
        establishmentDate?: Date;
        finarValue?: number;
        gDSValue?: number;
        groupNumber?: number;
        individualScore?: number;
        inquiryCorporateKKBDetailList?: BOA.Types.Kernel.Loans.Allotment.InquiryCorporateKKBContract[];
        inquiryCorporateKKBList?: BOA.Types.Kernel.Loans.Allotment.InquiryCorporateKKBContract[];
        inquiryCorporateKKBRelationList?: BOA.Types.Kernel.Loans.Allotment.InquiryCorporateKKBRelationContract[];
        inquiryKKBId?: number;
        inquiryKKBShareHolderId?: number;
        kKBInquiryId?: number;
        personId?: number;
        queryType?: number;
        queryTypeName?: string;
        score?: number;
        taxNumber?: string;
        taxOffice?: string;
    }
    interface InquiryLevyRecordsContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        amount?: number;
        city?: number;
        cityName?: string;
        customerNumber?: number;
        fecName?: string;
        fileNumber?: string;
        foreignExchangeCode?: number;
        identityNumber?: string;
        inquiryLevyRecordsId?: number;
        inquiryListTypeId?: number;
        levyDate?: Date;
        levyOffice?: string;
        levyRecordID?: number;
        payee?: string;
        status?: number;
        taxNumber?: string;
        titleDebtor?: string;
        tradeRegisterNumber?: string;
    }
    interface InquiryOfficialCorrespondenceContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        birthDate?: Date;
        branchId?: number;
        branchName?: string;
        cityId?: number;
        cityName?: string;
        commercialName?: string;
        corporationType?: number;
        corporationTypeName?: string;
        correspondenceDetailId?: number;
        correspondenceId?: number;
        countyId?: number;
        countyName?: string;
        customerId?: number;
        customerName?: string;
        debtAmount?: number;
        fathersName?: string;
        inquerypersonId?: number;
        inquiryListTypeId?: number;
        inquiryOfficialCorrespondenceId?: number;
        lastResponseDate?: Date;
        notificationDate?: Date;
        officialCorrespondenceId?: number;
        researchType?: number;
        researchTypeName?: string;
        taxIdentificationNumber?: string;
        transactionDate?: Date;
        writingDate?: Date;
    }
    interface InquiryProvisionalInjunctionChequeCorporationContract extends BOA.Common.Types.ContractBase {
        address?: string;
        allotmentId?: number;
        bankCode?: string;
        bankName?: string;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        drawDate?: Date;
        inquiryListTypeId?: number;
        inquiryProvisionalInjunctionChequeCorporationId?: number;
        jointAccount?: string;
        paymentType?: string;
        paymentTypeName?: string;
        personCode?: string;
        personCodeName?: string;
        provisionalInjunctionChequeCorporationId?: number;
        stateCode?: string;
        stateCodeDescription?: string;
        status?: number;
        submissionDate?: Date;
        taxNumber?: string;
        title?: string;
    }
    interface InquiryProvisionalInjunctionChequeIndividualContract extends BOA.Common.Types.ContractBase {
        address?: string;
        allotmentId?: number;
        bankCode?: string;
        bankName?: string;
        birthCityCode?: number;
        birthDate?: Date;
        birthPlace?: string;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        drawDate?: Date;
        fatherName?: string;
        firstName?: string;
        identityNumber?: string;
        inquiryListTypeId?: number;
        inquiryProvisionalInjunctionChequeIndividualId?: number;
        jointAccount?: string;
        lastName?: string;
        motherName?: string;
        paymentType?: string;
        paymentTypeName?: string;
        personCode?: string;
        personCodeName?: string;
        provisionalInjunctionChequeIndividualId?: number;
        stateCode?: string;
        stateCodeDescription?: string;
        status?: number;
        submissionDate?: Date;
        taxNumber?: string;
    }
    interface InquiryTCMBBouncedCheckCorpContract extends BOA.Common.Types.ContractBase {
        address?: string;
        allotmentId?: number;
        bankCode?: string;
        bankName?: string;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        commonAccountIndicator?: string;
        customerNumber?: number;
        drawDate?: Date;
        foreignExchangeType?: string;
        foreignExchangeTypeDescription?: string;
        inquiryListTypeId?: number;
        inquiryTCMBBouncedCheckCorpId?: number;
        originalChequeAmount?: string;
        payDate?: Date;
        personCode?: string;
        stateCode?: string;
        stateCodeDescription?: string;
        status?: number;
        submissionDate?: Date;
        taxNumber?: string;
        tCMBBouncedCheckCorpID?: number;
        title?: string;
        tradeRegisterNumber?: string;
        xCity?: string;
    }
    interface InquiryTCMBBouncedCheckIndividualContract extends BOA.Common.Types.ContractBase {
        address?: string;
        allotmentId?: number;
        bankCode?: string;
        bankName?: string;
        birthCityCode?: number;
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        branchCode?: string;
        branchName?: string;
        checkAccountNumber?: string;
        checkAmount?: number;
        checkOrderNumber?: string;
        checkSerialNumber?: string;
        city?: number;
        commonAccountIndicator?: string;
        customerNumber?: number;
        drawDate?: Date;
        fathersName?: string;
        firstName?: string;
        foreignExchangeType?: string;
        foreignExchangeTypeDescription?: string;
        identityNumber?: string;
        inquiryListTypeId?: number;
        inquiryTCMBBouncedCheckIndividualId?: number;
        lastName?: string;
        mothersName?: string;
        originalChequeAmount?: string;
        payDate?: Date;
        personCode?: string;
        stateCode?: string;
        stateCodeDescription?: string;
        status?: number;
        submissionDate?: Date;
        taxNumber?: string;
        tCMBBouncedCheckIndividualID?: number;
        xCity?: string;
    }
    interface InquiryTCMBProtestedBillsContract extends BOA.Common.Types.ContractBase {
        address?: string;
        allotmentId?: number;
        bankBranchCityCode?: number;
        bankBranchCountyCode?: number;
        bankBranchOrderNumber?: number;
        bankCode?: number;
        billAmount?: number;
        branchName?: string;
        city?: number;
        companyCode?: string;
        customerNumber?: number;
        identityNumber?: string;
        inquiryListTypeId?: number;
        inquiryTCMBProtestedBillsId?: number;
        noticePeriod?: number;
        noticeYear?: number;
        orderNumber?: number;
        personCode?: string;
        recordType?: string;
        revokedPeriod?: number;
        revokedReason?: string;
        revokedReasonDescription?: string;
        revokedYear?: number;
        scanCode?: string;
        scanningTitle?: string;
        status?: number;
        taxNumber?: string;
        tCMBrotestedBillsID?: number;
        title?: string;
        tradeRegisterNumber?: string;
    }
    interface InquiryUYAPCourtBannedBouncedCheckContract extends BOA.Common.Types.ContractBase {
        allotmentId?: number;
        announcementDate?: string;
        birthCityCode?: string;
        birthDate?: Date;
        courtDecisionDate?: string;
        courtEffectiveDate?: string;
        courtID?: string;
        courtName?: string;
        customerNumber?: number;
        decisionNumberOrder?: string;
        decisionNumberYear?: string;
        fathersName?: string;
        fileDate?: string;
        fileNumber?: string;
        fileType?: string;
        firstName?: string;
        identityNumber?: string;
        inquiryListTypeId?: number;
        inquiryUYAPCourtBannedBouncedCheckId?: number;
        lastName?: string;
        mothersName?: string;
        mTKNumber?: string;
        notificationDate?: string;
        personType?: string;
        registeredCity?: number;
        registeredCounty?: number;
        registeredNeighborhood?: string;
        status?: number;
        statusCode?: string;
        statusCodeDescription?: string;
        suppressionCourtName?: string;
        supressionCourtID?: string;
        taxNumber?: string;
        title?: string;
        uYAPCourtBannedBouncedCheckID?: number;
        uyapID?: string;
        xRegisteredCity?: string;
        xRegisteredCounty?: string;
    }
    interface MarketInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        contactDate?: Date;
        contactPerson?: string;
        contactPersonTitle?: string;
        firmName?: string;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        info?: string;
        marketInquiryId?: number;
        phoneNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ParameterTypes {
        allotmentApprover?: string;
        allotmentReason?: string;
        allotmentReviseReason?: string;
        allotmentStatus?: string;
        allotmentTranType?: string;
        aLTActivityType?: string;
        aLTChequeColor?: string;
        aLTCommentType?: string;
        aLTPaymentType?: string;
        aLTProduct?: string;
        aLTQueryType?: string;
        analysisDataType?: string;
        analysisEstateType?: string;
        analysisPilotBranch?: string;
        analysisRequestTranType?: string;
        authorityCMMCLUnit?: string;
        authorityType?: string;
        authorityUnit?: string;
        authorizedCustomerStatus?: string;
        authorizedCustomerStatusLst?: string;
        bankInqDay?: string;
        calculationType?: string;
        chartDefinition?: string;
        chartSeriesDefinition?: string;
        circularClass?: string;
        circularConstraintType?: string;
        circularStatus?: string;
        committeeStatus?: string;
        committeeType?: string;
        constraintType?: string;
        constructionProfitSharingStateAgency?: string;
        constructionProjectType?: string;
        country?: string;
        creditLimitRiskException?: string;
        cusRatio?: string;
        customerClass?: string;
        customerScale?: string;
        customerSubType?: string;
        customerTypeGroup?: string;
        distressStatus?: string;
        estateOwnerType?: string;
        exceptionalProductLimit?: string;
        factorGroupCode?: string;
        financialOwner?: string;
        firmType?: string;
        fixedAssetSubType?: string;
        fixedAssetType?: string;
        generalParameter?: string;
        generalParameterActiveCode?: string;
        generalParameterActivePassiveDifferent?: string;
        generalParameterAuthorizedCustomer?: string;
        generalParameterBlockedMultiplier?: string;
        generalParameterBMRRiskLimitDifference?: string;
        generalParameterBranchCom?: string;
        generalParameterCheque?: string;
        generalParameterChequeCollateral?: string;
        generalParameterControlStatus?: string;
        generalParameterDeposit?: string;
        generalParameterEstateMaxLimit?: string;
        generalParameterIncomeBalanceDifferent?: string;
        generalParameterIncomeProfit?: string;
        generalParameterMandatoryLimit?: string;
        generalParameterMCollateralMortgage?: string;
        generalParameterPassiveCode?: string;
        generalParameterPassiveProfit?: string;
        generalParameterQualifiedOpinion?: string;
        generalParameterReportTotalDay?: string;
        generalParameterReportValidDate?: string;
        generalParameterReviseCMMC?: string;
        generalParameterReviseKOBI?: string;
        generalParameterReviseKOBIStart?: string;
        generalParameterSignCollateral?: string;
        generalParameterTableBalance?: string;
        generalParameterTableBalanceActive?: string;
        generalParameterTableBalanceCashFlow?: string;
        generalParameterTableBalancePassive?: string;
        generalParameterTableCodeIncome?: string;
        generalParameterTableCodeRates?: string;
        generalParameterTableCount?: string;
        generalParameterTreasure?: string;
        generalParameterTSKB?: string;
        inquiryCustomer?: string;
        jobType?: string;
        kGFBeneficiaryType?: string;
        kGFProduct?: string;
        kKBCollateral?: string;
        kKBCollateralGrup?: string;
        kKDSPilotBranch?: string;
        language?: string;
        messageType?: string;
        periodType?: string;
        prjPayRate?: string;
        productConstraintType?: string;
        ratingItemType?: string;
        region?: string;
        rejectReason?: string;
        returnReason?: string;
        ruleRunDay?: string;
        screenType?: string;
        screenTypeCommand?: string;
        sectors?: string;
        sign?: string;
        sourceType?: string;
        status?: string;
        tCMBRiskCode?: string;
        tranDate?: string;
        transactionType?: string;
        yesNo?: string;
    }
    interface PeriodContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        analysisDataType?: number;
        analysisDataTypeName?: string;
        customerType?: string;
        dataTypeSort?: number;
        hostIP?: string;
        hostName?: string;
        periodId?: number;
        periodName?: string;
        quarter?: number;
        sourceType?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface ProductConstraintContract extends BOA.Common.Types.ContractBase {
        code?: string;
        constraintName?: string;
        productConstraintId?: number;
        productId?: number;
        type?: number;
        typeName?: string;
    }
    interface ProductContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        code?: string;
        collateralRequestType?: number;
        customerSubType?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        isExpanded?: boolean;
        level?: number;
        mainGroupName?: string;
        mainProductId?: number;
        name?: string;
        notIncludedCollateralRiskBalance?: number;
        occupationType?: number;
        parentProductId?: number;
        productCode?: string;
        productConstraintList?: BOA.Types.Kernel.Loans.Allotment.ProductConstraintContract[];
        productId?: number;
        productType?: string;
        productTypeId?: number;
        sectorId?: number;
        sectorName?: string;
        status?: number;
        subGroupName?: string;
        subProductId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProductLimitRiskContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        customerName?: string;
        groupName?: string;
        groupNumber?: number;
        languageId?: number;
        limit?: number;
        limitRiskList?: BOA.Types.Kernel.Loans.Allotment.ProductLimitRiskContract[];
        productId?: number;
        productName?: string;
        profitableRisk?: number;
        profitlessRisk?: number;
        topLimit?: number;
    }
    interface ProductNode extends BOA.Common.Types.GenericNode<BOA.Types.Kernel.Loans.Allotment.ProductNode> {
        product?: BOA.Types.Kernel.Loans.Allotment.ProductContract;
    }
    interface ProductTransportContract extends BOA.Common.Types.ContractBase {
        fromProductId?: number;
        fromProductName?: string;
        hostIP?: string;
        hostName?: string;
        isFlow?: boolean;
        productTransportDetailList?: BOA.Types.Kernel.Loans.Allotment.ProductTransportDetailContract[];
        productTransportId?: number;
        sequenceNumber?: number;
        systemDate?: Date;
        toProductId?: number;
        toProductName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface ProductTransportDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        customerType?: string;
        hostIP?: string;
        hostName?: string;
        productTransportDetailId?: number;
        productTransportId?: number;
        ratio?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectCommentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentMainId?: number;
        description?: string;
        descriptionInEnglish?: string;
        firmType?: number;
        groupNumber?: number;
        hostIP?: string;
        hostName?: string;
        projectCommentId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectSummaryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentId?: number;
        availableBalance?: number;
        creditWorkTime?: string;
        customerName?: string;
        delayedCount?: number;
        delayedRate?: number;
        groupNumber?: number;
        installmentCount?: number;
        languageId?: number;
        lastOneYearDelayedCount?: number;
        lastOneYearDelayedRate?: number;
        lastOneYearInstallmentCount?: number;
        lastOneYearMaxDelayedCount?: number;
        lastOneYearMinDelayedCount?: number;
        maxDelayedCount?: number;
        minDelayedCount?: number;
        parentProjectSummaryId?: number;
        paymentDescription?: string;
        projectAmount?: number;
        projectCount?: number;
        projectDate?: Date;
        projectLastOneYearAmount?: number;
        projectLastOneYearCount?: number;
        projectSummaryCode?: BOA.Types.Kernel.Loans.Allotment.Enums.ProjectSummaryType;
        projectSummaryId?: number;
        riskBalance?: number;
        systemDate?: Date;
        totalBalance?: number;
    }
    interface QuestionDefinitionContract extends BOA.Common.Types.ContractBase {
        customerSubType?: string;
        description?: string;
        questionDefinitionId?: number;
        questionGroupId?: number;
        sequenceNumber?: number;
        status?: number;
        weight?: number;
    }
    interface QuestionGroupContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        name?: string;
        questionDefinitionContractList?: BOA.Types.Kernel.Loans.Allotment.QuestionDefinitionContract[];
        questionGroupCustomerSubTypeContractList?: BOA.Types.Kernel.Loans.Allotment.QuestionGroupCustomerSubTypeContract[];
        questionGroupId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface QuestionGroupCustomerSubTypeContract extends BOA.Common.Types.ContractBase {
        customerSubType?: string;
        questionGroupId?: number;
    }
    interface SectorGroupDefinitionContract extends BOA.Common.Types.ContractBase {
        code?: string;
        hostIP?: string;
        hostName?: string;
        name?: string;
        secNaceList?: BOA.Types.Kernel.Loans.Allotment.SectorGroupDefinitionNaceContract[];
        sectorGroupDefinitionId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SectorGroupDefinitionNaceContract extends BOA.Common.Types.ContractBase {
        keyPath?: string;
        sectorCode?: string;
        sectorGroupDefinitionId?: number;
        sectorGroupDefinitionNACEId?: number;
        sectorName?: string;
        sectorNo?: number;
    }
    interface SectorNaceContract extends BOA.Common.Types.ContractBase {
        codePath?: string;
        keyPath?: string;
        outOfScope?: string;
        parentSectorNo?: number;
        scope?: string;
        sectorCode?: string;
        sectorGroupDefinitionId?: number;
        sectorGroupDefinitionNaceId?: number;
        sectorIdCBTR?: string;
        sectorName?: string;
        sectorNo?: number;
        sectorNode1?: string;
        sectorNode2?: string;
        sectorNode3?: string;
        sectorNode4?: string;
        sectorNode5?: string;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        stateWFNo?: number;
        typeNo?: number;
    }
    interface SmeAutoAllocationContact extends BOA.Common.Types.ContractBase {
        age?: number;
        citizenShip?: number;
        configurationControl?: number;
        currentCashLimitAmountRatio?: number;
        establishmentDate?: Date;
        fiveDaysAndTwoHundredFiftyLatency?: number;
        keyPath?: string;
        lastThreeMontsRiskLimitRatio?: number;
        legalProceeding?: number;
        minEstablishmentDate?: Date;
        nace1Codes?: string;
        nonCachRestitution?: number;
        officalWritingCount?: number;
        officalWritingFrom?: string;
        rejectedAllocationControl?: number;
        sequestrationAmountGib?: number;
        sequestrationAmountSgk?: number;
        sequestrationGib?: number;
        sequestrationSgk?: number;
        sixtyDaysLatencyInSixMonths?: number;
        thirtyDaysLatency?: number;
        thirtyDaysProfitlessRisk?: number;
        twoTimesLatencyInLastSixMonths?: number;
    }
    interface SmeAutoAllocationInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentDate?: Date;
        analysisDataType1?: number;
        analysisDataType2?: number;
        analysisDataType3?: number;
        analysisDataType4?: number;
        authorityType?: string;
        correctedValue1?: number;
        correctedValue2?: number;
        correctedValue3?: number;
        correctedValue4?: number;
        currentReportNumber?: number;
        customerGroup?: string;
        customerName?: string;
        customerType?: string;
        effectivePartner?: number;
        effectivePartnerExperience?: number;
        exceptionalCompanyEndDate?: Date;
        exceptionalCompanyStartDate?: Date;
        exceptionalStatus?: number;
        finalPeriodId?: number;
        financialAccount?: string;
        firstPeriodId?: number;
        firstPeriodId1?: number;
        firstTerm?: string;
        firstTermAsset?: number;
        firstTermCorrected?: number;
        firstTermEquity?: number;
        firstTermMDVOZ?: string;
        firstTermOriginal?: number;
        firstTermRatio?: number;
        fourthPeriodId?: number;
        fourthPeriodId1?: number;
        fourthTerm?: string;
        fourthTermAsset?: number;
        fourthTermCorrected?: number;
        fourthTermEquity?: number;
        fourthTermMDVOZ?: string;
        fourthTermOriginal?: number;
        fourthTermRatio?: number;
        groupName?: string;
        isBalanceSheet?: number;
        lastFullYearAsset?: number;
        lastFullYearconsolidatedEndorsment?: number;
        lastFullYearConsolidateEndorsment?: number;
        lastFullYearEndorsment?: number;
        lastFullYearEquity?: number;
        lastFullYearFinalAsset?: number;
        lastFullYearFinalConsolidateEndorsment?: number;
        lastFullYearFinalEndorsment?: number;
        lastFullYearFinalEquity?: number;
        lastOneYearAsset?: number;
        lastOneYearConsolidateEndorsment?: number;
        lastOneYearEquity?: number;
        lastThirdYearAsset?: number;
        lastThirdYearConsolidateEndorsment?: number;
        lastThirdYearEquity?: number;
        lastTwoYearAsset?: number;
        lastTwoYearConsolidateEndorsment?: number;
        lastTwoYearEquity?: number;
        lastYearAsset?: number;
        lastYearConsolidateEndorsment?: number;
        lastYearEquity?: number;
        originalValue1?: number;
        originalValue2?: number;
        originalValue3?: number;
        originalValue4?: number;
        periodId?: number;
        quarter1?: number;
        quarter2?: number;
        quarter3?: number;
        quarter4?: number;
        rejectExceptionalEndDate?: Date;
        rejectExceptionalStartDate?: Date;
        secondPeriodId?: number;
        secondPeriodId1?: number;
        secondTerm?: string;
        secondTermAsset?: number;
        secondTermCorrected?: number;
        secondTermEquity?: number;
        secondTermMDVOZ?: string;
        secondTermOriginal?: number;
        secondTermRatio?: number;
        singlePartnerAtCurrentReport?: number;
        thirdPeriodId?: number;
        thirdPeriodId1?: number;
        thirdTerm?: string;
        thirdTermAsset?: number;
        thirdTermCorrected?: number;
        thirdTermEquity?: number;
        thirdTermMDVOZ?: string;
        thirdTermOriginal?: number;
        thirdTermRatio?: number;
    }
    interface TableParser {
    }
    interface TradeRegistryGazetteContract extends BOA.Common.Types.ContractBase {
        adtype?: string;
        cityName?: string;
        countyName?: string;
        customerid?: number;
        customerName?: string;
        district?: number;
        id?: number;
        noticeType?: number;
        number?: number;
        pageNumber?: number;
        personid?: number;
        province?: number;
        record?: string;
        recordDate?: Date;
        systemDate?: Date;
        title?: string;
    }
}
declare namespace BOA.Types.Kernel.Loans.Allotment.AllotmentConstants {
    interface TableHelper {
        column?: string;
        columnAmount?: string;
        columnHeader?: string;
        columnLink?: string;
        row?: string;
        sytle?: string;
        table?: string;
        tableTransparent?: string;
    }
}
declare namespace BOA.Types.Kernel.Loans.Allotment.Enums {
    export const enum AllotmentConstraintType {
        Collateral = 1,
        Limit = 2
    }
    export const enum AllotmentFormOpenType {
        EditModeDemand = 1,
        SecondApproveMode = 2,
        ReadOnlyMode = 3,
        CommitteeMode = 4,
        BranchManagerApproveMode = 5,
        RiskFollowApproveMode = 6,
        ThirdApproveMode = 7
    }
    export const enum AllotmentReason {
        NewCredit = 1,
        BranchTransfer = 2,
        Renewal = 3,
        CollateralChange = 4,
        LimitIncrease = 5,
        LimitDecrease = 6,
        LimitTypeChange = 7,
        InActiveLimitRenewal = 8,
        LimitIncreaseRed = 9,
        Configuration = 10,
        AutoAllotment = 11
    }
    export const enum AllotmentReviseStatusType {
        SendApprove = 1,
        Approved = 2,
        Rejected = 3
    }
    export const enum AllotmentScale {
        Micro = 1,
        Macro = 2
    }
    export const enum AllotmentSegment {
        BRSL = 0,
        KRMSL = 1,
        KOBI = 2,
        CMMCL = 3
    }
    export const enum AllotmentStatus {
        Active = 1,
        InActive = 2,
        Preparing = 3,
        Rejected = 4,
        SendApproval = 5,
        Cancelled = 6,
        Expired = 7,
        CuttOffRejected = 9,
        Freeze = 11,
        CancelInActive = 12,
        Suspense = 13,
        TransferToBranch = 14
    }
    export const enum AllotmentSubSegment {
        BRSL = 0,
        CMMCL = 1,
        CMMGK = 2,
        KIGK = 3,
        KOBI = 4,
        KRGK = 5,
        KRMSL = 6,
        MICGK = 7,
        MICRO = 8,
        OBI = 9,
        OBIGK = 10,
        TRADES = 11,
        TRDGK = 12,
        OZLGK = 13,
        OZL = 14
    }
    export const enum AllotmentTabScreen {
        AllotmentTab = 1,
        GeneralInfoTab = 3,
        InquiryTab = 2,
        AssetTab = 4,
        ConstructionTab = 5,
        FinancialAnalysisTab = 6,
        CommitteTab = 7
    }
    export const enum AllotmentTransactionType {
        Saved = 1,
        Updated = 2,
        Deleted = 3
    }
    export const enum AllotmentTranType {
        BranchSaved = 1,
        BranchSendApprove = 2,
        FirstApprove = 3,
        FirstApproverReturn = 4,
        FirstApproverReject = 5,
        RiskFollowApprove = 6,
        RiskFollowReturn = 7,
        RiskFollowReject = 8,
        SecondApprove = 9,
        SecondApproverReturn = 10,
        SecondApproverReject = 11,
        ThirdApprove = 12,
        ThirdApproverReturn = 13,
        ThirdApproverReject = 14,
        StatusReviseApproved = 15,
        ErrorFixingApproved = 16,
        AutoAllotment = 17,
        AllotmentInActivatedForNewOne = 18,
        SendCommitte = 19,
        ApproveCommitte = 20,
        Cancelled = 21,
        StatusReviseSendApprove = 22,
        StatusReviseReject = 23,
        ExceptionalApprove = 24,
        ExceptionalReject = 25,
        TakeBackCommittee = 26,
        Expired = 27,
        EjectFromGroupPassive = 28,
        Activated = 29,
        Transferred = 30
    }
    export const enum AnalysisDataType {
        Temporary = 1,
        Final = 2
    }
    export const enum AnalysisRequestTranType {
        AnalysisProcessFinished = 1,
        SendApprove = 2,
        SendCancelApprove = 3,
        BranchManagerApprove = 4,
        BranchManagerReject = 5,
        AuthorizeApprove = 6,
        AuthorizeReject = 7,
        AnalysisPoolApprove = 8,
        AnalysisComplete = 9,
        SendNeedExtraInfo = 10,
        AnalysisPoolReturn = 11,
        BranchExtraInfoApprove = 12,
        AnalysisProcessReturn = 13,
        CancelApprove = 14,
        CancelReject = 15
    }
    export const enum AuthorityType {
        Branch = 1,
        Region = 2,
        GM = 3
    }
    export const enum AuthorizedCustomerOpenType {
        EditMode = 1,
        EditApproveMode = 2,
        ReadOnlyMode = 3
    }
    export const enum AuthorizedCustomerStatus {
        Active = 1,
        Temporary = 2,
        Passive = 3
    }
    export const enum BalanceSheet {
        Financial = 1,
        NonFinancial = 0
    }
    export const enum BankInquiryStatus {
        SendApproval = 1,
        PoolApprove = 2,
        InquiryProcessing = 3,
        InquiryCompleted = 4,
        Rejected = 5,
        BranchControl = 6
    }
    export const enum BeneficiaryType {
        ManufacturerKOBI = 2
    }
    export const enum BlackListType {
        Bankrupt = 3,
        SuspensionBankrupt = 4
    }
    export const enum ChequeColorType {
        CollateralCheque = 1,
        AllCheque = 2
    }
    export const enum ChequeStatus {
        AtStub = 0,
        EnCashed = 1,
        Return = 3,
        Other = -1
    }
    export const enum CircularStatus {
        Preparing = 6,
        Active = 1,
        InActive = 2,
        SendApprove = 3,
        Approved = 4,
        Rejected = 5
    }
    export const enum CollateralChequeStatus {
        A = 0,
        IA = 1,
        KR = 2,
        TAH = 3
    }
    export const enum CollateralGrup {
        Guarantee = 1,
        CustomerCheque = 2,
        Pledge = 3,
        Other = 4
    }
    export const enum CommentType {
        Condition = 1,
        Branch = 2,
        HeadOffice = 3,
        Warning = 4
    }
    export const enum CommitteeStatus {
        CommitteNotStarted = 0,
        SendCommittee = 1,
        CommitteeApproved = 2
    }
    export const enum ConstraintType {
        Collateral = 1,
        Limit = 2
    }
    export const enum ConstructionBalanceType {
        Cost = 1,
        Income = 2
    }
    export const enum ConstructionDetachedSectionType {
        Commercial = 1,
        House = 2
    }
    export const enum ConstructionProjectType {
        AgainstFlat = 1,
        BuildSell = 2,
        UrbanRenewal = 3,
        ProfitSharing = 4
    }
    export const enum ConstructionType {
        Commitment = 0,
        Construction = 1
    }
    export const enum ControlType {
        All = 1,
        SelectedAllotment = 2,
        SelectedForm = 3,
        Analysis = 4,
        Test = 5
    }
    export const enum ControlValueType {
        Demand = 1,
        Approve = 2,
        SendApprove = 3,
        FirstApprove = 4
    }
    export const enum CreditApprovalSegmentType {
        AllotmentSegment = 1,
        MarketingSegment = 2
    }
    export const enum CreditRiskLimitIdType {
        CashCreditRisk = 1,
        NonCashCreditRisk = 2,
        LeasingCreditRisk = 4,
        BankCountCreditRisk = 90,
        TotalCreditRisk = 99
    }
    export const enum CustomerActivityType {
        DomesticBuy = 1,
        Importation = 2,
        DomesticSale = 3,
        Exportation = 4
    }
    export const enum CustomerHistoryType {
        Chronology = 1,
        History = 2
    }
    export const enum DataChangeStatus {
        Changable = 1,
        UnChangable = 0
    }
    export const enum DivitEditorMode {
        Read = 1,
        Write = 2
    }
    export const enum EstateType {
        RealEstate = 1,
        ActivityArea = 2
    }
    export const enum ExcelSchemaType {
        Schema1 = 1,
        Schema2 = 2
    }
    export const enum ExistControl {
        Exist = -1,
        NotExist = 1
    }
    export const enum FinancialDataType {
        Original = 1,
        Corrected = 2
    }
    export const enum FinancialTable {
        Active = 1,
        Passive = 2
    }
    export const enum FirmType {
        Firm = 1,
        Group = 2,
        FirmOrGroup = 3
    }
    export const enum FixedAssetType {
        FixedAsset = 1,
        Vehicle = 2
    }
    export const enum FormOpenType {
        New = 0,
        Search = 1,
        Open = 2,
        NewVersion = 3
    }
    export const enum FormType {
        Normal = 0,
        Update = 1,
        Copy = 2,
        Flow = 3,
        Search = 4
    }
    export const enum InformationNoteFormOpenType {
        OnTabForm = 1,
        OnListForm = 2
    }
    export const enum InformationNoteType {
        Opinion = 1,
        QualifiedOpinion = 2
    }
    export const enum InquiryType {
        TCMBBouncedCheckIndividual = 1,
        TCMBBouncedCheckCorp = 2,
        TCMBProtestedBills = 3,
        NonPerformingLoans = 4,
        LevyRecords = 5,
        KTBouncedChecks = 6,
        KTProtestedBills = 7,
        BlackListCorporation = 8,
        BlackListIndividual = 9,
        OtherBankLoanState = 10,
        FinancialOffense = 11,
        OtherBankInquery = 13,
        MarketInquiry = 14,
        UYAPCourtBannedBouncedCheck = 15,
        CourtBannedBouncedCheckIndividual = 16,
        CourtBannedBouncedCheckCorp = 17,
        KKBBouncedCheckIndividual = 18,
        KKBBouncedCheckCorp = 19,
        UYAPCourtDesicions = 20,
        TradeRegistryGazette = 21,
        EDistraint = 22,
        OfficialCorrespondance = 23,
        KKBTSGProactiveFile = 25,
        ProvisionalInjunctionChequeIndividual = 26,
        ProvisionalInjunctionChequeCorporation = 27
    }
    export const enum ItemApproveStatus {
        Return = 2,
        Approve = 1,
        SendApprove = 0
    }
    export const enum KKBRelationType {
        FirmOrShareHolder = 1,
        Warrantee = 2
    }
    export const enum LanguageType {
        Turkish = 1,
        English = 2
    }
    export const enum LimitType {
        Cash = 1,
        NonCash = 2,
        Total = 3
    }
    export const enum MainGroupCode {
        Cash = 8,
        NonCash = 9
    }
    export const enum MessageType {
        Warning = 1,
        Error = 2
    }
    export const enum ModelType {
        SASBURatingModel = 1,
        SASBaseRatingModel = 2,
        SASKobiModel = 3,
        MicroScoringModel = 4,
        BMR = 5
    }
    export const enum OutputType {
        Decision = 1,
        BranchDemand = 2,
        Cancel = 3
    }
    export const enum PersonType {
        Individual = 0,
        Corporate = 1
    }
    export const enum ProductConstraintType {
        CustomerType = 1,
        Nace = 2,
        Occupation = 3
    }
    export const enum ProductLevel {
        Main = 1,
        Sub = 2,
        Child = 3
    }
    export const enum ProductType {
        Cash = 1,
        NonCash = 2
    }
    export const enum ProjectSummaryType {
        Last12Months = 1,
        Last6Months = 2,
        AllMonths = 3
    }
    export const enum QueryType {
        Individual = 1,
        Corporate = 2
    }
    export const enum RatingItemType {
        None = 0,
        FinancialAnalysis = 1,
        CharacteristicFactor = 3
    }
    export const enum Region {
        AllRegion = -1
    }
    export const enum RejectReason {
        TransferToBranch = 5,
        TransferToBranchGK = 6,
        OtherIndividual = 73,
        OtherCorporate = 80
    }
    export const enum RejectReasonType {
        None = 0,
        FirstApprove = 1,
        RiskApprove = 2,
        SecondApprove = 3,
        ThirdApprove = 4
    }
    export const enum ReportOwner {
        VD = 1,
        SM = 2,
        SMM = 3,
        YMM = 4,
        Company = 6,
        BDR = 5
    }
    export const enum ReportType {
        Rating = 0,
        Scoring = 1,
        MicroScoringExtractOfAccount = 3,
        MicroScoringBalance = 4,
        BMR = 5,
        TBR = 2
    }
    export const enum ReviseApproveType {
        Branch = 1,
        RiskTrack = 2,
        SMERegion = 3,
        Retail = 4,
        Commercial = 5,
        Corporate = 6,
        SMEHead = 7
    }
    export const enum Sign {
        Positive = 1,
        Negative = 2,
        Neutral = 3
    }
    export const enum SourceType {
        Manuel = 1,
        Pdf = 2,
        Excel = 3
    }
    export const enum Status {
        Passive = 0,
        Active = 1
    }
    export const enum TransactionType {
        Saved = 1,
        Updated = 2,
        Deleted = 3
    }
    export const enum TransferResultType {
        NoProducts = 0,
        SuccessfulTransfer = 1,
        UnSuccessfulTransfer = 2
    }
    export const enum WarningType {
        CuttOff = 1,
        CreditRiskGroup = 2,
        Percent51 = 3,
        BDDKRiskGroup = 4,
        Establishment2Year = 5,
        MEMZUC30 = 6,
        MEMZUC40 = 7,
        QualifiedOpinion = 8
    }
    export const enum YesNo {
        No = 0,
        Yes = 1
    }
}
declare namespace BOA.Types.Kernel.Loans.DirectFundUtilization {
    interface Constants {
        allotmentLimit?: string;
        allowanceForCash?: string;
        application?: string;
        cash?: string;
        cashAmount?: string;
        cashFee?: string;
        collectionAccount?: string;
        enterCollectionAccount?: string;
        feeInfo?: string;
        feeType?: string;
        fullName?: string;
        getPaymentInfo?: string;
        getPaymentInfoError?: string;
        installment?: string;
        installmentAmount?: string;
        installmentFee?: string;
        installmentNumber?: string;
        onlyCashTransaction?: string;
        paymentInfo?: string;
        paymentSaved?: string;
        paymentSavedError?: string;
        period?: string;
        preConditionFeeType?: string;
        remainingLimit?: string;
        select?: string;
        selectUniversityAndEnterTaxNumber?: string;
        tCKN?: string;
        university?: string;
        universityInfo?: string;
        universityListErrorMessage?: string;
        universityListMessage?: string;
        universityPaymentPaneHeader?: string;
    }
    interface Enums {
    }
    interface InvoiceContract extends BOA.Common.Types.ContractBase {
        allotmentExtendedDayCount?: number;
        amount?: number;
        businessKey?: number;
        debtFer?: number;
        description?: string;
        dueDate?: Date;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        installmentCount?: number;
        invoiceId?: number;
        loanCommissionRate?: number;
        loanProfitRate?: number;
        nonPaymentPeriod?: number;
        number?: string;
        paymentTime?: any;
        purchaserId?: number;
        status?: number;
        supplierId?: number;
        systemDate?: Date;
        transactionDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InvoiceTransactionContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        invoiceId?: number;
        invoiceTransactionId?: number;
        projectId?: number;
        purchaserAccountNumber?: number;
        purchaserAccountSuffix?: number;
        supplierAccountNumber?: number;
        supplierAccountSuffix?: number;
        systemDate?: Date;
        transactionType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OnlinePaymentInquiryContract extends BOA.Common.Types.ContractBase {
        taxNumber?: string;
    }
    interface OnlinePaymentInquiryInformationContract extends BOA.Common.Types.ContractBase {
        criticalDescription?: string;
        isCashTransaction?: boolean;
        paymentAmountCash?: number;
        paymentAmountInstallment?: number;
        paymentDescription?: string;
        paymentId?: number;
        paymentParentId?: number;
        periodInfo?: string;
    }
    interface OnlinePaymentInquiryResultContract extends BOA.Common.Types.ContractBase {
        errorReason?: string;
        isError?: boolean;
        maximumInstallmentCount?: number;
        name?: string;
        paymentList?: BOA.Types.Kernel.Loans.DirectFundUtilization.OnlinePaymentInquiryInformationContract[];
        surname?: string;
        taxNumber?: string;
    }
    interface OnlinePaymentInstallmentContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        blockageDate?: Date;
        commissionAmount?: number;
        installmentDate?: Date;
        installmentNumber?: number;
    }
    interface OnlinePaymentResultContract extends BOA.Common.Types.ContractBase {
        errorReason?: string;
        resultCode?: number;
        transactionResult?: BOA.Types.Kernel.Loans.DirectFundUtilization.Enums.OnlineTransactionResult;
    }
    interface OnlinePaymentTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        description?: string;
        installmentCount?: number;
        installmentInformationList?: BOA.Types.Kernel.Loans.DirectFundUtilization.OnlinePaymentInstallmentContract[];
        isCash?: boolean;
        paymentDate?: Date;
        paymentId?: number;
        taxNumber?: string;
        transactionType?: BOA.Types.Kernel.Loans.DirectFundUtilization.Enums.OnlineTransactionType;
    }
    interface SupplierConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        hostIP?: string;
        hostName?: string;
        prodValue?: string;
        supplierConfigId?: number;
        supplierId?: number;
        systemDate?: Date;
        testValue?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SupplierContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        allotmentCommissionRate?: number;
        allotmentExtendedDayCount?: number;
        allotmentSupplierCommissionRate?: number;
        assuranceCommissionRate?: number;
        branchId?: number;
        cashBlockageDayCount?: number;
        configList?: BOA.Types.Kernel.Loans.DirectFundUtilization.SupplierConfigContract[];
        creditBlockageDayCount?: number;
        hostIP?: string;
        hostName?: string;
        installmentNumber?: number;
        loanCommissionRate?: number;
        loanProfitRate?: number;
        name?: string;
        parentSupplierId?: number;
        paymentTime?: any;
        status?: number;
        supplierId?: number;
        supplierType?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vendorId?: number;
    }
}
declare namespace BOA.Types.Kernel.Loans.DirectFundUtilization.Constants {
    interface Divit {
    }
    interface ParameterTypes {
    }
}
declare namespace BOA.Types.Kernel.Loans.DirectFundUtilization.Enums {
    export const enum OnlineTransactionResult {
        Success = 0,
        UnSuccess = 1,
        SystemError = 2
    }
    export const enum OnlineTransactionType {
        Cash = 0,
        OTS = 1,
        CreditCard = 2,
        MoneyTransfer = 3
    }
    export const enum Status {
        Active = 1,
        Passive = 2
    }
    export const enum SupplierType {
        WebService = 1,
        CorporateWebSite = 2,
        File = 3,
        Integration = 4
    }
}
declare namespace BOA.Types.Kernel.MailApprove {
    export const enum DivitMailState {
        EmailSended = 0,
        EmailHandled = 1
    }
    interface DivitMailContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        cc?: string;
        channelId?: number;
        content?: string;
        departmentId?: number;
        description?: string;
        divitFlowId?: string;
        divitId?: string;
        divitInstanceId?: string;
        divitMailBusinessKey?: string;
        divitMailDataId?: number;
        divitMailDefinitionCode?: string;
        divitMailDefinitionId?: number;
        divitMailDocumentList?: BOA.Types.Kernel.MailApprove.DivitMailDefinitionDocumentContract[];
        divitMailForwardFlowList?: BOA.Types.Kernel.MailApprove.DivitMailDefinitionForwardFlowContract[];
        divitMailSendMailList?: BOA.Types.Kernel.MailApprove.DivitMailDefinitionSendInformationContract[];
        divitMailSendSMSList?: BOA.Types.Kernel.MailApprove.DivitMailDefinitionSendInformationContract[];
        documentId?: number;
        from?: string;
        hostName?: string;
        instanceId?: number;
        isForwardWorkflow?: boolean;
        isSendMail?: boolean;
        isSendSMS?: boolean;
        mainBusinessKey?: number;
        registryId?: number;
        serializedObject?: number[];
        state?: BOA.Types.Kernel.MailApprove.DivitMailState;
        stateId?: number;
        subject?: string;
        to?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranUnitId?: number;
        userName?: string;
    }
    interface DivitMailDataTransactionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        businessKeyString?: string;
        divitMailDataId?: number;
        divitMailDefinitionCode?: string;
        hostIP?: string;
        hostName?: string;
        isError?: number;
        message?: string;
        systemDate?: Date;
        systemEndDate?: Date;
        userName?: string;
    }
    interface DivitMailDefinitionContract extends BOA.Common.Types.ContractBase {
        cc?: string;
        changeIndexId?: number;
        content?: string;
        description?: string;
        divitFlowId?: string;
        divitFlowIdOld?: string;
        divitId?: string;
        divitInstanceId?: string;
        divitMailCode?: string;
        divitMailId?: number;
        documentId?: number;
        hostIP?: string;
        hostName?: string;
        isForwardWorkflow?: boolean;
        isForwardWorkflowLabel?: string;
        isSendMail?: boolean;
        isSendMailLabel?: string;
        isSendSMS?: boolean;
        isSendSMSLabel?: string;
        registryId?: number;
        registryName?: string;
        subject?: string;
        systemDate?: Date;
        to?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DivitMailDefinitionDocumentContract extends BOA.Common.Types.ContractBase {
        divitMailDocumentId?: number;
        divitMailId?: number;
        documentId?: number;
        documentName?: string;
        isAdded?: boolean;
    }
    interface DivitMailDefinitionForwardFlowContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionName?: string;
        divitMailForwardFlowId?: number;
        divitMailId?: number;
        flowId?: number;
        flowName?: string;
        instanceStateId?: number;
        stateId?: number;
        stateName?: string;
    }
    interface DivitMailDefinitionSendInformationContract extends BOA.Common.Types.ContractBase {
        contentType?: number;
        contentTypeName?: string;
        divitMailId?: number;
        divitMailSendInformationId?: number;
        informationType?: number;
        to?: string;
    }
}
declare namespace BOA.Types.Kernel.MASAK {
    interface AccountContract extends BOA.Common.Types.ContractBase {
        accountInfo?: any;
    }
    interface XMLUtility {
    }
}
declare namespace BOA.Types.Kernel.MASAK.Properties {
    interface Resources {
        culture?: any;
        ekstre?: string;
        hesap?: string;
        hesapozet?: string;
        pos?: string;
        resourceManager?: any;
    }
}
declare namespace BOA.Types.Kernel.Messaging {
    export const enum UnwantedTextType {
        Beginning = 0,
        Extension = 1,
        Prefix = 2,
        Solution = 3,
        Tag = 4,
        String = 5,
        Class = 6
    }
    interface FileDataContract extends BOA.Common.Types.ContractBase {
        directory?: string;
        fileName?: string;
        fullName?: string;
    }
    interface IDynamicFormScriptExecuter {
    }
    interface MessagingCatalogueContract extends BOA.Common.Types.ContractBase {
        fieldType?: string;
        filePath?: string;
        groupName?: string;
        line?: string;
        propertyName?: string;
    }
    interface MessagingConstants {
    }
    interface MessagingContract extends BOA.Common.Types.ContractBase {
        className?: string;
        code?: number;
        descriptionTR?: string;
        groupId?: number;
        groupName?: string;
        hostIP?: string;
        hostName?: string;
        messageDetail?: BOA.Types.Kernel.Messaging.MessagingDetailContract[];
        propertyName?: string;
        severity?: number;
        severityText?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MessagingDetailContract extends BOA.Common.Types.ContractBase {
        code?: number;
        description?: string;
        language?: string;
        languageId?: number;
    }
    interface MessagingGroupContract extends BOA.Common.Types.ContractBase {
        className?: string;
        id?: number;
        name?: string;
    }
    interface ResultDataContract extends BOA.Common.Types.ContractBase {
        boaMessageText?: string;
        boaXamlMessageText?: string;
        className?: string;
        columnIndex?: number;
        endIndex?: number;
        environment?: number;
        fileName?: string;
        groupId?: number;
        groupName?: string;
        isNew?: boolean;
        knownTag?: string;
        messageText?: string;
        messageTextCorrection?: string;
        propertyName?: string;
        rowIndex?: number;
        severity?: number;
        solutionName?: string;
        startIndex?: number;
    }
    interface SeverityInfo {
        severityCode?: number;
        severityText?: string;
    }
}
declare namespace BOA.Types.Kernel.MKK {
    interface MKKDefinationListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerClass?: string;
        customerName?: string;
        customerStatus?: number;
        customerStatusTxt?: string;
        divitId?: string;
        errorReason?: string;
        hasMkkAccount?: boolean;
        hostIP?: string;
        hostName?: string;
        isCustomizedProfessional?: boolean;
        isCustomizedProfessionaltxt?: string;
        isFund?: boolean;
        isHaveComplianceTestingDoc?: boolean;
        isHaveComplianceTestingDoctxt?: string;
        isHaveMkkAccountTxt?: string;
        isOtherProduct?: boolean;
        isPrivateSector?: boolean;
        isPublic?: boolean;
        isQualified?: boolean;
        isQualifiedtxt?: string;
        isStock?: boolean;
        mKKState?: number;
        registrationNumber?: number;
        response?: string;
        score?: number;
        senderReferenceId?: string;
        state?: number;
        stateTxt?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wfInstanceId?: number;
    }
    interface MKSConstants {
    }
    interface MKSSendMessageContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        hostIp?: string;
        hostName?: string;
        messageId?: string;
        mKSSendMessageId?: number;
        mKSTransactionId?: string;
        processStatus?: string;
        request?: string;
        response?: string;
        responseCallback?: string;
        returnCode?: string;
        returnDescription?: string;
        sequenceNumber?: string;
        serviceName?: string;
        systemDate?: Date;
        tranDate?: Date;
        transactionKey?: string;
        transactionSource?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MutualFundTradeResultTypeContract extends BOA.Common.Types.ContractBase {
        responseHeader?: BOA.Types.Kernel.MKK.ResponseHeaderTypeContract;
        tradesInfoResult?: BOA.Types.Kernel.MKK.TradeRespTypeContract[];
    }
    interface ResponseHeaderTypeContract extends BOA.Common.Types.ContractBase {
        messageId?: string;
        mkkSenderReference?: string;
        receiverMember?: string;
        senderReference?: string;
        tid?: string;
    }
    interface TradeRespTypeContract extends BOA.Common.Types.ContractBase {
        orderSecNo?: string;
        responseCode?: string;
        responseDesc?: string;
    }
}
declare namespace BOA.Types.Kernel.MKK.MKSConstants {
    export const enum InvestorQueryItemsChoiceType1 {
        accountNumber = 0,
        identityNumber = 1,
        memberId = 2,
        taxIdentityNo = 3
    }
    interface MKSMessageStatus {
    }
    interface MKSProcessStatus {
    }
    interface MKSServices {
    }
    interface MKSTransactionSource {
    }
    interface MKSWebServiceParamCodes {
    }
    interface MKSWebServiceParamValues {
    }
    interface ParameterDefaultTypes {
    }
    interface ParameterTypes {
    }
    interface ProcessType {
    }
    interface SecurityTransfer {
    }
}
declare namespace BOA.Types.Kernel.MKK.MKSConstants.MKSWebServiceParamValues {
    interface Certificates {
    }
    interface MKSServices {
    }
}
declare namespace BOA.Types.Kernel.MoneyGram {
    export const enum CheckType {
        DG = 0,
        MTC = 1
    }
    export const enum dataTypeCode {
        theBoolean = 0,
        theString = 1,
        theInt = 2,
        theDecimal = 3,
        theDate = 4,
        theDatetime = 5,
        theTime = 6,
        theText = 7,
        theCntrycode = 8
    }
    export const enum ItemChoiceType {
        amountExcludingFee = 0,
        amountIncludingFee = 1,
        receiveAmount = 2
    }
    export const enum KtStatus {
        WaitingForApproval = 0,
        Sent = 1,
        Rejected = 2,
        Refund = 3,
        Cancel = 4
    }
    export const enum LegalIdType {
        SSN = 0,
        INT = 1,
        TAX = 2,
        ALN = 3
    }
    export const enum MgWorkflowTransactionType {
        Transaction = 1,
        Rectify = 2,
        Cancel = 3,
        Delete = 4
    }
    export const enum MoneyGramTransactionType {
        Send = 1,
        Receive = 2
    }
    export const enum PaymentType {
        CASH = 0,
        CARD = 1,
        CANCL = 2
    }
    export const enum PayoutType {
        ACHK = 0,
        CCHK = 1
    }
    export const enum PhotoIdType {
        DRV = 0,
        PAS = 1,
        STA = 2,
        GOV = 3,
        ALN = 4
    }
    export const enum ProductFieldInfoVisibility {
        REQ = 0,
        OPT = 1,
        SUP_OPT = 2,
        NOT_ALL = 3
    }
    export const enum ProductID {
        MoneyGramSend = 5,
        MoneyGramReceive = 6
    }
    export const enum ProductType {
        BP = 0,
        SEND = 1,
        RCV = 2
    }
    export const enum ProductVariant {
        EP = 0,
        PREPAY = 1,
        UBP = 2
    }
    export const enum RedirectInfoRedirectType {
        CURRENCY_REDIRECT = 0,
        COUNTRY_REDIRECT = 1,
        COUNTRY_CURRENCY_REDIRECT = 2
    }
    export const enum SendReversalReasonCode {
        NO_RCV_LOC = 0,
        WRONG_SERVICE = 1,
        NO_TQ = 2,
        INCORRECT_AMT = 3,
        MS_NOT_USED = 4
    }
    export const enum TestQuestionRequiredCountry {
        ZWE = 0,
        NGA = 1
    }
    export const enum ThirdPartyType {
        ORG = 0,
        NONE = 1,
        PERSON = 2
    }
    export const enum TransactionStatus {
        AVAIL = 0,
        CANCL = 1,
        RECVD = 2,
        REFND = 3,
        AFR = 4
    }
    interface AcknowledgeContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
    }
    interface AgentConnectContract extends BOA.Common.Types.ContractBase {
        countryContractList?: BOA.Types.Kernel.MoneyGram.CountryContract[];
        countryCurrencyContractList?: BOA.Types.Kernel.MoneyGram.CountryCurrencyContract[];
        currencyContractList?: BOA.Types.Kernel.MoneyGram.CurrencyContract[];
        deliveryOptionContractList?: BOA.Types.Kernel.MoneyGram.DeliveryOptionContract[];
        stateProvinceList?: BOA.Types.Kernel.MoneyGram.StateProvinceContract[];
    }
    interface AgentContract extends BOA.Common.Types.ContractBase {
        agentId?: string;
        branch?: number;
        branchName?: string;
        legacyId?: string;
        password?: string;
        posNumber?: string;
        posStatus?: string;
    }
    interface AgentLimitContract extends BOA.Common.Types.ContractBase {
        agentId?: string;
        index?: number;
        key?: string;
        productId?: number;
        value?: string;
    }
    interface AgentServiceBaseContract extends BOA.Common.Types.ContractBase {
        doCheckIn?: boolean;
        flags?: number;
        timeStamp?: Date;
    }
    interface AgentServiceContractBase extends BOA.Common.Types.ContractBase {
        agentID?: string;
        agentSequence?: string;
        apiVersion?: string;
        clientSoftwareVersion?: string;
        language?: string;
        recordingBranch?: number;
        timeStamp?: Date;
        token?: string;
        unitProfileID?: number;
        unitProfileIDSpecified?: boolean;
        userID?: string;
    }
    interface AgentServiceRequestBase extends BOA.Common.Types.TransactionRequestBase {
        agentID?: string;
        agentSequence?: string;
        apiVersion?: string;
        clientSoftwareVersion?: string;
        language?: string;
        recordingBranch?: number;
        timeStamp?: Date;
        token?: string;
        unitProfileID?: number;
        unitProfileIDSpecified?: boolean;
        userID?: string;
    }
    interface AmendTransactionContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        customerId?: number;
        operatorName?: string;
        receiverFirstName?: string;
        receiverLastName?: string;
        receiverLastName2?: string;
        referenceNumber?: string;
    }
    interface AmendTransactionResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        transactionSucceeded?: boolean;
    }
    interface BlackAndGrayListContract extends BOA.Common.Types.ContractBase {
        country?: string;
        customerInfo?: string;
        firstName?: string;
        hostName?: string;
        id?: number;
        identityNumber?: string;
        lastName?: string;
        listType?: number;
        listTypeName?: string;
        phoneNumber?: string;
        photoIdNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CountryContract extends BOA.Common.Types.ContractBase {
        baseReceiveCurrency?: string;
        countryCode?: string;
        countryLegacyCode?: string;
        countryName?: string;
        countryNameTR?: string;
        directedSendCountry?: boolean;
        kTReceiveActive?: boolean;
        kTSendActive?: boolean;
        mgDirectedSendCountry?: boolean;
        receiveActive?: boolean;
        sendActive?: boolean;
    }
    interface CountryCurrencyContract extends BOA.Common.Types.ContractBase {
        agentManaged?: string;
        countryCode?: string;
        deliveryOption?: string;
        indicativeRateAvailable?: boolean;
        localCurrency?: string;
        mgManaged?: string;
        receiveAgentAbbr?: string;
        receiveAgentId?: string;
        receiveCurrency?: string;
        sendCurrency?: string;
        validationExpr?: string;
    }
    interface CurrencyContract extends BOA.Common.Types.ContractBase {
        currencyCode?: string;
        currencyName?: string;
        currencyNameTR?: string;
        currencyPrecision?: number;
    }
    interface DeliveryOptionContract extends BOA.Common.Types.ContractBase {
        allowed?: string;
        deliveryOption?: string;
        deliveryOptionId?: number;
        deliveryOptionName?: string;
        deliveryOptionNameTR?: string;
        dssOption?: boolean;
    }
    interface DetailLookupContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        agentCheckAuthorizationNumber?: string;
        agentUseReceiveData?: string;
        agentUseSendData?: string;
        dateTimeSent?: Date;
        deliveryOption?: string;
        direction1?: string;
        direction2?: string;
        direction3?: string;
        expectedDateOfDelivery?: Date;
        expectedDateOfDeliverySpecified?: boolean;
        feeAmount?: number;
        freqCustCardNumber?: string;
        messageField1?: string;
        messageField2?: string;
        mgCustomerReceiveNumber?: string;
        operatorName?: string;
        partnerCustomerReceiveNumber?: string;
        receiveAgentAbbr?: string;
        receiveAgentID?: string;
        receiveAgentName?: string;
        receiveAmount?: number;
        receiveCountry?: string;
        receiveCurrency?: string;
        receiverAddress?: string;
        receiverAddress2?: string;
        receiverAddress3?: string;
        receiverCity?: string;
        receiverColonia?: string;
        receiverCountry?: string;
        receiverFirstName?: string;
        receiverLastName?: string;
        receiverLastName2?: string;
        receiverMiddleInitial?: string;
        receiverMunicipio?: string;
        receiverPhone?: string;
        receiverState?: string;
        receiverZipCode?: string;
        redirectIndicator?: boolean;
        redirectIndicatorSpecified?: boolean;
        redirectInfo?: BOA.Types.Kernel.MoneyGram.RedirectInfo;
        sendAmount?: number;
        sendCurrency?: string;
        senderAddress?: string;
        senderBirthCity?: string;
        senderBirthCountry?: string;
        senderCity?: string;
        senderCountry?: string;
        senderDOB?: Date;
        senderDOBSpecified?: boolean;
        senderFirstName?: string;
        senderHomePhone?: string;
        senderLastName?: string;
        senderLegalIdNumber?: string;
        senderLegalIdType?: BOA.Types.Kernel.MoneyGram.LegalIdType;
        senderLegalIdTypeSpecified?: boolean;
        senderMiddleInitial?: string;
        senderOccupation?: string;
        senderPassportIssueCity?: string;
        senderPassportIssueCountry?: string;
        senderPassportIssueDate?: Date;
        senderPassportIssueDateSpecified?: boolean;
        senderPhotoIdCountry?: string;
        senderPhotoIdNumber?: string;
        senderPhotoIdState?: string;
        senderPhotoIdType?: BOA.Types.Kernel.MoneyGram.PhotoIdType;
        senderPhotoIdTypeSpecified?: boolean;
        senderState?: string;
        senderZipCode?: string;
        testAnswer?: string;
        testQuestion?: string;
        thirdPartyAddress?: string;
        thirdPartyCity?: string;
        thirdPartyCountry?: string;
        thirdPartyDOB?: Date;
        thirdPartyDOBSpecified?: boolean;
        thirdPartyFirstName?: string;
        thirdPartyLastName?: string;
        thirdPartyLegalIdNumber?: string;
        thirdPartyLegalIdType?: BOA.Types.Kernel.MoneyGram.LegalIdType;
        thirdPartyLegalIdTypeSpecified?: boolean;
        thirdPartyMiddleInitial?: string;
        thirdPartyOccupation?: string;
        thirdPartyOrg?: string;
        thirdPartyState?: string;
        thirdPartyZipCode?: string;
        transactionStatus?: BOA.Types.Kernel.MoneyGram.TransactionStatus;
        transactionStatusTR?: string;
        validIndicator?: boolean;
    }
    interface DirectedSendRegistrationFieldsContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        deliveryOption?: string;
        receiveAgentID?: string;
        receiveCountry?: string;
        receiveCurrency?: string;
    }
    interface DirectedSendRegistrationFieldsResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        fqdoInfo?: BOA.Types.Kernel.MoneyGram.FQDOInfo;
        registrationFieldInfo?: BOA.Types.Kernel.MoneyGram.RegistrationFieldInfoContract[];
    }
    interface DynamicFieldInfo {
        dataTypeCode?: BOA.Types.Kernel.MoneyGram.dataTypeCode;
        defaultValue?: string;
        displayOrder?: number;
        displayOrderSpecified?: boolean;
        enumerated?: boolean;
        enumeratedValues?: BOA.Types.Kernel.MoneyGram.EnumeratedValueInfo[];
        exampleFormat?: string;
        fieldLabel?: string;
        fieldMax?: number;
        fieldMaxSpecified?: boolean;
        fieldMin?: number;
        fieldMinSpecified?: boolean;
        fieldScale?: number;
        fieldScaleSpecified?: boolean;
        validationRegEx?: string;
        xmlTag?: string;
    }
    interface EnumeratedValueInfo {
        label?: string;
        value?: string;
    }
    interface FeeContract extends BOA.Common.Types.ContractBase {
        deliveryOptDisplayName?: string;
        deliveryOptId?: string;
        deliveryOption?: string;
        deliveryOptionNameTR?: string;
        estimatedExchangeRate?: number;
        estimatedExchangeRateSpecified?: boolean;
        estimatedReceiveAmount?: number;
        estimatedReceiveAmountSpecified?: boolean;
        estimatedReceiveCurrency?: string;
        feeAmount?: number;
        receiveAgentAbbreviation?: string;
        receiveAgentID?: string;
        receiveAgentName?: string;
        receiveAmountAltered?: boolean;
        receiveCountry?: string;
        receiveCountryName?: string;
        receiveCurrencyName?: string;
        regAuthText?: string;
        revisedInformationalFee?: boolean;
        revisedInformationalFeeSpecified?: boolean;
        saLimitAvailable?: number;
        saLimitAvailableSpecified?: boolean;
        selectedSentCountryContract?: BOA.Types.Kernel.MoneyGram.CountryContract;
        sendAmount?: number;
        sendAmountSpecified?: boolean;
        sendCurrency?: string;
        sendCurrencyName?: string;
        speedOfDeliveryText?: string;
        totalAmount?: number;
        totalAmountSpecified?: boolean;
        validExchangeRate?: number;
        validExchangeRateSpecified?: boolean;
        validIndicator?: boolean;
        validIndicatorSpecified?: boolean;
        validReceiveAmount?: number;
        validReceiveAmountSpecified?: boolean;
        validReceiveCurrency?: string;
    }
    interface FeeLookUpContract extends BOA.Common.Types.ContractBase {
        allOptions?: boolean;
        allOptionsSpecified?: boolean;
        branchId?: number;
        defaultInformationalFee?: number;
        defaultInformationalFeeSpecified?: boolean;
        defaultMaxFee?: boolean;
        defaultMaxFeeSpecified?: boolean;
        deliveryOption?: string;
        freqCustCardNumber?: string;
        indicativeReceiveCurrency?: string;
        issueFreqCustCard?: boolean;
        issueFreqCustCardSpecified?: boolean;
        item?: number;
        itemElementName?: BOA.Types.Kernel.MoneyGram.ItemChoiceType;
        mgCustomerReceiveNumber?: string;
        operatorName?: string;
        productType?: BOA.Types.Kernel.MoneyGram.ProductType;
        productVariant?: BOA.Types.Kernel.MoneyGram.ProductVariant;
        productVariantSpecified?: boolean;
        promotionCode?: string;
        receiveAgentID?: string;
        receiveCode?: string;
        receiveCountry?: string;
        receiveCurrency?: string;
        sendCurrency?: string;
        serviceOfferingID?: string;
    }
    interface FieldsForProductContract extends BOA.Common.Types.ContractBase {
        dynamicFieldInfo?: BOA.Types.Kernel.MoneyGram.DynamicFieldInfo[];
        fqdoInfo?: BOA.Types.Kernel.MoneyGram.FQDOInfo;
        productFieldInfo?: BOA.Types.Kernel.MoneyGram.ProductFieldInfo[];
    }
    interface FQDOInfo {
        deliveryOption?: string;
        deliveryOptionDisplayName?: string;
        receiveAgentAbbr?: string;
        receiveAgentID?: string;
        receiveAgentName?: string;
        receiveCountry?: string;
        receiveCurrency?: string;
        registrationAuthorizationText?: string;
        speedOfDeliveryText?: string;
    }
    interface GetFQDOByCustomerReceiveNumberContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        mgCustomerReceiveNumber?: string;
    }
    interface GetFQDOByCustomerReceiveNumberResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        fqdoInfo?: BOA.Types.Kernel.MoneyGram.FQDOInfo;
        registrationStatusCode?: string;
    }
    interface KeyValuePair {
        fieldValue?: string;
        xmlTag?: string;
    }
    interface MGCustomerContract extends BOA.Common.Types.ContractBase {
        accountAdditionalNumber?: number;
        accountFec?: number;
        accountNumber?: number;
        address?: string;
        birthDay?: Date;
        birthPlace?: string;
        blackListVerificationType?: number;
        city?: string;
        consumerId?: string;
        countryCode?: string;
        fatherName?: string;
        firstName?: string;
        id?: number;
        identityName?: string;
        lastName?: string;
        legalIdNumber?: string;
        legalIdType?: string;
        middleInitial?: string;
        nationality?: boolean;
        nationalityType?: boolean;
        occupation?: string;
        phoneNumber?: string;
        photoIdCountry?: string;
        photoIdNumber?: string;
        photoIdNumberForDoc?: string;
        photoIdState?: string;
        photoIdType?: string;
        secondLastName?: string;
        stateProvinceCode?: string;
        taxNumber?: string;
        tCKNNumber?: string;
        town?: string;
        tranPurpose?: string;
        zipCode?: string;
    }
    interface MoneyGramContractBase extends BOA.Common.Types.ContractBase {
        doCheckIn?: boolean;
        flags?: number;
        timeStamp?: Date;
    }
    interface MoneyGramFrequentCustomerCardLookupContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        freqCustCardNumber?: string;
        maxRowsToReturn?: number;
        maxRowsToReturnSpecified?: boolean;
    }
    interface MoneyGramFrequentCustomerCardLookupResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        history?: BOA.Types.Kernel.MoneyGram.MoneyGramFrequentCustomerLookupInfo;
    }
    interface MoneyGramFrequentCustomerLookupInfo {
        accountNumber?: number;
        accountSuffix?: number;
        activeFreqCustCardNumber?: string;
        agentFrequentCustomerNumber?: string;
        consumerId?: string;
        deliveryOption?: string;
        direction1?: string;
        direction2?: string;
        direction3?: string;
        mgCustomerReceiveNumber?: string;
        partnerCustomerReceiveNumber?: string;
        receiveAgentID?: string;
        receiveAgentName?: string;
        receiveCurrency?: string;
        receiverAddress?: string;
        receiverAddress2?: string;
        receiverAddress3?: string;
        receiverCity?: string;
        receiverColonia?: string;
        receiverCountry?: string;
        receiverFirstName?: string;
        receiverLastName?: string;
        receiverLastName2?: string;
        receiverMiddleInitial?: string;
        receiverMunicipio?: string;
        receiverPhone?: string;
        receiverState?: string;
        receiverZipCode?: string;
        sendAmount?: number;
        sendAmountSpecified?: boolean;
        sendCurrency?: string;
        senderAddress?: string;
        senderCity?: string;
        senderCountry?: string;
        senderFirstName?: string;
        senderHomePhone?: string;
        senderLastName?: string;
        senderMiddleInitial?: string;
        senderPhotoIdNumber?: string;
        senderPhotoIdType?: string;
        senderState?: string;
        senderZipCode?: string;
        transactionType?: string;
    }
    interface MoneyGramFrequentCustomerPhoneLookupContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        customerPhone?: string;
        maxRowsToReturn?: number;
        maxRowsToReturnSpecified?: boolean;
    }
    interface MoneyGramFrequentCustomerPhoneLookupResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        history?: BOA.Types.Kernel.MoneyGram.MoneyGramFrequentCustomerLookupInfo[];
    }
    interface MoneyGramListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        behalfId?: string;
        isGray?: boolean;
        kTStatu?: number;
        mGBranchId?: number;
        moneyGramTransactionType?: BOA.Types.Kernel.MoneyGram.MoneyGramTransactionType;
        receiveCountryCode?: string;
        receiverLastName?: string;
        receiverName?: string;
        receiverPhone?: string;
        referenceNumber?: string;
        sendCountryCode?: string;
        senderLastName?: string;
        senderName?: string;
        senderPhone?: string;
        senderTCKN?: string;
        tranBeginDate?: Date;
        tranEndDate?: Date;
    }
    interface MoneyGramPromotionalMessageInfo {
        messageID?: string;
        variable1?: string;
        variable2?: string;
        variable3?: string;
        variable4?: string;
    }
    interface MoneyGramReceiveContract extends BOA.Common.Types.ContractBase {
        additionalDocumentationNeeded?: boolean;
        additionalDocumentationNeededSpecified?: boolean;
        agentCheckAmount?: number;
        agentCheckAmountSpecified?: boolean;
        agentCheckNumber?: string;
        agentCheckType?: BOA.Types.Kernel.MoneyGram.CheckType;
        agentCheckTypeSpecified?: boolean;
        agentUseReceiveData?: string;
        consumerId?: string;
        customerCheckAmount?: number;
        customerCheckAmountSpecified?: boolean;
        customerCheckNumber?: string;
        customerCheckType?: BOA.Types.Kernel.MoneyGram.CheckType;
        customerCheckTypeSpecified?: boolean;
        fieldValues?: BOA.Types.Kernel.MoneyGram.KeyValuePair[];
        freqCustCardNumber?: string;
        marketingOptIn?: boolean;
        marketingOptInSpecified?: boolean;
        operatorName?: string;
        pcTerminalNumber?: string;
        purposeOfTransaction?: string;
        receiveCurrency?: string;
        receiverAddress?: string;
        receiverBirthCity?: string;
        receiverBirthCountry?: string;
        receiverCity?: string;
        receiverCountry?: string;
        receiverDOB?: Date;
        receiverDOBSpecified?: boolean;
        receiverEmailAddress?: string;
        receiverLegalIdExpDate?: Date;
        receiverLegalIdExpDateSpecified?: boolean;
        receiverLegalIdIssueCountry?: string;
        receiverLegalIdIssueDate?: Date;
        receiverLegalIdIssueDateSpecified?: boolean;
        receiverLegalIdNumber?: string;
        receiverLegalIdStored?: boolean;
        receiverLegalIdStoredSpecified?: boolean;
        receiverLegalIdType?: BOA.Types.Kernel.MoneyGram.LegalIdType;
        receiverLegalIdTypeSpecified?: boolean;
        receiverMobilePhone?: string;
        receiverNationalityAtBirthCountry?: string;
        receiverNationalityCountry?: string;
        receiverOccupation?: string;
        receiverPassportExpDate?: Date;
        receiverPassportExpDateSpecified?: boolean;
        receiverPassportIssueCity?: string;
        receiverPassportIssueCountry?: string;
        receiverPassportIssueDate?: Date;
        receiverPassportIssueDateSpecified?: boolean;
        receiverPassportNumber?: string;
        receiverPassportStored?: boolean;
        receiverPassportStoredSpecified?: boolean;
        receiverPhone?: string;
        receiverPhotoIdCountry?: string;
        receiverPhotoIdExpDate?: Date;
        receiverPhotoIdExpDateSpecified?: boolean;
        receiverPhotoIdIssueDate?: Date;
        receiverPhotoIdIssueDateSpecified?: boolean;
        receiverPhotoIdNumber?: string;
        receiverPhotoIdState?: string;
        receiverPhotoIdStored?: boolean;
        receiverPhotoIdStoredSpecified?: boolean;
        receiverPhotoIdType?: BOA.Types.Kernel.MoneyGram.PhotoIdType;
        receiverPhotoIdTypeSpecified?: boolean;
        receiverState?: string;
        receiverZipCode?: string;
        referenceNumber?: string;
        relationToSender?: string;
        thirdPartyAddress?: string;
        thirdPartyCity?: string;
        thirdPartyCountry?: string;
        thirdPartyDOB?: Date;
        thirdPartyDOBSpecified?: boolean;
        thirdPartyFirstName?: string;
        thirdPartyLastName?: string;
        thirdPartyLegalIdExpDate?: Date;
        thirdPartyLegalIdExpDateSpecified?: boolean;
        thirdPartyLegalIdIssueCountry?: string;
        thirdPartyLegalIdIssueDate?: Date;
        thirdPartyLegalIdIssueDateSpecified?: boolean;
        thirdPartyLegalIdNumber?: string;
        thirdPartyLegalIdStored?: boolean;
        thirdPartyLegalIdStoredSpecified?: boolean;
        thirdPartyLegalIdType?: BOA.Types.Kernel.MoneyGram.LegalIdType;
        thirdPartyLegalIdTypeSpecified?: boolean;
        thirdPartyMiddleInitial?: string;
        thirdPartyOccupation?: string;
        thirdPartyOrg?: string;
        thirdPartyPhotoIdExpDate?: Date;
        thirdPartyPhotoIdExpDateSpecified?: boolean;
        thirdPartyPhotoIdIssueCountry?: string;
        thirdPartyPhotoIdIssueDate?: Date;
        thirdPartyPhotoIdIssueDateSpecified?: boolean;
        thirdPartyPhotoIdNumber?: string;
        thirdPartyPhotoIdStored?: boolean;
        thirdPartyPhotoIdStoredSpecified?: boolean;
        thirdPartyPhotoIdType?: BOA.Types.Kernel.MoneyGram.PhotoIdType;
        thirdPartyPhotoIdTypeSpecified?: boolean;
        thirdPartyState?: string;
        thirdPartyZipCode?: string;
    }
    interface MoneyGramReceiveDetailInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        agentName?: string;
        agentNumber?: string;
        checkNumber?: string;
        payoutType?: BOA.Types.Kernel.MoneyGram.PayoutType;
        receiveAmount?: number;
        receiveCurrency?: string;
        receiverName?: string;
        referenceNumber?: string;
        time?: Date;
    }
    interface MoneyGramReceiveDetailReportContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        activityDate?: Date;
    }
    interface MoneyGramReceiveDetailReportResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        reportInfo?: BOA.Types.Kernel.MoneyGram.MoneyGramReceiveDetailInfoContract[];
        reportInfo2?: BOA.Types.Kernel.MoneyGram.MoneyGramReceiveDetailInfoContract[];
    }
    interface MoneyGramReceiveResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        agentCheckAuthorizationNumber?: string;
        businessKey?: number;
        productType?: BOA.Types.Kernel.MoneyGram.ProductType;
        referenceNumber?: string;
        token?: string;
        transactionDateTime?: Date;
        transactionDateTimeSpecified?: boolean;
    }
    interface MoneyGramReceiveSummaryInfoContract extends BOA.Common.Types.ContractBase {
        agentName?: string;
        agentNumber?: string;
        receiveAmount?: number;
        receiveCurrency?: string;
    }
    interface MoneyGramReceiveSummaryReportContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        activityDate?: Date;
    }
    interface MoneyGramReceiveSummaryReportResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        reportInfo?: BOA.Types.Kernel.MoneyGram.MoneyGramReceiveSummaryInfoContract[];
        reportInfo2?: BOA.Types.Kernel.MoneyGram.MoneyGramReceiveSummaryInfoContract[];
    }
    interface MoneyGramReceiveTransactionsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        countryName?: string;
        customer?: string;
        receiveAmount?: number;
        receiveCurrency?: string;
        referenceNumber?: string;
        sendCurrency?: string;
        transactionDate?: Date;
    }
    interface MoneyGramReceiveTransactionsRequestContract extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        beginDate?: Date;
        countryCode?: string;
        endDate?: Date;
        lastName?: string;
        maxAmount?: number;
        minAmount?: number;
        receiverName?: string;
        referenceNumber?: string;
    }
    interface MoneyGramSendDetailInfoContract extends BOA.Common.Types.ContractBase {
        agentName?: string;
        agentNumber?: string;
        faceAmount?: number;
        feeAmount?: number;
        paymentType?: BOA.Types.Kernel.MoneyGram.PaymentType;
        referenceNumber?: string;
        time?: Date;
        totalAmount?: number;
    }
    interface MoneyGramSendDetailReportContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        activityDate?: Date;
    }
    interface MoneyGramSendDetailReportResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        reportInfo?: BOA.Types.Kernel.MoneyGram.MoneyGramSendDetailInfoContract[];
        reportInfo2?: BOA.Types.Kernel.MoneyGram.MoneyGramSendDetailInfoContract[];
    }
    interface MoneyGramSendingTransactionsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        customer?: string;
        receiveAmount?: number;
        receiveCountry?: string;
        receiveCurrency?: string;
        referenceNumber?: string;
        sendCurrency?: string;
        transactionDate?: Date;
    }
    interface MoneyGramSendingTransactionsRequestContract extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        beginDate?: Date;
        countryCode?: string;
        endDate?: Date;
        lastName?: string;
        maxAmount?: number;
        minAmount?: number;
        receiverName?: string;
    }
    interface MoneyGramSendSummaryInfoContract extends BOA.Common.Types.ContractBase {
        agentName?: string;
        agentNumber?: string;
        faceAmount?: number;
        feeAmount?: number;
        totalAmount?: number;
    }
    interface MoneyGramSendSummaryReportContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        activityDate?: Date;
    }
    interface MoneyGramSendSummaryReportResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        reportInfo?: BOA.Types.Kernel.MoneyGram.MoneyGramSendSummaryInfoContract[];
        reportInfo2?: BOA.Types.Kernel.MoneyGram.MoneyGramSendSummaryInfoContract[];
    }
    interface MoneyGramTranContract extends BOA.Common.Types.ContractBase {
        agentContract?: BOA.Types.Kernel.MoneyGram.AgentContract;
        id?: number;
        isFeeRefund?: boolean;
        isRefund?: boolean;
        messageField1?: string;
        messageField2?: string;
        receiveCountry?: string;
        receiveCountryName?: string;
        referenceNumber?: string;
        sendCountry?: string;
        sendMoneygramContract?: BOA.Types.Kernel.MoneyGram.SendMoneyGramContract;
        testAnswer?: string;
        testQuestion?: string;
        thirdPartyType?: string;
        transactionId?: number;
    }
    interface MoneyGramTransactionContract extends BOA.Common.Types.ContractBase {
        agentId?: string;
        amount?: number;
        amountTL?: number;
        amountToBePayed?: number;
        amountToChange?: number;
        approvalLimit?: number;
        behalfId?: string;
        behalfName?: string;
        behalfPhone?: string;
        branchFeeAmount?: number;
        commissionType?: number;
        commissionTypeName?: string;
        complianceVisibility?: boolean;
        correspondingCompanyReceiveFecCode?: number;
        correspondingCompanySendFecCode?: number;
        counterAmount?: number;
        customerRecieveNumber?: string;
        customerRecieveNumberVisibility?: boolean;
        deliveryOption?: string;
        deliveryOptionNameTR?: string;
        direction1?: string;
        direction2?: string;
        direction3?: string;
        exchangeRate?: number;
        feeAmount?: number;
        feeTotalAmount?: number;
        feeTotalAmountUSD?: number;
        feeValidExchangeRate?: number;
        feeValidReceiveAmount?: number;
        fromXTM?: boolean;
        fxBusinessKey?: number;
        fxProfit?: number;
        fxRate?: number;
        homeDeliveryVisibility?: boolean;
        hostName?: string;
        id?: number;
        instanceId?: any;
        isFeeRefund?: boolean;
        isGray?: boolean;
        isRefund?: boolean;
        ktStatu?: number;
        ktStatuText?: string;
        legalIdVisibility?: boolean;
        manualPass?: boolean;
        messageField1?: string;
        messageField2?: string;
        paymentType?: boolean;
        photoIdVisibility?: boolean;
        productType?: string;
        productTypeText?: string;
        receiveAgentId?: string;
        receiveCountry?: string;
        receiveCountryName?: string;
        receiveCurrency?: string;
        receiveCurrencyName?: string;
        receivedCurrencyContract?: BOA.Types.Kernel.MoneyGram.CountryCurrencyContract;
        receiverAddressVisibility?: boolean;
        receiverCustomer?: BOA.Types.Kernel.MoneyGram.MGCustomerContract;
        receiverId?: number;
        recordingTime?: Date;
        recordingUser?: string;
        referenceNumber?: string;
        reversalDate?: Date;
        reversalReasonCode?: string;
        searchedAmount?: number;
        selectedSentCountryContract?: BOA.Types.Kernel.MoneyGram.CountryContract;
        sendAmount?: number;
        sendCountry?: string;
        sendCountryName?: string;
        sendCurrency?: string;
        sendCurrencyName?: string;
        senderCustomer?: BOA.Types.Kernel.MoneyGram.MGCustomerContract;
        senderId?: number;
        senderZipCodeVisibility?: boolean;
        sentDate?: Date;
        tCKNPassNumber?: string;
        testAnswer?: string;
        testQuestion?: string;
        testQuestionVisibility?: boolean;
        thirdPartyType?: string;
        tlAmountToChange?: number;
        tranPurpose?: string;
        transactionBranch?: string;
        transactionBranchId?: number;
        transactionBranchName?: string;
        transactionBusinessKey?: number;
        transactionCustomerBranchId?: number;
        transactionDate?: Date;
        transactionFec?: number;
        transactionReference?: string;
        unitId?: number;
        xTMBranch?: number;
    }
    interface ProductFieldInfo {
        dataType?: BOA.Types.Kernel.MoneyGram.dataTypeCode;
        dataTypeSpecified?: boolean;
        fieldMax?: number;
        fieldMaxSpecified?: boolean;
        fieldMin?: number;
        fieldMinSpecified?: boolean;
        scale?: number;
        scaleSpecified?: boolean;
        visibility?: BOA.Types.Kernel.MoneyGram.ProductFieldInfoVisibility;
        xmlTag?: string;
    }
    interface ProductProfileItemContract extends BOA.Common.Types.ContractBase {
        index?: number;
        key?: string;
        productID?: number;
        value?: string;
    }
    interface ProfileContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
    }
    interface ProfileItemContract extends BOA.Common.Types.ContractBase {
        index?: number;
        key?: string;
        value?: string;
    }
    interface ProfileResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        productProfileItem?: BOA.Types.Kernel.MoneyGram.ProductProfileItemContract[];
        profileItem?: BOA.Types.Kernel.MoneyGram.ProfileItemContract[];
    }
    interface QueryRegistrationByNamesContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        deliveryOption?: string;
        receiveAgentID?: string;
        receiveCountry?: string;
        receiveCurrency?: string;
        receiverFirstName?: string;
        receiverLastName?: string;
        receiverPhoneNumber?: string;
        registrationCreatorFirstName?: string;
        registrationCreatorLastName?: string;
        registrationCreatorPhoneNumber?: string;
    }
    interface QueryRegistrationByNamesResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        mGCustomerReceiveNumber?: string;
        registrationStatusCode?: string;
    }
    interface ReceiveReversalContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        receiveAmount?: number;
        referenceNumber?: string;
    }
    interface ReceiveReversalResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        transactionDateTime?: Date;
        transactionDateTimeSpecified?: boolean;
    }
    interface RedirectInfo {
        feeDifference?: number;
        feeDifferenceSpecified?: boolean;
        newExchangeRate?: number;
        newExchangeRateSpecified?: boolean;
        newReceiveAmount?: number;
        newReceiveAmountSpecified?: boolean;
        newReceiveCurrency?: string;
        newSendFee?: number;
        newSendFeeSpecified?: boolean;
        originalExchangeRate?: number;
        originalExchangeRateSpecified?: boolean;
        originalReceiveAmount?: number;
        originalReceiveAmountSpecified?: boolean;
        originalReceiveCountry?: string;
        originalReceiveCurrency?: string;
        originalSendAmount?: number;
        originalSendAmountSpecified?: boolean;
        originalSendCurrency?: string;
        originalSendFee?: number;
        originalSendFeeSpecified?: boolean;
        redirectType?: BOA.Types.Kernel.MoneyGram.RedirectInfoRedirectType;
        redirectTypeSpecified?: boolean;
    }
    interface ReferenceNumberInfoContract extends BOA.Common.Types.ContractBase {
        receiverFirstName?: string;
        receiverLastName?: string;
        referenceNumber?: string;
        senderLastName?: string;
        transactionStatus?: BOA.Types.Kernel.MoneyGram.TransactionStatus;
        transactionStatusSpecified?: boolean;
        transactionStatusTR?: string;
    }
    interface ReferenceNumberNameContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        receiverFirstName?: string;
        receiverLastName?: string;
        senderLastName?: string;
    }
    interface ReferenceNumberNameResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        referenceInfo?: BOA.Types.Kernel.MoneyGram.ReferenceNumberInfoContract[];
    }
    interface ReferenceNumberPhoneContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        senderHomePhone?: string;
    }
    interface ReferenceNumberPhoneResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        referenceInfo?: BOA.Types.Kernel.MoneyGram.ReferenceNumberInfoContract[];
    }
    interface ReferenceNumberReturnContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        agentCheckAmount?: number;
        agentCheckAmountSpecified?: boolean;
        agentCheckAuthorizationNumber?: string;
        agentCheckNumber?: string;
        customerCheckAmount?: number;
        customerCheckAmountSpecified?: boolean;
        customerCheckNumber?: string;
        dateTimeSent?: Date;
        dateTimeSentSpecified?: boolean;
        deliveryOption?: string;
        direction1?: string;
        direction2?: string;
        direction3?: string;
        expectedDateOfDelivery?: Date;
        expectedDateOfDeliverySpecified?: boolean;
        indicativeExchangeRate?: number;
        indicativeExchangeRateSpecified?: boolean;
        indicativeReceiveAmount?: number;
        indicativeReceiveAmountSpecified?: boolean;
        indicativeReceiveCurrency?: string;
        messageField1?: string;
        messageField2?: string;
        mgCustomerReceiveNumber?: string;
        okForAgent?: boolean;
        okForAgentSpecified?: boolean;
        originalExchangeRate?: number;
        originalExchangeRateSpecified?: boolean;
        originalSendCurrency?: string;
        originalSendFee?: number;
        originalSendFeeSpecified?: boolean;
        originatingCountry?: string;
        partnerCustomerReceiveNumber?: string;
        receiveAgentAbbr?: string;
        receiveAgentID?: string;
        receiveAgentName?: string;
        receiveAmount?: number;
        receiveAmountSpecified?: boolean;
        receiveCurrency?: string;
        receiverAddress?: string;
        receiverAddress2?: string;
        receiverAddress3?: string;
        receiverCity?: string;
        receiverColonia?: string;
        receiverCountry?: string;
        receiverFirstName?: string;
        receiverLastName?: string;
        receiverLastName2?: string;
        receiverMiddleInitial?: string;
        receiverMunicipio?: string;
        receiverPhone?: string;
        receiverState?: string;
        receiverZipCode?: string;
        redirectIndicator?: boolean;
        redirectIndicatorSpecified?: boolean;
        redirectInfo?: BOA.Types.Kernel.MoneyGram.RedirectInfo;
        referenceNumber?: string;
        senderAddress?: string;
        senderCity?: string;
        senderCountry?: string;
        senderFirstName?: string;
        senderHomePhone?: string;
        senderLastName?: string;
        senderMiddleInitial?: string;
        senderState?: string;
        senderZipCode?: string;
        testAnswer?: string;
        testQuestion?: string;
        transactionStatus?: BOA.Types.Kernel.MoneyGram.TransactionStatus;
        transactionStatusSpecified?: boolean;
        transactionStatusTR?: string;
        validIndicator?: boolean;
    }
    interface RegistrationFieldInfoContract extends BOA.Common.Types.ContractBase {
        dataTypeCode?: BOA.Types.Kernel.MoneyGram.dataTypeCode;
        defaultValue?: string;
        displayOrder?: number;
        displayOrderSpecified?: boolean;
        enumerated?: boolean;
        enumeratedValues?: BOA.Types.Kernel.MoneyGram.EnumeratedValueInfo[];
        exampleFormat?: string;
        fieldLabel?: string;
        fieldMax?: number;
        fieldMaxSpecified?: boolean;
        fieldMin?: number;
        fieldMinSpecified?: boolean;
        fieldScale?: number;
        fieldScaleSpecified?: boolean;
        fieldValue?: string;
        hidden?: boolean;
        readOnly?: boolean;
        required?: boolean;
        validationRegEx?: string;
        xmlTag?: string;
    }
    interface RequestForProductContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        consumerId?: string;
        deliveryOption?: string;
        productType?: BOA.Types.Kernel.MoneyGram.ProductType;
        productVariant?: BOA.Types.Kernel.MoneyGram.ProductVariant;
        productVariantSpecified?: boolean;
        receiveAgentID?: string;
        receiveCountry?: string;
        receiveCurrency?: string;
        sendCurrency?: string;
        serviceOfferingID?: string;
        thirdPartyType?: BOA.Types.Kernel.MoneyGram.ThirdPartyType;
    }
    interface RezervationsContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        birthDate?: Date;
        businessKey?: number;
        channelId?: number;
        fatherName?: string;
        hostName?: string;
        identityName?: string;
        occupation?: string;
        photoIdCountry?: string;
        photoIdNumber?: string;
        photoIdType?: string;
        placeOfBirth?: string;
        productType?: string;
        purpose?: string;
        receiveCountry?: string;
        receiveCurrency?: string;
        receiverAddress?: string;
        receiverCity?: string;
        receiverCountryCode?: string;
        receiverFirstName?: string;
        receiverLastName?: string;
        receiverMiddleInitial?: string;
        receiverPhoneNumber?: string;
        receiverSecondLastName?: string;
        receiverTown?: string;
        rezervationId?: number;
        sendCountry?: string;
        sendCurrency?: string;
        senderAddress?: string;
        senderCity?: string;
        senderCountryCode?: string;
        senderFirstName?: string;
        senderLastName?: string;
        senderMiddleInitial?: string;
        senderPhoneNumber?: string;
        senderSecondLastName?: string;
        senderTown?: string;
        systemDate?: Date;
        transactionDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usageCount?: number;
        userName?: string;
        zipCode?: string;
    }
    interface SaveRegistrationContract extends BOA.Types.Kernel.MoneyGram.AgentServiceContractBase {
        customerReceiveNumber?: string;
        deliveryOption?: string;
        fieldValues?: BOA.Types.Kernel.MoneyGram.KeyValuePair[];
        receiveAgentID?: string;
        receiveCountry?: string;
        receiveCurrency?: string;
        registrationStatus?: string;
    }
    interface SaveRegistrationResultContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        mgCustomerReceiveNumber?: string;
        mgCustomerReceiveNumberVersion?: string;
        ofacSourceID?: string;
        ofacStatus?: boolean;
        registrationStatusCode?: string;
        verificationRequiredForUse?: boolean;
    }
    interface SenderInformationContract extends BOA.Common.Types.ContractBase {
    }
    interface SendMoneyGramContract extends BOA.Common.Types.ContractBase {
        receiverCustomer?: BOA.Types.Kernel.MoneyGram.MGCustomerContract;
        senderCustomer?: BOA.Types.Kernel.MoneyGram.MGCustomerContract;
        sendMoneyGramInquiry?: BOA.Types.Kernel.MoneyGram.SendMoneyGramInquiryContract;
        transactionContract?: BOA.Types.Kernel.MoneyGram.MoneyGramTransactionContract;
    }
    interface SendMoneyGramInquiryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        firstName?: string;
        lastName?: string;
        orderByName?: boolean;
        orderByPhone?: boolean;
        phoneNumber?: string;
    }
    interface SendMoneyGramReportContract extends BOA.Common.Types.ContractBase {
        message?: string;
        receiverFirstName?: string;
        receiverLastName?: string;
        receiverMiddleInitial?: string;
        senderAddress?: string;
        senderBirthDay?: Date;
        senderCity?: string;
        senderContact?: string;
        senderCountry?: string;
        senderLastName?: string;
        senderMiddleInitial?: string;
        senderName?: string;
        senderPhone?: string;
        senderZipCode?: string;
        testAnswer?: string;
        testQuestion?: string;
        today?: string;
        transactionAmount?: string;
        transactionDate?: string;
        writtenTransactionAmount?: string;
    }
    interface SendMoneyGramReturnContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        bancomerConfirmationNumber?: string;
        businessKey?: number;
        exchangeRateApplied?: number;
        exchangeRateAppliedSpecified?: boolean;
        expectedDateOfDelivery?: Date;
        expectedDateOfDeliverySpecified?: boolean;
        feeAmount?: number;
        feeAmountSpecified?: boolean;
        freePhoneCallPIN?: string;
        freqCustCardNumber?: string;
        nonDiscountedFee?: number;
        nonDiscountedFeeSpecified?: boolean;
        payoutCurrency?: string;
        productType?: BOA.Types.Kernel.MoneyGram.ProductType;
        promotionalInfo?: BOA.Types.Kernel.MoneyGram.MoneyGramPromotionalMessageInfo[];
        receiveAmount?: number;
        receiveAmountSpecified?: boolean;
        receiveCurrency?: string;
        referenceNumber?: string;
        sendAmount?: number;
        sendAmountSpecified?: boolean;
        sendCurrency?: string;
        tollFreePhoneNumber?: string;
        totalSendAmount?: number;
        totalSendAmountSpecified?: boolean;
        transactionDateTime?: Date;
        transactionDateTimeSpecified?: boolean;
        validIndicator?: boolean;
    }
    interface SendMoneyGramTranContract extends BOA.Common.Types.ContractBase {
    }
    interface SendReversalContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        agentCheckAmount?: number;
        agentCheckAmountSpecified?: boolean;
        agentCheckNumber?: string;
        agentCheckType?: BOA.Types.Kernel.MoneyGram.CheckType;
        agentCheckTypeSpecified?: boolean;
        customerCheckAmount?: number;
        customerCheckAmountSpecified?: boolean;
        customerCheckNumber?: string;
        customerCheckType?: BOA.Types.Kernel.MoneyGram.CheckType;
        customerCheckTypeSpecified?: boolean;
        feeAmount?: number;
        feeRefund?: string;
        manuelCancel?: boolean;
        operatorName?: string;
        referenceNumber?: string;
        reversalType?: string;
        sendAmount?: number;
        sendCurrency?: string;
        sendReversalReason?: BOA.Types.Kernel.MoneyGram.SendReversalReasonCode;
        sendReversalReasonSpecified?: boolean;
        transactionContract?: BOA.Types.Kernel.MoneyGram.MoneyGramTransactionContract;
        transactionId?: number;
    }
    interface SendReversalReturnContract extends BOA.Types.Kernel.MoneyGram.MoneyGramContractBase {
        agentCheckAuthorizationNumber?: string;
        refundFaceAmount?: number;
        refundFeeAmount?: number;
        refundTotalAmount?: number;
        reversalType?: string;
        totalCheckAmount?: number;
        transactionDateTime?: Date;
        transactionDateTimeSpecified?: boolean;
    }
    interface StateProvinceContract extends BOA.Common.Types.ContractBase {
        countryCode?: string;
        stateProvinceCode?: string;
        stateProvinceName?: string;
    }
}
declare namespace BOA.Types.Kernel.Notification {
    interface SMSContract extends BOA.Common.Types.ContractBase {
        personId?: number;
        phoneNumber?: string;
    }
}
declare namespace BOA.Types.Kernel.ObjectInventory {
    interface IObjectContract {
        description?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        name?: string;
        objectId?: number;
        objectTypeId?: number;
        sourceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ServerDetailContract extends BOA.Common.Types.ContractBase {
        bootDiskCapacity?: number;
        coreCount?: number;
        cPUCount?: string;
        cPUFamilyId?: number;
        cPUSpeed?: string;
        createTime?: Date;
        dataDiskCapacity?: number;
        description?: string;
        environmentId?: number;
        hasBackup?: number;
        hasDRC?: number;
        hostIP?: string;
        hostName?: string;
        iPAddresses?: string;
        isActive?: boolean;
        isDMZ?: number;
        location?: string;
        memorySize?: number;
        name?: string;
        objectId?: number;
        objectTypeId?: number;
        oSId?: number;
        serialNumber?: string;
        serverDetailId?: number;
        serverTypeId?: number;
        sourceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        virtualizationPlatformId?: number;
        virtualizationTypeId?: number;
    }
    interface ServerDetailEqualityComparer {
    }
    interface ServerDetailRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.ObjectInventory.ServerDetailContract;
    }
}
declare namespace BOA.Types.Kernel.OfficialCorrespondence {
    interface CreditorContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        bankName?: string;
        branchName?: string;
        corporationType?: number;
        creditorName?: string;
        deductionCode?: number;
        employeeNumber?: number;
        fileNumber?: string;
        iBAN?: string;
        loanAmount?: number;
        orderNumber?: number;
        personName?: string;
        priority?: number;
        remainedAmount?: number;
    }
    interface WritingDetailRequest extends BOA.Common.Types.TransactionRequestBase {
        approverUserList?: number[];
        correspondenceDetailId?: number;
        correspondenceId?: number;
        endDate?: Date;
        firstApprover?: number;
        isPayroll?: number;
        responsePatternType?: number;
        responseType?: number;
        secondApprover?: number;
        wFStatus?: number;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
}
declare namespace BOA.Types.Kernel.OperationDispatcher {
    interface WorkDetailStatusContract extends BOA.Common.Types.ContractBase {
        statusId?: number;
        statusText?: string;
    }
}
declare namespace BOA.Types.Kernel.OSYM {
    interface AccountingResultInfo extends BOA.Common.Types.ContractBase {
        branchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface ATMAmountsContract extends BOA.Common.Types.ContractBase {
        bankNoteChangeAmount?: number;
        bSMVAmount?: number;
        coinAmount?: number;
        depositAmount?: number;
        goodAmount?: number;
    }
    interface ExamContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        code?: string;
        currentState?: number;
        description?: string;
        endDate?: Date;
        insertDate?: Date;
        sessionNumber?: number;
        startDate?: string;
    }
    interface IdentityContract extends BOA.Common.Types.ContractBase {
        birthYear?: string;
        identityNumber?: string;
        name?: string;
        surname?: string;
    }
    interface InquiryContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        birthYear?: string;
        dueDate?: string;
        examData?: BOA.Types.Kernel.OSYM.ExamContract;
        id?: number;
        identityData?: BOA.Types.Kernel.OSYM.IdentityContract;
        incomingXML?: string;
        inquiryControlCode?: string;
        insertDate?: Date;
        isExtraSession?: boolean;
        maxSessionNumber?: number;
        messageNo?: string;
        nameSurname?: string;
        outgoingXML?: string;
        paymentRef?: string;
        sessionNumber?: number;
        tranDate?: Date;
        userName?: string;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        aTMAmounts?: BOA.Types.Kernel.OSYM.ATMAmountsContract;
        branchId?: number;
        businessKey?: number;
        cancelDate?: Date;
        cancelUserName?: string;
        cashPayerPhoneNumber?: string;
        cashPayerTaxNumber?: string;
        creditCardDueDate?: string;
        creditCardNo?: string;
        incomingXML?: string;
        inquiryControlCode?: string;
        inquiryId?: number;
        insertDate?: Date;
        isActive?: boolean;
        isExtraSession?: boolean;
        messageNo?: string;
        nameSurname?: string;
        outgoingXML?: string;
        paymentRef?: string;
        paymentType?: number;
        provisionNumber?: string;
        relativePersonId?: number;
        resourceCode?: string;
        thirdPersonId?: number;
        toUnitId?: number;
        tranDate?: Date;
        unitId?: number;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.OverdraftAccount {
    export const enum CurrentStateEnum {
        Passive = 0,
        Active = 1
    }
    interface AmountContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        bsmvAmount?: number;
        inflationAmount?: number;
        kkdfAmount?: number;
        netInflationAmount?: number;
    }
    interface Constants {
    }
    interface DefinitionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        iD?: number;
        isCalcInflation?: boolean;
        limit?: number;
        maturityDateDay?: number;
        maturityDatePeriod?: string;
        maturityDatePeriodDesc?: string;
        oldPackageType?: number;
        packageType?: number;
        packageTypeDesc?: string;
        plusDay?: number;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface InflationStateConstant {
    }
    interface LoanTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        creditAccountSuffix?: number;
        definitionId?: number;
        fxBusinessKey?: number;
        inflationState?: number;
        tranDate?: Date;
        tranType?: number;
    }
    interface LoanTranTypeConstant {
    }
    interface PackageTypeConstant {
    }
    interface PaymentPeriodTypeConstant {
    }
    interface PaymentRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amountDataContract?: BOA.Types.Kernel.OverdraftAccount.AmountContract;
        overdraftAccountContract?: BOA.Types.Kernel.Account.OverdraftAccountContract;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
    }
    interface PaymentTypeContract extends BOA.Common.Types.ContractBase {
        definitionId?: number;
        fec?: number;
        fecDesc?: string;
        paymentPeriod?: number;
        paymentPeriodDay?: number;
        paymentPeriodDesc?: string;
        productCode?: string;
        productName?: string;
    }
    interface WorkHourContract extends BOA.Common.Types.ContractBase {
        morningBeginHour?: number;
        morningEndHour?: number;
        noonBeginHour?: number;
        noonEndHour?: number;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.ASBIS {
    interface ASBISCommon {
    }
    interface ASBISPaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        eGMAccountNumber?: number;
        eGMAccountSuffix?: number;
        eGMBranchId?: number;
        eGMFEC?: number;
        eGMUnitId?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        identityNumber?: string;
        paymentType?: number;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountingDescription?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cancelDate?: Date;
        cancelProvisionNumber?: string;
        cashPayerPhoneNumber?: string;
        cashPayerTaxNumber?: string;
        channelId?: number;
        channelName?: string;
        creditCardNumber?: string;
        divitInstanceId?: string;
        eGMReferenceNumber?: number;
        firstName?: string;
        hostIP?: string;
        hostName?: string;
        idendityNumber?: string;
        lastName?: string;
        operationType?: number;
        operationTypeName?: string;
        paymentId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        provisionNumber?: string;
        serviceCallId?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        transactionDate?: Date;
        transactionTime?: any;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentListContract extends BOA.Common.Types.ContractBase {
        channelInfo?: BOA.Common.Types.ChannelContract;
        identityNumber?: string;
        operationType?: number;
        paymentAccountNumber?: number;
        paymentBranchCode?: number;
        paymentId?: number;
        paymentStatus?: number;
        paymentType?: number;
        transactionEndDate?: Date;
        transactionStartDate?: Date;
        userName?: string;
    }
    interface ServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        httpStatusCode?: string;
        methodName?: string;
        paymentId?: number;
        paymentReconServiceNumber?: string;
        queryType?: string;
        requestDate?: Date;
        responseDate?: Date;
        responseXml?: string;
        sendXml?: string;
        serviceCallId?: number;
        systemDate?: Date;
        url?: string;
        userName?: string;
        webMetodName?: string;
    }
    interface WebServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        kuvetTurkKASCode?: string;
        password?: string;
        timeout?: number;
        url?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.ASBIS.ASBISCommon {
    export const enum PaymentStatus {
        Payment = 1,
        CancelPayment = 2
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum TransactionType {
        Insert = 1,
        Send = 2,
        Cancel = 3
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.ASBIS.Extensions {
    interface DateTimeExtensions {
    }
    interface DecimalExtensions {
    }
    interface IEnumerableExtensions {
    }
    interface StringExtensions {
    }
    interface XmlSerializerHelper {
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Common {
    interface Common {
    }
    interface CreditCardProvisionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        creditCardNumber?: string;
        resourceCode?: BOA.Types.Kernel.CreditCard.BanksoftResourceCode;
        tranBranchId?: number;
        tranDate?: Date;
        tranDescription?: string;
        tranRef?: string;
        transactionType?: string;
        userName?: string;
    }
    interface CreditCardProvisionReverseContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        creditCardNumber?: string;
        provisionNumber?: string;
        resourceCode?: BOA.Types.Kernel.CreditCard.BanksoftResourceCode;
        tranDescription?: string;
        transactionType?: string;
        userName?: string;
    }
    interface PaymentSmsNotification extends BOA.Common.Types.TransactionRequestBase {
        accountNumber?: number;
        corporationName?: string;
        installmentNumber?: string;
        notificationData?: BOA.Common.Types.NotificationData;
        paymentAmount?: number;
        paymentDescription?: string;
        toGsmNumber?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Common.Common {
    export const enum NotificationTemplateCode {
        CANCELSMSTEMPLATE = 0,
        PAYMENTSMSTEMPLATE = 1,
        ORDERSMS = 2,
        ORDERCANCELSMS = 3,
        ORDERMAIL = 4,
        ORDERCANCELMAIL = 5
    }
    export const enum NotificationType {
        PAYMENTSMS = 0,
        CANCELSMS = 1,
        ORDER = 2,
        ORDERCANCEL = 3
    }
    export const enum PaymentModule {
        Tax = 0,
        Ito = 1,
        TitleDeedFees = 2,
        Sgk = 3,
        Invoice = 4,
        Osym = 5,
        Hgs = 6,
        CustomsDuty = 7,
        Donation = 8,
        Religious = 9,
        Asbis = 10
    }
    export const enum ProcessType {
        Payment = 0,
        Cancel = 1,
        Order = 2,
        OrderCancel = 3
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.CustomsDuty {
    interface AccountancyContract extends BOA.Common.Types.ContractBase {
        accountancyCode?: string;
        accountancyId?: number;
        accountancyName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        receiverIBAN?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AccountancyMoneyTransferContract extends BOA.Common.Types.ContractBase {
        accountancyCode?: string;
        accountancyDataContract?: any;
        accountancyMoneyTransferId?: number;
        accountancyTaxNumber?: string;
        accountingAmount?: number;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        cancelAmount?: number;
        cancelCount?: number;
        eFTBankName?: string;
        hostIP?: string;
        hostName?: string;
        paymentAmount?: number;
        paymentBeginDate?: Date;
        paymentCount?: number;
        paymentEndDate?: Date;
        receiverIBAN?: string;
        senderIBAN?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        transactionDate?: Date;
        userName?: string;
    }
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        authorizedPersonId?: number;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        relativePersonId?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomsContract extends BOA.Types.Kernel.PaymentSystems.CustomsDuty.AccountancyContract {
        accountancyDetail?: any;
        cityId?: number;
        cityName?: string;
        customsCode?: string;
        customsId?: number;
        customsName?: string;
        customStatus?: number;
        customStatusName?: string;
    }
    interface PaymentAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        fecCode?: string;
        iBAN?: string;
        paymentAccountId?: number;
        paymentId?: number;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        paymentContract?: any;
        paymentType?: number;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface PaymentContract extends BOA.Types.Kernel.PaymentSystems.CustomsDuty.QueryContract {
        accountancyAccountNumber?: number;
        accountancyAccountSuffix?: number;
        accountancyCode?: string;
        accountancyName?: string;
        accountInfo?: any;
        accountingAmount?: number;
        accountNumber?: number;
        accountSuffix?: number;
        accrualSerialNumber?: string;
        address?: string;
        authorizedPersonInfo?: any;
        beginTranDate?: Date;
        branchName?: string;
        businessKey?: number;
        cashPayerPhoneNumber?: string;
        channelName?: string;
        customsCode?: string;
        customsDutyRequest?: string;
        customsDutyResponse?: string;
        customsInfo?: any;
        customsName?: string;
        detailInfo?: any;
        endTranDate?: Date;
        fec?: number;
        fecCode?: string;
        isAccountNumberControl?: boolean;
        isRenewed?: boolean;
        notificationInfo?: any;
        number?: string;
        paramBranchId?: number;
        paymentId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        phoneNumber?: string;
        receiptNumber?: string;
        relativePersonId?: number;
        remoteDeclarationNumber?: string;
        resourceCode?: string;
        resourceId?: number;
        slipReportViewer?: number[];
        status?: number;
        statusName?: string;
        taxOfficeCode?: string;
        taxOfficeInfo?: any;
        thirdPersonId?: number;
        totalAmount?: number;
        tranIdentityNumber?: string;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        workGroupName?: string;
    }
    interface PaymentDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        paymentDetailId?: number;
        paymentId?: number;
        taxName?: string;
        taxType?: string;
    }
    interface PaymentGroupContract extends BOA.Common.Types.ContractBase {
        paymentAmount?: number;
        paymentCount?: number;
    }
    interface PaymentNotificationContract extends BOA.Common.Types.ContractBase {
        paymentId?: number;
        paymentNotificationId?: number;
        request?: string;
        response?: string;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        endReconDate?: Date;
        hostName?: string;
        paymentAmount?: number;
        paymentCount?: number;
        paymentList?: any;
        paymentReconId?: number;
        reconDate?: Date;
        reconType?: number;
        reconTypeName?: string;
        startReconDate?: Date;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface PaymentReconDetailContract extends BOA.Common.Types.ContractBase {
        localPaymentContract?: any;
        remotePaymentContract?: any;
    }
    interface QueryContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        channelId?: number;
        declarationNumber?: string;
        hostIP?: string;
        hostName?: string;
        queryId?: number;
        referenceNumber?: string;
        result?: string;
        resultCode?: string;
        resultDescription?: string;
        systemDate?: Date;
        taxNumber?: string;
        title?: string;
        tranDate?: Date;
        userName?: string;
        workGroupId?: number;
    }
    interface TaxOfficeContract extends BOA.Common.Types.ContractBase {
        code?: string;
        name?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.CustomsDuty.Common {
    interface CustomsDutyCommon {
    }
    interface XmlSerializerHelper {
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.CustomsDuty.Common.CustomsDutyCommon {
    export const enum EFTStatus {
        EFTWillBeSent = 1,
        EFTIncorrectAmountEFT = 2,
        EFTWasSent = 3
    }
    export const enum Environment {
        Test = 1,
        Prod = 2
    }
    export const enum IsEndOfYear {
        No = 0,
        Yes = 1
    }
    export const enum PaymentStatus {
        Accounting = 1,
        Notification = 2,
        Cancel = 3
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2
    }
    export const enum ReconStatus {
        Empty = 0,
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum ReconType {
        Automatic = 1,
        Manual = 2
    }
    export const enum SaveResponseType {
        Cancel = 1,
        Save = 2
    }
    export const enum UpdateResponseType {
        Cancel = 1,
        Ok = 2,
        Update = 3
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Donation {
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        authorizedPersonId?: number;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        relativePersonId?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CampaignAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        campaignAccountId?: number;
        campaignId?: number;
        fec?: number;
        fecCode?: string;
        organizationId?: number;
        status?: number;
        statusName?: string;
    }
    interface CampaignContract extends BOA.Common.Types.ContractBase {
        accountList?: any;
        beginDate?: Date;
        beginDate1?: Date;
        beginDate2?: Date;
        beginTime?: any;
        branchId?: number;
        campaignCode?: string;
        campaignId?: number;
        campaignType?: number;
        campaignTypeDesc?: string;
        detailContract?: any;
        endDate?: Date;
        endDate1?: Date;
        endDate2?: Date;
        endTime?: any;
        fullUserName?: string;
        globalName?: string;
        hostIP?: string;
        hostName?: string;
        isCancelable?: number;
        name?: string;
        organizationId?: number;
        organizationName?: string;
        organizationType?: number;
        precedence?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranStatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        workGroupId?: number;
        workgroupName?: string;
    }
    interface CampaignDetailContract extends BOA.Common.Types.ContractBase {
        address?: number;
        attorneyship?: number;
        birthDate?: number;
        campaignDetailId?: number;
        campaignId?: number;
        city?: number;
        country?: number;
        county?: number;
        description?: number;
        education?: number;
        eMail?: number;
        gender?: number;
        gsmNumber?: number;
        phoneNumber?: number;
        privacy?: number;
        profession?: number;
        taxNumber?: number;
        title?: number;
        zipCode?: number;
    }
    interface DonationCommon {
    }
    interface OrganizationContactContract extends BOA.Common.Types.ContractBase {
        contactType?: number;
        contactTypeName?: string;
        email?: string;
        gSMNumber?: string;
        name?: string;
        organizationContactId?: number;
        organizationId?: number;
        phoneNumber?: string;
    }
    interface OrganizationContract extends BOA.Common.Types.ContractBase {
        address?: string;
        branchId?: number;
        contactList?: any;
        fullUserName?: string;
        hostIP?: string;
        hostName?: string;
        iPAddressList?: any;
        logo?: any;
        name?: string;
        organizationCode?: string;
        organizationId?: number;
        organizationTranId?: number;
        organizationType?: number;
        organizationTypeName?: string;
        precedence?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranStatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        user?: BOA.Common.Types.UserContract;
        userName?: string;
        webSite?: string;
        wFInstanceId?: number;
        workGroupId?: number;
        workgroupName?: string;
    }
    interface OrganizationIPAddressContract extends BOA.Common.Types.ContractBase {
        iPAddress?: string;
        organizationId?: number;
        organizationIPAddressId?: number;
        password?: string;
    }
    interface PaymentAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        fecCode?: string;
        paymentAccountId?: number;
        paymentId?: number;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        paymentContract?: any;
        paymentType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface PaymentCancelContract extends BOA.Common.Types.ContractBase {
        cancelBusinessKey?: number;
        hostIP?: string;
        hostName?: string;
        paymentCancelId?: number;
        paymentId?: number;
        systemDate?: Date;
        userName?: string;
        wFInstanceId?: number;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountInfo?: any;
        accountNumber?: number;
        accountSuffix?: number;
        approverUserName?: string;
        attorneyship?: string;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        campaignAccountNumber?: number;
        campaignAccountSuffix?: number;
        campaignCode?: string;
        campaignId?: number;
        campaignName?: string;
        cancelTranDate?: Date;
        channelId?: number;
        channelName?: string;
        description?: string;
        detailList?: any;
        detailModelCount?: number;
        endDate?: Date;
        fec?: number;
        fecCode?: string;
        fullUserName?: string;
        hostIP?: string;
        hostName?: string;
        isCanceledIncluded?: number;
        isoFecCode?: string;
        lastPaymentId?: number;
        organizationId?: number;
        organizationName?: string;
        organizationType?: number;
        paramChannelId?: number;
        paymentDetailNameList?: string;
        paymentId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        privacy?: number;
        quantity?: number;
        relativePersonId?: number;
        resourceCode?: string;
        resourceId?: number;
        startDate?: Date;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        thirdPersonId?: number;
        totalAmount?: number;
        tranAddress?: string;
        tranBirthDate?: Date;
        tranCity?: number;
        tranCityName?: string;
        tranCountry?: number;
        tranCountryName?: string;
        tranCounty?: string;
        tranDate?: Date;
        tranDate1?: Date;
        tranDate2?: Date;
        tranEducation?: string;
        tranEMail?: string;
        tranGender?: number;
        tranGenderName?: string;
        tranGsmNumber?: string;
        tranOwnerType?: number;
        tranOwnerTypeName?: string;
        tranPhoneNumber?: string;
        tranProfession?: string;
        tranTaxNumber?: string;
        tranTime?: any;
        tranTitle?: string;
        tranZipCode?: string;
        unitAmount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workGroupId?: number;
        workgroupName?: string;
    }
    interface PaymentDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        gsmNumber?: string;
        isCustomerUser?: number;
        isTranUser?: number;
        paymentDetailId?: number;
        paymentId?: number;
        taxNumber?: string;
        title?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Donation.DonationCommon {
    export const enum CampaignType {
        Other = 0,
        Eid = 1,
        All = 2
    }
    export const enum OrganizationType {
        Dernek = 1,
        Vakıf = 2
    }
    export const enum PaymentStatus {
        Active = 1,
        CancelApproving = 2,
        Canceled = 3
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2
    }
    export const enum Status {
        Saved = 1,
        Approving = 2,
        Approved = 3,
        Rejected = 4,
        Inactive = 5,
        UpdateApproving = 6
    }
    export const enum YesNo {
        No = 0,
        Yes = 1,
        All = 2
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.ITO {
    interface AccountingReferenceContract extends BOA.Common.Types.ContractBase {
        description?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface ITOCommon {
    }
    interface ITOPaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        duplicate?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        iTOAccountNumber?: number;
        iTOAccountSuffix?: number;
        iTOBranchId?: number;
        iTOFEC?: number;
        iTOUnitId?: number;
        paymentContract?: any;
        paymentDetailCardInformationContract?: any;
        paymentDetailContractList?: any;
        paymentType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        businessKey?: number;
        cancelDate?: Date;
        channelId?: number;
        corporationName?: string;
        debt?: number;
        duplicate?: number;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        paymentReconDate?: Date;
        paymentType?: number;
        paymentYear?: number;
        registrationNumber?: number;
        serviceCallId?: number;
        status?: number;
        systemDate?: Date;
        transactionDate?: Date;
        transactionReferenceNumber?: number;
        transactionTime?: any;
        transactionType?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentDetailCardInformationContract extends BOA.Common.Types.ContractBase {
        cancelProvisionNumber?: string;
        cardNumber?: string;
        paymentId?: number;
        provisionNumber?: string;
    }
    interface PaymentDetailContract extends BOA.Common.Types.ContractBase {
        debt?: number;
        debtDescription?: string;
        debtType?: string;
        dependentPaymentReferenceNumber?: number;
        lastPaymentDate?: Date;
        paymentDetailId?: number;
        paymentId?: number;
        paymentReferenceNumber?: number;
    }
    interface PaymentListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        beginTranDate?: Date;
        branchId?: number;
        businessKey?: string;
        cancelDate?: Date;
        channelId?: number;
        channelName?: string;
        corporationName?: string;
        debt?: number;
        duplicate?: number;
        endTranDate?: Date;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        paymentReconDate?: Date;
        paymentType?: number;
        paymentTypeName?: string;
        paymentYear?: number;
        registrationNumber?: number;
        serviceCallId?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        transactionDate?: Date;
        transactionReferenceNumber?: number;
        transactionTime?: any;
        transactionType?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentQueryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        businessKey?: number;
        cancelDate?: Date;
        channelId?: number;
        corporationName?: string;
        debt?: number;
        debtDescription?: string;
        debtType?: string;
        debtYear?: number;
        dependentPaymentReferenceNumber?: number;
        duplicate?: number;
        hostIP?: string;
        hostName?: string;
        lastPaymentDate?: Date;
        paymentAmount?: number;
        paymentId?: number;
        paymentReconDate?: Date;
        paymentReferenceNumber?: number;
        paymentType?: number;
        paymentYear?: number;
        registrationNumber?: number;
        serviceCallId?: number;
        status?: number;
        systemDate?: Date;
        transactionDate?: Date;
        transactionReferenceNumber?: number;
        transactionTime?: any;
        transactionType?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        beginReconDate?: Date;
        endReconDate?: Date;
        hostIP?: string;
        hostName?: string;
        iTOAmount?: number;
        iTOPaymentReferenceCount?: number;
        iTOTransactionReferenceCount?: number;
        paymentReconDate?: Date;
        paymentReferenceCount?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        transactionReferenceCount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        httpStatusCode?: string;
        methodName?: string;
        paymentId?: number;
        paymentReconDate?: Date;
        paymentReconServiceNumber?: string;
        queryType?: string;
        requestDate?: Date;
        responseDate?: Date;
        responseXml?: string;
        sendXml?: string;
        serviceCallId?: number;
        systemDate?: Date;
        userName?: string;
        webMetodName?: string;
    }
    interface WebServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        kuvetTurkKASCode?: string;
        password?: string;
        timeout?: number;
        url?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.ITO.ITOCommon {
    export const enum PaymentStatus {
        Payment = 1,
        CancelPayment = 2
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum Status {
        Passive = 0,
        Active = 1
    }
    export const enum TransactionType {
        Insert = 1,
        Send = 2,
        Cancel = 3,
        DeletePaymentKTSide = 4
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Prepaid {
    interface AccountingReferenceContract extends BOA.Common.Types.ContractBase {
        description?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        authorizedPersonId?: number;
        hostIP?: string;
        hostName?: string;
        relativePersonId?: number;
        sourceId?: number;
        sourceType?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ComboData {
        id?: number;
        value?: string;
    }
    interface CorporationAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        channelId?: number;
        channelName?: string;
        corporationAccountId?: number;
        corporationId?: number;
        corporationName?: string;
        debtTypeDescription?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        paymentTypeDescription?: string;
        subCorporationCode?: number;
        subCorporationName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationChannelContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        corporationChannelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workBeginTime?: string;
        workEndTime?: string;
    }
    interface CorporationChannelListContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        corporationChannelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationCommissionContract extends BOA.Common.Types.ContractBase {
        commissionKey?: string;
        corporationCommissionId?: number;
        corporationId?: number;
        creditCardType?: string;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configProdValue?: string;
        configTestValue?: string;
        corporationConfigId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationContract extends BOA.Common.Types.ContractBase {
        autoPaymentConnectionType?: any;
        channelId?: number;
        cityId?: number;
        configList?: any;
        corporationCode?: string;
        corporationId?: number;
        corporationKey?: string;
        hasSubUrl?: boolean;
        hostIP?: string;
        hostName?: string;
        isUsingPackage?: boolean;
        logo?: any;
        name?: string;
        paymentConnectionType?: number;
        paymentOrderConnectionType?: any;
        reconConnectionType?: any;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationErrorContract extends BOA.Common.Types.ContractBase {
        corporationErrorId?: number;
        corporationId?: number;
        errorCode?: string;
        errorDescription?: string;
        errorUIDescription?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationInfoMessageContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        corporationInfoMessageId?: number;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        shortText?: string;
        systemDate?: Date;
        text?: string;
        uIId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationListContract extends BOA.Common.Types.ContractBase {
        autoPaymentConnectionType?: string;
        corporationCode?: string;
        corporationId?: number;
        corporationKey?: string;
        corporationType?: number;
        hasSubUrl?: boolean;
        hostIP?: string;
        hostName?: string;
        isUsingPackage?: boolean;
        logo?: any;
        name?: string;
        paymentOrderConnectionType?: string;
        queryType?: number;
        reconConnectionType?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationQueryParamsContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        corporationQueryParamsId?: number;
        detailInfo?: any;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        uIId?: number;
        uIVariableLength?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationQueryParamsDetailContract extends BOA.Common.Types.ContractBase {
        corporationQueryParamsDetailId?: number;
        corporationQueryParamsId?: number;
        hostIP?: string;
        hostName?: string;
        infoMessage?: string;
        labelName?: string;
        languageId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationScheduleContract extends BOA.Common.Types.ContractBase {
        beginTime?: string;
        corporationId?: number;
        corporationScheduleId?: number;
        endTime?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        lastRunTime?: Date;
        orderedDebtQueryType?: number;
        orderedDebtSaveType?: number;
        runAlways?: boolean;
        runEveryDay?: boolean;
        runPeriod?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CreditCardContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditCardNo?: string;
        productType?: string;
    }
    interface FlatFilePrepaidHeaderContract {
        corporationId?: number;
        description?: string;
        destinationFolder?: string;
        rowCount?: number;
        sourceFolder?: string;
        totalAmount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface FlatFilePrepaidMultipleFooterContract {
        rowCount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface FlatFilePrepaidPaymentContract {
        dataList?: any;
        dueDate?: Date;
        recordCount?: number;
        totalAmount?: number;
        totalLateFeeAmount?: number;
        totalMainAmount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface IFlatFilePrepaid {
        dueDate?: Date;
        recordCount?: number;
        totalAmount?: number;
        totalLateFeeAmount?: number;
        totalMainAmount?: number;
        transactionDate?: Date;
        workDate?: Date;
    }
    interface OfflineReconDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        channelId?: number;
        cityCode?: number;
        corporationId?: number;
        dueDate?: Date;
        extension?: string;
        incomingReferenceNumber?: string;
        installmentNumber?: string;
        offlineReconDetailId?: number;
        outgoingReferenceNumber?: string;
        packageCode?: string;
        packageName?: string;
        paymentType?: number;
        period?: string;
        status?: number;
        tellerId?: number;
        tranDate?: Date;
        userName?: string;
    }
    interface PackageContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        corporationId?: number;
        customerPaymentType?: number;
        hostIP?: string;
        hostName?: string;
        originalRequestData?: string;
        originalResponseData?: string;
        packageCode?: string;
        packageId?: number;
        packageName?: string;
        paymentType?: string;
        productType?: number;
        systemDate?: Date;
        uIId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        paymentContract?: any;
        paymentType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface PaymentCancelInfoContract extends BOA.Common.Types.ContractBase {
        cancelBusinessKey?: number;
        hostIP?: string;
        hostName?: string;
        paymentCancelInfoId?: number;
        paymentId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountInfo?: any;
        accountingReference?: any;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cardInfo?: any;
        cardNumber?: string;
        cardNumberMask?: string;
        channelId?: number;
        channelName?: string;
        commissionAmount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionKey?: string;
        commissionSerializeId?: number;
        corporationAccountNumber?: number;
        corporationAccountSuffix?: number;
        corporationId?: number;
        corporationName?: string;
        customerName?: string;
        debtTypeDescription?: string;
        description?: string;
        extension?: string;
        fec?: number;
        hasDebtCommission?: boolean;
        hasPaymentCommission?: boolean;
        hostIP?: string;
        hostName?: string;
        idendityNumber?: string;
        inComingRefNumber?: string;
        installmentNumber?: string;
        invoiceNumber?: string;
        lateFeeAmount?: number;
        originalRequestData?: string;
        originalResponseData?: string;
        outGoingRefNumber?: string;
        package?: any;
        packageCode?: string;
        packageList?: any;
        packageName?: string;
        payAmount?: number;
        paymentId?: number;
        paymentOrderId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        relativePersonId?: number;
        resourceId?: number;
        status?: number;
        statusName?: string;
        statusStr?: string;
        subCorporationCode?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        totalAmount?: number;
        tranDate?: Date;
        tranDate2?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        workDate?: Date;
        workGroupId?: number;
        workGroupName?: string;
    }
    interface PaymentDetailAccountInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        paymentId?: number;
    }
    interface PaymentDetailCardInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        cardNumber?: string;
        cardType?: string;
        fec?: number;
        paymentId?: number;
        provisionNumber?: string;
        referenceNumber?: string;
    }
    interface PaymentErrorContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface PaymentGroupContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        paymentAmount?: number;
        paymentCancelAmount?: number;
        paymentCancelCount?: number;
        paymentCount?: number;
    }
    interface PaymentOrderAvailableCardsContract extends BOA.Common.Types.ContractBase {
        cardDescription?: string;
        cardType?: string;
        hostIP?: string;
        hostName?: string;
        isBusiness?: number;
        paymentOrderAvailableCardsId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderCommunicationContract extends BOA.Common.Types.ContractBase {
        communicationType?: number;
        paymentOrderCommunicationId?: number;
        paymentOrderId?: number;
        paymentOrderResultType?: number;
    }
    interface PaymentOrderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        beginTranDate?: Date;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        corporationId?: number;
        corporationName?: string;
        endTranDate?: Date;
        extensions?: string;
        hostIP?: string;
        hostName?: string;
        incomingOrderRef?: string;
        installmentNumber?: string;
        loadDay?: number;
        originalRequestData?: string;
        originalResponseData?: string;
        outgoingOrderRef?: string;
        packageId?: number;
        packageName?: string;
        paramBranchId?: number;
        paymentOrderCommunicationList?: any;
        paymentOrderConnectionType?: number;
        paymentOrderDetailList?: any;
        paymentOrderId?: number;
        period?: number;
        periodName?: string;
        relativePersonId?: number;
        shortName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        thirdPersonId?: number;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workGroupId?: number;
    }
    interface PaymentOrderDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditCardNumber?: string;
        orderNumber?: number;
        paymentOrderDetailId?: number;
        paymentOrderId?: number;
        productType?: string;
    }
    interface PaymentOrderGroupContract extends BOA.Common.Types.ContractBase {
        orderCount?: number;
        status?: any;
    }
    interface PaymentOrderHistoryContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        paymentOrderHistoryId?: number;
        paymentOrderId?: number;
        systemDate?: Date;
        userName?: string;
        workDate?: Date;
    }
    interface PaymentOrderReconContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        orderCancelCount?: number;
        orderCount?: number;
        paymentOrderReconId?: number;
        reconDate?: Date;
        reconType?: number;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        branchId?: number;
        cancelAmount?: number;
        cancelCount?: number;
        corporationId?: number;
        corporationName?: string;
        corporationPaymentAmount?: number;
        corporationPaymentCount?: number;
        endTime?: any;
        hostIP?: string;
        hostName?: string;
        invoiceNumber?: string;
        lastReconDate?: Date;
        originalRequestData?: string;
        originalResponseData?: string;
        paymentAmount?: number;
        paymentCount?: number;
        paymentGroupList?: any;
        paymentList?: any;
        paymentOrderCancelCount?: number;
        paymentOrderCount?: number;
        paymentReconDetailList?: any;
        paymentReconId?: number;
        reconDate?: Date;
        reconType?: number;
        reconTypeName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workGroupId?: number;
    }
    interface PaymentReconDefinitionContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        corporationId?: number;
        endTime?: any;
        hasOrderRecon?: boolean;
        hostIP?: string;
        hostName?: string;
        paymentReconDefinitionId?: number;
        reconType?: number;
        reconUIType?: number;
        systemDate?: Date;
        unconfirmityDay?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconDetailContract extends BOA.Common.Types.ContractBase {
        localPaymentContract?: any;
        remotePaymentContract?: any;
    }
    interface PaymentSenderErrorContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        paymentSenderErrorId?: number;
        systemDate?: Date;
        userName?: string;
        workDate?: Date;
    }
    interface PaymentSMSContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        channelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        installmentNumber?: string;
        loadDate?: Date;
        mainBusinessKey?: number;
        personGSM?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PeriodContract extends BOA.Common.Types.ContractBase {
        debtText?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        periodId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PrepaidChannelContract extends BOA.Common.Types.ContractBase {
        afterTomorrow?: Date;
        beforeYesterday?: Date;
        channelId?: number;
        channelName?: string;
        dbTimeout?: number;
        isActive?: number;
        today?: Date;
        tomorrow?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        yesterday?: Date;
    }
    interface PrepaidCommon {
    }
    interface TcpConnectionManagerContract extends BOA.Common.Types.ContractBase {
        bankReference?: string;
        clientConnection?: any;
        clientNetworkStream?: any;
        clientSslStream?: any;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        iP?: string;
        isNeedLogoff?: boolean;
        isNeedLogon?: boolean;
        lastHeartbeat?: Date;
        originalRequestData?: string;
        originalResponseData?: string;
        port?: number;
        remoteSubId?: number;
        serverName?: string;
        status?: any;
        systemDate?: Date;
        transmissionDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TcpRemoteSubDefinitionContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        remoteSubId?: number;
        serverName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        beginTranDate?: Date;
        branchName?: string;
        businessKey?: number;
        corporationId?: number;
        corporationName?: string;
        description?: string;
        endTranDate?: Date;
        hostIP?: string;
        hostName?: string;
        shortName?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        transferAccountNumber?: number;
        transferAccountSuffix?: number;
        transferDate?: Date;
        transferDefinitionId?: number;
        transferId?: number;
        transferType?: number;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TransferDefinitionContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        corporationId?: number;
        corporationName?: string;
        corporationProcessType?: number;
        debtType?: number;
        debtTypeDescription?: string;
        description?: string;
        firstTransferDate?: Date;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        paymentTypeDescription?: string;
        shortName?: string;
        subCorporationCode?: number;
        subCorporationName?: string;
        systemDate?: Date;
        transferAccountNumber?: number;
        transferAccountSuffix?: number;
        transferBlokeDay?: number;
        transferBlokeType?: number;
        transferDateList?: Date[];
        transferDefinitionDetailContract?: any;
        transferDefinitionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TransferDefinitionDetailContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        pastDay?: number;
        systemDate?: Date;
        transferDay?: number;
        transferDefinitionDetailId?: number;
        transferDefinitionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workDay?: number;
    }
    interface TransferErrorContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        beginTranDate?: Date;
        branchName?: string;
        businessKey?: number;
        corporationId?: number;
        corporationName?: string;
        description?: string;
        endTranDate?: Date;
        errorCode?: number;
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        shortName?: string;
        systemDate?: Date;
        tranBranchId?: number;
        tranDate?: Date;
        transferDate?: Date;
        transferDefinitionId?: number;
        transferErrorId?: number;
        transferId?: number;
        tranTime?: any;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Prepaid.Extensions {
    interface ByteExtensions {
    }
    interface DateTimeExtensions {
    }
    interface DecimalExtensions {
    }
    interface IEnumerableExtensions {
    }
    interface IntExtensions {
    }
    interface PredicateBuilder {
    }
    interface StringExtensions {
    }
    interface TcpClientExtensions {
    }
    interface XmlExtensions {
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Prepaid.PrepaidCommon {
    export const enum CorporationConnectionType {
        Online = 1,
        Offline = 2
    }
    export const enum CorporationErrorType {
        All = 1,
        OnlyUI = 2,
        OnlyBatch = 3
    }
    export const enum CorporationProcessType {
        Fatura = 1,
        Kontor = 2
    }
    export const enum CorporationStatus {
        Active = 1,
        Passive = 2
    }
    export const enum PaymentOrderConnectionType {
        Online = 1,
        Offline = 2
    }
    export const enum PaymentOrderStatus {
        Active = 1,
        Passive = 2
    }
    export const enum PaymentStatus {
        Accounting = 1,
        Notification = 2,
        Cancel = 3,
        CancelFromRecon = 4
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum ReconStatus {
        Empty = 0,
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum ReconType {
        Automatic = 1,
        Manual = 2
    }
    export const enum TcpConnectionStatus {
        Logon = 1,
        Logoff = 2
    }
    export const enum TransferType {
        Manual = 1,
        Automatic = 2
    }
    export const enum UI {
        All = 0,
        Payment = 1,
        PaymentOrder = 2
    }
    export const enum WaitingType {
        DayBased = 1,
        CalenderDay = 2,
        WorkingDay = 3,
        Monthly = 4
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Prepair {
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        authorizedPersonId?: number;
        hostIP?: string;
        hostName?: string;
        relativePersonId?: number;
        sourceId?: number;
        sourceType?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        channelId?: number;
        channelName?: string;
        corporationAccountId?: number;
        corporationId?: number;
        corporationName?: string;
        debtTypeDescription?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        paymentTypeDescription?: string;
        shortName?: string;
        subCorporationCode?: number;
        subCorporationName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationChannelContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        corporationChannelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workBeginTime?: string;
        workEndTime?: string;
    }
    interface CorporationCommissionContract extends BOA.Common.Types.ContractBase {
        commissionKey?: string;
        corporationCommissionId?: number;
        corporationId?: number;
        creditCardType?: string;
        hostIP?: string;
        hostName?: string;
        paymentType?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configProdValue?: string;
        configTestValue?: string;
        corporationConfigId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationContract extends BOA.Common.Types.ContractBase {
        autoPaymentConnectionType?: number;
        channelId?: number;
        cityId?: number;
        configList?: any;
        corporationCode?: string;
        corporationId?: number;
        corporationKey?: string;
        hasSubUrl?: boolean;
        hostIP?: string;
        hostName?: string;
        isUsingPackage?: boolean;
        logo?: any;
        name?: string;
        paymentOrderConnectionType?: number;
        reconConnectionType?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationErrorContract extends BOA.Common.Types.ContractBase {
        corporationErrorId?: number;
        corporationId?: number;
        errorCode?: string;
        errorDescription?: string;
        errorUIDescription?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationInfoMessageContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        corporationInfoMessageId?: number;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        shortText?: string;
        systemDate?: Date;
        text?: string;
        uIId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationQueryParamsContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        corporationQueryParamsId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        uIId?: number;
        uIVariableLength?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationQueryParamsDetailContract extends BOA.Common.Types.ContractBase {
        corporationQueryParamsDetailId?: number;
        corporationQueryParamsId?: number;
        hostIP?: string;
        hostName?: string;
        infoMessage?: string;
        labelName?: string;
        languageId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationScheduleContract extends BOA.Common.Types.ContractBase {
        beginTime?: string;
        corporationId?: number;
        corporationScheduleId?: number;
        endTime?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        lastRunTime?: Date;
        orderedDebtQueryType?: number;
        orderedDebtSaveType?: number;
        runAlways?: boolean;
        runEveryDay?: boolean;
        runPeriod?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PackageContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        packageId?: number;
        packageName?: string;
        systemDate?: Date;
        uIId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        paymentContract?: any;
        paymentType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountInfo?: any;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cardInfo?: any;
        cardNumber?: string;
        cardNumberMask?: string;
        channelId?: number;
        channelName?: string;
        commissionAmount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionKey?: string;
        commissionSerializeId?: number;
        corporationAccountNumber?: number;
        corporationAccountSuffix?: number;
        corporationId?: number;
        corporationName?: string;
        customerName?: string;
        debtInsertTime?: any;
        debtTypeDescription?: string;
        description?: string;
        extension?: string;
        fec?: number;
        hasDebtCommission?: boolean;
        hasErrorName?: string;
        hasPaymentCommission?: boolean;
        hostIP?: string;
        hostName?: string;
        idendityNumber?: string;
        inComingRefNumber?: string;
        installmentNumber?: string;
        oldSystemItem?: boolean;
        outGoingRefNumber?: string;
        packageCode?: string;
        packageName?: string;
        payAmount?: number;
        paymentId?: number;
        paymentOrderId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        relativePersonId?: number;
        resourceId?: number;
        shortName?: string;
        status?: number;
        statusName?: string;
        subCorporationCode?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        totalAmount?: number;
        tranDate?: Date;
        tranDate2?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserFullName?: string;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        workDate?: Date;
    }
    interface PaymentDetailAccountInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        paymentDetailAccountInfoId?: number;
        paymentId?: number;
    }
    interface PaymentDetailCardInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        cardNumber?: string;
        cardType?: string;
        fec?: number;
        paymentDetailCardInfoId?: number;
        paymentId?: number;
        provisionNumber?: string;
        referenceNumber?: string;
    }
    interface PaymentOrderAvailableCardsContract extends BOA.Common.Types.ContractBase {
        cardDescription?: string;
        cardType?: string;
        hostIP?: string;
        hostName?: string;
        isBusiness?: number;
        paymentOrderAvailableCardsId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderCommunicationContract extends BOA.Common.Types.ContractBase {
        communicationType?: number;
        paymentOrderCommunicationId?: number;
        paymentOrderId?: number;
        paymentOrderResultType?: number;
    }
    interface PaymentOrderHistoryContract extends BOA.Common.Types.ContractBase {
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        paymentOrderHistoryId?: number;
        paymentOrderId?: number;
        systemDate?: Date;
        userName?: string;
        workDate?: Date;
    }
    interface PaymentOrderReconContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        orderCancelCount?: number;
        orderCount?: number;
        paymentOrderReconId?: number;
        reconDate?: Date;
        reconType?: number;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconDefinitionContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        corporationId?: number;
        endTime?: any;
        hasOrderRecon?: boolean;
        hostIP?: string;
        hostName?: string;
        paymentReconDefinitionId?: number;
        systemDate?: Date;
        unconfirmityDay?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentSMSContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        channelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        installmentNumber?: string;
        loadDate?: Date;
        mainBusinessKey?: number;
        paymentSMSId?: number;
        personGSM?: string;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PrepairCommon {
    }
    interface TransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        tranDate?: Date;
        transferAccountNumber?: number;
        transferAccountSuffix?: number;
        transferDate?: Date;
        transferDefinitionId?: number;
        transferId?: number;
        transferType?: number;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Prepair.PrepairCommon {
    export const enum CorporationStatus {
        Active = 1,
        Passive = 2
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum UI {
        Payment = 1,
        PaymentOrder = 2
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Religious {
    interface AccountingReferenceContract extends BOA.Common.Types.ContractBase {
        description?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        authorizedPersonId?: number;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        relativePersonId?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        fecCode?: string;
        paymentAccountId?: number;
        paymentId?: number;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        fer?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        fXProfitAmount?: number;
        paymentContract?: any;
        paymentType?: number;
        processType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        tLAmount?: number;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface PaymentCancelContract extends BOA.Common.Types.ContractBase {
        cancelBusinessKey?: number;
        hostIP?: string;
        hostName?: string;
        paymentCancelId?: number;
        paymentId?: number;
        systemDate?: Date;
        userName?: string;
        wFInstanceId?: number;
    }
    interface PaymentCardContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        availableLimit?: number;
        branchId?: number;
        cancelReferenceNumber?: string;
        cardNumber?: string;
        paymentCardId?: number;
        paymentId?: number;
        provisionNumber?: string;
        referenceNumber?: string;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountInfo?: any;
        accountingReference?: any;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        authorizedPersonInfo?: any;
        beginTranDate?: Date;
        branchId?: number;
        businessKey?: number;
        cardInfo?: any;
        cardNumber?: string;
        cashPayerPhoneNumber?: string;
        cashPayerTaxNumber?: string;
        channelId?: number;
        channelName?: string;
        description?: string;
        endTranDate?: Date;
        fatherName?: string;
        fec?: number;
        fecCode?: string;
        fer?: number;
        fXProfitAmount?: number;
        gSMNumber?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        installmentNumber?: number;
        isPayable?: boolean;
        lastPaymentDate?: Date;
        motherName?: string;
        name?: string;
        notificationInfo?: any;
        paymentId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        registrationAccountNumber?: number;
        registrationAccountSuffix?: number;
        registrationDefinitionId?: number;
        registrationName?: string;
        registrationType?: any;
        relativePersonId?: number;
        religiousRequest?: string;
        religiousResponse?: string;
        remoteIdentityNumber?: string;
        remoteSecurityCode?: string;
        remoteTourCode?: string;
        resourceCode?: string;
        resourceId?: number;
        resultList?: any;
        securityCode?: string;
        status?: number;
        statusName?: string;
        statusText?: string;
        surname?: string;
        systemDate?: Date;
        thirdPersonId?: number;
        tLAmount?: number;
        tourCode?: string;
        tourName?: string;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        wFInstanceId?: number;
        workGroupId?: number;
        workGroupName?: string;
    }
    interface PaymentGroupContract extends BOA.Common.Types.ContractBase {
        cancelAmount?: number;
        cancelCount?: number;
        paymentAmount?: number;
        paymentCount?: number;
    }
    interface PaymentNotificationContract extends BOA.Common.Types.ContractBase {
        actionDate?: Date;
        actionType?: number;
        errorDescription?: string;
        paymentId?: number;
        paymentNotificationId?: number;
        request?: string;
        response?: string;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        cancelAmount?: number;
        cancelCount?: number;
        endReconDate?: Date;
        hostIP?: string;
        hostName?: string;
        paymentAmount?: number;
        paymentCount?: number;
        paymentList?: any;
        paymentReconDetailList?: any;
        paymentReconId?: number;
        reconDate?: Date;
        reconType?: number;
        reconTypeName?: string;
        registrationDefinitionId?: number;
        registrationName?: string;
        registrationType?: any;
        startReconDate?: Date;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconDetailContract extends BOA.Common.Types.ContractBase {
        localPaymentContract?: any;
        remotePaymentContract?: any;
    }
    interface RegistrationDefinitionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        beginDate?: Date;
        channelId?: number;
        endDate?: Date;
        fec?: number;
        fecCode?: string;
        fecName?: string;
        hostIP?: string;
        hostName?: string;
        isPastDateCancellable?: boolean;
        processStatus?: boolean;
        processStatusName?: string;
        processType?: number;
        registrationDefinitionId?: number;
        registrationName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ReligiousCommon {
    }
    interface ReligiousResultContract extends BOA.Common.Types.ContractBase {
        name?: string;
        value?: string;
    }
    interface XmlSerializerHelper {
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Religious.Extensions {
    interface ByteExtensions {
    }
    interface DateTimeExtensions {
    }
    interface DecimalExtensions {
    }
    interface PredicateBuilder {
    }
    interface StringExtensions {
    }
    interface XmlExtensions {
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Religious.ReligiousCommon {
    export const enum ActionType {
        Payment = 1,
        Cancel = 2
    }
    export const enum InquiryType {
        Debt = 1,
        Receipt = 2
    }
    export const enum PaymentStatus {
        Active = 1,
        CancelApproving = 2,
        Canceled = 3
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum ProcessType {
        Payment = 1,
        Refund = 2
    }
    export const enum ReconStatus {
        Empty = 0,
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum ReconType {
        Automatic = 1,
        Manual = 2
    }
    export const enum RegistrationStatus {
        Active = 1,
        Passive = 2
    }
    export const enum RegistrationType {
        PRE_PAYMENT = 1,
        EXAMINATION = 2,
        HADJ_PAYMENT = 3,
        HADJ_REFUND = 4,
        UMRAH_PAYMENT = 5,
        UMRAH_REFUND = 6
    }
    export const enum SaveResponseType {
        Cancel = 1,
        Ok = 2,
        Save = 3
    }
    export const enum UpdateResponseType {
        Cancel = 1,
        Ok = 2,
        Update = 3
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.SGK {
    export const enum DisabledMailStatus {
        FirstMail = 1,
        SecondMail = 2
    }
    export const enum EditMode {
        New = 1,
        Edit = 2,
        Show = 3
    }
    export const enum FieldValueType {
        StaticValue = 0,
        TextValue = 1,
        ParseValue = 2
    }
    export const enum InstitutionType {
        SSK = 1,
        BAGKUR = 2,
        EMEKLI_SANDIGI = 3
    }
    export const enum MailType {
        Success = 0,
        UnSuccess = 1,
        Deposit = 2,
        PayBack = 3
    }
    export const enum ParseType {
        None = 0,
        After = 1,
        Before = 2
    }
    export const enum PaymentState {
        NONE = 0,
        WILL_PAID = 1,
        PAID = 2,
        WILL_TRANSFER_TO_DEPOSIT_ACCOUNT = 3,
        TRANSFERED_TO_DEPOSIT_ACCOUNT = 4,
        TRANSFERED_TO_SSI_CURRENT_ACCOUNT = 5,
        MANUEL_PAID = 6,
        WILL_TRANSFER_TO_CONCENTRATION_ACCOUNT = 7,
        TRANSFERED_TO_CONCENTRATION_ACCOUNT = 8,
        CAN_NOT_BE_PAID = 9
    }
    export const enum ResponseType {
        Cancel = 1,
        Ok = 2,
        Update = 3
    }
    export const enum RetiredSalaryDebtCode {
        SSK = 9103,
        BAGKUR = 9203,
        EMEKLI_SANDIGI = 9303
    }
    export const enum SalaryAndCompanyErrors {
        INVALID_INSTITUTION_CODE = 1,
        INVALID_BRANCH_ID = 2,
        INVALID_ACCOUNTNUMBER = 3,
        NOT_FOUND_ACCOUNTNUMBER = 4,
        DISCORDANT_CUSTOMER_NAME_SURNAME = 5,
        NOT_FOUND_ACCOUNTSUFFIX = 6,
        INVALID_BANK_CODEE = 7,
        REPETITION_RECORD = 8,
        INSUFFICIENT_BALANCE = 9,
        NOT_FOUND_COMPANY = 10,
        INVALID_ACCOUNTSUFFIX = 11,
        DISCORDANT_TAXNUMBER = 12
    }
    export const enum SSIAccountType {
        SalaryAccount = 1,
        CompanyAccount = 2,
        ConcentrationAccount = 3,
        CurrentAccount = 4
    }
    export const enum SsiCompanyType {
        Hospital = 1,
        Drugstore = 2,
        Optic = 3
    }
    export const enum ValidType {
        AccountNumber = 1,
        AccountSuffix = 2,
        BranchId = 3
    }
    interface AccountingReferenceContract extends BOA.Common.Types.ContractBase {
        description?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface AccountsExtreDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountsExtreDetailId?: number;
        accountSuffix?: number;
        balance?: number;
        bankReference?: string;
        branchId?: number;
        credit?: number;
        debit?: number;
        description?: string;
        eFTQueryNumber?: string;
        errorCount?: number;
        extreDate?: Date;
        extreType?: number;
        hostName?: string;
        iBAN?: string;
        institutionReference?: string;
        nameTitleSurname?: string;
        processDate?: Date;
        queryToken?: string;
        receiverIBAN?: string;
        receiverIdentity?: string;
        receiverName?: string;
        recordCount?: number;
        resultCode?: number;
        resultDesc?: string;
        resultLevel?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AccountsExtreSummaryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountsExtreSummaryId?: number;
        accountSuffix?: number;
        bankReference?: string;
        branchId?: number;
        closingBalance?: number;
        credit?: number;
        debit?: number;
        description?: string;
        eFTQueryNumber?: string;
        errorContractList?: any;
        extreDate?: Date;
        extreType?: number;
        hostName?: string;
        iBAN?: string;
        institutionReference?: string;
        nameTitleSurname?: string;
        openingBalance?: number;
        quantity?: number;
        resultCode?: number;
        resultDesc?: string;
        resultLevel?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AccountsQueryDetailContract extends BOA.Common.Types.ContractBase {
        accountDefinition?: number;
        accountsQueryDetailId?: number;
        accountType?: number;
        branchId?: number;
        debitType?: number;
        errorCount?: number;
        extreDate?: Date;
        extreDetailContractList?: any;
        extreErrorList?: any;
        extreSummaryContract?: any;
        extreSummaryContractList?: any;
        extreType?: number;
        hostName?: string;
        iBAN?: string;
        numberOfAccounts?: number;
        processType?: number;
        queryState?: number;
        recordCount?: number;
        resultCode?: number;
        resultDesc?: string;
        resultLevel?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AuditOfficeContract extends BOA.Common.Types.ContractBase {
        auditOfficeId?: number;
        cityCode?: string;
        code?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        authorizedPersonId?: number;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        relativePersonId?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomStrings {
    }
    interface DebtContract extends BOA.Common.Types.ContractBase {
        debtAmount?: number;
        debtCode?: number;
        debtCodeAck?: string;
        debtDetails?: any;
        debtId?: number;
        description?: string;
        dueDate?: Date;
        nameTitle?: string;
        orderNumber?: number;
    }
    interface DebtDetailContract extends BOA.Common.Types.ContractBase {
        detailName?: string;
        detailValue?: string;
    }
    interface DebtSubTypeContract extends BOA.Common.Types.ContractBase {
        code?: number;
        debtSubTypeId?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DebtTypeContract extends BOA.Common.Types.ContractBase {
        code?: number;
        debtTypeId?: number;
        description?: string;
        hasPartialPayment?: number;
        hostIP?: string;
        hostName?: string;
        inquiryTypeCode?: number;
        sgkDescription?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DebtTypeRelationContract extends BOA.Common.Types.ContractBase {
        cancelDuration?: string;
        debtTypeCode?: number;
        debtTypeDescription?: string;
        debtTypeRelationId?: number;
        description?: string;
        hasPartialPayment?: boolean;
        hostIP?: string;
        hostName?: string;
        inquiryTypeCode?: number;
        qTypeCode?: number;
        qTypeDescription?: string;
        qTypeMaxLength?: number;
        qTypeMinLength?: number;
        queryTypeCode?: number;
        queryTypeDescription?: string;
        reQueryStatus?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ExtreCommon {
    }
    interface ExtreNotificationErrorContract extends BOA.Common.Types.ContractBase {
        bankReference?: string;
        branchId?: number;
        credit?: number;
        debit?: number;
        description?: string;
        eFTQueryNumber?: string;
        extreDate?: Date;
        extreNotificationErrorId?: number;
        hostName?: string;
        iBAN?: string;
        institutionReference?: string;
        resultCode?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GroupConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configProdValue?: string;
        configTestValue?: string;
        groupConfigId?: number;
        groupInfoCode?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GroupErrorContract extends BOA.Common.Types.ContractBase {
        errorCode?: string;
        errorDescription?: string;
        errorLevel?: string;
        errorNumber?: number;
        errorUIDescription?: string;
        groupErrorId?: number;
        groupInfoCode?: number;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface GroupInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        code?: number;
        configList?: any;
        fec?: number;
        groupInfoId?: number;
        hasSubUrl?: boolean;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        name?: string;
        serviceName?: string;
        status?: number;
        systemDate?: Date;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InquiryTypeContract extends BOA.Common.Types.ContractBase {
        code?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        inquiryTypeId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OrderedDebtContract extends BOA.Common.Types.ContractBase {
        accrualDate?: Date;
        accrualTermMonth?: string;
        accrualTermYear?: string;
        bankCode?: string;
        corporationCode?: string;
        debtAmount?: number;
        debtCodeAck?: string;
        debtId?: number;
        debtTypeCode?: number;
        description?: string;
        dueDate?: Date;
        hostIP?: string;
        hostName?: string;
        insertDate?: Date;
        lineDefiner?: string;
        nameTitleSurname?: string;
        orderBranchId?: number;
        orderNumber?: string;
        paymentOrderId?: number;
        qTypeValue?: string;
        queryId?: number;
        status?: number;
        systemDate?: Date;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OrderReconSummaryContract extends BOA.Common.Types.ContractBase {
        localPaymentOrderContract?: any;
        remotePaymentOrderContract?: any;
    }
    interface OrderServiceResultContract extends BOA.Common.Types.ContractBase {
        orderedBankCode?: string;
        orderedBankName?: string;
        orderedDebtDescription?: string;
        resultCode?: number;
        resultDescription?: string;
        resultLevel?: number;
    }
    interface PaymentAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        fecCode?: string;
        iBAN?: string;
        paymentId?: number;
        workGroupId?: number;
    }
    interface PaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        paymentContract?: any;
        paymentType?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface PaymentCancelContract extends BOA.Common.Types.ContractBase {
        cancelBusinessKey?: number;
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        systemDate?: Date;
        userName?: string;
        wFInstanceId?: number;
    }
    interface PaymentCardInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        cancelReferenceNumber?: string;
        cardNumber?: string;
        cardType?: string;
        fec?: number;
        paymentCardInfoId?: number;
        paymentId?: number;
        provisionNumber?: string;
        referenceNumber?: string;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountInfo?: any;
        accountingReference?: any;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        auditOfficeCode?: number;
        auditOfficeName?: string;
        authorizedPersonInfo?: any;
        beginTranDate?: Date;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cardInfo?: any;
        cashPayerPhoneNumber?: string;
        channelId?: number;
        channelName?: string;
        customerName?: string;
        debtDescription?: string;
        debtDetailList?: any;
        debtDetails?: string;
        debtId?: number;
        debtTypeCode?: number;
        debtTypeName?: string;
        description?: string;
        divitInstanceId?: string;
        dueDate?: Date;
        endTranDate?: Date;
        firstDebtAmount?: number;
        groupAccountNumber?: number;
        groupAccountSuffix?: number;
        groupInfoCode?: number;
        groupInfoName?: string;
        hasCrossCheck?: boolean;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        identityNumber?: string;
        incomingReference?: string;
        inquiryTypeCode?: number;
        inquiryTypeName?: string;
        isPartialPayment?: boolean;
        isSequential?: number;
        mainBusinessKey?: number;
        nameTitleSurname?: string;
        notificationInfo?: any;
        orderNumber?: string;
        outgoingReference?: string;
        paymentId?: number;
        paymentOrderId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        qTypeCode?: number;
        qTypeName?: string;
        qTypeValue?: string;
        queryId?: number;
        queryTypeCode?: number;
        queryTypeName?: string;
        relativePersonId?: number;
        request?: string;
        resourceCode?: string;
        resourceId?: number;
        response?: string;
        resultCode?: number;
        resultLevel?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        thirdPersonId?: number;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
        wFInstanceId?: number;
        workGroupId?: number;
        workGroupName?: string;
    }
    interface PaymentEmailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        channelId?: number;
        debtTypeCode?: string;
        debtTypeName?: string;
        dueDate?: Date;
        hostIP?: string;
        hostName?: string;
        mainBusinessKey?: number;
        orderNumber?: string;
        paymentEmailId?: number;
        paymentType?: number;
        personEmail?: string;
        productType?: string;
        qTypeValue?: string;
        resultType?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentEmailRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: any;
    }
    interface PaymentNotificationContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        paymentId?: number;
        paymentNotificationId?: number;
        processType?: number;
        request?: string;
        response?: string;
        resultCode?: number;
        resultLevel?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentNotifyEODLogContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        businessKey?: number;
        logText?: string;
        paymentId?: number;
        processType?: number;
    }
    interface PaymentOrderAvailableCardsContract extends BOA.Common.Types.ContractBase {
        cardDescription?: string;
        cardType?: string;
        hostIP?: string;
        hostName?: string;
        isBusiness?: number;
        paymentOrderAvailableCardsId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderCommunicationContract extends BOA.Common.Types.ContractBase {
        communicationType?: number;
        paymentOrderCommunicationId?: number;
        paymentOrderId?: number;
        paymentOrderResultType?: number;
    }
    interface PaymentOrderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountNumberUICriteria?: number;
        beginTranDate?: Date;
        branchId?: number;
        cancelDate?: Date;
        channelId?: number;
        channelName?: string;
        debtType?: number;
        debtTypeCode?: string;
        debtTypeName?: string;
        divitInstanceId?: string;
        endTranDate?: Date;
        hostIP?: string;
        hostName?: string;
        insertDate?: Date;
        insertTime?: Date;
        limitedAmount?: number;
        limitedCreditCardAmount?: number;
        nameTitleSurname?: string;
        newQTypeValue?: string;
        orderedDebtDataContract?: any;
        orderNumber?: string;
        ownerType?: number;
        paymentOrderCommunicationList?: any;
        paymentOrderDetailList?: any;
        paymentOrderId?: number;
        paymentStartDate?: Date;
        qTypeCode?: number;
        qTypeValue?: string;
        serviceResult?: any;
        status?: number;
        statusName?: string;
        suspendedDate?: Date;
        systemDate?: Date;
        taxNumber?: string;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workgroupId?: number;
        workGroupName?: string;
    }
    interface PaymentOrderDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditCardNumber?: string;
        paymentOrderDetailId?: number;
        paymentOrderId?: number;
        productType?: string;
        sequenceNumber?: number;
    }
    interface PaymentOrderHistoryContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        debtId?: number;
        debtTypeCode?: string;
        errorDescription?: string;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        paymentOrderDetailId?: number;
        paymentOrderId?: number;
        qTypeValue?: string;
        systemDate?: Date;
        userName?: string;
        workDate?: Date;
    }
    interface PaymentOrderReconContract extends BOA.Common.Types.ContractBase {
        debtCode?: string;
        debtTypeName?: string;
        hostIP?: string;
        hostName?: string;
        institutionOrderCancelCount?: number;
        institutionOrderCount?: number;
        institutionOrderSuspendedCount?: number;
        lastReconDate?: Date;
        orderCancelCount?: number;
        orderCount?: number;
        orderSuspendedCount?: number;
        paymentOrderReconId?: number;
        reconDate?: Date;
        reconType?: number;
        reconTypeName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranTime?: any;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderSuspendedContract extends BOA.Common.Types.ContractBase {
        dueDate?: Date;
        hostIP?: string;
        hostName?: string;
        orderNumber?: string;
        paymentOrderId?: number;
        paymentOrderSuspendedId?: number;
        qTypeValue?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchCode?: number;
        branchName?: string;
        cancelAmount?: number;
        cancelQuantity?: number;
        endReconDate?: Date;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        paymentReconDetailList?: any;
        paymentReconId?: number;
        quantity?: number;
        reconDate?: Date;
        reconTranType?: number;
        reconTranTypeName?: string;
        reconTypeCode?: number;
        reconTypeName?: string;
        startReconDate?: Date;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        trandDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconDetailContract extends BOA.Common.Types.ContractBase {
        localPaymentContract?: any;
        remotePaymentContract?: any;
    }
    interface PaymentReconSummaryContract extends BOA.Common.Types.ContractBase {
        localPaymentReconContract?: any;
        remotePaymentReconContract?: any;
    }
    interface PaymentSMSContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        channelId?: number;
        debtTypeCode?: string;
        debtTypeName?: string;
        dueDate?: Date;
        hostIP?: string;
        hostName?: string;
        mainBusinessKey?: number;
        orderNumber?: string;
        paymentSMSId?: number;
        paymentType?: number;
        personGSM?: string;
        productType?: string;
        qTypeValue?: string;
        resultType?: number;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentSMSRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: any;
    }
    interface PremiumCommon {
    }
    interface PremiumOrderCommon {
    }
    interface QTypeContract extends BOA.Common.Types.ContractBase {
        code?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        maxLength?: number;
        minLength?: number;
        qTypeId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface QueryTypeContract extends BOA.Common.Types.ContractBase {
        cancelDuration?: string;
        code?: number;
        debtTypeList?: any;
        description?: string;
        hostIP?: string;
        hostName?: string;
        isSequential?: number;
        qTypeList?: any;
        queryTypeId?: number;
        reQueryStatus?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ReconTypeContract extends BOA.Common.Types.ContractBase {
        code?: number;
        description?: string;
        hostIP?: string;
        hostName?: string;
        reconTypeId?: number;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.SGK.Extensions {
    interface ByteExtensions {
    }
    interface Constants {
    }
    interface DateTimeExtensions {
    }
    interface DecimalExtensions {
    }
    interface Field {
    }
    interface FileReader {
        fileRecords?: string[];
        firstRow?: string;
        lastRow?: string;
    }
    interface IEnumerableExtensions {
    }
    interface Methods {
    }
    interface ObjectExtensions {
    }
    interface PredicateBuilder {
    }
    interface StringExtensions {
    }
    interface XmlExtensions {
    }
}

declare namespace BOA.Types.Kernel.PaymentSystems.SGK.ExtreCommon {
    export const enum ExtreType {
        Summary = 1,
        Detail = 2
    }
    export const enum ProcessType {
        Empty = 0,
        Approved = 1,
        Canceled = 2
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.SGK.PremiumCommon {
    export const enum ErrorShowType {
        All = 1,
        OnlyUI = 2,
        OnlyBatch = 3
    }
    export const enum GroupInfoCode {
        Sgk = 1,
        Order = 4
    }
    export const enum InquiryType {
        Online = 1,
        Offline = 2,
        Other = 3
    }
    export const enum InstitutionErrorCode {
        PaymentAlreadyDone = 8,
        PaymentAlreadyDoneByOther = 15,
        PartialPaymentIsNotPermitted = 121,
        RecordNotFound = 16
    }
    export const enum PaymentStatus {
        Accounting = 1,
        Notification = 2,
        CancelApproving = 3,
        Cancel = 4,
        Unknown = 5
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3,
        GeneralLedger = 4
    }
    export const enum ProcessType {
        Payment = 1,
        Cancel = 2
    }
    export const enum ReconStatus {
        Empty = 0,
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum ReconTranType {
        Automatic = 1,
        Manual = 2
    }
    export const enum RecordStatus {
        Active = 1,
        Passive = 2
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.SGK.PremiumOrderCommon {
    export const enum CommunicationType {
        Email = 1,
        Sms = 2
    }
    export const enum OrderedDebtStatus {
        WillPaid = 1,
        Successful = 2,
        Unsuccessful = 3
    }
    export const enum OrderQueryType {
        QueryNumber = 0,
        IntallmentNumber = 1
    }
    export const enum PaymentOrderResultType {
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum PaymentOrderStatus {
        Active = 1,
        Cancel = 2,
        Suspended = 3,
        ActiveOnBank = 4,
        CancelOnBank = 5
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Tax {
    interface AccountingReferenceContract extends BOA.Common.Types.ContractBase {
        description?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface CancelPaymentNotificationContract extends BOA.Common.Types.ContractBase {
        cancelPaymentNotificationId?: number;
        paymentId?: number;
        retryCount?: number;
        status?: number;
    }
    interface DebitContract extends BOA.Types.Kernel.PaymentSystems.Tax.DebitContractBase {
        accrualDate?: Date;
        amount?: number;
        description?: string;
        discountAmount?: number;
        dueDate?: Date;
        installmentNumber?: number;
        opsatirOId?: string;
        opshOId?: string;
        serialAndOrderNumber?: string;
        subTaxCode?: string;
        tableType?: number;
    }
    interface DebitContractBase extends BOA.Common.Types.ContractBase {
        accrualNumber?: string;
        companyType?: string;
        fatherName?: string;
        firstName?: string;
        followFileNumber?: string;
        identityNumber?: string;
        issueDate?: Date;
        lastName?: string;
        notificationDate?: Date;
        orderNumber?: number;
        orgoId?: string;
        paymentPlanDocumentAndInstalmentNumber?: string;
        paymentPlanDocumentNumber?: string;
        paymentPlanMainOid?: string;
        period?: string;
        plateNumber?: string;
        reference?: string;
        registrationFileNumber?: string;
        serialNumber?: string;
        taxCode?: string;
        taxName?: string;
        taxNumber?: string;
        taxOfficeCode?: string;
        taxOfficeName?: string;
        totalAmount?: number;
        totalDiscountAmount?: number;
    }
    interface DebitQueryContract extends BOA.Common.Types.ContractBase {
        accrualNumber?: string;
        amount?: number;
        beginInstallmentDate?: Date;
        branchId?: number;
        endInstallmentDate?: Date;
        installmentNumber?: number;
        isAtOnce?: number;
        period?: string;
        plateNumber?: string;
        queryMethod?: any;
        registryDate?: Date;
        taxCode?: string;
        taxNumber?: string;
        taxOfficeCode?: string;
    }
    interface DebitQueryExtendedContract extends BOA.Common.Types.ContractBase {
        debitQueryContract?: any;
        terminalId?: string;
    }
    interface EFTDifferenceContract extends BOA.Common.Types.ContractBase {
        bankEFTAmount?: number;
        eFTDate?: Date;
        eFTDifferenceType?: number;
        eFTType?: string;
        expectedAmount?: number;
        queryNumber?: string;
        stateBoardDetailId?: number;
        taxOfficeCode?: string;
        transactionDate?: Date;
    }
    interface GetPaymentReconContract extends BOA.Common.Types.ContractBase {
        beginTime?: any;
        branchId?: string;
        endTime?: any;
        orderNumber?: number;
        paymentReconDate?: string;
        paymentReconServiceNumber?: string;
        serialNumber?: string;
        taxOfficeCode?: string;
        timeInterval?: string;
        timeIntervalId?: string;
    }
    interface MainDebitContract extends BOA.Common.Types.ContractBase {
        accrualNumber?: string;
        beginInstallmentDate?: Date;
        debitContractList?: any;
        dueDate?: Date;
        earlyPaymentState?: boolean;
        endInstallmentDate?: Date;
        installmentNumber?: number;
        lateState?: boolean;
        name?: string;
        serialAndOrderNumber?: string;
        serviceCallId?: number;
        subTaxAmount?: number;
        taxAmount?: number;
        taxCode?: string;
        taxNumber?: string;
        totalAmount?: number;
        totalDiscountAmount?: number;
        validInstallment?: boolean;
    }
    interface PaymentChannelConfigurationContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isOnline?: number;
        paymentChannelConfigurationId?: number;
        systemDate?: Date;
        taxCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workBeginTime?: string;
        workEndTime?: string;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountingAmount?: number;
        accrualDate?: Date;
        accrualNumber?: string;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        channelId?: number;
        corporationName?: string;
        description?: string;
        divitInstanceId?: string;
        firstName?: string;
        gIBOrderNumber?: number;
        gIBSerialNumber?: string;
        hostIP?: string;
        hostName?: string;
        iMEI?: string;
        installmentNumber?: number;
        isAtOnce?: number;
        isOnlinePayment?: number;
        isPartialPayment?: number;
        issueDate?: Date;
        lastName?: string;
        orderNumber?: number;
        paymentId?: number;
        paymentType?: number;
        period?: string;
        printSlipCount?: number;
        serialNumber?: string;
        serviceCallId?: number;
        status?: number;
        systemDate?: Date;
        taxCode?: string;
        taxNumber?: string;
        taxOfficeCode?: string;
        totalDiscount?: number;
        transactionDate?: Date;
        transactionReference?: string;
        transactionTime?: any;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface PaymentDetailAccountInformationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        paymentDetailAccountInformationId?: number;
        paymentId?: number;
    }
    interface PaymentDetailCardInformationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        cancelProvisionNumber?: string;
        cardNumber?: string;
        paymentDetailCardInformationId?: number;
        paymentId?: number;
        provisionNumber?: string;
    }
    interface PaymentDetailContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        paymentDetailId?: number;
        paymentId?: number;
        subTaxCode?: string;
        taxCode?: string;
    }
    interface PaymentDetailVehicleContract extends BOA.Common.Types.ContractBase {
        notificationDate?: Date;
        paymentDetailVehicleId?: number;
        paymentId?: number;
        plateNumber?: string;
        registryDate?: Date;
        vehicleCapacity?: number;
        vehicleModel?: number;
        vehicleType?: number;
    }
    interface PaymentListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accrualDate?: Date;
        accrualNumber?: string;
        beginTranDate?: Date;
        branchId?: number;
        businessKey?: string;
        channelId?: number;
        channelName?: string;
        endTranDate?: Date;
        hostIP?: string;
        hostName?: string;
        imei?: string;
        installmentNumber?: number;
        isOnlinePayment?: number;
        isOnlinePaymentStr?: string;
        isPartialPayment?: number;
        isPartialPaymentStr?: string;
        issueDate?: Date;
        notificationStatus?: string;
        orderNumber?: number;
        paymentId?: number;
        paymentType?: number;
        paymentTypeName?: string;
        period?: string;
        serialNumber?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        taxCode?: string;
        taxNumber?: string;
        taxOfficeAccountNumber?: number;
        taxOfficeAccountSuffix?: number;
        taxOfficeCode?: string;
        totalAmount?: number;
        totalDiscount?: number;
        transactionDate?: Date;
        transactionReference?: string;
        transactionTime?: any;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        year?: number;
    }
    interface PaymentNotificationContract extends BOA.Common.Types.ContractBase {
        notificationXml?: string;
        paymentId?: number;
        paymentNotificationId?: number;
        retryCount?: number;
        status?: number;
    }
    interface PaymentProcessContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accrualDate?: Date;
        cardNumber?: string;
        corporationName?: string;
        divitInstanceId?: string;
        firstName?: string;
        imei?: string;
        isAtOnce?: number;
        isOnline?: boolean;
        isPartialPayment?: number;
        issueDate?: Date;
        lastName?: string;
        mainDebitContract?: any;
        notificationDate?: Date;
        paymentType?: number;
        phoneNumber?: string;
        registryDate?: Date;
        serialNumber?: string;
        taxNumber?: string;
        taxOfficeAccountNumber?: number;
        taxOfficeAccountSuffix?: number;
        taxOfficeBranch?: number;
        taxPayinPersonTaxNumber?: string;
        vehicleCapacity?: number;
        vehicleModel?: number;
        vehicleType?: number;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        beginTranDate?: Date;
        cancelAmount?: number;
        cancelCount?: number;
        endTranDate?: Date;
        error?: string;
        gIBCancelAmount?: number;
        gIBCancelCount?: number;
        gIBPaymentAmount?: number;
        gIBPaymentCount?: number;
        gIBValidAmount?: number;
        gIBValidCount?: number;
        hostIP?: string;
        hostName?: string;
        paymentAmount?: number;
        paymentCount?: number;
        paymentReconId?: number;
        reconTypeId?: number;
        status?: number;
        statusDesc?: string;
        systemDate?: Date;
        taxOfficeEReportDescription?: string;
        taxOfficeEReportStatus?: number;
        transactionDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validAmount?: number;
        validCount?: number;
    }
    interface PaymentReconViewContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchName?: string;
        businessKey?: string;
        cancelAmount?: number;
        cancelCount?: number;
        cancelPaymentNotificationStatus?: number;
        error?: string;
        installmentNumber?: string;
        notificationStatusDesc?: string;
        orderNumber?: number;
        paymentAmount?: number;
        paymentCount?: number;
        paymentDateTime?: string;
        paymentId?: number;
        paymentNotificationStatus?: number;
        paymentStatus?: number;
        paymentStatusDesc?: string;
        serialNumber?: string;
        state?: string;
        stateDesc?: string;
        taxCode?: string;
        taxOfficeCode?: string;
        validAmount?: number;
        validCount?: number;
    }
    interface PaymentTransactionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        hostName?: string;
        paymentId?: number;
        paymentTransactionId?: number;
        status?: number;
        systemDate?: Date;
        transactionType?: number;
        userName?: string;
        wFInstanceId?: number;
    }
    interface ReconReportDifferenceContract extends BOA.Common.Types.ContractBase {
        eFTDate?: Date;
        eFTType?: string;
        invalidReconAmount?: number;
        invalidReconCount?: number;
        invalidReportAmount?: number;
        invalidReportCount?: number;
        reconReportDifferenceId?: number;
        recordType?: number;
        reportSentDate?: Date;
        stateBoardDetailId?: number;
        taxOfficeCode?: string;
        transactionDate?: Date;
        validReconAmount?: number;
        validReconCount?: number;
        validReportAmount?: number;
        validReportCount?: number;
    }
    interface ReconReportDifferenceDetailContract extends BOA.Common.Types.ContractBase {
        eFTDate?: Date;
        eFTType?: string;
        receiptNumber?: string;
        reconAmount?: number;
        reconReportDifferenceId?: number;
        reconStatus?: number;
        recordType?: number;
        reportAmount?: number;
        reportStatus?: number;
        taxOfficeCode?: string;
        transactionDate?: Date;
    }
    interface ServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        httpStatusCode?: string;
        methodName?: string;
        paymentReconServiceNumber?: string;
        processId?: number;
        queryType?: string;
        requestDate?: Date;
        requestXml?: string;
        responseDate?: Date;
        responseXml?: string;
        sendXml?: string;
        serviceCallId?: number;
        systemDate?: Date;
        url?: string;
        userName?: string;
        webMetodName?: string;
    }
    interface StateBoardContract extends BOA.Common.Types.ContractBase {
        messageCode?: number;
        messageDescription?: string;
        messageType?: string;
        stateBoardId?: number;
        systemDate?: Date;
    }
    interface StateBoardDetailContract extends BOA.Common.Types.ContractBase {
        beginStepDate?: Date;
        differenceId?: string;
        endStepDate?: Date;
        messageCode?: number;
        messageDescription?: string;
        messageType?: string;
        stateBoardId?: number;
        stepCode?: string;
        stepCodeDescription?: string;
        stepDate?: Date;
    }
    interface SubTaxDefinitionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isActiveDesc?: string;
        name?: string;
        subTaxCode?: string;
        subTaxCodeAndName?: string;
        subTaxDefinitionId?: number;
        systemDate?: Date;
        taxCode?: string;
        taxName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TaxChannelContract extends BOA.Common.Types.ContractBase {
        afterTomorrow?: Date;
        beforeYesterday?: Date;
        channelId?: number;
        channelName?: string;
        dbTimeout?: number;
        isActive?: number;
        today?: Date;
        tomorrow?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        yesterday?: Date;
    }
    interface TaxCommon {
    }
    interface TaxDefinitionContract extends BOA.Common.Types.ContractBase {
        cancelType?: number;
        cancelTypeDesc?: string;
        channelId?: number;
        continuityCode?: number;
        continuityCodeDesc?: string;
        creditCardPaid?: number;
        creditCardPaidDesc?: string;
        description?: string;
        hasPlate?: number;
        hostIP?: string;
        hostName?: string;
        installmentCount?: number;
        isActive?: number;
        isActiveDesc?: string;
        isAtOnce?: number;
        isOnline?: number;
        isPartialAmountQuery?: number;
        isPartialAmountQueryDesc?: string;
        name?: string;
        paymentCriteria?: number;
        paymentCriteriaDesc?: string;
        subTaxCode?: string;
        systemDate?: Date;
        taxCode?: string;
        taxCodeAndName?: string;
        taxDefinitionId?: number;
        taxDescription?: string;
        taxGroupDefinitionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workBeginTime?: string;
        workEndTime?: string;
    }
    interface TaxIdentificationContract extends BOA.Common.Types.ContractBase {
        birthDate?: string;
        birthPlaceCode?: string;
        corporationName?: string;
        corporationType?: string;
        establishmentDate?: string;
        establishmentPlaceCode?: string;
        fatherName?: string;
        firstName?: string;
        hostIP?: string;
        hostName?: string;
        state?: string;
        surname?: string;
        systemDate?: Date;
        taxIdentificationId?: number;
        taxNumber?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TaxOfficeDefinitionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountSuffixForCreditCard?: number;
        branchId?: number;
        cityCode?: number;
        cityCodeDesc?: string;
        countyCode?: number;
        countyCodeDesc?: string;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        isActive?: number;
        isActiveDesc?: string;
        name?: string;
        serialNumber?: string;
        shortName?: string;
        systemDate?: Date;
        taxGroupDefinitionId?: number;
        taxOfficeCode?: string;
        taxOfficeCodeAndName?: string;
        taxOfficeDefinitionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TaxOfficeEReportContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        branchId?: number;
        cardNumber?: string;
        channelId?: number;
        corporationName?: string;
        eFTDate?: Date;
        eFTTypeCode?: string;
        name?: string;
        paymentType?: number;
        plateNumber?: string;
        receiptNumber?: string;
        status?: number;
        surname?: string;
        taxCode?: string;
        taxNumber?: string;
        taxOfficeCode?: string;
        transactionDate?: Date;
    }
    interface TaxOfficePaymentCounterContract extends BOA.Common.Types.ContractBase {
        orderNumber?: number;
        taxOfficeCode?: string;
        taxOfficePaymentCounterId?: number;
        year?: number;
    }
    interface TaxPayerContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressType?: string;
        birthPlace?: string;
        birthYear?: string;
        city?: string;
        corporationName?: string;
        corporationType?: string;
        county?: string;
        establishmentDate?: string;
        establishmentPlaceCode?: string;
        fatherName?: string;
        firstName?: string;
        hostIP?: string;
        hostName?: string;
        identityNumber?: string;
        phoneNumber?: string;
        surname?: string;
        systemDate?: Date;
        taxCount?: string;
        taxNumber?: string;
        taxOfficeCode?: string;
        taxPayerDetail?: string;
        taxPayerId?: number;
        userName?: string;
        zipCode?: string;
    }
    interface TaxPayerDetailContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        taxBeginDate?: string;
        taxCode?: string;
        taxFTCode?: string;
        taxNumber?: string;
        taxOfficeCode?: string;
        taxPayerCode?: string;
        taxPayerDetailId?: number;
        userName?: string;
    }
    interface TaxPayingPersonContract extends BOA.Common.Types.ContractBase {
        paymentId?: number;
        phoneNumber?: string;
        taxNumber?: string;
        taxPayingPersonId?: number;
    }
    interface TaxPaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        identityNumber?: string;
        paymentContract?: any;
        paymentDetailCardInformationContract?: any;
        paymentDetailContractList?: any;
        paymentType?: number;
        taxNumber?: string;
        taxOfficeCode?: string;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchId?: number;
        toFEC?: number;
        toUnitId?: number;
    }
    interface TaxPeriodDefinitionContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        periodBeginMonth?: string;
        periodBeginYear?: string;
        periodDescription?: string;
        periodEndMonth?: string;
        periodEndYear?: string;
        periodValue?: string;
        statusType?: string;
        systemDate?: Date;
        taxCode?: string;
        taxPayerCode?: number;
        taxPeriodDefinitionId?: number;
        userName?: string;
    }
    interface TaxPeriodScheduleContract extends BOA.Common.Types.ContractBase {
        beginPaymentDay?: string;
        beginPaymentMonth?: string;
        beginPaymentYear?: string;
        endPaymentDay?: string;
        endPaymentMonth?: string;
        endPaymentYear?: string;
        hostName?: string;
        installmentNumber?: number;
        paymentCriteria?: number;
        periodValue?: string;
        statusType?: string;
        systemDate?: Date;
        taxCode?: string;
        taxName?: string;
        taxPayerCode?: number;
        taxPeriodDefinitionId?: number;
        taxPeriodScheduleId?: number;
        userName?: string;
    }
    interface TaxPriceListContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        statusType?: string;
        taxCode?: string;
        taxPriceDescription?: string;
        taxPriceListId?: number;
    }
    interface WebServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        contentType?: string;
        kuvetTurkKASCode?: string;
        timeout?: number;
        url?: string;
        urlReport?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Tax.Extensions {
    interface DateTimeExtensions {
    }
    interface DecimalExtensions {
    }
    interface IEnumerableExtensions {
    }
    interface StringExtensions {
    }
    interface XmlSerializerHelper {
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.Tax.TaxCommon {
    export const enum CancelType {
        Cancel = 0,
        CanNotCancel = 1,
        CancelWithQuery = 2
    }
    export const enum CreditCardPaid {
        Yes = 1,
        No = 2
    }
    export const enum DebitQueryMethod {
        ByAccrualNumber = 1,
        ByTaxNumber = 2,
        ByMotorVehicle = 3,
        ByStatementInformation = 4
    }
    export const enum EFTDifferenceTYpe {
        Bank = 1,
        CentralBank = 2
    }
    export const enum EFTStatus {
        EFTWillBeSent = 1,
        EFTIncorrectAmountEFT = 2,
        EFTWasSent = 3
    }
    export const enum HttpPostType {
        DELETE = 0,
        PUT = 1,
        GET = 2
    }
    export const enum IsPartialPayment {
        AllTaxAmaount = 0,
        PartialPayment = 1
    }
    export const enum IsPaymentExists {
        NoRecord = 0,
        Exist = 1
    }
    export const enum NotificationStatus {
        Wait = 0,
        Send = 1
    }
    export const enum OnlinePaymentState {
        Offline = 0,
        Online = 1,
        OfflineAndOnline = 2
    }
    export const enum PaymentReconMethod {
        ByPaymentReconWithTime = 1,
        ByPaymentReconWithDateAndTimeInterval = 2,
        ByPaymentReconWithDateAndBranchId = 3,
        ByPaymentReconWithDateAndTaxOfficeCode = 4,
        ByPaymentReconWithSerialAndOrderNumber = 5,
        SendLastPaymentRecon = 6,
        ByTaskSendPaymentNotification = 7,
        ByTaskCancelPaymentNotification = 8
    }
    export const enum PaymentReconStatus {
        UnSuccesfull = 0,
        Succesfull = 1
    }
    export const enum PaymentReconType {
        FirstPaymentRecon = 0,
        LastPaymentRecon = 1
    }
    export const enum PaymentStatus {
        Payment = 1,
        CancelPayment = 2,
        Delete = 0
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum StateBoardType {
        Recon = 1,
        EReport = 2,
        BankEFT = 3,
        CentralBankEFT = 4
    }
    export const enum Status {
        Passive = 0,
        Active = 1
    }
    export const enum TaskMethod {
        ByTaskSendPaymentNotification = 0,
        ByTaskSendCancelPaymentNotification = 1
    }
    export const enum TaxContinuityCode {
        None = 0,
        Always = 1,
        InAllocationTime = 2,
        LatePayments = 3,
        EarlyPayment = 4
    }
    export const enum TaxMTVType {
        Car_StationWagon_RecreationalVehicles = 1,
        Minibus = 2,
        BusAndEquivalents = 3,
        PanelvanAndMotorCaravan = 4,
        TruckAndTractor = 5,
        Motorcycles = 6
    }
    export const enum TaxOfficeEReportStatus {
        Unsent = 0,
        Sent = 1
    }
    export const enum TransactionType {
        Insert = 1,
        PaymentNotificationWait = 2,
        PaymentNotificationWas = 3,
        CancelPaymentNotificationWait = 4,
        CancelPaymentNotificationWas = 5,
        CanCancelQuery = 6,
        DeletePaymentKTSide = 7,
        CancelPaymentByPaymentRecon = 8,
        SendPaymentByPaymentRecon = 9,
        CancelPaymentGIBByPaymentRecon = 10,
        DeletePaymentKTSideByPaymentRecon = 11
    }
    export const enum WebQueryType {
        heartbeat = 0,
        makbuz = 1,
        mutabakat = 2,
        mutabakatok = 3,
        mtborc = 4,
        gborc = 5,
        borc = 6
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.TDF {
    interface AccountingReferenceContract extends BOA.Common.Types.ContractBase {
        description?: string;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface AccrualInfoContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        corporationCode?: string;
        currencyCode?: string;
        debtorFirstName?: string;
        debtorLastName?: string;
        debtorTaxNumber?: string;
        description?: string;
        dueDate?: Date;
        installment?: number;
        isPartialPayment?: boolean;
        isTax?: boolean;
        mainBusinessKey?: number;
        orderNumber?: number;
        outerProcessNumber?: string;
        paymentOrder?: number;
        period?: string;
        serviceCode?: string;
        specialInfo?: string;
        subCorporationCode?: string;
        taxInfoList?: any;
        taxOfficeCode?: string;
        title?: string;
        validityDate?: Date;
    }
    interface AccrualQueryResultContract extends BOA.Common.Types.ContractBase {
        accrualList?: any;
        bankCode?: string;
        corporationCode?: string;
        queryResponseTime?: Date;
        resultCode?: string;
        resultDescription?: string;
    }
    interface PaymentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cancelDate?: Date;
        cancelReference?: string;
        channelId?: number;
        channelName?: string;
        corporationCode?: string;
        description?: string;
        divitInstanceId?: string;
        dueDate?: Date;
        fec?: number;
        firstName?: string;
        hostIP?: string;
        hostName?: string;
        isTax?: boolean;
        lastName?: string;
        mainBusinessKey?: number;
        outerProcessNumber?: string;
        payerIdentityNumber?: string;
        payerPhoneNumber?: string;
        paymentId?: number;
        paymentOrder?: number;
        paymentServiceCallId?: number;
        paymentType?: number;
        queryNumber?: string;
        queryServiceCallId?: number;
        serviceCode?: string;
        specialInfo?: string;
        status?: number;
        subCorporationCode?: string;
        systemDate?: Date;
        taxNumber?: string;
        taxPaymentId?: number;
        title?: string;
        tKGMChannelCode?: string;
        transactionDate?: Date;
        transactionNumber?: string;
        transactionTime?: any;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        validityDate?: Date;
    }
    interface PaymentDetailCardInformationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        cancelProvisionNumber?: string;
        cardNumber?: string;
        paymentDetailCardInformationContractId?: number;
        paymentId?: number;
        provisionNumber?: string;
    }
    interface PaymentListContract extends BOA.Common.Types.ContractBase {
        paymentAccountNumber?: number;
        paymentBranchId?: number;
        paymentChannelId?: number;
        paymentList?: any;
        paymentStatus?: string;
        paymentType?: string;
        paymentUserName?: string;
        queryDebtNumber?: string;
        transactionDateEnd?: Date;
        transactionDateStart?: Date;
    }
    interface PaymentProcessContract extends BOA.Common.Types.ContractBase {
        accountingDescription?: string;
        divitInstanceId?: string;
        payedContractList?: any;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentBranchCode?: number;
        paymentDetailCardInformationContract?: any;
        paymentElementInfo?: string;
        paymentId?: number;
        paymentQueryContract?: any;
        paymentType?: number;
        taxPayingPersonPhoneNumber?: string;
        taxPayingPersonTaxNumber?: string;
        totalPaymentAmount?: number;
    }
    interface PaymentQueryContract extends BOA.Common.Types.ContractBase {
        accrualQueryResult?: any;
        bankCode?: string;
        corporationCode?: string;
        isPayerCertain?: boolean;
        payerIdentityNumber?: string;
        payerIdentityType?: string;
        paymentChannel?: string;
        queryDebtNumber?: string;
        queryDebtType?: string;
        queryServiceCallId?: number;
        queryTime?: string;
        queryType?: string;
    }
    interface PaymentReconContract extends BOA.Common.Types.ContractBase {
        bankCancelAmount?: number;
        bankCancelCount?: number;
        bankPaymentAmount?: number;
        bankPaymentCount?: number;
        cancelResponseCode?: string;
        cancelResponseDescription?: string;
        corporationCode?: string;
        fec?: number;
        generalResponseCode?: string;
        generalResponseDescription?: string;
        hostIP?: string;
        hostName?: string;
        paymentReconId?: number;
        paymentResponseCode?: string;
        paymentResponseDescription?: string;
        reconDate?: Date;
        reconRequestTime?: Date;
        reconResponseTime?: Date;
        reconStatus?: number;
        reconType?: number;
        serviceCallId?: number;
        serviceCode?: string;
        subCorporationCode?: string;
        systemDate?: Date;
        tkgmCancelAmount?: number;
        tkgmCancelCount?: number;
        tkgmPaymentAmount?: number;
        tkgmPaymentCount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentReconListContract extends BOA.Common.Types.ContractBase {
        reconEndDate?: Date;
        reconList?: any;
        reconStartDate?: Date;
        reconStatus?: string;
    }
    interface ServiceCallContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        channelId?: number;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        httpStatusCode?: string;
        methodName?: string;
        paymentId?: number;
        paymentReconDate?: Date;
        paymentReconServiceNumber?: string;
        queryType?: string;
        requestDate?: Date;
        requestXml?: string;
        responseDate?: Date;
        responseXml?: string;
        sendXml?: string;
        serviceCallId?: number;
        systemDate?: Date;
        userName?: string;
        webMetodName?: string;
    }
    interface TaxInfoContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        taxCode?: string;
    }
    interface TDFCommon {
        deedFeesText?: string;
        taxText?: string;
    }
    interface TDFPaymentAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        amount?: number;
        channelId?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromBranchId?: number;
        fromFEC?: number;
        fromUnitId?: number;
        paymentContract?: any;
        paymentDetailCardInformationContract?: any;
        paymentType?: number;
        taxNumber?: string;
        tDFAccountNumber?: number;
        tDFAccountSuffix?: number;
        tDFBranchId?: number;
        tDFDebtInformation?: string;
        tDFFEC?: number;
        tDFUnitId?: number;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
    }
    interface WebServiceConfigurationContract extends BOA.Common.Types.ContractBase {
        corporationCode?: string;
        identityType?: string;
        kuvetTurkKASCode?: string;
        password?: string;
        timeout?: number;
        url?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.PaymentSystems.TDF.TDFCommon {
    export const enum CertainStatus {
        E = 0,
        H = 1
    }
    export const enum PaymentStatus {
        Payment = 1,
        CancelPayment = 2
    }
    export const enum PaymentType {
        Cash = 1,
        Account = 2,
        CreditCard = 3
    }
    export const enum QueryType {
        A = 0,
        O = 1
    }
    export const enum ReconStatus {
        Unsuccessfull = 0,
        Successful = 1
    }
    export const enum ReconType {
        GeneralRecon = 1,
        ServiceCodeRecon = 2,
        SubCorporationRecon = 3,
        ServiceCodeAndSubCorporationRecon = 4
    }
    interface PaymentStatusText {
    }
    interface PaymentTypeText {
    }
    interface ReconStatusText {
    }
    interface ReconTypeText {
    }
}
declare namespace BOA.Types.Kernel.Payroll {
    interface Common {
    }
    interface CommonMethods {
    }
    interface PaymentTransactionContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        accountNumber?: number;
        balanceEncrypted?: string;
        businessKey?: number;
        channelId?: number;
        creditEncrypted?: string;
        debitEncrypted?: string;
        descriptionEncrypted?: string;
        hostIP?: string;
        hostName?: string;
        journalLogActive?: boolean;
        outGoingId?: number;
        paymentTransactionId?: number;
        personId?: number;
        plannedPaymentTransactionId?: number;
        state?: number;
        systemDate?: Date;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        tranDate?: Date;
        transactionType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentTransactionReturnContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        accountNumber?: number;
        balance?: number;
        credit?: number;
        debit?: number;
        description?: string;
        journalLogActive?: boolean;
        outGoingId?: number;
        paymentTransactionId?: number;
        tranDate?: Date;
    }
    interface PayrollBalanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountEncrypted?: string;
        credit?: number;
        creditEncrypted?: string;
        employeeNumber?: number;
        fullName?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isAutoTransferEnabled?: number;
        journalLogActive?: boolean;
        payrollBalanceId?: number;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PayrollBalanceRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.Payroll.PayrollBalanceContract;
        isIBAN?: boolean;
        journalLogActive?: boolean;
        outGoingId?: number;
        outGoingRef?: string;
        slipWarning?: string;
    }
    interface PayrollTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        businessKey?: number;
        channelId?: number;
        description?: string;
        isIBAN?: boolean;
        journalLogActive?: boolean;
        languageId?: number;
        toAccountName?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBankId?: number;
        toBranchId?: number;
        toCreditCardNo?: string;
        toFatherName?: string;
        toIBAN?: string;
        toPhoneNumber?: string;
        tranDate?: Date;
        transactionType?: number;
    }
    interface SGKBasisContract extends BOA.Common.Types.ContractBase {
        journalLogActive?: boolean;
        sGKDay?: number;
        sGKPremium?: number;
        totalBasis?: number;
    }
}
declare namespace BOA.Types.Kernel.Payroll.Common {
    export const enum AccessType {
        Read = 1,
        FullAccess = 2
    }
    export const enum PaymentTransactionState {
        Active = 1,
        Canceled = 2
    }
    export const enum PaymentTransactionType {
        Payment = 1,
        Refund = 2,
        IntraBankTransfer = 3,
        InterBankTransfer = 4
    }
}
declare namespace BOA.Types.Kernel.Performance {
    export const enum CryptDataType {
        String = 1,
        Decimal = 2,
        Int32 = 3,
        ShortInt = 4
    }
    interface Common {
    }
    interface CommonMethods {
    }
    interface CryptDataInfo extends BOA.Common.Types.ContractBase {
        cryptDataType?: number;
        decryptedDecimalData?: number;
        decryptedInt32Data?: number;
        decryptedShortIntData?: number;
        decryptedStringData?: string;
        encryptedData?: string;
        journalLogActive?: boolean;
        order?: number;
    }
    interface FinalAssessmentContract extends BOA.Common.Types.ContractBase {
        employeeNumber?: number;
        finalAssessmentScore?: number;
        finalAssessmentScoreId?: number;
        finalAssessmentScoreIdDescription?: string;
        finalAssessmentScoreIdEncrypted?: string;
        journalLogActive?: boolean;
        personId?: number;
        year?: number;
    }
    interface PersonInfoContract extends BOA.Common.Types.ContractBase {
        cryptDataInfoList?: BOA.Types.Kernel.Performance.CryptDataInfo[];
        journalLogActive?: boolean;
        personId?: number;
        year?: number;
    }
}
declare namespace BOA.Types.Kernel.Performance.Common {
    export const enum AccessType {
        Read = 1,
        FullAccess = 2
    }
}
declare namespace BOA.Types.Kernel.Product {
    export const enum AccountControlConstraint {
        AlwaysWork = 1,
        NeverWork = 2,
        WorkForSelectedResources = 3,
        WorkForUnselectedResources = 4
    }
    interface ProductCollateralDefinitionContract extends BOA.Common.Types.ContractBase {
        collateralDefinitionId?: number;
        collateralName?: string;
    }
    interface ProductContract extends BOA.Common.Types.ContractBase {
        agreementTypeList?: string[];
        agreementTypeListDesc?: string;
        beginDate?: Date;
        beginSuffix?: number;
        businessOwner?: number;
        cardPrinting?: number;
        endDate?: Date;
        endSuffix?: number;
        fecList?: string[];
        fecListDesc?: string;
        interimPeriod?: number;
        isLeafLevel?: number;
        iTOwner?: number;
        languageId?: number;
        level?: number;
        maturityGroup?: number;
        maturityMax?: number;
        maturityMin?: number;
        parentProductCode?: string;
        passbookPrinting?: number;
        productBehavior?: number;
        productCode?: string;
        productDeposit?: BOA.Types.Kernel.Product.ProductDepositContract;
        productGroup?: number;
        productMaturityInfo?: BOA.Types.Kernel.Product.ProductMaturityContract;
        productName?: string;
        productSegmentInfoList?: BOA.Types.Kernel.Product.ProductSegmentContract[];
        productType?: number;
        sortOrder?: number;
    }
    interface ProductDepositContract extends BOA.Common.Types.ContractBase {
        accountControlConstraint?: number;
        hasIncomeSuffix?: number;
        hasInterimPayment?: number;
        hasInterimPeriod?: number;
        hasWithholding?: number;
        interimPaymentPeriod?: string;
        interimSkipCount?: number;
        internalTolerantDayCount?: number;
        isChequeIssuable?: number;
        isDepositable?: number;
        isIrregular?: number;
        isPromissoryNotesIssuable?: number;
        isSegmentChangeable?: number;
        isWithdrawable?: number;
        productCode?: string;
        tolerantDayCount?: number;
    }
    interface ProductLoanAgreementTypeContract extends BOA.Common.Types.ContractBase {
        agreementType?: number;
        agreementTypeDesc?: string;
    }
    interface ProductLoanContract extends BOA.Common.Types.ContractBase {
        agreementTypeList?: BOA.Types.Kernel.Product.ProductLoanAgreementTypeContract[];
        agreementTypeListDesc?: string;
        allotmentGroupCode?: string;
        allotmentMainGroupCode?: string;
        allotmentProductCode?: string;
        averageMaturityMax?: number;
        averageMaturityMin?: number;
        beginDate?: Date;
        cardPrinting?: number;
        collateralRequestType?: number;
        commissionKey?: string;
        downPaymentRatio?: number;
        endDate?: Date;
        fecList?: BOA.Types.Kernel.Product.ProductLoanFECContract[];
        fecListDesc?: string;
        installmentCountMax?: number;
        installmentCountMin?: number;
        isAdvanceAvailableWithCollateral?: number;
        isAdvancePaymentAvailable?: number;
        isBITTFree?: number;
        isEarlyPaymentAvailable?: number;
        isExpertReportMandatory?: number;
        isInsuranceMandatory?: number;
        isLeafLevel?: number;
        isMortgage?: number;
        isRUSFFree?: number;
        isSpecialFERAvailable?: number;
        languageId?: number;
        level?: number;
        loanDetailType?: number;
        loanType?: number;
        maturityMax?: number;
        maturityMin?: number;
        parentProductCode?: string;
        passbookPrinting?: number;
        poolType?: number;
        productCode?: string;
        productCollateralDefinition?: BOA.Types.Kernel.Product.ProductCollateralDefinitionContract;
        productCollateralDefinitionList?: BOA.Types.Kernel.Product.ProductCollateralDefinitionContract[];
        productGroup?: number;
        productLoanFECType?: BOA.Types.Kernel.Product.ProductLoanFECTypeContract;
        productLoanFECTypeList?: BOA.Types.Kernel.Product.ProductLoanFECTypeContract[];
        productLoanGoodsOrServiceType?: BOA.Types.Kernel.Product.ProductLoanGoodsOrServiceTypeContract;
        productLoanInstallmentDetail?: BOA.Types.Kernel.Product.ProductLoanInstallmentDetailContract;
        productLoanInstallmentDetailList?: BOA.Types.Kernel.Product.ProductLoanInstallmentDetailContract[];
        productLoanProjectPlace?: BOA.Types.Kernel.Product.ProductLoanProjectPlaceContract;
        productLoanProjectPlaceList?: BOA.Types.Kernel.Product.ProductLoanProjectPlaceContract[];
        productLoanPropertyId?: number;
        productName?: string;
        productType?: number;
        sortOrder?: number;
    }
    interface ProductLoanFECContract extends BOA.Common.Types.ContractBase {
        fecCode?: string;
        fecId?: number;
        fecName?: string;
    }
    interface ProductLoanFECTypeContract extends BOA.Common.Types.ContractBase {
        fecType?: number;
        fecTypeDesc?: string;
    }
    interface ProductLoanGoodsOrServiceTypeContract extends BOA.Common.Types.ContractBase {
        goodsOrServiceType?: number;
        goodsOrServiceTypeDesc?: string;
    }
    interface ProductLoanInstallmentDetailContract extends BOA.Common.Types.ContractBase {
        installmentDetail?: number;
        installmentDetailDesc?: string;
    }
    interface ProductLoanNode extends BOA.Common.Types.GenericNode<BOA.Types.Kernel.Product.ProductLoanNode> {
        iconPath?: string;
        product?: BOA.Types.Kernel.Product.ProductLoanContract;
    }
    interface ProductLoanProjectPlaceContract extends BOA.Common.Types.ContractBase {
        projectPlace?: number;
        projectPlaceDesc?: string;
    }
    interface ProductMaturityContract extends BOA.Common.Types.ContractBase {
        beginSuffix?: number;
        endDayCount?: number;
        endSuffix?: number;
        fecGroup?: number;
        hostIP?: string;
        hostName?: string;
        interimPeriod?: number;
        maturityGroup?: number;
        productCode?: string;
        startDayCount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProductNode extends BOA.Common.Types.GenericNode<BOA.Types.Kernel.Product.ProductNode> {
        fullPath?: string;
        iconPath?: string;
        isCheckBoxVisible?: boolean;
        isChecked?: boolean;
        product?: BOA.Types.Kernel.Product.ProductContract;
    }
    interface ProductSegment4IrregularMaturityContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        beginMaturityCount?: number;
        endDate?: Date;
        endMaturityCount?: number;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        lostShareRatio?: number;
        mainMaturity?: number;
        productCode?: string;
        profitShareRatio?: number;
        resourceCode?: string;
        segmentCode?: string;
        segmentName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProductSegmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beginDate?: Date;
        channelId?: number;
        channelName?: string;
        customerType?: string;
        customerTypeDesc?: string;
        definitionCauseDescription?: string;
        definitionCauseType?: number;
        definitionCauseTypeDescription?: string;
        endDate?: Date;
        fec?: number;
        fecCode?: string;
        hasPunishment?: number;
        hasPunishmentDesc?: string;
        hostIP?: string;
        hostName?: string;
        interBranchRatio?: number;
        isDataVisible?: boolean;
        maximumBalance?: number;
        maximumInterimPaymentAmount?: number;
        minimumBalance?: number;
        minimumInterimPaymentAmount?: number;
        negativeTransactionLimit?: number;
        poolFEC?: number;
        positiveTransactionLimit?: number;
        productCode?: string;
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProductTreasuryContract extends BOA.Common.Types.ContractBase {
        bOAProductCode?: string;
        instrumentCode?: string;
        instrumentName?: string;
        instrumentNo?: number;
        instrumentsFlags?: number;
        isSystem?: number;
        productCode?: string;
        productSubType?: string;
    }
    interface ProductValueDateContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        channelId?: number;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        productCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDayIncrement?: number;
    }
}
declare namespace BOA.Types.Kernel.Product.ProductSegmentContract {
    interface ProductSegmentComparer {
    }
}
declare namespace BOA.Types.Kernel.Profile {
    interface UserProfileContract extends BOA.Common.Types.ContractBase {
        cRMContract?: BOA.Types.Kernel.Customer.CustomerCRMInfoContract;
        customerId?: number;
        employerName?: string;
        iconId?: number;
        jobTitle?: number;
        lastSchoolGraduated?: string;
        level?: number;
        profession?: number;
        userAddress?: BOA.Types.Kernel.Profile.WebUserAddressContract;
        userId?: number;
    }
    interface WebUserAddressContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressId?: number;
        addressType?: number;
        cityId?: number;
        cityName?: string;
        countryId?: number;
        countryName?: string;
        districtId?: number;
        districtName?: string;
        email?: string;
        fax?: string;
        faxId?: number;
        gSM?: string;
        isDefault?: boolean;
        personId?: number;
        phone?: string;
        phoneId?: number;
        zipCode?: string;
    }
}
declare namespace BOA.Types.Kernel.ProjectFinance {
    interface ProjectFinanceAdvisorContract extends BOA.Common.Types.ContractBase {
        advisorAccountNumber?: number;
        description?: string;
        projectFinanceAdvisorId?: number;
        projectFinanceId?: number;
        status?: number;
        statusDescription?: string;
        visitingDate?: Date;
    }
    interface ProjectFinanceAgreementContract extends BOA.Common.Types.ContractBase {
        agreementDate?: Date;
        agreementNumber?: string;
        legalFirmAccountNumber?: number;
        projectFinanceAgreementId?: number;
        projectFinanceId?: number;
        status?: number;
        statusDescription?: string;
    }
    interface ProjectFinanceCommon {
        advisorDivitId?: string;
        advisorInstanceFormat?: string;
        aggrementDivitId?: string;
        agreementInstanceFormat?: string;
        preAssesmentActionId?: number;
        projectFinanceDivitId?: string;
        projectFinanceFlowId?: string;
        projectFinanceInstanceFormat?: string;
        projectFinanceStatusParam?: string;
    }
    interface ProjectFinanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        branchId?: number;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        projectBeginDate?: Date;
        projectDetailInformation?: string;
        projectEndDate?: Date;
        projectFinanceId?: number;
        projectName?: string;
        projectType?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectFinanceLimitConditionContract extends BOA.Common.Types.ContractBase {
        gracePeriod?: number;
        limitPeriodCount?: number;
        limitPeriodDistribution?: number;
        limitRateContractList?: BOA.Types.Kernel.ProjectFinance.ProjectFinanceLimitRateContract[];
        projectFinanceId?: number;
        projectFinanceLimitConditionId?: number;
        weightedAverage?: number;
    }
    interface ProjectFinanceLimitRateContract extends BOA.Common.Types.ContractBase {
        cumulativeLimitRate?: number;
        limitRate?: number;
        periodNumber?: number;
        projectFinanceLimitConditionId?: number;
        projectFinanceLimitRateId?: number;
    }
    interface ProjectFinanceListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        branchId?: number;
        branchName?: string;
        customerName?: string;
        fec?: number;
        gracePeriod?: number;
        hostName?: string;
        installmentCount?: number;
        projectBeginDate?: Date;
        projectEndDate?: Date;
        projectFecDescription?: string;
        projectFinanceId?: number;
        projectName?: string;
        projectType?: number;
        projectTypeDescription?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface ProjectFinanceListFilterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        endDate?: Date;
        isApprovedRecords?: number;
        startDate?: Date;
        status?: number;
    }
    interface ProjectFinanceMainContract extends BOA.Common.Types.ContractBase {
        advisorContractList?: BOA.Types.Kernel.ProjectFinance.ProjectFinanceAdvisorContract[];
        agreementContractList?: BOA.Types.Kernel.ProjectFinance.ProjectFinanceAgreementContract[];
        canSaveCondition?: boolean;
        fundingCount?: number;
        limitConditionContract?: BOA.Types.Kernel.ProjectFinance.ProjectFinanceLimitConditionContract;
        limitUsage?: number;
        payBackConditionContract?: BOA.Types.Kernel.ProjectFinance.ProjectFinancePayBackConditionContract;
        projectEndDateForEod?: Date;
        projectFinanceContract?: BOA.Types.Kernel.ProjectFinance.ProjectFinanceContract;
        selectedCustomer?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        utilizationFundsContractList?: BOA.Types.Kernel.ProjectFinance.UtilizationFundsContract[];
    }
    interface ProjectFinancePayBackConditionContract extends BOA.Common.Types.ContractBase {
        annualProfitRate?: number;
        averagePaymentDate?: Date;
        calculationMethod?: number;
        flexibleRate?: number;
        flexibleRateConstant?: number;
        flexibleRateType?: number;
        installmentCount?: number;
        installmentPeriodCount?: number;
        installmentPeriodType?: number;
        monthlyProfitRate?: number;
        payBackRateContractList?: BOA.Types.Kernel.ProjectFinance.ProjectFinancePayBackRateContract[];
        payBackType?: number;
        principalAmountDistributionType?: number;
        profitCalculationMode?: number;
        projectFinanceId?: number;
        projectFinancePayBackConditionId?: number;
    }
    interface ProjectFinancePayBackRateContract extends BOA.Common.Types.ContractBase {
        cumulativePayBackRate?: number;
        installmentNumber?: number;
        payBackRate?: number;
        projectFinancePayBackConditionId?: number;
        projectFinancePayBackRateId?: number;
    }
    interface ProjectFinanceTranContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        projectFinanceId?: number;
        projectFinanceTranId?: number;
        status?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface UtilizationFundsContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountLc?: number;
        fec?: number;
        fecCode?: string;
        fundType?: number;
        fundTypeDescription?: string;
        productCode?: string;
        productName?: string;
        projectDate?: Date;
        projectId?: number;
    }
}
declare namespace BOA.Types.Kernel.ProjectFinance.ProjectFinanceCommon {
    export const enum AdvisorStatus {
        None = 0,
        Saved = 1,
        WaitingApproval = 2,
        Approved = 3
    }
    export const enum AgreementStatus {
        None = 0,
        Saved = 1,
        WaitingApproval = 2,
        Approved = 3
    }
    export const enum DistributionType {
        FixDistribution = 1,
        FlexibleDistribution = 2
    }
    export const enum LiborType {
        LiborPlus = 1,
        LiborMinus = 2
    }
    export const enum PayBackType {
        FixPayBackType = 1,
        FlexiblePayBackType = 2
    }
    export const enum ProjectFinanceStatus {
        Waiting = 0,
        Saved = 1,
        PreAssessment = 2,
        FundingAssessment = 3,
        FundingApproved = 4,
        Projectized = 5,
        Canceled = 6,
        FundingAssessmentApprove = 7
    }
}
declare namespace BOA.Types.Kernel.ProjectFunding {
    interface ProjectFundingAdvisorContract extends BOA.Common.Types.ContractBase {
        advisorAccountNumber?: number;
        description?: string;
        projectFundingAdvisorId?: number;
        projectFundingId?: number;
        status?: number;
        statusDescription?: string;
        visitingDate?: Date;
    }
    interface ProjectFundingAgreementContract extends BOA.Common.Types.ContractBase {
        agreementDate?: Date;
        agreementNo?: string;
        legalFirmAccountNumber?: number;
        projectFundingAgreementId?: number;
        projectFundingId?: number;
        status?: number;
        statusDescription?: string;
    }
    interface ProjectFundingCommon {
    }
    interface ProjectFundingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        hostIP?: string;
        hostName?: string;
        projectAmount?: number;
        projectBeginDate?: Date;
        projectEndDate?: Date;
        projectFec?: number;
        projectFundingId?: number;
        projectName?: string;
        projectType?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ProjectFundingLimitConditionContract extends BOA.Common.Types.ContractBase {
        gracePeriod?: number;
        limitPeriodCount?: number;
        limitPeriodDistribution?: number;
        limitRateContractList?: BOA.Types.Kernel.ProjectFunding.ProjectFundingLimitRateContract[];
        projectFundingId?: number;
        projectFundingLimitConditionId?: number;
        weightedAverage?: number;
    }
    interface ProjectFundingLimitRateContract extends BOA.Common.Types.ContractBase {
        cumulativeLimitRate?: number;
        limitRate?: number;
        periodNo?: number;
        projectFundingLimitConditionId?: number;
        projectFundingLimitRateId?: number;
    }
    interface ProjectFundingListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        customerName?: string;
        hostName?: string;
        projectAmount?: number;
        projectBeginDate?: Date;
        projectEndDate?: Date;
        projectFec?: number;
        projectFecDescription?: string;
        projectFundingId?: number;
        projectName?: string;
        projectType?: number;
        projectTypeDescription?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface ProjectFundingListFilterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        endDate?: Date;
        isApprovedRecords?: number;
        startDate?: Date;
        status?: number;
    }
    interface ProjectFundingMainContract extends BOA.Common.Types.ContractBase {
        advisorContractList?: BOA.Types.Kernel.ProjectFunding.ProjectFundingAdvisorContract[];
        agreementContractList?: BOA.Types.Kernel.ProjectFunding.ProjectFundingAgreementContract[];
        limitConditionContract?: BOA.Types.Kernel.ProjectFunding.ProjectFundingLimitConditionContract;
        payBackConditionContract?: BOA.Types.Kernel.ProjectFunding.ProjectFundingPayBackConditionContract;
        projectEndDateForEod?: Date;
        projectFundingContract?: BOA.Types.Kernel.ProjectFunding.ProjectFundingContract;
        selectedCustomer?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
    }
    interface ProjectFundingPayBackConditionContract extends BOA.Common.Types.ContractBase {
        annualProfitRate?: number;
        averagePaymentDate?: Date;
        calculationMethod?: number;
        flexibleRate?: number;
        flexibleRateConstant?: number;
        flexibleRateType?: number;
        installmentCount?: number;
        installmentPeriodCount?: number;
        installmentPeriodType?: number;
        monthlyProfitRate?: number;
        payBackRateContractList?: BOA.Types.Kernel.ProjectFunding.ProjectFundingPayBackRateContract[];
        payBackType?: number;
        principalAmountDistributionType?: number;
        projectFundingId?: number;
        projectFundingPayBackConditionId?: number;
    }
    interface ProjectFundingPayBackRateContract extends BOA.Common.Types.ContractBase {
        cumulativePayBackRate?: number;
        installmentNo?: number;
        payBackRate?: number;
        projectFundingPayBackConditionId?: number;
        projectFundingPayBackRateId?: number;
    }
    interface ProjectFundingTranContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        projectFundingId?: number;
        projectFundingTranId?: number;
        status?: number;
        systemDate?: Date;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.ProjectFunding.ProjectFundingCommon {
    export const enum AdvisorStatus {
        None = 0,
        Saved = 1,
        WaitingApproval = 2,
        Approved = 3
    }
    export const enum AgreementStatus {
        None = 0,
        Saved = 1,
        WaitingApproval = 2,
        Approved = 3
    }
    export const enum DistributionType {
        FixDistribution = 1,
        FlexibleDistribution = 2
    }
    export const enum LiborType {
        LiborPlus = 1,
        LiborMinus = 2
    }
    export const enum PayBackType {
        FixPayBackType = 1,
        FlexiblePayBackType = 2
    }
    export const enum ProjectFundingStatus {
        Waiting = 0,
        Saved = 1,
        PreAssessment = 2,
        FundingAssessment = 3,
        FundingApproved = 4,
        Projectized = 5,
        Canceled = 6
    }
}
declare namespace BOA.Types.Kernel.PSBackOffice {
    interface DebitCardContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        creditCardCustomerDebitCard?: BOA.Types.Kernel.CreditCard.CreditCardCustomerDebitCard;
        creditCardRelatedAccountList?: BOA.Types.Kernel.CreditCard.CreditCardRelatedAccount[];
        debitCardDetailInfo?: BOA.Types.Kernel.PSBackOffice.DebitCardDetailInfoContract;
        responseCodeList?: BOA.Types.Kernel.PSBackOffice.ResponseCodeContract[];
        transactionList?: BOA.Types.Kernel.PSBackOffice.TransactionListContract[];
        transactionListParameter?: BOA.Types.Kernel.PSBackOffice.TransactionListParameterContract;
        transactionTypeList?: BOA.Types.Kernel.PSBackOffice.TransactionTypeContract[];
    }
    interface DebitCardDetailInfoContract extends BOA.Common.Types.ContractBase {
        barcodeNumber?: string;
        branchId?: number;
        cardGroupName?: string;
        customerGroupName?: string;
        customerSubGroupName?: string;
        demandSource?: string;
        homeAddress?: string;
        printingDate?: Date;
        printingName?: string;
        printingReasonName?: string;
        sendingAddressType?: string;
        sendingType?: string;
        stateDescription?: string;
        workAdress?: string;
    }
    interface ResponseCodeContract extends BOA.Common.Types.ContractBase {
        responseCode?: string;
        responseCodeName?: string;
    }
    interface TransactionListContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        resource?: string;
        responseDescription?: string;
        stan?: string;
        terminalId?: string;
        terminalType?: string;
        tranAmountTL?: number;
        tranDate?: Date;
        tranDateTime?: string;
        tranName?: string;
    }
    interface TransactionListParameterContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        branchId?: number;
        endDate?: Date;
        groupCode?: string;
        responseCode?: string;
        resultCode?: string;
        terminalTypeCode?: string;
        transactionTypeCode?: string;
    }
    interface TransactionTypeContract extends BOA.Common.Types.ContractBase {
        transactionTypeCode?: string;
        transactionTypeName?: string;
    }
}
declare namespace BOA.Types.Kernel.PushNotification {
    interface ApplicationContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        detail?: string;
        hostIP?: string;
        hostName?: string;
        mobileApplicationId?: number;
        mobileApplicationName?: string;
        platform?: number;
        platformName?: string;
        platformType?: BOA.Types.Kernel.PushNotification.Enum.Platform;
        status?: number;
        statusName?: string;
        statusType?: BOA.Types.Kernel.PushNotification.Enum.ApplicationStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ApplicationRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.PushNotification.ApplicationContract;
    }
    interface NotificationContentContract extends BOA.Common.Types.ContractBase {
        body?: string;
        hostIP?: string;
        hostName?: string;
        notificationContentId?: number;
        payload?: string;
        systemDate?: Date;
        title?: string;
        userName?: string;
    }
    interface NotificationContentRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.PushNotification.NotificationContentContract;
    }
    interface NotificationContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelSuffixId?: number;
        content?: BOA.Types.Kernel.PushNotification.NotificationContentContract;
        hostIP?: string;
        hostName?: string;
        notificationContentId?: number;
        notificationId?: number;
        priority?: number;
        registration?: BOA.Types.Kernel.PushNotification.RegistrationContract;
        registrationId?: number;
        status?: number;
        statusType?: BOA.Types.Kernel.PushNotification.Enum.NotificationStatus;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface NotificationRequest extends BOA.Common.Types.TransactionRequestBase {
        channelId?: number;
        channelSuffixId?: number;
        content?: BOA.Types.Kernel.PushNotification.NotificationContentContract;
        count?: number;
        dataContract?: BOA.Types.Kernel.PushNotification.NotificationContract;
        descriptors?: string[];
        isRegistrationCancelled?: boolean;
        mobileApplicationId?: number;
        notificationType?: BOA.Types.Kernel.PushNotification.Enum.NotificationType;
        personIds?: number[];
        priority?: number;
        requeueInterval?: any;
    }
    interface NotificationTransactionContract extends BOA.Common.Types.ContractBase {
        exceptionMessage?: string;
        exceptionStackTrace?: string;
        exceptionType?: string;
        extraData?: string;
        hostIP?: string;
        hostName?: string;
        notificationId?: number;
        notificationTransactionId?: number;
        sort?: number;
        sortType?: BOA.Types.Kernel.PushNotification.Enum.NotificationTransactionSort;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface NotificationTransactionRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.PushNotification.NotificationTransactionContract;
    }
    interface RegistrationContract extends BOA.Common.Types.ContractBase {
        applicationId?: number;
        descriptor?: string;
        hostIP?: string;
        hostName?: string;
        identifier?: string;
        personId?: number;
        registrationId?: number;
        status?: number;
        statusType?: BOA.Types.Kernel.PushNotification.Enum.RegistrationStatus;
        systemDate?: Date;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RegistrationRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.PushNotification.RegistrationContract;
        newIdentifier?: string;
    }
}
declare namespace BOA.Types.Kernel.PushNotification.ApplicationDetail {
    interface ApnsDetail extends BOA.Types.Kernel.PushNotification.ApplicationDetail.Base.ApplicationDetailBase {
        isProductionApplication?: boolean;
        providerCertificateContent?: number[];
        providerCertificateFilename?: string;
        providerCertificatePassword?: string;
        skipSsl?: boolean;
        validateRemoteCertificate?: boolean;
    }
    interface GcmDetail extends BOA.Types.Kernel.PushNotification.ApplicationDetail.Base.ApplicationDetailBase {
        apiKey?: string;
    }
    interface MpnsDetail extends BOA.Types.Kernel.PushNotification.ApplicationDetail.Base.ApplicationDetailBase {
        tlsCertificateContent?: number[];
        tlsCertificateFilename?: string;
        tlsCertificatePassword?: string;
    }
    interface WnsDetail extends BOA.Types.Kernel.PushNotification.ApplicationDetail.Base.ApplicationDetailBase {
        clientSecret?: string;
        packageSecurityIdentifier?: string;
    }
}
declare namespace BOA.Types.Kernel.PushNotification.ApplicationDetail.Base {
    interface ApplicationDetailBase {
    }
}
declare namespace BOA.Types.Kernel.PushNotification.Enum {
    export const enum ApplicationStatus {
        Active = 1,
        Inactive = 2
    }
    export const enum NotificationStatus {
        Unprocessed = 1,
        InProcess = 2,
        Sent = 3,
        Cancelled = 4
    }
    export const enum NotificationTransactionSort {
        ServiceStopped = 1,
        Dequeued = 2,
        Requeued = 3,
        EmptyQueue = 4,
        StartedProcessing = 5,
        SentSuccessfully = 6,
        ErrorOccured = 7
    }
    export const enum NotificationType {
        Information = 1,
        Advertisement = 2
    }
    export const enum Platform {
        Gcm = 1,
        Apns = 2,
        Wns = 3,
        Mpns = 4
    }
    export const enum RegistrationStatus {
        Active = 1,
        Inactive = 2
    }
}
declare namespace BOA.Types.Kernel.QDM {
    interface FileContract extends BOA.Common.Types.ContractBase {
        approveStatus?: string;
        content?: number[];
        contentId?: string;
        contractQRCodeControlStatus?: number;
        contractQRCodeStatus?: number;
        contractReleaseStatus?: number;
        contractRevisionDemandNumber?: string;
        description?: string;
        documentId?: string;
        extension?: string;
        fileId?: number;
        fileIdentity?: string;
        fileName?: string;
        folderId?: number;
        folderName?: string;
        hasContractQRCodeControlStatus?: number;
        hasContractQRCodeStatus?: number;
        hasContractReleaseStatus?: number;
        hasContractRevisionDemandNumber?: number;
        isReturnStartUser?: boolean;
        oldFileName?: string;
        oldFolderId?: number;
        oldVersion?: string;
        parentFolderId?: number;
        qDMProcessType?: number;
        relationFileIdentity?: string;
        releaseDate?: Date;
        revisionDate?: Date;
        shortFolderName?: string;
        status?: number;
        statusText?: string;
        subFlowCount?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userEmail?: string;
        userName?: string;
        version?: string;
        wFInstanceId?: number;
        wFInstanceIdForOpinionApprove?: number;
    }
}
declare namespace BOA.Types.Kernel.RegularPayments {
    export const enum InformationType {
        None = 1,
        Email = 2,
        Sms = 3,
        Both = 4
    }
    export const enum LocationDefine {
        Update = 1,
        Normal = 2
    }
    interface RegularPaymentEnums {
    }
    interface RegularPaymentHouseHolderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchName?: string;
        channelId?: number;
        channelName?: string;
        customerName?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        houseHolderID?: number;
        informationType?: BOA.Types.Kernel.RegularPayments.InformationType;
        isActive?: number;
        isActiveStatus?: string;
        responsibleBranchId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RegularPaymentHouseRentTransactionsContract extends BOA.Common.Types.ContractBase {
        accountingDate?: Date;
        amount?: number;
        blackListVerificationType?: number;
        businessKey?: number;
        commissionAmount?: number;
        commissionFEC?: number;
        commissionFER?: number;
        creditCardNo?: string;
        description?: string;
        fec?: number;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        futureDatedDefinitionsID?: number;
        futureDatedTransactionsID?: number;
        hostIP?: string;
        hostName?: string;
        houseHolderID?: number;
        isActive?: number;
        isCommissionTotalAmount?: boolean;
        locationsName?: string;
        paymentProcessType?: number;
        payType?: number;
        promotionAccountID?: number;
        receiverCustomerAccountInfo?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        receiverSelectedAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        resourceId?: number;
        senderCustomerAccountInfo?: BOA.Types.Kernel.Customer.AccountComponentCustomerInfoContract;
        senderSelectedAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        source?: string;
        statusDescription?: string;
        systemDate?: Date;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        totalAmount?: number;
        tranBranchId?: number;
        tranDate?: Date;
        transactionID?: number;
        transactionRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.SalaryAccount {
    interface PersonBalanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balanceAmount?: number;
        employeeNumber?: number;
        encryptedGrossSalaryAmount?: string;
        encryptedNetSalaryAmount?: string;
        fullName?: string;
        grossSalaryAmount?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isAutoTransferEnabled?: number;
        isAutoTransferEnableDescription?: string;
        netSalaryAmount?: number;
        personBalanceId?: number;
        personId?: number;
        salaryType?: number;
        statusDescription?: string;
        systemDate?: Date;
        tCKNo?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PersonBalanceRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SalaryAccount.PersonBalanceContract;
    }
}
declare namespace BOA.Types.Kernel.SalaryPayment {
    export const enum AccountingTransferType {
        CompanyAccountToPersonnelAccount = 1,
        CompanyAccountToTempAccount = 2,
        TempAccountToPersonnelAccount = 3
    }
    export const enum AccountingType {
        All = 1,
        One = 2
    }
    export const enum PayrollSummary {
        All = 1,
        One = 2
    }
    export const enum Status {
        WaitingApproval = 1,
        Approved = 2,
        Rejected = 3,
        Canceled = 4
    }
    interface CompanyPersonnelContract extends BOA.Common.Types.ContractBase {
        companyAccountNumber?: number;
        companyAccountSuffix?: number;
        companyBranchName?: string;
        companyName?: string;
        companySalaryDefinitionId?: number;
        companyTranBranchId?: number;
        controlStatus?: string;
        fec?: number;
        fecName?: string;
        hostName?: string;
        isActive?: number;
        isActiveStr?: string;
        maxSystemDate?: Date;
        minSystemDate?: Date;
        name?: string;
        paymentName?: string;
        paymentType?: number;
        paymentTypeName?: string;
        personnelAccountNumber?: number;
        personnelAccountSuffix?: number;
        personnelBranchId?: number;
        personnelBranchName?: string;
        personnelId?: number;
        queueNo?: number;
        systemDate?: Date;
        tckn?: string;
        tranBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CompanyPersonnelForExcelContract extends BOA.Common.Types.ContractBase {
        name?: string;
        personnelAccountNumber?: string;
        personnelAccountSuffix?: string;
        tckn?: string;
    }
    interface CompanySalaryContract extends BOA.Common.Types.ContractBase {
        accountingType?: number;
        businessKey?: number;
        companyAccountNumber?: number;
        companyAccountSuffix?: number;
        companyBranchId?: number;
        companyBranchName?: string;
        companyName?: string;
        companySalaryDefinitionId?: number;
        companySalaryId?: number;
        controlStatus?: string;
        description?: string;
        earlySalaryPaymentId?: number;
        hostName?: string;
        isActive?: number;
        isSendByEmail?: boolean;
        isSendBySms?: boolean;
        maskedPaymentHour?: string;
        maxPaymentDate?: Date;
        maxSalaryAmount?: number;
        maxSystemDate?: Date;
        minPaymentDate?: Date;
        minSalaryAmount?: number;
        minSystemDate?: Date;
        paymentDate?: Date;
        paymentHour?: number;
        paymentName?: string;
        paymentType?: number;
        paymentTypeName?: string;
        payrollSummary?: number;
        personnelAccountFec?: number;
        personnelAccountFecCode?: string;
        personnelAccountNumber?: number;
        personnelAccountSuffix?: number;
        personnelBranchId?: number;
        personnelBranchName?: string;
        personnelId?: number;
        personnelName?: string;
        queueNo?: number;
        salaryAmount?: number;
        salaryPaymentErrorDescription?: string;
        salaryPaymentStatus?: number;
        salaryPaymentStatusName?: string;
        systemDate?: Date;
        tckn?: string;
        totalSalaryAmount?: number;
        tranBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withholdingDate?: Date;
        withholdingId?: number;
        withholdingStatus?: number;
        withholdingStatusName?: string;
    }
    interface CompanySalaryDefinitionContract extends BOA.Common.Types.ContractBase {
        accountingType?: number;
        accountingTypeName?: string;
        businessKey?: number;
        companyAccountNumber?: number;
        companyAccountSuffix?: number;
        companyBranchId?: number;
        companyName?: string;
        definitionId?: number;
        divitId?: any;
        fec?: number;
        fecCode?: string;
        hostName?: string;
        isActive?: number;
        isActiveStr?: string;
        isSendByEmail?: boolean;
        isSendBySms?: boolean;
        isWithHoldingDayCountChanged?: boolean;
        maskedPaymentHour?: string;
        maxSystemDate?: Date;
        minSystemDate?: Date;
        paymentDay?: number;
        paymentHour?: number;
        paymentName?: string;
        paymentType?: number;
        paymentTypeName?: string;
        payrollSummary?: number;
        payrollSummaryName?: string;
        relativePersonId?: number;
        systemDate?: Date;
        thirdPersonId?: number;
        tranBranchId?: number;
        tranBranchName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        withholdingDayCount?: number;
    }
    interface CompanySalaryForExcelContract extends BOA.Types.Kernel.SalaryPayment.CompanyPersonnelForExcelContract {
        salaryAmount?: string;
    }
    interface Constant {
    }
    interface EarlySalaryPaymentContract extends BOA.Common.Types.ContractBase {
        approveDate?: Date;
        approverHostName?: string;
        approverUserName?: string;
        companyAccountNumber?: number;
        companyAccountSuffix?: number;
        companyBranchId?: number;
        companyBranchName?: string;
        companyName?: string;
        companySalaryDefinitionId?: number;
        companySalaryId?: number;
        earlySalaryPaymentId?: number;
        hostName?: string;
        maskedNewPaymentHour?: string;
        maskedPaymentHour?: string;
        maxApproveDate?: Date;
        maxSystemDate?: Date;
        minApproveDate?: Date;
        minSystemDate?: Date;
        newPaymentDate?: Date;
        newPaymentHour?: number;
        paymentDate?: Date;
        paymentHour?: number;
        paymentName?: string;
        paymentType?: number;
        paymentTypeName?: string;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        totalSalaryAmount?: number;
        userName?: string;
        wFInstanceId?: number;
        withholdingDate?: Date;
        withholdingDayCount?: number;
    }
    interface PersonnelInfoContract extends BOA.Common.Types.ContractBase {
        bankBranchName?: string;
        companyAddress?: string;
        companyCityId?: number;
        companyCityName?: string;
        companyName?: string;
        companySalaryId?: number;
        companyUavtAddress?: string;
        finishingWorkDate?: Date;
        id?: number;
        name?: string;
        otherPayment?: number;
        paymentBankName?: string;
        paymentDate?: Date;
        professionName?: string;
        retiredRegistryAllocationNo?: string;
        salaryPayment?: number;
        startingWorkDate?: Date;
        surname?: string;
        tck?: number;
        vkn?: number;
    }
    interface WebServiceConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configValue?: string;
        environment?: number;
        hostName?: string;
        id?: number;
        methodName?: string;
        serviceId?: number;
        systemDate?: Date;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.SecureTransactionSigner {
    export const enum DeviceStateInfo {
        ACTIVE = 0,
        OFFLINE = 1
    }
    interface DeviceInfoContract extends BOA.Common.Types.ContractBase {
        appName?: string;
        appVersion?: string;
        certHandle?: number;
        certificateSerialNumber?: string;
        clientDevice?: string;
        clientOsVersion?: string;
        clientRisks?: string;
        clientTypeName?: string;
        deviceState?: BOA.Types.Kernel.SecureTransactionSigner.DeviceStateInfo;
        deviceStateSpecified?: boolean;
        deviceType?: string;
        deviceTypeName?: string;
        deviceVersion?: string;
        issuerDN?: string;
        lastLoginTime?: Date;
        lastLoginTimeSpecified?: boolean;
        locked?: boolean;
        lockedUntilDate?: Date;
        lockedUntilDateSpecified?: boolean;
        nodeID?: string;
        userLocked?: boolean;
    }
    interface UserInfoContract extends BOA.Common.Types.ContractBase {
        description?: string;
        isLocked?: boolean;
    }
}
declare namespace BOA.Types.Kernel.Security {
    interface ActiveSecurityContract extends BOA.Common.Types.ContractBase {
        accrualMethod?: number;
        couponNo?: number;
        couponRate?: number;
        dateBasis?: number;
        finishDate?: Date;
        perUnit?: number;
        reutersCode?: string;
        securityCouponId?: number;
        securityId?: number;
        startDate?: Date;
    }
}
declare namespace BOA.Types.Kernel.SelfService {
    export const enum AccountControlConstraint {
        AlwaysWork = 1,
        NeverWork = 2,
        WorkForSelectedResources = 3,
        WorkForUnselectedResources = 4
    }
    export const enum AtmConfig {
        PreciousMetal = 7
    }
    export const enum AtmFecCode {
        TRY = 0,
        TRL = 0,
        TRC = 0,
        USD = 1,
        EUR = 19,
        BEE = 0,
        ALT = 24,
        CNY = -1,
        PLATINUM = 27,
        SWISSFRANC = 10,
        CANADIANDOLLAR = 12,
        KUWAITIDINAR = 13,
        NORWEGIANKRONE = 14,
        BRITISHPOUND = 15,
        REJ = 99
    }
    export const enum AtmProcessApplicationType {
        TaskManager = 0,
        Container = 1
    }
    export const enum AtmTaskRunIntervalUnit {
        HOUR = 0,
        DAY = 1,
        WEEK = 2,
        MONTH = 3,
        YEAR = 4
    }
    export const enum AtmTaskType {
        AtmArchieveLogs = 0,
        XtmArchieveLogs = 1,
        LoadTPK = 2,
        RecycleReset = 3,
        CashInReset = 4,
        BanknoteReset = 5,
        CoinReset = 6,
        AddBanknote = 7,
        AddCoin = 8,
        ReadRegistery = 9,
        CacheInValidation = 10,
        BoaDeviceReport = 11,
        LoadManuelKey = 12,
        WriteRegistery = 13,
        LoadCertificate = 14,
        FileCopy = 15
    }
    export const enum BalanceType {
        CashOutBalance = 0,
        CashinBalance = 1,
        CoinBalance = 2
    }
    export const enum BankType {
        None = 0,
        OnUs = 1,
        NotOnUs = 2,
        NotOnUsInt = 3
    }
    export const enum BeepType {
        Beep1 = 0,
        Beep2 = 1,
        Beep3 = 2,
        Beep4 = 3,
        Beep5 = 4
    }
    export const enum CallCloseType {
        None = 0,
        AgentClosedTheCall = 1,
        CustomerClosedTheCall = 2,
        CallError = 9
    }
    export const enum CallTypeId {
        Internal = 0,
        External = 1,
        Virtual = 2
    }
    export const enum CardBrand {
        Visa = 0,
        MasterCard = 1,
        Europay = 2,
        Troy = 3
    }
    export const enum CardType {
        None = 0,
        Debit = 1,
        Credit = 2
    }
    export const enum CaseType {
        Banknote = 0,
        Cashin = 1,
        Coin = 2,
        Recycle = 3
    }
    export const enum DeviceAuthenticationType {
        Card = 1,
        Identity = 2,
        Sms = 3,
        None = 4,
        KeyStroke = 5,
        FaceRecognition = 6,
        Palm = 7,
        Virtual = 8,
        Receipt = 9,
        NoCustomer = 10
    }
    export const enum DeviceCallAuthenticationType {
        Card = 1,
        SmsIdentity = 2,
        Identity = 3,
        None = 4,
        CardSmsIdentity = 5,
        CardIdentity = 6,
        CardSms = 7,
        Sms = 8,
        Virtual = 9,
        Receipt = 10,
        IdentityReceipt = 11,
        CardIdentityReceipt = 12,
        CardReceipt = 13
    }
    export const enum DeviceCallStatusTypes {
        Finished = 0,
        Waiting = 1,
        OnAgent = 2
    }
    export const enum DeviceFirm {
        KT = 0,
        ITS = 1
    }
    export const enum DeviceStatusTypes {
        MaintenanceRequired = 0,
        CardReader = 1,
        PinPad = 2,
        OperatorMod = 3,
        Off = 4,
        CashAcceptor = 5,
        CashDispencer = 6,
        CoinDispencer = 7,
        ReceiptPrinter = 8,
        Scanner = 11,
        A4Printer = 12,
        Call = 21,
        CameraDevice = 22,
        SoundDevice = 23,
        MicrophoneDevice = 24,
        TaskManager = 98,
        IsAliveMod = 99
    }
    export const enum DeviceTransactionType {
        Retract = 1,
        Deposit = 2,
        Withdraw = 3
    }
    export const enum DeviceType {
        Xtm = 1,
        Atm = 2
    }
    export const enum DeviceWatchDogStatus {
        IDLE = 0,
        TRANS = 1,
        OPERATORMODE = 2
    }
    export const enum EMVTransactionType {
        None = 0,
        CardPinLoad = 1,
        CardPinLoadReverse = 2,
        CardPinChange = 3,
        CardPinChangeReverse = 4,
        BalanceInquryCommission = 5,
        BalanceInqury = 6,
        BalanceInquryReverse = 7,
        CashWithdrawalCommission = 8,
        CashWithdrawal = 9,
        CashWithdrawalReverse = 10,
        CashAdvance = 11,
        CashAdvanceReverse = 12,
        PhysicalGoldSell = 13,
        PhysicalGoldSellReverse = 14
    }
    export const enum FXJournalInstrument {
        SPOT = 1,
        FORWARD = 2,
        SWAPNEAR = 3,
        SWAPFAR = 4
    }
    export const enum FXJournalStatus {
        Inactive = 0,
        Active = 1,
        Pending = 2
    }
    export const enum FXReferenceStatus {
        Draft = -1,
        WaitApprove = 0,
        Approved = 1,
        Rejected = 2,
        Used = 3,
        Unused = 4,
        Canceled = 5,
        Inactive = 6
    }
    export const enum GoldOrderTransactionStatus {
        Fail = 1,
        Success = 2,
        Cancel = 3
    }
    export const enum KtmCreditCardStatementTransactionTypeEnum {
        Borrow = 0,
        Loan = 1,
        Point = 2
    }
    export const enum KtmFECEnum {
        TL = 0,
        USD = 1,
        CHF = 10,
        ITL = 11,
        CAD = 12,
        KWD = 13,
        NOK = 14,
        GBP = 15,
        SAR = 16,
        JPY = 17,
        FIM = 18,
        EUR = 19,
        AUD = 2,
        ESP = 20,
        IEP = 21,
        LUF = 22,
        PTE = 23,
        ALT_gr = 24,
        BHD = 25,
        GMS_gr = 26,
        PLT_gr = 27,
        ALM_ton = 28,
        AED = 29,
        RUB = 30,
        CU_ton = 31,
        ZN_ton = 32,
        NI_ton = 33,
        PB_ton = 34,
        SN_ton = 35,
        CNY = 36,
        QAR = 37,
        PLD_gr = 38,
        CAG_gr = 39,
        ATS = 3,
        DEM = 4,
        BEF = 5,
        DKK = 6,
        FRF = 7,
        NLG = 8,
        SEK = 9,
        ALT_cyr = 40
    }
    export const enum KtmWithholdingClass {
        Yok = 0,
        Tutara = 1,
        Hesaba = 2
    }
    export const enum LoginType {
        None = 0,
        OnusCC = 1,
        OnusD = 2,
        DomNotOnusCC = 3,
        DomNotOnusD = 4,
        IntNotOnusCC = 5,
        IntNotOnusDC = 6,
        WithoutCard = 7
    }
    export const enum ResultCode {
        ErrorInsufficientBanknote = 143
    }
    export const enum RKLCommandNames {
        StartRKL = 0
    }
    export const enum RKLCommandStatus {
        Start = 0,
        KeyShared = 1,
        Success = 2
    }
    export const enum SopPanelType {
        None = 0,
        LCD = 1,
        SopPanel = 2
    }
    export const enum TellerTransactionType {
        Withdrawal = 0,
        Deposit = 1
    }
    export const enum TranAccountType {
        None = 0,
        Withdrawal = 1,
        Deposit = 2
    }
    export const enum TransactionCard {
        InsertedCard = 0,
        AnotherCard = 1
    }
    export const enum TranType {
        Insert = 0,
        Update = 1,
        Delete = 2
    }
    export const enum XtmCallCenterSystem {
        None = 0,
        Inin = 1
    }
    interface AccounListType {
    }
    interface AccountOpenCurrent {
    }
    interface AccountOpenCurrentBranchList {
        branchId?: number;
        branchName?: string;
    }
    interface AccountStatementContract extends BOA.Common.Types.ContractBase {
        availableBalance?: number;
        branchId?: string;
        branchName?: string;
        channelId?: number;
        comment?: string;
        credit?: number;
        description?: string;
        deviceID?: string;
        deviceName?: string;
        iBAN?: string;
        processId?: number;
        tranDate?: string;
    }
    interface AccountStatementParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        endDate?: Date;
        language?: string;
        pdfContent?: number[];
        startDate?: Date;
    }
    interface AccountSuffixInteractionContract extends BOA.Common.Types.ContractBase {
        accountSuffix?: number;
        iBAN?: string;
        ledgerDescription?: string;
        ledgerId?: number;
    }
    interface AccountTypeContract {
        accountType?: string;
        accountTypeName?: string;
        accountTypeSegmentList?: BOA.Types.Kernel.SelfService.AccountTypeSegmentContract[];
        parentAccountType?: string;
    }
    interface AccountTypeSegmentContract {
        fecCode?: string;
        maximumBalance?: number;
        minimumBalance?: number;
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
    }
    interface ActionTypeContract extends BOA.Common.Types.ContractBase {
        actionTypeId?: number;
        name?: string;
    }
    interface AddMoneyContract extends BOA.Common.Types.ContractBase {
        banknoteType?: number;
        businessKey?: number;
        caseBranch?: number;
        cassetteID?: string;
        cassetteType?: string;
        depositedAmount?: number;
        depositedAmountAcceptanceCasette?: number;
        deviceCaseTotalBalance?: number;
        deviceID?: string;
        deviceSide?: string;
        existingCountOnDeviceCounters?: number;
        fec?: number;
        fecCode?: string;
        id?: number;
        iD?: number;
        loadedAmount?: number;
        ownBranch?: number;
        paidAmount?: number;
        processType?: string;
        remainingAmount?: number;
        updatedDate?: Date;
        xfsCounterTotalBalance?: number;
        xfsStatus?: string;
    }
    interface AgentContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        isActive?: number;
        serverName?: string;
        serverPassword?: string;
        soundDevice?: string;
        soundDevice2?: string;
        stationName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
        videoDevice?: string;
        videoDevice2?: string;
    }
    interface AgentCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        authorizedPersonList?: BOA.Types.Kernel.SelfService.AuthorizedPersonContract[];
        birthDate?: Date;
        birthPlace?: string;
        branchAddress?: string;
        canManipulate?: boolean;
        commercialName?: string;
        customerName?: string;
        customerType?: string;
        defaultAddress?: string;
        educationLevel?: string;
        email?: string;
        establismentDate?: Date;
        establismentPlace?: string;
        factorAddress?: string;
        fathersName?: string;
        faxNumber?: string;
        gsmNumber?: string;
        homeAddress?: string;
        idType?: string;
        isSharedCustomer?: boolean;
        managementOfficeAddress?: string;
        mothersMaidenSurname?: string;
        mothersName?: string;
        personBankInfo?: string;
        personId?: number;
        personType?: number;
        phoneNumber?: string;
        profession?: string;
        refreshBalance?: boolean;
        sharedCustomerType?: number;
        taxNumber?: string;
        workAddress?: string;
        workshopAddress?: string;
    }
    interface AgentStatusListContract extends BOA.Common.Types.ContractBase {
        name?: string;
        status?: string;
        userName?: string;
    }
    interface AgentWorkingPeriodsContract extends BOA.Common.Types.ContractBase {
        day?: number;
        deviceCode?: string[];
        endTime?: Date;
        iD?: number;
        isWeekend?: boolean;
        startTime?: Date;
        videoBegin?: Date;
        videoEnd?: Date;
    }
    interface AgreementCommandParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        type?: string;
    }
    interface AgreementContract extends BOA.Common.Types.ContractBase {
        agreementGroupId?: number;
        agreementId?: number;
        documentId?: number;
        documentName?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        sortOrder?: number;
        systemDate?: Date;
        tranType?: BOA.Types.Kernel.SelfService.TranType;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AgreementVersionContract extends BOA.Common.Types.ContractBase {
        agreementData?: number[];
        agreementDataXPS?: number[];
        agreementGroupId?: number;
        agreementId?: number;
        agreementVersionCode?: string;
        agreementVersionId?: number;
        agreementVersionNo?: number;
        beginDate?: Date;
        description?: string;
        documentName?: string;
        dynamicAgreementCode?: string;
        endDate?: Date;
        groupName?: string;
        hostIP?: string;
        hostName?: string;
        isDynamicAgreement?: boolean;
        language?: string;
        languageId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AllTransactionsContract extends BOA.Common.Types.ContractBase {
        billingAmount?: number;
        billingCurrency?: string;
        businessKey?: number;
        cardNumber?: string;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromTckn?: string;
        hostName?: string;
        iD?: number;
        isMernisChecked?: boolean;
        isReverseTransaction?: boolean;
        phoneNumber?: string;
        requestName?: string;
        reverseBusinessKey?: number;
        settlementAmount?: number;
        settlementCurrency?: string;
        systemDate?: Date;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        tranDate?: Date;
        transactionAmount?: number;
        transactionCode?: string;
        transactionCurrency?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AtmApplicationMessages {
    }
    interface AtmBanknoteContract extends BOA.Common.Types.ContractBase {
        availableCount?: number;
        caseType?: number;
        caseTypeDescription?: string;
        fec?: number;
        fecCode?: string;
        rejectCount?: number;
        unitPrice?: number;
    }
    interface AtmCaseBalanceContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        balanceFec?: number;
    }
    interface AtmPenaltyCheckListContract extends BOA.Common.Types.ContractBase {
        branchCod?: number;
        branchName?: string;
        costStatus?: boolean;
        expectedAmount?: number;
        id?: number;
        prmTranDateBegin?: Date;
        prmTranDateEnd?: Date;
        tranAmount?: number;
        tranDate?: Date;
    }
    interface AtmResourceCodes {
    }
    interface AtmResourceContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        hostIP?: string;
        hostName?: string;
        iconPath?: string;
        name?: string;
        parentId?: number;
        resourceCode?: string;
        resourceId?: number;
        sortId?: number;
        systemDate?: Date;
        typeId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface AtmResourceIds {
    }
    interface ATMTerminalGroupContract extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        limitGroup?: string;
        limitGroupName?: string;
        systemDate?: Date;
        terminalId?: string;
        terminalName?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ATMUsageProbabilityContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        max?: number;
        min?: number;
        probability?: number;
        terminalId?: string;
        type?: string;
        typeId?: number;
        usageIndex?: number;
    }
    interface AtmUtil {
    }
    interface AuthorizedCustomersContract extends BOA.Common.Types.ContractBase {
        customerId?: number;
        customerName?: string;
        customerTelephoneNumber?: string;
        personId?: number;
    }
    interface AuthorizedPersonContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        birthDate?: Date;
        birthPlace?: string;
        defaultAddress?: string;
        email?: string;
        fatherName?: string;
        gsmNumber?: string;
        homeTelNumber?: string;
        idCounty?: string;
        idDeliveryDate?: Date;
        idDeliveryPlace?: string;
        idDistrict?: string;
        idExpirationDate?: Date;
        idFamilyOrder?: number;
        idNo?: string;
        idPersonOrder?: number;
        idSerial?: string;
        idType?: string;
        idVolume?: number;
        motherName?: string;
        mothersMaidenSurname?: string;
        name?: string;
        taxNumber?: string;
        workTelNumber?: string;
    }
    interface BalanceEntity extends BOA.Common.Types.ContractBase {
        accountInfo?: BOA.Types.Kernel.SelfService.KtmAccountComponentAccountsContract;
    }
    interface BalanceViewEntity extends BOA.Common.Types.ContractBase {
        acountStatementList?: BOA.Types.Kernel.SelfService.AccountStatementContract[];
    }
    interface BanknoteHelper {
    }
    interface BankNoteInfoContract extends BOA.Common.Types.ContractBase {
        b_10_Count?: number;
        b_10_TotalAmount?: number;
        b_100_Count?: number;
        b_100_TotalAmount?: number;
        b_20_Count?: number;
        b_20_TotalAmount?: number;
        b_200_Count?: number;
        b_200_TotalAmount?: number;
        b_5_Count?: number;
        b_5_TotalAmount?: number;
        b_50_Count?: number;
        b_50_TotalAmount?: number;
        c_0_25_Count?: number;
        c_0_25_TotalAmount?: number;
        c_0_50_Count?: number;
        c_0_50_TotalAmount?: number;
        c_1_50_Count?: number;
        c_1_50_TotalAmount?: number;
        c_1_Count?: number;
        c_1_TotalAmount?: number;
        resetDate?: Date;
        totalAmount?: number;
    }
    interface BanksoftResponse extends BOA.Common.Types.ResponseBase {
        amount?: string;
        code?: string;
        customerID?: string;
        description?: string;
        emvData?: string;
        provisionCode?: string;
        referenceNumber?: string;
        responseSuccess?: boolean;
        result?: string;
        transactionSuccess?: boolean;
        transactionType?: string;
    }
    interface BanksoftResponseContract {
        amount?: string;
        code?: string;
        customerID?: string;
        description?: string;
        emvData?: string;
        provisionCode?: string;
        referenceNumber?: string;
        result?: string;
        success?: boolean;
        switchReferenceNumber?: string;
        transactionType?: string;
    }
    interface BiometricUserDefinitionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        iD?: number;
        isActive?: boolean;
        loginItemId?: number;
        loginItemName?: string;
        systemDate?: Date;
    }
    interface BoaTypeConverter {
    }
    interface CallQueueContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        agentFinishDate?: Date;
        agentStartDate?: Date;
        agentUserName?: string;
        amount?: number;
        authenticationType?: number;
        authenticationTypeString?: string;
        branch?: string;
        branchId?: number;
        branchName?: string;
        callCloseType?: string;
        callDuration?: string;
        callGroup?: string;
        callId?: number;
        callTypeId?: number;
        cardNumber?: string;
        cardType?: string;
        currentUserFullName?: string;
        currentUserName?: string;
        customerName?: string;
        device?: string;
        deviceCode?: string;
        deviceId?: number;
        deviceIP?: string;
        deviceName?: string;
        fec?: string;
        hostName?: string;
        identityNumber?: string;
        identityType?: number;
        ininCallId?: number;
        insertDate?: Date;
        insertDateText?: string;
        journal?: string;
        lastStatus?: number;
        lastStatusInfo?: string;
        loginType?: string;
        maskedCardNumber?: string;
        ownBranch?: string;
        ownBranchId?: number;
        ownBranchName?: string;
        sessionId?: number;
        transferedId?: boolean;
        workGroupName?: string;
    }
    interface CallQueueTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        fecCode?: string;
        transactionCode?: string;
    }
    interface CancelCodeContract extends BOA.Common.Types.ContractBase {
        cancelCode?: string;
        cancelDescription?: string;
        isChecked?: boolean;
    }
    interface CardAuthenticationContract extends BOA.Common.Types.ContractBase {
        banksoftResponse?: BOA.Types.Kernel.SelfService.BanksoftResponseContract;
        customerInfo?: BOA.Types.Kernel.SelfService.CustomerContract;
    }
    interface CardContract extends BOA.Common.Types.ContractBase {
        cardNumber?: string;
        cardType?: string;
        emvCardApplicationList?: BOA.Types.Kernel.SelfService.EMVCardApplicationContract[];
        expireDate?: string;
        onUsCard?: boolean;
        selectedAIDIndex?: number;
        track2?: string;
    }
    interface CardHelper {
        instance?: BOA.Types.Kernel.SelfService.CardHelper;
    }
    interface CardInfoContract extends BOA.Common.Types.ContractBase {
        bankCustomerId?: string;
        bankType?: string;
        bKMBankId?: string;
        cardBrand?: number;
        cardNumber?: string;
        cardType?: string;
        customerNumber?: number;
        expiryDate?: string;
        hasChip?: boolean;
        isMaster?: boolean;
        isVisa?: boolean;
        nationalBankId?: number;
    }
    interface CaseBalanceForSingleDeviceContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        deviceId?: string;
        fecCode?: number;
        lastBusinessKey?: number;
        ledgerId?: number;
        xfsBalance?: number;
    }
    interface CaseInformationContract extends BOA.Common.Types.ContractBase {
        banknoteType?: number;
        businessKey?: number;
        caseBranch?: number;
        caseInformationID?: number;
        cassetteID?: string;
        cassetteType?: string;
        depositedAmount?: number;
        depositedAmountAcceptanceCasette?: number;
        deviceCaseTotalBalance?: number;
        deviceCode?: string;
        deviceID?: string;
        deviceSide?: string;
        fecCode?: string;
        loadedAmount?: number;
        ownBranch?: number;
        paidAmount?: number;
        processType?: string;
        remainingAmount?: number;
        updatedDate?: Date;
        xfsCounterTotalBalance?: number;
    }
    interface CaseResetAccountingContract extends BOA.Common.Types.ContractBase {
        caseBalance?: number;
        fecCode?: number;
        xfsBalance?: number;
    }
    interface CaseResetContract extends BOA.Common.Types.ContractBase {
        bankNoteInfoContract?: BOA.Types.Kernel.SelfService.BankNoteInfoContract;
        caseBalance?: number;
        counterBalance?: number;
        fec?: number;
    }
    interface CasettaInfoContract {
        currency?: string;
        currentCount?: number;
        noteValue?: string;
        status?: string;
        type?: string;
    }
    interface CashInCommandParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        businessKey?: number;
        fec?: number;
    }
    interface ChipDataObject {
        aTR?: string;
        emvBanknoteList?: BOA.Common.Types.TellerTransactionContract[];
        eMVCardApplicationList?: BOA.Types.Kernel.SelfService.EMVCardApplication[];
        eMVDataToOperate?: string;
        eMVScript71?: string;
        eMVScript72?: string;
        eMVShowCommissionConfirmation?: boolean;
        eMVShowResult?: boolean;
        eMVTransactionAmount?: number;
        emvTransactionBanksoftResponse?: BOA.Types.Kernel.SelfService.BanksoftResponse;
        eMVTransactionGuid?: string;
        eMVTransactionInProgress?: BOA.Types.Kernel.SelfService.EMVTransactionType;
        fTR?: BOA.Types.Kernel.SelfService.FinancialTransactionRequest;
        iccApplication?: BOA.Types.Kernel.SelfService.IccApplicationObject;
        languageSelected?: boolean;
        needStartTransaction?: boolean;
        requestMessage?: BOA.Common.Types.TransactionRequestBase;
        selectedEMVCardApplication?: BOA.Types.Kernel.SelfService.EMVCardApplication;
    }
    interface CitValueContract extends BOA.Common.Types.ContractBase {
        firmId?: number;
        firmName?: string;
    }
    interface CommandAmountControlContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        callId?: number;
        id?: number;
        processType?: number;
        result?: boolean;
        userName?: string;
    }
    interface CommandBase {
        businessKey?: number;
        comAmount?: number;
        comBusinessKey?: number;
        comFEC?: number;
        deviceId?: number;
    }
    interface ComplaintContract extends BOA.Common.Types.ContractBase {
        phoneNumber?: string;
        tCKN?: string;
    }
    interface Constant {
    }
    interface CounterBalanceContract extends BOA.Common.Types.ContractBase {
        banknote?: number;
        caseType?: number;
        caseTypeString?: string;
        counter?: number;
        deviceCode?: string;
        fec?: number;
        fecCode?: string;
        id?: number;
        systemDate?: Date;
        totalAmount?: number;
        updateSystemDate?: Date;
    }
    interface CustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        customerNumber?: number;
        expireDate?: string;
        name?: string;
        taxNumber?: string;
    }
    interface CustomerNameInfoParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        customerName?: string;
    }
    interface CustomerSessionContext {
        activeResourceCode?: string;
        activeResourceId?: number;
        atmLoginType?: BOA.Types.Kernel.SelfService.LoginType;
        atmTransactionCard?: BOA.Types.Kernel.SelfService.TransactionCard;
        currentLanguageCulture?: any;
        customer?: string;
        info?: string;
        insertedCard?: BOA.Types.Kernel.SelfService.InsertedCardContext;
        selectedCallGroup?: string;
        selectedLanguage?: string;
    }
    interface CustomerToPersonContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        customerId?: number;
        isDefault?: boolean;
        personId?: number;
        personName?: string;
        personTaxNumber?: string;
        personType?: number;
        personTypeName?: string;
        phoneNumber?: string;
        share?: number;
    }
    interface CutContract {
        count?: number;
        packageName?: string;
        price?: number;
    }
    interface DebitCardTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        cardNumber?: string;
        fec?: number;
        terminalId?: string;
        transactionDate?: string;
    }
    interface DefinedReceiverContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        name?: string;
    }
    interface DefinedReceiverInfoContact extends BOA.Common.Types.ContractBase {
        description?: string;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverAddress?: string;
        receiverBirthDate?: Date;
        receiverBranch?: number;
        receiverCity?: number;
        receiverFatherName?: string;
        receiverName?: string;
        receiverPhone?: string;
        senderPhone?: string;
    }
    interface DefinitionDetailContract extends BOA.Common.Types.ContractBase {
        canUpdate?: boolean;
        handicappedATM?: number;
        handicappedATMDescription?: string;
        hasCashDeposit?: number;
        hasCashDepositDescription?: string;
        hasCoin?: number;
        hasCoinDescription?: string;
        hasPayingBills?: number;
        hasPayingBillsDescription?: string;
        latitute?: string;
        locationType?: number;
        locationTypeName?: string;
        longitude?: string;
        salaryATM?: number;
        salaryATMDescription?: string;
        singleATM?: number;
        singleATMDescription?: string;
        touristyATM?: number;
        touristyATMDescription?: string;
        xtmAddress?: string;
        xtmCity?: number;
        xtmCityName?: string;
        xtmCode?: string;
        xtmDistrict?: number;
        xtmDistrictName?: string;
        xtmName?: string;
        xtmPostalCode?: number;
    }
    interface DepositWithdrawalContract {
        accountBranchId?: number;
        accountInfo?: BOA.Types.Kernel.SelfService.KtmAccountComponentAccountsContract;
        accountingDescription?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        amount?: number;
        amountTL?: number;
        cardNumber?: string;
        channelId?: number;
        customerInfo?: BOA.Types.Kernel.SelfService.KtmAccountComponentCustomerInfoContract;
        description?: string;
        expireDate?: string;
        fec?: number;
        fecDesc?: string;
        globalAccountNumber?: string;
        iBAN?: string;
        isActive?: number;
        isWithdrawal?: boolean;
        relativePersonId?: number;
        thirdPersonId?: number;
        tranBranchId?: number;
        tranDate?: Date;
    }
    interface DeviceBalanceContract extends BOA.Common.Types.ContractBase {
        balanceTime?: Date;
        beginDate?: Date;
        caseBalance?: number;
        caseBranchCity?: number;
        caseBranchId?: number;
        caseBranchName?: string;
        caseType?: number;
        caseTypeDescription?: string;
        deviceCode?: string;
        deviceId?: number;
        deviceName?: string;
        deviceType?: number;
        endDate?: Date;
        fec?: string;
        fecId?: number;
        ownBranchCity?: number;
        ownBranchId?: number;
        ownBranchName?: string;
    }
    interface DeviceBanknoteContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        depositAmount?: number;
        depositCount?: number;
        deviceCode?: string;
        deviceName?: string;
        deviceTranDate?: Date;
        differenceAmount?: number;
        fecName?: string;
        unitPrice?: number;
        withdrawalAmount?: number;
        withDrawCount?: number;
    }
    interface DeviceCallStatusTypeContract extends BOA.Common.Types.ContractBase {
        code?: string;
        name?: string;
        status?: number;
    }
    interface DeviceCaseBanknoteAmountContract extends BOA.Common.Types.ContractBase {
        availableCount?: number;
        banknote?: number;
        caseType?: number;
        caseTypeDescription?: string;
        fecCode?: string;
        rejectCount?: number;
    }
    interface DeviceCaseReverseTransactionContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        banksoftReferansNumber?: string;
        businessKeyToRevoke?: number;
        reverseRequestType?: number;
        tranDate?: Date;
        tranRef?: string;
        transactionGuid?: string;
        transactionGuidToReverse?: string;
    }
    interface DeviceCaseTransactionContract extends BOA.Common.Types.ContractBase {
        fXRate?: number;
        isCaseTransaction?: boolean;
        tLAmount?: number;
        transactionGuid?: string;
    }
    interface DeviceCashDepositContract {
        phoneNumber?: string;
        tCNumber?: string;
    }
    interface DeviceCheckVersionContract {
        currentVersion?: string;
        newVersion?: string;
    }
    interface DeviceClientApplicationContext {
        accountNumber?: number;
        callGroups?: BOA.Types.Kernel.SelfService.KtmParameterContract[];
        cardInformation?: BOA.Types.Kernel.SelfService.CardContract;
        cardNumber?: string;
        currentAgent?: BOA.Types.Kernel.SelfService.AgentContract;
        currentCustomer?: BOA.Types.Kernel.SelfService.CustomerContract;
        deviceDefinition?: BOA.Types.Kernel.SelfService.DeviceDefinitionContract;
        deviceStatus?: BOA.Types.Kernel.SelfService.DeviceErrorCodesContract[];
        deviceTypeName?: string;
        environmentSettings?: BOA.Types.Kernel.SelfService.EnvironmentSettingsContract;
        escrowStatus?: number;
        firmSettings?: BOA.Types.Kernel.SelfService.FirmSettingsContract;
        headerContext?: any;
        insertedCardNumber?: string;
        isAgentClosedCall?: boolean;
        isCallClosedByTimer?: boolean;
        isCustomerLoggedOn?: boolean;
        isRetracted?: boolean;
        isWorkingWithAgent?: boolean;
        lastCallId?: number;
        loginTypeId?: number;
        personTypeId?: number;
        softPhoneIp?: string;
        videoServerIp?: string;
        workingPeriods?: BOA.Types.Kernel.SelfService.WorkingPeriodsContract[];
    }
    interface DeviceClientResourceAccessContract {
        accessTime?: Date;
        accessType?: number;
        accountNumber?: number;
        actionId?: number;
        actionName?: string;
        deviceId?: number;
        executionDuration?: number;
        processDuration?: number;
        resourceId?: number;
        resourceName?: string;
    }
    interface DeviceConfigContract extends BOA.Common.Types.ContractBase {
        configCode?: string;
        deleteList?: number[];
        hostName?: string;
        iD?: number;
        name?: string;
        resourceConfigList?: BOA.Types.Kernel.SelfService.DeviceResourceConfigContract[];
        sourceConfigCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DeviceCounterBalanceContract extends BOA.Common.Types.ContractBase {
        counterAmount?: number;
        counterAmountFec?: number;
    }
    interface DeviceCounterBalanceResponse extends BOA.Common.Types.ResponseBase {
        caseInformationContractList?: BOA.Types.Kernel.SelfService.CaseInformationContract[];
        counterAmountList?: BOA.Types.Kernel.SelfService.DeviceCounterBalanceContract[];
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
    }
    interface DeviceCounterJournalContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        depositeAmount?: number;
        deviceCode?: string;
        deviceStatus?: string;
        fec?: number;
        id?: number;
        systemDate?: Date;
        tranDate?: Date;
        transactionStatus?: number;
        transactionType?: number;
        withdrawAmount?: number;
    }
    interface DeviceCounterJournalDetailContract extends BOA.Common.Types.ContractBase {
        afterCurrentCount?: number;
        afterRejectCount?: number;
        banknote?: number;
        beforeCurrentCount?: number;
        beforeRejectCount?: number;
        cassetteUnitID?: string;
        cassetteUnitType?: string;
        fec?: number;
        iD?: number;
        journalId?: number;
        systemDate?: Date;
    }
    interface DeviceDefinitionContract extends BOA.Common.Types.ContractBase {
        accountingSafeNumber?: number;
        activeFrom?: Date;
        activeTo?: Date;
        applicationServer?: string;
        branchId?: number;
        brand?: string;
        callCenterEndTime?: string;
        callCenterStartTime?: string;
        caseBranch?: string;
        caseWorkingEndTime?: string;
        caseWorkingStartTime?: string;
        cITArea?: string;
        configCode?: string;
        connectionType?: string;
        definitionIsSelected?: boolean;
        description?: string;
        deviceAccountNumber?: number;
        deviceAccountSuffix?: number;
        deviceAddress?: string;
        deviceAuthorizedPerson1?: string;
        deviceAuthorizedPerson2?: string;
        deviceAuthorizedPersonPhone1?: string;
        deviceAuthorizedPersonPhone2?: string;
        deviceBeginDate?: Date;
        deviceCity?: string;
        deviceCityPlateID?: number;
        deviceCode?: string;
        deviceDistrict?: string;
        deviceEndDate?: Date;
        deviceGenerationType?: number;
        deviceId?: number;
        deviceIP?: string;
        deviceLocationSubType?: string;
        deviceLocationType?: string;
        devicePostalCode?: number;
        deviceType?: number;
        deviceVersion?: number;
        deviceWorkingEndTime?: string;
        deviceWorkingStartTime?: string;
        eppId?: string;
        firmId?: number;
        firstRunCompleted?: boolean;
        goldMerchantCode?: string;
        hasCardPrinter?: boolean;
        hostIP?: string;
        hostName?: string;
        initialKey?: string;
        inventationPerson?: string;
        isActive?: number;
        isChecked?: boolean;
        isMessageLoggingActive?: boolean;
        isOffside?: boolean;
        isRecycle?: boolean;
        journalType?: string;
        languageId?: number;
        lastRklDate?: Date;
        locationId?: number;
        locationName?: string;
        model?: string;
        name?: string;
        networkAdress?: string;
        ownArea?: string;
        ownBranch?: string;
        portNumber?: number;
        safeId?: number;
        safeLimit?: number;
        scannerCameraName?: string;
        scannerResolution?: string;
        serialNumber?: string;
        softphoneIp?: string;
        softwareVersion?: string;
        sopPanelType?: BOA.Types.Kernel.SelfService.SopPanelType;
        soundDevice?: string;
        systemDate?: Date;
        taskManagerVersion?: string;
        terminalWithdrawalLimit?: number;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        videoDevice?: string;
        videoDevice2?: string;
        videoServerIp?: string;
        workingKey?: string;
        workingStatus?: string;
        worksWeekend?: boolean;
    }
    interface DeviceDepositWithdrawalContract {
        accountBranchId?: number;
        accountInfo?: BOA.Types.Kernel.SelfService.KtmAccountComponentAccountsContract;
        accountingDescription?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountTL?: number;
        cardNumber?: string;
        channelId?: number;
        customerInfo?: BOA.Types.Kernel.SelfService.KtmAccountComponentCustomerInfoContract;
        description?: string;
        expireDate?: string;
        fec?: number;
        iBAN?: string;
        isActive?: number;
        isWithdrawal?: boolean;
        relativePersonId?: number;
        thirdPersonId?: number;
        tranBranchId?: number;
        tranDate?: Date;
    }
    interface DeviceDllVersionContract {
        hashCode?: string;
        name?: string;
    }
    interface DeviceEFTContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        comment?: string;
        comments?: string;
        iBAN?: string;
        ibanNotDeclared?: number;
        paymentType?: string;
        receiverAccountNumber?: string;
        receiverAdress?: string;
        receiverBankCode?: string;
        receiverBankName?: string;
        receiverBranchCode?: string;
        receiverBranchName?: string;
        receiverName?: string;
        receiverShortName?: string;
        senderAccountBranchId?: string;
        senderAccountNumber?: string;
        senderName?: string;
        senderPhone?: string;
        transactionBranchId?: string;
    }
    interface DeviceEODContract extends BOA.Common.Types.ContractBase {
        accountingAmount?: number;
        businessKey?: number;
        deviceCode?: string;
        deviceCounterAmount?: number;
        fec?: number;
        id?: number;
        insertedDate?: Date;
        isEmail?: boolean;
        transactionType?: number;
    }
    interface DeviceErrorCodesContract {
        color?: string;
        description?: string;
        device?: number;
        deviceType?: string;
        priority?: number;
        statusCode?: string;
        statusType?: string;
    }
    interface DeviceInfoPanelContract extends BOA.Common.Types.ContractBase {
        financialInfo?: any;
        fXInfo?: any;
        profitRates?: any;
    }
    interface DeviceInternalMoneyTransferListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        businessKey?: number;
        channelId?: number;
        channelName?: string;
        currentState?: number;
        customerName?: string;
        description?: string;
        fec?: number;
        fecDesc?: string;
        fromAccountBranch?: number;
        fromAccountSuffix?: number;
        fromFEC?: number;
        hostIp?: string;
        hostIP?: string;
        hostName?: string;
        mainBusinessKey?: number;
        moneyTransferType?: number;
        processType?: number;
        resourceCode?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        systemDate?: Date;
        toAccountBranch?: number;
        toAccountSuffix?: number;
        toFEC?: number;
        tranBranch?: number;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DeviceIntrabankMoneyTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        appliedFer?: number;
        authorizedPersonId?: number;
        blackListVerificationType?: number;
        businessKey?: number;
        channelId?: number;
        currentState?: number;
        defaultAddress?: string;
        description?: string;
        divitId?: any;
        fromAccountBranch?: number;
        fromAccountSuffix?: number;
        fromFEC?: number;
        hostIp?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isCommissionTotalAmount?: boolean;
        isOrdered?: boolean;
        isPaymentReceiverAccountInFreeZone?: number;
        isReceiverAccountInFreeZone?: number;
        isReceiverEmployee?: boolean;
        mainBusinessKey?: number;
        moneyTransferAmount?: number;
        moneyTransferBusinessDate?: Date;
        moneyTransferBusinessKey?: number;
        moneyTransferDate?: Date;
        moneyTransferDescription?: string;
        moneyTransferFec?: number;
        moneyTransferHostName?: string;
        moneyTransferId?: number;
        moneyTransferReceivedBranchId?: number;
        moneyTransferResourceId?: number;
        moneyTransferSentBranchId?: number;
        moneyTransferState?: number;
        moneyTransferType?: number;
        moneyTransferUserName?: string;
        paymentAmount?: number;
        paymentBusinessDate?: Date;
        paymentBusinessKey?: number;
        paymentDate?: Date;
        paymentReceiverAccountAddress?: string;
        paymentReceiverAccountBranchId?: number;
        paymentReceiverAccountIBAN?: string;
        paymentReceiverAccountTaxNumber?: string;
        paymentReceiverAccountTaxOffice?: string;
        paymentReceiverAcountNumber?: number;
        paymentReceiverAcountSuffix?: number;
        paymentReceiverAddress?: string;
        paymentReceiverBirthDate?: Date;
        paymentReceiverFatherName?: string;
        paymentReceiverName?: string;
        paymentReceiverPhone?: string;
        paymentResourceId?: number;
        paymentType?: number;
        paymentUserName?: string;
        processType?: number;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverAddress?: string;
        receiverBirthDate?: Date;
        receiverBranchId?: number;
        receiverFatherName?: string;
        receiverIBAN?: string;
        receiverMoneyTransferType?: number;
        receiverName?: string;
        receiverPersonid?: number;
        receiverPersonType?: number;
        receiverPhone?: string;
        receiverTaxNumber?: string;
        refundSufffix?: number;
        refundToBranchBusinessDate?: Date;
        refundToBranchBusinessKey?: number;
        refundToBranchDate?: Date;
        refundToBranchDescription?: string;
        refundToBranchId?: number;
        refundToBranchResourceId?: number;
        refundToBranchUserName?: string;
        refundToSenderAcountSuffix?: number;
        refundToSenderBranchId?: number;
        refundToSenderBusinessDate?: Date;
        refundToSenderBusinessKey?: number;
        refundToSenderDate?: Date;
        refundToSenderDescription?: string;
        refundToSenderIBAN?: string;
        refundToSenderResourceId?: number;
        refundToSenderUserName?: string;
        resourceCode?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        reverseMoneyTransferBusinessKey?: number;
        senderAccountNumber?: number;
        senderAccountSuffix?: number;
        senderAddress?: string;
        senderBranchId?: number;
        senderIBAN?: string;
        senderMoneyTransferType?: number;
        senderName?: string;
        senderPersonid?: number;
        senderPersonType?: number;
        senderPhone?: string;
        senderTaxNumber?: string;
        senderTaxOffice?: string;
        systemDate?: Date;
        tLAmount?: number;
        toAccountBranch?: number;
        toAccountSuffix?: number;
        toFEC?: number;
        totalAmount?: number;
        tranBranch?: number;
        tranDate?: Date;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
    }
    interface DeviceJournalContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agentFinishDate?: Date;
        agentStartDate?: Date;
        agentUserName?: string;
        callId?: number;
        cardNumber?: string;
        device?: string;
        deviceId?: number;
        deviceName?: string;
        isAgentClosedCall?: string;
        isCallClosedByTimer?: string;
        isRetracted?: string;
        isRetractedColor?: string;
        journal?: string;
        sessionId?: number;
        tranBusinessKey?: number;
        tranDate?: Date;
    }
    interface DeviceMobileGoldContract extends BOA.Common.Types.ContractBase {
        cardDomain?: string;
        cardNumber?: string;
        cardStatus?: string;
        customerId?: number;
        isExists?: number;
    }
    interface DeviceResourceConfigContract extends BOA.Common.Types.ContractBase {
        configCode?: string;
        functionKey?: string;
        hostName?: string;
        id?: number;
        isActive?: boolean;
        parentId?: number;
        resourceCode?: string;
        resourceName?: string;
        systemDate?: Date;
        tranCardType?: string;
        tranCardTypeString?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DeviceResourceNameContract extends BOA.Common.Types.ContractBase {
        configCode?: string;
        resourceCode?: string;
    }
    interface DeviceResourceNodeContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        channelId?: number;
        className?: string;
        displayName?: string;
        fkey?: string;
        helpURL?: string;
        hostIP?: string;
        hostName?: string;
        iconPath?: string;
        loginTypeId?: number;
        name?: string;
        parentId?: number;
        personTypeId?: number;
        resourceCode?: string;
        resourceId?: number;
        sortId?: number;
        systemDate?: Date;
        tranCardType?: string;
        transactionCode?: string;
        typeId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DeviceResourcePropContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        className?: string;
        description?: string;
        displayName?: string;
        helpURL?: string;
        hostName?: string;
        resourceCode?: string;
        resourceId?: number;
        systemDate?: Date;
        userName?: string;
    }

    interface DeviceSlipDefinitionContract extends BOA.Common.Types.ContractBase {
        caseBranchName?: string;
        deviceID?: number;
        ownBranchName?: string;
    }
    interface DeviceSlipListContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        depositAmount?: number;
        fecCode?: string;
        other?: boolean;
        resourceId?: number;
        resourceName?: string;
        slipDescription?: string;
        withDrawAmount?: number;
    }
    interface DeviceSoftwareVersion {
        aTMDllVersionContractList?: BOA.Types.Kernel.SelfService.DeviceDllVersionContract[];
        cutInTime?: Date;
        deviceNewSoftwareVersionContract?: BOA.Types.Kernel.SelfService.DeviceSoftwareVersionContract;
        deviceRunningVersionContract?: BOA.Types.Kernel.SelfService.DeviceSoftwareVersionContract;
        deviceSoftwareVersionContract?: BOA.Types.Kernel.SelfService.DeviceSoftwareVersionContract;
    }
    interface DeviceSoftwareVersionContract {
        build?: number;
        deviceCode?: string;
        deviceType?: number;
        id?: number;
        major?: number;
        minor?: number;
        release?: boolean;
        systemDate?: Date;
        userName?: string;
    }
    interface DeviceStatusContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        casettaInfoList?: BOA.Types.Kernel.SelfService.CasettaInfoContract[];
        cutOff?: boolean;
        cutOffType?: number;
        deviceCode?: string;
        deviceStatusTypes?: BOA.Types.Kernel.SelfService.DeviceStatusTypes;
        endDate?: Date;
        id?: number;
        safeLimit?: number;
        safeTotal?: number;
        startDate?: Date;
        updateSystemDate?: Date;
    }
    interface DeviceTraceUtil {
    }
    interface DeviceTransactionLogContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        deviceId?: number;
        fecCode?: string;
        sessionId?: number;
        systemDate?: Date;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toAmount?: number;
        toFecCode?: string;
        transactionName?: string;
    }
    interface DeviceVersion {
        cutInTime?: Date;
        deviceDllVersionContractList?: BOA.Types.Kernel.SelfService.DeviceDllVersionContract[];
        deviceNewSoftwareVersionContract?: BOA.Types.Kernel.SelfService.DeviceSoftwareVersionContract;
        deviceRunningSoftwareVersionContract?: BOA.Types.Kernel.SelfService.DeviceSoftwareVersionContract;
        deviceSoftwareVersionContract?: BOA.Types.Kernel.SelfService.DeviceSoftwareVersionContract;
    }
    interface DeviceVersionContract {
        color?: string;
        description?: string;
        device?: number;
        deviceType?: string;
        priority?: number;
        statusCode?: string;
        statusType?: string;
    }
    interface DispenseCommandParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        amount?: number;
        coinAmount?: number;
        fec?: number;
        isClosestAlgorithm?: boolean;
    }
    interface EmvApplicationRID {
    }
    interface EMVCardApplication extends BOA.Common.Types.ContractBase {
        aIDIndex?: number;
        allowAutoSelect?: boolean;
        applicationDisplayName?: string;
        applicationIndex?: number;
        applicationLabel?: string;
        applicationPreferredName?: string;
        cardPriority?: number;
        codeTableIndex?: number;
        dFName?: string;
    }
    interface EMVCardApplicationContract extends BOA.Common.Types.ContractBase {
        aIDIndex?: number;
        applicationLabel?: string;
    }
    interface EmvTransactionContract extends BOA.Common.Types.ContractBase {
        aID?: string;
        amount?: number;
        applicationLabel?: string;
        banksoftReferanseNumber?: string;
        cardNumber?: string;
        deviceBranchId?: number;
        deviceId?: number;
        deviceUserCode?: string;
        eMVData?: string;
        eMVTransactionType?: BOA.Types.Kernel.SelfService.EMVTransactionType;
        expireDate?: string;
        merchantCode?: string;
        track2?: string;
        zPKEncryptedPINBlock?: string;
    }
    interface EnvelopeContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agentName?: string;
        branch?: string;
        callId?: number;
        customerName?: string;
        detail?: string;
        deviceAddress?: string;
        deviceCode?: string;
        deviceName?: string;
        formCount?: number;
        formDate?: Date;
        ininCallId?: number;
    }
    interface EnvironmentSettingsContract extends BOA.Common.Types.ContractBase {
        callCenterSystem?: number;
        defaultLanguage?: string;
        firmName?: string;
        hasBankingIntegration?: boolean;
        hasVideoServer?: boolean;
        integrationPoint?: string;
        localCurrency?: BOA.Types.Kernel.SelfService.KtmFECContract;
        localCurrencyParameter?: string;
        selfServiceMode?: number;
        softphoneIp?: string;
        supportedFXCurrencyList?: BOA.Types.Kernel.SelfService.KtmFECContract[];
        supportedFXCurrencyParameter?: string;
        videoServerIp?: string;
    }
    interface FaceRecognitionUserContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        cardNumber?: string;
        faceData?: number[];
        hostName?: string;
        iD?: number;
        isActive?: boolean;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface FinancialContract {
        amount?: number;
        description?: string;
        fec?: number;
        fecCode?: string;
        fromAccountName?: string;
        fromAccountNumber?: string;
        peopleAndPlacesBusinessKey?: number;
        runtimePeriod?: number;
        toAccountNumber?: string;
        toAddress?: string;
        toBankId?: number;
        toBankName?: string;
        toBirthDate?: Date;
        toBranchId?: number;
        toBranchName?: string;
        toCardNo?: string;
        toCityId?: number;
        toCityName?: string;
        toCountryCode?: string;
        toCountryId?: number;
        toCountryName?: string;
        toFatherName?: string;
        toIBAN?: string;
        toIntraAccountNumber?: number;
        toIntraAccountSuffix?: number;
        toName?: string;
        toPhoneNumber?: string;
        toSwiftCode?: string;
        transactionCode?: string;
        transactionPerformTime?: Date;
        userId?: number;
    }
    interface FinancialTransactionRequest {
        amountAuthorised?: number;
        applicationCryptogram?: string;
        applicationTransactionCounter?: number;
        cryptogramInformationData?: string;
        cVMResults?: string;
        issuerApplicationData?: string;
        terminalVerificationResults?: string;
        transactionDate?: number;
        transactionTime?: number;
        transactionType?: string;
        unpredictableNumber?: number;
        xML?: string;
    }
    interface FirmSettingsContract extends BOA.Common.Types.ContractBase {
        firm?: BOA.Types.Kernel.SelfService.DeviceFirm;
    }
    interface ForecastATMDataContract extends BOA.Common.Types.ContractBase {
        atmId?: string;
        banknote?: number;
        caseType?: string;
        expectedClosingAmount?: number;
        expectedDate?: Date;
        expectedOperationAmount?: number;
        expectedTransactionAmount?: number;
        expectedUserName?: string;
        fec?: number;
        groupName?: string;
        hostName?: string;
        id?: number;
        needSupport?: boolean;
        sendingCost?: number;
        sendingDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface ForecastATMDataParser extends BOA.Common.Types.ContractBase {
    }
    interface FraudContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        cardNumber?: string;
        dailyAmount?: number;
        endDate?: Date;
        max?: number;
        min?: number;
        person?: BOA.Types.Kernel.Customer.PersonContract;
        probability?: number;
        startDate?: Date;
        systemDate?: Date;
        terminalId?: string;
        type?: string;
        typeId?: number;
        weekDay?: number;
        weeklyAmount?: number;
    }
    interface FraudTransactionLogContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businesKey?: number;
        cardNumber?: string;
        city?: string;
        dailyAmount?: number;
        finalAmount?: number;
        finalATM?: number;
        finalDay?: number;
        finalTime?: number;
        finalWeeklyAmount?: number;
        systemDate?: Date;
        systemTime?: string;
        terminalId?: string;
        weekDay?: number;
        weeklyAmount?: number;
    }
    interface GoldMerchantContract extends BOA.Common.Types.ContractBase {
        uUyeAd?: string;
        uUyeNo?: string;
    }
    interface IAtmDebitCardTransaction {
        cardInfoContract?: BOA.Types.Kernel.SelfService.CardInfoContract;
    }
    interface IccApplicationObject {
        applicationCurrencyCode?: string;
        applicationCurrencyExponent?: number;
        applicationDiscretionaryData?: string;
        applicationEffectiveDate?: number;
        applicationExpirationDate?: number;
        applicationFileLocator?: string;
        applicationIdentifier?: string;
        applicationInterchangeProfile?: string;
        applicationLabel?: string;
        applicationPANSequenceNumber?: string;
        applicationPreferredName?: string;
        applicationPrimaryAccountNumber?: string;
        applicationPriorityIndicator?: string;
        applicationRefCurrencyCode?: string;
        applicationRefCurrencyExponent?: number;
        applicationUsageControl?: string;
        applicationVersionNumber?: string;
        cardholderName?: string;
        cardholderNameExtended?: string;
        cDOL1?: string;
        cDOL2?: string;
        cVMList?: string;
        fCIIssuerDiscretionaryData?: string;
        issuerActionCodeDefault?: string;
        issuerActionCodeDenial?: string;
        issuerActionCodeOnline?: string;
        issuerCodeTableIndex?: number;
        issuerCountryCode?: number;
        languagePreference?: string;
        pDOL?: string;
        serviceCode?: string;
        tDOL?: string;
        terminalAIDIndex?: number;
        track1DiscretionaryData?: string;
        track2DiscretionaryData?: string;
        track2EquivalentData?: string;
    }
    interface IDeviceCaseReverseTransaction {
        caseReverseTransactionContract?: BOA.Types.Kernel.SelfService.DeviceCaseReverseTransactionContract;
    }
    interface IDeviceCaseTransaction {
        caseTransactionContract?: BOA.Types.Kernel.SelfService.DeviceCaseTransactionContract;
    }
    interface ImmediatePrintCardInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchId?: number;
        branchPrinterName?: string;
        cardGroupCode?: string;
        cardGroupName?: string;
        cardNumber?: string;
        cardPrintStatus?: string;
        cardStyle?: string;
        cardType?: string;
        channelId?: number;
        cvv?: string;
        cvv2?: string;
        deliveryDate?: Date;
        deliveryStatus?: string;
        deliveryUser?: string;
        embossName?: string;
        expirationDate?: string;
        expirationPeriod?: number;
        followNumber?: number;
        hostName?: string;
        printDate?: Date;
        printDescription?: string;
        printStatus?: string;
        printTrialNumber?: number;
        productCode?: string;
        pvvKey?: string;
        pvvKeyIndex?: string;
        recordDate?: Date;
        serviceCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InquiryContract {
        cutContractList?: BOA.Types.Kernel.SelfService.CutContract[];
        provisionId?: string;
        reference_infokysContract?: BOA.Types.Kernel.SelfService.Reference_infokys;
        reload_infoContract?: BOA.Types.Kernel.SelfService.Reload_info;
    }
    interface InsertedCardContext {
        bankCustomerId?: string;
        bankType?: BOA.Types.Kernel.SelfService.BankType;
        bKMBankId?: string;
        cardNumber?: string;
        cardType?: BOA.Types.Kernel.SelfService.CardType;
        chipData?: BOA.Types.Kernel.SelfService.ChipDataObject;
        expiryDate?: string;
        hasChip?: boolean;
        isDomestic?: boolean;
        isMasterCard?: boolean;
        isVisaCard?: boolean;
        lastCardNumber?: string;
        newPinBlock?: string;
        pinBlock?: string;
        track2MagneticStripe?: string;
    }
    interface IntegrationJournalContract extends BOA.Common.Types.ContractBase {
        applicationServerName?: string;
        businessKey?: number;
        cardNumber?: string;
        customerNumber?: number;
        hasException?: boolean;
        hostIP?: string;
        hostName?: string;
        messageId?: number;
        methodName?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
        xtmId?: number;
    }
    interface InternalMoneyTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        amount?: number;
        businessKey?: number;
        channelId?: number;
        currentState?: number;
        description?: string;
        fromAccountBranch?: number;
        fromAccountSuffix?: number;
        fromFEC?: number;
        hostIP?: string;
        hostName?: string;
        mainBusinessKey?: number;
        moneyTransferType?: number;
        processType?: number;
        resourceCode?: string;
        resourceId?: number;
        reverseBusinessKey?: number;
        systemDate?: Date;
        toAccountBranch?: number;
        toAccountSuffix?: number;
        toFEC?: number;
        tranBranch?: number;
        tranDate?: Date;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InterruptionLogContract extends BOA.Common.Types.ContractBase {
        deviceCode?: string;
        hostName?: string;
        iD?: number;
        interruptionDescription?: string;
        interruptionFinishTime?: Date;
        interruptionStartTime?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IntrabankMoneyTransferContract extends BOA.Common.Types.ContractBase {
        appliedFer?: number;
        authorizedPersonId?: number;
        blackListVerificationType?: number;
        channelId?: number;
        defaultAddress?: string;
        divitId?: any;
        hostIp?: string;
        isActive?: number;
        isCommissionTotalAmount?: boolean;
        isOrdered?: boolean;
        isPaymentReceiverAccountInFreeZone?: number;
        isReceiverAccountInFreeZone?: number;
        isReceiverEmployee?: boolean;
        moneyTransferAmount?: number;
        moneyTransferBusinessDate?: Date;
        moneyTransferBusinessKey?: number;
        moneyTransferDate?: Date;
        moneyTransferDescription?: string;
        moneyTransferFec?: number;
        moneyTransferHostName?: string;
        moneyTransferId?: number;
        moneyTransferReceivedBranchId?: number;
        moneyTransferResourceId?: number;
        moneyTransferSentBranchId?: number;
        moneyTransferState?: number;
        moneyTransferUserName?: string;
        paymentAmount?: number;
        paymentBusinessDate?: Date;
        paymentBusinessKey?: number;
        paymentDate?: Date;
        paymentReceiverAccountAddress?: string;
        paymentReceiverAccountBranchId?: number;
        paymentReceiverAccountIBAN?: string;
        paymentReceiverAccountTaxNumber?: string;
        paymentReceiverAccountTaxOffice?: string;
        paymentReceiverAcountNumber?: number;
        paymentReceiverAcountSuffix?: number;
        paymentReceiverAddress?: string;
        paymentReceiverBirthDate?: Date;
        paymentReceiverFatherName?: string;
        paymentReceiverName?: string;
        paymentReceiverPhone?: string;
        paymentResourceId?: number;
        paymentType?: number;
        paymentUserName?: string;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverAddress?: string;
        receiverBirthDate?: Date;
        receiverBranchId?: number;
        receiverFatherName?: string;
        receiverIBAN?: string;
        receiverMoneyTransferType?: number;
        receiverName?: string;
        receiverPersonid?: number;
        receiverPersonType?: number;
        receiverPhone?: string;
        receiverTaxNumber?: string;
        refundSufffix?: number;
        refundToBranchBusinessDate?: Date;
        refundToBranchBusinessKey?: number;
        refundToBranchDate?: Date;
        refundToBranchDescription?: string;
        refundToBranchId?: number;
        refundToBranchResourceId?: number;
        refundToBranchUserName?: string;
        refundToSenderAcountSuffix?: number;
        refundToSenderBranchId?: number;
        refundToSenderBusinessDate?: Date;
        refundToSenderBusinessKey?: number;
        refundToSenderDate?: Date;
        refundToSenderDescription?: string;
        refundToSenderIBAN?: string;
        refundToSenderResourceId?: number;
        refundToSenderUserName?: string;
        resourceCode?: string;
        resourceId?: number;
        reverseMoneyTransferBusinessKey?: number;
        senderAccountNumber?: number;
        senderAccountSuffix?: number;
        senderAddress?: string;
        senderBranchId?: number;
        senderIBAN?: string;
        senderMoneyTransferType?: number;
        senderName?: string;
        senderPersonid?: number;
        senderPersonType?: number;
        senderPhone?: string;
        senderTaxNumber?: string;
        senderTaxOffice?: string;
        systemDate?: Date;
        tLAmount?: number;
        totalAmount?: number;
        tranRef?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
    }
    interface JournalContract {
        accountNumber?: number;
        actionId?: number;
        agentCode?: string;
        applicationServerName?: string;
        businessKey?: number;
        callId?: number;
        cardNumber?: string;
        channelId?: number;
        duration?: number;
        hasException?: number;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        methodName?: string;
        resourceCode?: string;
        resourceId?: number;
        sessionId?: number;
        systemDate?: Date;
        tranDate?: Date;
        transactionName?: string;
        userName?: string;
        xtmName?: string;
    }
    interface KeyStrokeUserContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        avgDwellResults?: string;
        avgFlightResults?: string;
        cardNumber?: string;
        errorMargin?: number;
        iD?: number;
        isActive?: boolean;
        password?: string;
        userLevel?: string;
    }
    interface KtmAccountActiveStates {
    }
    interface KtmAccountActivitiesContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountNumberIts?: string;
        accountSuffix?: number;
        accountTypeCode?: string;
        balance?: number;
        businessKey?: number;
        comment?: string;
        credit?: number;
        currentBalance?: number;
        customerId?: number;
        debit?: number;
        fec?: number;
        fecCode?: string;
        mainBusinessKey?: number;
        systemDate?: Date;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        transactionAmount?: number;
        transactionDate?: string;
        transactionTypeCode?: string;
    }
    interface KtmAccountAdvantageContract extends BOA.Common.Types.ContractBase {
        packageAdvantageId?: number;
        packageName?: string;
        remainingAmount?: number;
        value?: string;
    }
    interface KtmAccountBalanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        availableBalance?: number;
        availableBalanceDisplay?: number;
        availableBalanceWithoutKMH?: number;
        availableBalanceWithoutKMHDisplay?: number;
        balance?: number;
        balanceDisplay?: number;
        fec?: number;
        hasBalanceDisplayConstraint?: boolean;
        productCode?: string;
        withholdingAmount?: number;
        withholdingAmountDisplay?: number;
    }
    interface KtmAccountClassificationContract extends BOA.Common.Types.ContractBase {
        accountClass?: string;
        accountGroupType?: number;
        personType?: number;
        portfolioClass?: string;
    }
    interface KtmAccountComponentAccountsContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountTypeCode?: string;
        accountTypeDescription?: string;
        availableBalance?: number;
        availableBalanceDisplay?: number;
        availableBalanceWithoutKMH?: number;
        availableBalanceWithoutKMHDisplay?: number;
        availableQuantityBalanceDisplay?: number;
        availableQuantityBalanceDisplayCombo?: string;
        balance?: number;
        balanceDisplay?: number;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        fec?: number;
        fecDesc?: string;
        globalAccountNumber?: string;
        hasBalanceDisplayConstraint?: boolean;
        iBAN?: string;
        internalPeriodEnd?: Date;
        isInFreeZone?: number;
        lastNetProfit?: number;
        lastRenewedDate?: Date;
        ledgerId?: number;
        maturityBegin?: Date;
        maturityEnd?: Date;
        maturityTerm?: number;
        openDate?: Date;
        productCode?: string;
        productGroup?: number;
        productName?: string;
        productType?: number;
        profitShareRatio?: number;
        receiverName?: string;
        resourceId?: number;
        segmentCode?: string;
        segmentName?: string;
        unitId?: number;
        unitMultiplier?: number;
        visibleBranchName?: string;
        withHoldingAmount?: number;
        withHoldingAmountDisplay?: number;
        withholdingClass?: number;
        workGroupId?: number;
    }
    interface KtmAccountComponentCustomerInfoContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountClass?: string;
        accountGroupType?: number;
        authorizationType?: number;
        birthDate?: Date;
        birthPlace?: string;
        blackListInfo?: BOA.Types.Kernel.SelfService.KtmBlackListCompositeContract;
        branchid?: number;
        branchName?: string;
        citizenship?: number;
        customerClassCode?: string;
        customerClassName?: string;
        customerid?: number;
        customerName?: string;
        customerName50Characters?: string;
        defaultAddress?: string;
        defaultEMail?: string;
        defaultEMailUpdateDate?: Date;
        defaultFaxNumber?: string;
        defaultGSM?: string;
        defaultGSMUpdateDate?: Date;
        emailNotExists?: number;
        establishmentDate?: Date;
        establishmentPlace?: string;
        fathersName?: string;
        firmid?: number;
        firmName?: string;
        gender?: number;
        gSMNotExists?: number;
        individualStatus?: string;
        individualStatusInfo?: string;
        isBoutique?: boolean;
        isEmployee?: boolean;
        isInBlackList?: boolean;
        isInLegitimateProceeding?: boolean;
        isUnder18Age?: boolean;
        mothersName?: string;
        personid?: number;
        personType?: number;
        phoneNumber?: string;
        portfolioClass?: string;
        portfolioOwner?: string;
        profession?: string;
        professionCode?: number;
        recordingBranchId?: number;
        sharedCustomerType?: number;
        status?: number;
        systemRegistrationDate?: Date;
        taxExemption?: boolean;
        taxNumber?: string;
        taxOffice?: string;
        taxRate?: number;
        unitId?: number;
        workGroupId?: number;
    }
    interface KtmAccountContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountTypeCode?: string;
        accountTypeDescription?: string;
        availableBalance?: number;
        branchId?: number;
        branchName?: string;
        currentBalance?: number;
        fecCode?: string;
        fecDesc?: string;
        globalAccountNumber?: string;
        iBAN?: string;
    }
    interface KtmAccountCorrespondentContract extends BOA.Common.Types.ContractBase {
        accountDetailGroup?: number;
        accountNumber?: number;
        accountNumberPlusAccountSuffix?: number;
        accountSuffix?: number;
        branchId?: number;
        correspondentName?: string;
        fec?: number;
        fecCode?: string;
        isDefault?: boolean;
        isExchange?: boolean;
        isInSSIList?: boolean;
        isKTAccountNumberWrittenToMT200?: boolean;
        isNetting?: boolean;
        isPlasman?: boolean;
        isSettlement?: boolean;
        isTemporaryAccount?: boolean;
        kTAccountNumber?: string;
        ledgerId?: number;
        swiftCode?: string;
    }
    interface KtmAccountDepositContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountValue?: number;
        branchId?: number;
        businessKey?: number;
        firstMaturityBegin?: Date;
        hasOrder?: number;
        incomeSuffix?: number;
        incomeTaxRate?: number;
        internalPeriod?: number;
        internalPeriodBegin?: Date;
        internalPeriodEnd?: Date;
        isDocumentable?: number;
        lastBankStatementDate?: Date;
        lastNetProfit?: number;
        lastRenewedDate?: Date;
        maturityBegin?: Date;
        maturityEnd?: Date;
        maturityTerm?: number;
        profitShareRatio?: number;
        unitValue?: number;
    }
    interface KtmAccountDivisionContract extends BOA.Common.Types.ContractBase {
        accomodation?: number;
        accountNumber?: number;
        accountRole?: number;
        accountType?: string;
        citizenShip?: string;
        corporationDetailType?: number;
        corporationType?: number;
        publicOrPrivate?: number;
    }
    interface KtmAccountInfoContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        customerName?: string;
        iBAN?: string;
        isActive?: number;
    }
    interface KtmAccountOpenContract extends BOA.Common.Types.ContractBase {
        accountCode?: number;
        accountName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        fec?: number;
        flexibleMaturity?: number;
        ledgerId?: number;
        maturityDate?: Date;
    }
    interface KtmAccountProductivityContract extends BOA.Common.Types.ContractBase {
        expectedProductivity?: number;
        expense?: number;
        income?: number;
        profit?: number;
        year?: number;
    }
    interface KtmAccountReminderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountReminderId?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        hostName?: string;
        reminderNote?: string;
        systemDate?: Date;
        userId?: number;
        userName?: string;
    }
    interface KtmAccountSaveContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        accountValue?: number;
        addressNo?: number;
        approveDate?: Date;
        approverUser?: string;
        balance?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cashFlowPeriod?: string;
        channelId?: number;
        closeDate?: Date;
        closeReason?: number;
        closeReasonExtra?: string;
        closeUser?: string;
        divitInstanceId?: string;
        emailFormat?: string;
        fec?: number;
        fecLongName?: string;
        fecName?: string;
        fecType?: number;
        globalAccountNumber?: string;
        hasConstraint?: boolean;
        hasException?: number;
        hasKMH?: boolean;
        hasOrder?: number;
        hasWithHolding?: number;
        hitCount?: number;
        iBAN?: string;
        incomeSuffix?: number;
        internalPeriod?: number;
        internalPeriodBegin?: Date;
        internalPeriodEnd?: Date;
        isActive?: number;
        isMortgage?: number;
        isRevise?: number;
        isSeller?: number;
        isSendSms?: boolean;
        lastBankStatementDate?: Date;
        ledgerId?: number;
        maturityBegin?: Date;
        maturityEnd?: Date;
        maturityTerm?: number;
        openBranchId?: number;
        openBranchName?: string;
        openDate?: Date;
        operationLocation?: number;
        orderAccountSuffix?: number;
        orderAmount?: number;
        orderCreditCardNo?: string;
        orderDueType?: number;
        pool?: number;
        productCode?: string;
        productName?: string;
        productType?: number;
        reminder?: string;
        resourceId?: number;
        segmentCode?: string;
        segmentName?: string;
        statementPeriod?: string;
        unitId?: number;
        unitValue?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDayIncrement?: number;
        withHoldingAmount?: number;
    }
    interface KtmAccountSaveResponse extends BOA.Common.Types.ResponseBase {
        ktmAccountDepositContract?: BOA.Types.Kernel.SelfService.KtmAccountDepositContract;
        ktmAccountSaveContract?: BOA.Types.Kernel.SelfService.KtmAccountSaveContract;
    }
    interface KtmAccountSimpleContract extends BOA.Common.Types.ContractBase {
        branch?: string;
        currencyType?: string;
        definition?: string;
        suffix?: number;
    }
    interface KtmAccountStatementListContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        balanceQuantity?: number;
        businessKey?: number;
        channelId?: number;
        comment?: string;
        credit?: number;
        creditQuantity?: number;
        currentBalance?: number;
        debit?: number;
        debitQuantity?: number;
        description?: string;
        fec?: number;
        isSlipExists?: boolean;
        resourceId?: number;
        segmentName?: string;
        tranBranchId?: number;
        tranBranchName?: string;
        tranDate?: Date;
        tranRef?: string;
        userName?: string;
    }
    interface KtmAccountTestContract extends BOA.Common.Types.ContractBase {
        balance?: number;
        customerId?: number;
    }
    interface KtmAccountTestSearchContract {
        amountMax?: number;
        amountMin?: number;
    }
    interface KtmAccountWithHoldingContract extends BOA.Common.Types.ContractBase {
        accountName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        definitionDescription?: string;
        ownerAccountNumber?: number;
        ownerType?: number;
        userName?: string;
        withholdingClass?: number;
        withHoldingDate?: Date;
        withholdingId?: number;
        withHoldingType?: number;
        withHoldingTypeDescription?: string;
    }
    interface KtmBalanceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balance?: number;
        branchId?: number;
        fec?: number;
        productType?: number;
    }
    interface KtmBalanceViewListContract extends BOA.Common.Types.ContractBase {
        accountAlias?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: string;
        accountTypeDesc?: string;
        availableBalance?: number;
        availableQuantity?: string;
        balance?: number;
        branchName?: string;
        closeDate?: Date;
        fec?: number;
        fecName?: string;
        iBAN?: string;
        isActive?: number;
        ledgerId?: number;
        maturityEnd?: Date;
        openDate?: Date;
        productName?: string;
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
        unitMultiplier?: number;
        withHoldingAmount?: number;
        withHoldingAmountDescription?: string;
    }
    interface KtmBalanceViewParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        balanceDate?: Date;
        branchId?: number;
        creditCardNumber?: string;
        isIncludedOnlyDepositAccounts?: boolean;
        isIncludedPassiveAccounts?: boolean;
        isIncludedZeroBalances?: boolean;
        isPermitted?: boolean;
        userName?: string;
    }
    interface KtmBankBranchContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankId?: number;
        branchId?: number;
        city?: number;
        closeDate?: Date;
        creditCardCenter?: number;
        hostName?: string;
        name?: string;
        openDate?: Date;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface KtmBankContract extends BOA.Common.Types.ContractBase {
        address?: string;
        bankId?: number;
        bankType?: number;
        closeDate?: Date;
        hostName?: string;
        inForeignChequeExchange?: number;
        name?: string;
        openDate?: Date;
        systemDate?: Date;
        updHostName?: string;
        updSystemDate?: Date;
        updUserName?: string;
        userName?: string;
    }
    interface KtmBillInformation {
        billDate?: Date;
        billNumber?: string;
        branch?: string;
    }
    interface KtmBlackListCompositeContract extends BOA.Common.Types.ContractBase {
        corporateBlackList?: BOA.Types.Kernel.SelfService.KtmBlackListCorporateContract[];
        individualBlackList?: BOA.Types.Kernel.SelfService.KtmBlackListIndividualContract[];
        isIndividual?: boolean;
    }
    interface KtmBlackListCorporateContract extends BOA.Common.Types.ContractBase {
        blackListName?: string;
        corporateType?: string;
        description?: string;
        informationSource?: string;
        name?: string;
        taxNumber?: string;
    }
    interface KtmBlackListIndividualContract extends BOA.Common.Types.ContractBase {
        birthDate?: Date;
        birthPlace?: string;
        birthPlaceText?: string;
        blackListName?: string;
        description?: string;
        fatherName?: string;
        informationSource?: string;
        motherName?: string;
        name?: string;
        surname?: string;
        taxNumber?: string;
    }
    interface KtmBranchContract extends BOA.Common.Types.ContractBase {
        address?: string;
        branchId?: number;
        branchType?: string;
        caseLimit?: number;
        category?: string;
        channels?: string;
        city?: number;
        clearingOffice?: number;
        closeDate?: Date;
        country?: number;
        customerid?: number;
        email?: string;
        extendedBranchId?: number;
        faxNumber?: string;
        hRBranchId?: number;
        isActive?: number;
        isInFreeZone?: number;
        journalDate?: Date;
        latitude?: string;
        longitude?: string;
        name?: string;
        officalReportDate?: Date;
        openDate?: Date;
        orderinCountry?: number;
        phoneNumber?: string;
        receiptDate?: Date;
        reginalOffice?: number;
        region?: number;
        serverName?: string;
        shortName?: string;
        type?: string;
        voip?: string;
    }
    interface KtmBSCardOwner {
    }
    interface KtmBSResponseContract {
        amount?: string;
        cardOwner?: BOA.Types.Kernel.SelfService.KtmBSCardOwner;
        code?: string;
        customerID?: string;
        description?: string;
        emvData?: string;
        provisionCode?: string;
        referenceNumber?: string;
        result?: string;
        success?: boolean;
        transactionType?: string;
    }
    interface KtmCardOwner {
        birthDate?: Date;
        birthPlace?: string;
        citizenshipNumber?: string;
        customerTypeDescription?: string;
        emergencyCall?: string;
        employeeTitle?: string;
        fatherName?: string;
        firstName?: string;
        identityCardNumber?: string;
        identityCardSeries?: string;
        lastName?: string;
        motherMaidenName?: string;
        motherName?: string;
        name?: string;
        referanceName?: string;
        referanceSurname?: string;
        secondName?: string;
        taxNumber?: string;
    }
    interface KtmCashAdvance {
        isDomesticCashAdvance?: boolean;
        isInternationalCashAdvance?: boolean;
    }
    interface KtmCityContract extends BOA.Common.Types.ContractBase {
        cityId?: number;
        countryId?: number;
        name?: string;
    }
    interface KtmCorporationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        corporationName?: string;
        reutersCode?: string;
        swiftCode?: string;
    }
    interface KtmCountryContract extends BOA.Common.Types.ContractBase {
        countryCode?: string;
        countryId?: number;
        countryNameEN?: string;
        name?: string;
    }
    interface KtmCountyContract extends BOA.Common.Types.ContractBase {
        cityId?: number;
        countyId?: number;
        name?: string;
    }
    interface KtmCreditCard {
        accountNumber?: number;
        accountSuffix?: number;
        approvalDate?: string;
        branchId?: number;
        branchName?: string;
        cardExpireDate?: Date;
        cardHolderName?: string;
        cardOwner?: BOA.Types.Kernel.SelfService.KtmCardOwner;
        cashAdvancePermission?: BOA.Types.Kernel.SelfService.KtmCashAdvance;
        changeStatementDateCount?: number;
        closeDate?: string;
        creditCardAccount?: string;
        creditCardEkstreState?: string;
        creditCardLimit?: BOA.Types.Kernel.SelfService.KtmCreditCardLimit;
        creditCardNo?: string;
        creditCardState?: string;
        creditCardSubState?: string;
        cVV2?: string;
        encryptedCardNo?: string;
        encryptedPrimaryCardNo?: string;
        expireDate?: string;
        immediateCardType?: string;
        individualCreditFlag?: string;
        installmentCount?: number;
        isApproval?: boolean;
        isCorporate?: boolean;
        isIndividualLoanCard?: boolean;
        isInstallmentEnabled?: boolean;
        isSizCardUSD?: boolean;
        isSizCardYTL?: boolean;
        isValid?: boolean;
        isVirtualCard?: boolean;
        lastDueDate?: Date;
        mailOrderPermission?: BOA.Types.Kernel.SelfService.KtmMailOrder;
        mainOrSupplementary?: boolean;
        maxAllowedInstallmentCount?: number;
        postponingInstallmentCount?: number;
        previousLimit?: number;
        primaryCardNo?: string;
        productType?: string;
        productTypeName?: string;
        productValue?: string;
        secondaryCustId?: string;
        securedCardNo?: string;
        statementDate?: Date;
        statementInfo?: BOA.Types.Kernel.SelfService.KtmCreditCardStatement;
        statementPeriod?: string;
        totalDept?: number;
    }
    interface KtmCreditCardDebt {
        debt?: number;
        lastDueDate?: string;
        lastPaymetDate?: Date;
        minDebt?: number;
        statementDate?: Date;
        totalDebt?: number;
    }
    interface KtmCreditCardLimit {
        additionalCreditCardLimitRate?: number;
        availableCashAdvanceLimit?: number;
        availableLimit?: number;
        internationalCashPermission?: boolean;
        nationalCashPermission?: boolean;
        totalCashAdvanceLimit?: number;
        totalLimit?: number;
    }
    interface KtmCreditCardPayment {
        bill?: BOA.Types.Kernel.SelfService.KtmBillInformation;
        businessKey?: number;
        provisionNumber?: string;
        referenceNumber?: string;
    }
    interface KtmCreditCardStatement {
        amount?: number;
        date?: Date;
        emailHome?: boolean;
        emailOnlyFlag?: boolean;
        emailWork?: boolean;
        faxHome?: boolean;
        faxWork?: boolean;
        minAmount?: number;
        statementAddress?: string;
        statementCode?: string;
        status?: string;
    }
    interface KtmCreditCardStatementDetail {
        header?: BOA.Types.Kernel.SelfService.KtmStatementHeader;
        statedCreditCardTransactionList?: BOA.Types.Kernel.SelfService.KtmCreditCardTransaction[];
    }
    interface KtmCreditCardTransaction {
        amount?: number;
        cardNo?: string;
        creditCardStatementTransactionType?: BOA.Types.Kernel.SelfService.KtmCreditCardStatementTransactionTypeEnum;
        fecCode?: string;
        goldPoint?: number;
        harCardNo?: string;
        installmentDate?: Date;
        installmentNumber?: number;
        internationalFecCode?: string;
        mCCCode?: string;
        mCCDescription?: string;
        message?: string;
        reference?: string;
        totalInstallmentCount?: number;
        transactionCode?: string;
        transactionDate?: Date;
        transactionTime?: string;
    }
    interface KtmCustomerAccountSearchDialogContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        address?: string;
        birthDate?: number;
        customerAccountLedger?: number;
        customerClass?: string;
        customerType?: string;
        fatherName?: string;
        mainBranchCode?: string;
        shortName?: string;
    }
    interface KtmCustomerContract extends BOA.Common.Types.ContractBase {
        autoDescription?: string;
        briefCustomerName?: string;
        customerid?: number;
        customerName?: string;
        firmid?: number;
        reasonToPassive?: number;
        recordingBranchid?: number;
        recordingChannel?: string;
        recordingTime?: Date;
        recordingUserName?: string;
        securityFund?: boolean;
        sharedCustomerType?: number;
        stateDate?: Date;
        stateMaker?: string;
        stateNo?: number;
        stateWFNo?: number;
        status?: number;
        taxExemption?: boolean;
        taxRate?: number;
        userDescription?: string;
    }
    interface KtmDailyBalanceViewListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        balance?: number;
        balanceDate?: Date;
        dailyCredit?: number;
        dailyDebit?: number;
    }
    interface KtmDailyBalanceViewParameterContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        endDate?: Date;
        startDate?: Date;
    }
    interface KtmFECContract extends BOA.Common.Types.ContractBase {
        coinCode?: string;
        country?: number;
        demandDepositeAccount?: number;
        fecCode?: string;
        fecGroup?: number;
        fecId?: number;
        fecName?: string;
        iconPath?: string;
        internationalCode?: number;
        inUse?: number;
        isForward?: boolean;
        iSOCode?: string;
        lateDealCutOff?: string;
        parityBase?: number;
        paymentDaysLag?: number;
        purity?: number;
        timeDepositeAccount?: number;
        unitMultiplier?: number;
    }
    interface KtmFECUsageContract extends BOA.Common.Types.ContractBase {
        fecId?: number;
        usageCode?: string;
    }
    interface KtmFEIndexContract extends BOA.Common.Types.ContractBase {
        accountClass?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        fXId?: number;
        iD?: number;
        indexCoef?: number;
        indexType?: number;
        isDirty?: boolean;
        isNew?: boolean;
        isSelect?: boolean;
    }
    interface KtmFXAccessLimitContract extends BOA.Common.Types.ContractBase {
        accessPointId?: number;
        accessPointIdList?: number[];
        accessPointText?: string;
        accountClass?: number;
        changeRangeDown?: number;
        changeRangeUp?: number;
        fec?: number;
        fromAmount?: number;
        fXId?: number;
        roleName?: string;
        toAmount?: number;
        userName?: string;
        workgroupName?: string;
    }
    interface KtmFXComponentContract extends BOA.Common.Types.ContractBase {
        accountClass?: number;
        askBankParity?: number;
        askBranchParity?: number;
        askCentralBankParity?: number;
        askLowAmountParity?: number;
        baseDepositRate?: number;
        baseFEC?: number;
        bidBankParity?: number;
        bidBranchParity?: number;
        bidCentralBankParity?: number;
        bidLowAmountParity?: number;
        branchCostRate?: number;
        branchCostRateBase?: number;
        changeRangeDown?: number;
        changeRangeDownAmount?: number;
        changeRangeUp?: number;
        changeRangeUpAmount?: number;
        coefForMinTranAmount?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        customerAdvantage?: number;
        effectiveAskBankParity?: number;
        effectiveAskBranchParity?: number;
        effectiveAskLowAmountParity?: number;
        effectiveBidBankParity?: number;
        effectiveBidBranchParity?: number;
        effectiveBidLowAmountParity?: number;
        fec1TranAmount?: number;
        fec2TranAmount?: number;
        fecGroup?: number;
        fromAmountForLimit?: number;
        fXEngineContractList?: BOA.Types.Kernel.SelfService.KtmFXEngineContract[];
        fXID?: number;
        fXJournal?: BOA.Types.Kernel.SelfService.KtmFXJournalContract;
        fXRate?: number;
        indexCoef?: number;
        indexType?: number;
        info?: string;
        lossRatio?: number;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minAmountForIndex?: number;
        minTranAmountForRef?: number;
        pairDepositRate?: number;
        parity?: number;
        profitOrLossCoef?: number;
        profitOrLossValue?: number;
        profitOrLossValueWithCoef?: number;
        profitRatio?: number;
        proposedRate?: number;
        spotRate?: number;
        toAmountForLimit?: number;
        tranFXRate?: number;
        tranFXRateAsk?: number;
        tranFXRateBid?: number;
        tranType?: number;
        tRYEquivalentRate?: number;
        uSDEquivalentRate?: number;
        useBranchRateForLimitOnRef?: boolean;
    }
    interface KtmFXCustomerSpecificBranchRateContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beginDate?: Date;
        branchRateCoefAsk?: number;
        branchRateCoefBid?: number;
        description?: string;
        endDate?: Date;
        hostName?: string;
        id?: number;
        specialTranFXRateAskCoef?: number;
        specialTranFXRateBidCoef?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmFXDefinitionContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        endTime?: any;
        fecGroup?: number;
        fecGroupName?: string;
        fullName?: string;
        fXId?: number;
        fXIndexList?: BOA.Types.Kernel.SelfService.KtmFEIndexContract[];
        fXKey?: number;
        fXKeyName?: string;
        fXLimitsList?: BOA.Types.Kernel.SelfService.KtmFXLimitsContract[];
        fXTimeLimitList?: BOA.Types.Kernel.SelfService.KtmFXTimeLimitContract[];
        isNew?: boolean;
        maxTranAmountForRef?: number;
        minTranAmountForRef?: number;
        profitOrLossCoef?: number;
        referenceExpireTime?: number;
        resourceCode?: string;
        resourceName?: string;
        startTime?: any;
        tranType?: number;
        tranTypeName?: string;
        useBranchRateForLimitOnRef?: boolean;
        useCustomerAdvantage?: boolean;
    }
    interface KtmFXDepositContract extends BOA.Common.Types.ContractBase {
        approvedBy?: string;
        beginDate?: Date;
        depositAsk?: number;
        depositBid?: number;
        depositMid?: number;
        description?: string;
        endDate?: Date;
        fec?: number;
        fecDesc?: string;
        indexType?: number;
        ricName?: string;
        spread?: number;
        term?: number;
        termDesc?: string;
        termDescDay?: string;
        termDescPeriod?: string;
        tranDate?: Date;
    }
    interface KtmFXEngineContract extends BOA.Common.Types.ContractBase {
        currencyAsk?: number;
        currencyBid?: number;
        currencyCode?: number;
        effectiveAsk?: number;
        effectiveBid?: number;
        indexType?: number;
        indexTypeName?: string;
        parity?: number;
        parityAsk?: number;
        parityBid?: number;
        tranDate?: Date;
        visible?: boolean;
    }
    interface KtmFXJournalContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        bankRate?: number;
        baseFEC?: number;
        branchId?: number;
        branchRate?: number;
        branchRateBase?: number;
        businessKey?: number;
        changeRangeDown?: number;
        changeRangeDownAmount?: number;
        changeRangeUp?: number;
        changeRangeUpAmount?: number;
        coefForMinTranAmount?: number;
        costIndexCoef?: number;
        costIndexType?: number;
        customerAdvantage?: number;
        description?: string;
        fecAsk?: number;
        fecAskTranAmount?: number;
        fecBid?: number;
        fecBidTranAmount?: number;
        fromAmountForLimit?: number;
        fXId?: number;
        hostName?: string;
        id?: number;
        indexCoef?: number;
        indexType?: number;
        instrument?: BOA.Types.Kernel.SelfService.FXJournalInstrument;
        lowAmountRate?: number;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minTranAmount?: number;
        minTranAmountForRef?: number;
        partyNo?: string;
        pMAmountTRY?: number;
        pMAmountUSD?: number;
        pMBankProfitLoss?: number;
        pMRateTRY?: number;
        pMRateUSD?: number;
        portfolioPath?: string;
        profitOrLossCoef?: number;
        profitOrLossValue?: number;
        reference?: string;
        resourceCode?: string;
        spotRate?: number;
        status?: BOA.Types.Kernel.SelfService.FXJournalStatus;
        systemDate?: Date;
        toAmountForLimit?: number;
        tranDate?: Date;
        tranFXRate?: number;
        tranFXRateAsk?: number;
        tranFXRateBid?: number;
        transactionReference?: string;
        tRYEquivalentRate?: number;
        uSDEquivalentRate?: number;
        userName?: string;
    }
    interface KtmFXLimitsContract extends BOA.Common.Types.ContractBase {
        coefForMinTranAmount?: number;
        fec?: number;
        fXId?: number;
        isDirty?: boolean;
        isNew?: boolean;
        isSelect?: boolean;
        minAmountForIndex?: number;
    }
    interface KtmFXParityBaseContract extends BOA.Common.Types.ContractBase {
        coefAskBank?: number;
        coefAskBranch?: number;
        coefAskEffective?: number;
        coefAskLowAmount?: number;
        coefBidBank?: number;
        coefBidBranch?: number;
        coefBidEffective?: number;
        coefBidLowAmount?: number;
        coefEfectiveAskBank?: number;
        coefEfectiveAskBranch?: number;
        coefEfectiveAskLowAmount?: number;
        coefEfectiveBidBank?: number;
        coefEfectiveBidBranch?: number;
        coefEfectiveBidLowAmount?: number;
        coefficientOfVariation?: number;
        fecAsk?: number;
        fecBid?: number;
        inUse?: number;
        parityBase?: number;
        spotDays?: number;
    }
    interface KtmFXParityBaseViewContract extends BOA.Common.Types.ContractBase {
        fecAsk?: number;
        fecAskCode?: string;
        fecAskName?: string;
        fecBid?: number;
        fecBidCode?: string;
        fecBidName?: string;
        fecParity?: number;
        fecParityCode?: string;
        iconPath1?: string;
        iconPath2?: string;
        iconPathParity?: string;
        parityBase?: number;
    }
    interface KtmFXReferenceContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        approvedBy?: string;
        approveSpotRate?: number;
        baseDepositRate?: number;
        baseTreasuryRate?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        changeRangeDownAmount?: number;
        changeRangeUpAmount?: number;
        createdBy?: string;
        customerName?: string;
        derivativesMargin?: number;
        description?: string;
        fecAsk?: number;
        fecAskCode?: string;
        fecAskName?: string;
        fecAskTranAmount?: number;
        fecBid?: number;
        fecBidCode?: string;
        fecBidName?: string;
        fecBidTranAmount?: number;
        generalControlResult?: boolean;
        hostName?: string;
        iD?: number;
        instanceId?: number;
        isCustomerDemand?: boolean;
        isLimitedTransaction?: boolean;
        isStartedByTreasury?: boolean;
        isTradePlusOperation?: boolean;
        isUseSectional?: boolean;
        manuelProfitLoss?: number;
        manuelProfitLossFWD?: number;
        manuelProfitOrLossIncluded?: boolean;
        maturityDate?: Date;
        maxTranAmountForRef?: number;
        minTranAmountForRef?: number;
        pairDepositRate?: number;
        pairTreasuryRate?: number;
        parity?: number;
        profitLossIncluded?: boolean;
        reference?: string;
        resourceCode?: string;
        resourceName?: string;
        spotMargin?: number;
        status?: number;
        statusName?: string;
        systemDate?: Date;
        tranDate?: Date;
        tranFXRateOnApprove?: number;
        tranResourceCode?: string;
        tranType?: number;
        tranTypeName?: string;
        tRYEquivalentValue?: number;
        uSDEquivalentValue?: number;
        usedBy?: string;
        userName?: string;
    }
    interface KtmFXTimeLimitContract extends BOA.Common.Types.ContractBase {
        endTime?: any;
        fecGroup?: number;
        fXId?: number;
        isDirty?: boolean;
        isNew?: boolean;
        isSelect?: boolean;
        startTime?: any;
    }
    interface KtmFXTransactionsContract extends BOA.Common.Types.ContractBase {
        accountBranchID?: number;
        accountBranchIDTo?: number;
        accountIBAN?: string;
        accountIBANTo?: string;
        accountNumber?: number;
        accountSuffix?: number;
        accountSuffixTo?: number;
        appliedRate?: number;
        askAmount?: number;
        askFEC?: number;
        askStatisticsCode?: string;
        askUnitMultiplier?: number;
        authorizedIdentityOnBehalfOfFirm?: string;
        authorizedNameOnBehalfOfFirm?: string;
        authorizedOrByOrder?: number;
        authorizedPersonId?: number;
        authorizedPhoneOnBehalfOfFirm?: string;
        baseFEC?: number;
        bidAmount?: number;
        bidFEC?: number;
        bidOrAsk?: number;
        bidStatisticsCode?: string;
        bidUnitMultiplier?: number;
        blackListVerificationType?: number;
        branchRate?: number;
        businessKey?: number;
        centralBankRate?: number;
        channelEx?: string;
        channelId?: number;
        cOE_id?: number;
        creditCard?: string;
        customerAddress?: string;
        customerName?: string;
        customerPhone?: string;
        customerTaxOffice?: string;
        customerTypeName?: string;
        description?: string;
        divitId?: any;
        eODBusinessKey?: number;
        fecDesc?: string;
        fecDesc2?: string;
        fecReceiptOrder?: number;
        fecReceiptSerial?: string;
        firmIdentityOnBehalfOfCustomer?: string;
        firmTitleOnBehalfOfCustomer?: string;
        flowStatus?: number;
        flowStatusEx?: string;
        fXTranId?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        isCorporate?: boolean;
        isFixedRate?: number;
        isFromAccount?: boolean;
        isFromCreditCard?: boolean;
        isToAccount?: boolean;
        nationality?: string;
        ownDeviceBranchId?: number;
        productType?: number;
        profitLoss?: number;
        profitLossIncluded?: boolean;
        proposedRate?: number;
        reference?: string;
        resourceCode?: string;
        reverseBusinessKey?: number;
        systemDate?: Date;
        taxNumber?: string;
        tLAmount?: number;
        tranBranchId?: number;
        tranBranchName?: string;
        tranCode?: number;
        tranCodeEx?: string;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        tranTypeEx?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usdAmount?: number;
        userName?: string;
        warningMessage?: string;
        wfInstanceId?: number;
    }
    interface KtmFXVolatilityContract extends BOA.Common.Types.ContractBase {
        approvedBy?: string;
        beginDate?: Date;
        delta?: number;
        description?: string;
        endDate?: Date;
        fecPair?: number;
        fecPairDesc?: string;
        pCA?: number;
        pCADesc?: string;
        ricName?: string;
        spread?: number;
        term?: number;
        termDesc?: string;
        termDescDay?: string;
        termDescPeriod?: string;
        tranDate?: Date;
        volatilityAsk?: number;
        volatilityBid?: number;
        volatilityMid?: number;
    }
    interface KtmGoldOrderContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixTo?: number;
        amount?: number;
        branch?: string;
        channel?: string;
        channelId?: number;
        creditCard?: string;
        day?: number;
        description?: string;
        divitId?: any;
        endDate?: Date;
        hostName?: string;
        hour?: number;
        id?: number;
        resourceCode?: string;
        resourceId?: number;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tLAmount?: number;
        tranBranchId?: number;
        transactionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmGoldOrderTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffixFrom?: number;
        accountSuffixTo?: number;
        amount?: number;
        businessKey?: number;
        channelId?: number;
        creditCard?: string;
        day?: number;
        description?: string;
        endDate?: Date;
        fXTranId?: number;
        hostName?: string;
        hour?: number;
        id?: number;
        orderId?: number;
        provisionCode?: string;
        resourceCode?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        tLAmount?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmGoldSendTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        channelId?: number;
        comissionAmount?: number;
        creditCard?: string;
        customerSMSMessage?: string;
        fxRate?: number;
        goldAmount?: number;
        hostName?: string;
        id?: number;
        isCustomer?: boolean;
        receiverGsmNumber?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        responseCode?: string;
        responseMessage?: string;
        sendDate?: Date;
        senderGsmNumber?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        sMSCode?: string;
        status?: number;
        statusDescription?: string;
        systemDate?: Date;
        takenFrom?: string;
        transactionDate?: Date;
        transactionId?: string;
        tranType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface KtmIndividualStatusContract extends BOA.Common.Types.ContractBase {
        customerName?: string;
        individualStatus?: string;
    }
    interface KtmMailOrder {
        isDomesticMailOrder?: boolean;
        isInternationalMailOrder?: boolean;
    }
    interface KtmNonSharedAccountsSharedAccountsContract extends BOA.Common.Types.ContractBase {
        customerid?: number;
        customerName?: string;
        personid?: number;
        share?: number;
        sharedCustomerType?: number;
    }
    interface KtmParameterContract extends BOA.Common.Types.ContractBase {
        isAllOptionValue?: boolean;
        isSelectable?: boolean;
        languageId?: number;
        paramCode?: string;
        paramDate?: string;
        paramDescription?: string;
        paramGroupCode?: string;
        paramType?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue3?: string;
        paramValue4?: string;
        paramValue5?: string;
        paramValue6?: string;
        paramValue7?: string;
        paramValue8?: string;
        sortOrder?: number;
    }
    interface KtmParameterDefaultContract {
        languageId?: number;
        paramDataType?: number;
        paramDataTypeRef?: string;
        paramDate?: Date;
        paramDescription?: string;
        paramType?: string;
        paramValue?: string;
    }
    interface KtmParameterExtendedContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        paramAddress?: string;
        paramCode1?: string;
        paramCode2?: string;
        paramDescription?: string;
        paramGroupCode?: string;
        paramType?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue3?: string;
        paramValue4?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmParameterRateContract {
        channelId?: number;
        coefficient?: number;
        maxAmount?: number;
        minAmount?: number;
        paramCode?: string;
        paramDescription?: string;
        paramType?: string;
        rate1?: number;
        rate2?: number;
        rate3?: number;
    }
    interface KtmPersonelAccountsDisplayContract extends BOA.Common.Types.ContractBase {
        directorEmail?: string;
        directorName?: string;
        directorUserId?: number;
        directorUserName?: string;
        managerEmail?: string;
        managerName?: string;
        managerUserId?: number;
        managerUserNAme?: string;
        workGroupID?: number;
        workGroupName?: string;
    }
    interface KtmPhysicalPreciousMetalCoinSerialContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        coin?: number;
        counts?: number;
        entryId?: number;
        hostIp?: string;
        hostName?: string;
        isPicked?: boolean;
        productId?: number;
        serialNumber?: string;
        status?: number;
        stock?: number;
        systemDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmPhysicalPreciousMetalProduct extends BOA.Common.Types.ContractBase {
        fec?: number;
        fecCode?: string;
        fineness?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        serialNumber?: string;
        systemDate?: Date;
        type?: number;
        unit?: number;
        unitDescription?: string;
        unitValue?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmPhysicalPreciousMetalProductCoin extends BOA.Common.Types.ContractBase {
        coin?: number;
        commissionAmount?: number;
        hostIp?: string;
        hostName?: string;
        productId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmPhysicalPreciousMetalProductDetail extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        productId?: number;
        systemDate?: Date;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        value?: number;
    }
    interface KtmPhysicalPreciousMetalProductInfo extends BOA.Common.Types.ContractBase {
        product?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalProduct;
        productCoinList?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalProductCoin[];
        productDetailList?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalProductDetail[];
        tranDefinitionDetailList?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalTranDefinitionDetail[];
        tranDefinitionList?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalTranDefinition[];
    }
    interface KtmPhysicalPreciousMetalTranDefinition extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        coinSerial?: number;
        commissionKey?: string;
        entryType?: number;
        finishTime?: string;
        hostIp?: string;
        hostName?: string;
        id?: number;
        isActive?: number;
        productId?: number;
        resourceCode?: string;
        resourceId?: number;
        startTime?: string;
        systemDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmPhysicalPreciousMetalTranDefinitionDetail extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        tranId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmProductContract extends BOA.Common.Types.ContractBase {
        agreementTypeList?: string[];
        agreementTypeListDesc?: string;
        beginDate?: Date;
        beginSuffix?: number;
        cardPrinting?: number;
        endDate?: Date;
        endSuffix?: number;
        fecList?: string[];
        fecListDesc?: string;
        interimPeriod?: number;
        isLeafLevel?: number;
        languageId?: number;
        level?: number;
        maturityGroup?: number;
        maturityMax?: number;
        maturityMin?: number;
        parentProductCode?: string;
        passbookPrinting?: number;
        productCode?: string;
        productDeposit?: BOA.Types.Kernel.SelfService.KtmProductDepositContract;
        productGroup?: number;
        productName?: string;
        productSegmentInfoList?: BOA.Types.Kernel.SelfService.KtmProductSegmentContract[];
        productType?: number;
        sortOrder?: number;
    }
    interface KtmProductDepositContract extends BOA.Common.Types.ContractBase {
        accountControlConstraint?: number;
        hasIncomeSuffix?: number;
        hasInterimPayment?: number;
        hasInterimPeriod?: number;
        hasWithholding?: number;
        interimPaymentPeriod?: string;
        interimSkipCount?: number;
        internalTolerantDayCount?: number;
        isChequeIssuable?: number;
        isDepositable?: number;
        isIrregular?: number;
        isPromissoryNotesIssuable?: number;
        isSegmentChangeable?: number;
        isWithdrawable?: number;
        productCode?: string;
        tolerantDayCount?: number;
    }
    interface KtmProductNode extends BOA.Common.Types.GenericNode<BOA.Types.Kernel.SelfService.KtmProductNode> {
        iconPath?: string;
        product?: BOA.Types.Kernel.SelfService.KtmProductContract;
    }
    interface KtmProductSegment4IrregularMaturityContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        beginMaturityCount?: number;
        endDate?: Date;
        endMaturityCount?: number;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        lostShareRatio?: number;
        mainMaturity?: number;
        productCode?: string;
        profitShareRatio?: number;
        resourceCode?: string;
        segmentCode?: string;
        segmentName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmProductSegmentContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        beginDate?: Date;
        channelId?: number;
        channelName?: string;
        customerType?: string;
        customerTypeDesc?: string;
        definitionCauseDescription?: string;
        definitionCauseType?: number;
        definitionCauseTypeDescription?: string;
        endDate?: Date;
        fec?: number;
        fecCode?: string;
        hasPunishment?: number;
        hasPunishmentDesc?: string;
        hostIP?: string;
        hostName?: string;
        interBranchRatio?: number;
        isDataVisible?: boolean;
        maximumBalance?: number;
        maximumInterimPaymentAmount?: number;
        minimumBalance?: number;
        minimumInterimPaymentAmount?: number;
        negativeTransactionLimit?: number;
        poolFEC?: number;
        positiveTransactionLimit?: number;
        productCode?: string;
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface KtmProductValueDateContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        channelId?: number;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        productCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDayIncrement?: number;
    }
    interface KtmRareMetalTimeDepositParityContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        averageParity?: number;
        fec?: number;
        parity?: number;
        processDate?: Date;
        processType?: number;
        userName?: string;
    }
    interface KtmSegmentContract extends BOA.Common.Types.ContractBase {
        profitShareRatio?: number;
        segmentCode?: string;
        segmentName?: string;
    }
    interface KtmStatementHeader {
        address?: string;
        creditCard?: BOA.Types.Kernel.SelfService.KtmCreditCard;
        dueDate?: Date;
        earnedGoldPoint?: number;
        existingGoldPoint?: number;
        goldPointConvertedToGold?: number;
        installmentProfit?: number;
        inTermPayments?: number;
        minPayment?: number;
        nextDueDate?: Date;
        nextStatementDate?: Date;
        serialNo?: string;
        statementDate?: Date;
        statementMessage?: string;
        taxes?: number;
        totalDebt?: number;
        totalEarnedGoldPoint?: number;
        transactionTotal?: number;
        transferredBalance?: number;
        transferredGoldPoint?: number;
        usedGoldPoint?: number;
    }
    interface KtmTellerConstants {
    }
    interface KtmTotalBalanceViewListContract extends BOA.Common.Types.ContractBase {
        accountDescription?: string;
        accountNumber?: number;
        accountSuffix?: number;
        customerName?: string;
        eUROAmount?: number;
        fecCode?: number;
        isEmployee?: boolean;
        otherAmount?: number;
        productType?: number;
        tLAmount?: number;
        totalEUROAmount?: number;
        totalEUROSegmentDefinition?: string;
        totalTLAmount?: number;
        totalTLSegmentDefinition?: string;
        totalUSDAmount?: number;
        totalUSDSegmentDefinition?: string;
        uSDAmount?: number;
    }
    interface KtmTranFXRateContract extends BOA.Common.Types.ContractBase {
        baseFEC?: number;
        equivalentAmount?: number;
        fecGroup?: number;
        tranFXRate?: number;
        tranType?: number;
    }
    interface LoginItemsContract extends BOA.Common.Types.ContractBase {
        loginItemId?: number;
        name?: string;
        securityLevel?: number;
    }
    interface LoginTypeContract extends BOA.Common.Types.ContractBase {
        isEnable?: boolean;
        loginItemIds?: string;
        loginTypeId?: number;
        name?: string;
    }
    interface MenuDefinitionChannel extends BOA.Common.Types.ContractBase {
        channelDescription?: string;
        channelId?: number;
    }
    interface MenuDefinitionContract extends BOA.Common.Types.ContractBase {
        actionId?: number;
        actionList?: BOA.Common.Types.ResourceActionContract[];
        actionName?: string;
        channelId?: number;
        isContractChanged?: boolean;
        isContractNew?: boolean;
        isEnable?: boolean;
        isEnableDescription?: string;
        isEnabledWithoutCall?: boolean;
        loginTypeDescription?: string;
        loginTypeId?: number;
        resourceCode?: string;
        resourceDescription?: string;
        resourceId?: number;
        resourceParent1?: string;
        resourceParent2?: string;
        resourceParent3?: string;
        resourceParentId?: number;
        updateUserName?: string;
    }
    interface MenuDefinitionLoginType extends BOA.Common.Types.ContractBase {
        loginTypeDescription?: string;
        loginTypeId?: number;
    }
    interface MenuDefinitionResource extends BOA.Common.Types.ContractBase {
        resourceCode?: string;
        resourceDescription?: string;
        resourceParent1?: string;
        resourceParent2?: string;
        resourceParent3?: string;
        resourceParentId?: number;
    }
    interface MobilGoldSendStatus {
    }
    interface OperatorPasswordContract extends BOA.Common.Types.ContractBase {
        deviceId?: number;
        isDefaultPasswordLogin?: boolean;
        isExpired?: boolean;
        operatorPasswordId?: number;
        password?: string;
        type?: string;
    }
    interface PhysicalPreciousMetalAskContract extends BOA.Common.Types.ContractBase {
        bidAskInfo?: BOA.Types.Kernel.SelfService.BoaKernel.KtmBidAskContract;
        businessKey?: number;
        coinSerialList?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalCoinSerialContract[];
        fxCompContract?: BOA.Types.Kernel.SelfService.KtmFXComponentContract;
        ledgerId?: number;
        pPMCoin?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalProductCoin;
        product?: BOA.Types.Kernel.SelfService.KtmPhysicalPreciousMetalProduct;
        recipientAccount?: BOA.Types.Kernel.SelfService.KtmAccountComponentAccountsContract;
    }
    interface PPMCommisionKey {
    }
    interface PrePaidEnums {
    }
    interface PresentCommandParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        amount?: number;
        coinAmount?: number;
        fec?: number;
    }
    interface PreWithdrawalControlContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        cardNumber?: string;
        caseType?: BOA.Types.Kernel.SelfService.CaseType;
        checkBanknoteList?: boolean;
        checkCaseBalance?: boolean;
        checkTerminalLimit?: boolean;
        deviceAccountNumber?: number;
        deviceAccountSuffix?: number;
        deviceBranchId?: number;
        deviceCode?: string;
        deviceIsOffsite?: boolean;
        deviceIsRecycle?: boolean;
        fec?: number;
        terminalLimitParamType?: string;
    }
    interface PrintAccountInfoCommandParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        accountInfo?: BOA.Types.Kernel.SelfService.KtmAccountSaveContract;
        customerName?: string;
    }
    interface PrintCardCommandParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        printCardInfo?: BOA.Types.Kernel.SelfService.ImmediatePrintCardInfoContract;
    }
    interface PrintCommandParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        fileList?: any;
    }
    interface PrinterItem {
        font?: any;
        text?: string;
        textColor?: any;
        x?: number;
        y?: number;
    }
    interface PrintSlipParameter extends BOA.Types.Kernel.SelfService.CommandBase {
        extraData?: string;
        other?: boolean;
    }
    interface ProvisionTransactionParameterContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        provisionBacksweptTime?: number;
        provisionTrackNormal?: number;
        provisionTrackWarning?: number;
        provisionTransactionParameterId?: number;
        sequentialErrorNormal?: number;
        sequentialErrorWarning?: number;
        updateHostName?: string;
        updatePeriod?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface ReconciliationAccountingContract extends BOA.Common.Types.ContractBase {
        accountingAmount?: number;
        accountingBranchId?: number;
        accountingTrandate?: Date;
        accountingTranDate?: Date;
        accountNumber?: number;
        accountSuffix?: number;
        businessKey?: number;
        hasAccounting?: number;
        hostName?: string;
        isOverCase?: boolean;
        ledgerId?: number;
        reconciliationSummaryList?: BOA.Types.Kernel.SelfService.ReconciliationSummaryContract[];
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ReconciliationContract extends BOA.Common.Types.ContractBase {
        accountingAmount?: number;
        accountingComment?: string;
        accountNumber?: string;
        accountSuffix?: string;
        beginDate?: Date;
        branch?: string;
        businessKey?: number;
        cardNumber?: string;
        channelId?: string;
        channelName?: string;
        deviceCaseBranch?: string;
        deviceCode?: string;
        deviceId?: number;
        deviceName?: string;
        deviceOwnBranch?: string;
        deviceTransactionDate?: Date;
        deviceTransactionReferance?: string;
        diffAmount?: number;
        endDate?: Date;
        fecCode?: string;
        isInconsistent?: boolean;
        isMatched?: string;
        lastTwoCaseResetedRecords?: boolean;
        ledgerId?: number;
        maxBusinessKey?: number;
        minBusinessKey?: number;
        systemDate?: Date;
        transactionAmount?: number;
        transactionBranchName?: string;
        transactionCode?: string;
        transactionName?: string;
        transactionRef?: string;
        transactionResourceCode?: string;
        transactionUserName?: string;
    }
    interface ReconciliationSummaryContract extends BOA.Common.Types.ContractBase {
        deviceCode?: string;
        difference?: number;
        fec?: number;
        isAccountingMade?: boolean;
        isMatched?: boolean;
        paramDescription?: string;
        selected?: boolean;
        totalAccountingAmount?: number;
        totalTransactionAmount?: number;
        tranBusinessKey?: number;
    }
    interface Reference_infokys {
        authorization_code?: string;
        bank?: string;
        bill_no?: string;
        date?: string;
        seller?: string;
        stan?: string;
    }
    interface Reload_info {
        reload_cost?: number;
        tHR_order?: string;
    }
    interface RemoteCaseTransactionContract extends BOA.Common.Types.ContractBase {
        banknote?: number;
        caseBanknoteAmountList?: BOA.Types.Kernel.SelfService.RemoteCaseTransactionContract[];
        caseBanknoteList?: BOA.Types.Kernel.SelfService.RemoteCaseTransactionContract[];
        caseType?: number;
        caseTypeDescription?: string;
        counter?: number;
        deviceCode?: string;
        fec?: number;
        fecCode?: string;
        id?: number;
        scheduleTaskId?: number;
        systemDate?: Date;
        updateSystemDate?: Date;
    }
    interface ResourceInformation {
    }
    interface ResourceInformationContract extends BOA.Common.Types.ContractBase {
        iconPath?: string;
        languageId?: number;
        languageName?: string;
        name?: string;
        parentId?: number;
        parentName?: string;
        resourceCode?: string;
        resourceId?: number;
        sortId?: number;
        typeId?: number;
    }
    interface ResourcePropertyContract extends BOA.Common.Types.ContractBase {
        assemblyName?: string;
        className?: string;
        displayName?: string;
        helpURL?: string;
        resourceCode?: string;
        resourceId?: number;
    }
    interface ResponseCodeContract extends BOA.Common.Types.ContractBase {
        isChecked?: boolean;
        responseCode?: number;
        responseDescription?: string;
    }
    interface RKLCommandContract extends BOA.Common.Types.ContractBase {
        deviceCode?: string;
        deviceId?: number;
        errorMessage?: string;
        id?: number;
        machineName?: string;
        name?: string;
        receiveCommand?: any;
        schuldeDate?: Date;
        sendCommand?: any;
        status?: number;
        systemDate?: Date;
        tranDate?: Date;
        updatedDate?: Date;
        userName?: string;
    }
    interface RKLContract extends BOA.Common.Types.ContractBase {
        checkData?: any;
        checkMode?: string;
        deviceCode?: string;
        exportedIdData?: any;
        exportedIdSignatureData?: string;
        exportedPublicKeyData?: any;
        exportedPublicKeySignatureData?: any;
        exportedSignatureAlgorithm?: string;
        importKeyData?: any;
        importKeyName?: string;
        importSignatureAlgorithm?: string;
        importSignatureData?: any;
        importSignatureKeyName?: string;
        importUsage?: string;
        keyLenght?: string;
        loadDecryptAlgorithm?: string;
        loadDecryptKeyName?: string;
        loadKeyData?: any;
        loadKeyName?: string;
        loadSignatureAlgorithm?: string;
        loadSignatureData?: any;
        loadSignatureKeyName?: string;
        loadUsage?: string;
        randomData?: any;
    }
    interface RKLEppKeyContract extends BOA.Common.Types.ContractBase {
        atmCode?: string;
        eppId?: number;
        eppIdOnPinpad?: string;
        kCVFromTMK?: string;
        kCVFromTPK?: string;
        keyState?: number;
        lastError?: string;
        publicKey?: string;
        publicKeyMac?: string;
        publicKeySignature?: string;
        tmkEncrypted?: string;
        tMKKCV?: string;
        tmkSigned?: string;
        tmkULmk?: string;
        tpkULmk?: string;
        tpkUTmk?: string;
    }
    interface RKLKeyContract extends BOA.Common.Types.ContractBase {
        bankPrivateKey?: string;
        bankPublicKey?: string;
        bankSignedPublicKey?: string;
        signatureIssuerPublicKey?: string;
        signatureIssuerPublicKeyMac?: string;
        vendor?: string;
        vendorPKName?: string;
    }
    interface RKLLogContract extends BOA.Common.Types.ContractBase {
        atmCode?: string;
        keyType?: string;
        result?: string;
        resultMessage?: string;
        rKLLogId?: number;
        systemDate?: Date;
        tranDate?: Date;
    }
    interface ScheduledTaskContract extends BOA.Common.Types.ContractBase {
        commandMessage?: string;
        commandResultMessage?: string;
        deviceCode?: string;
        deviceType?: number;
        eppId?: string;
        errorMessage?: string;
        hostName?: string;
        logArchieveLocalPath?: string;
        logArchieveLocalRarPath?: string;
        logArchiveLastDay?: number;
        logLocalPath?: string;
        logServerPath?: string;
        logServerUserName?: string;
        logServerUserPassword?: string;
        processApplicationType?: number;
        processedDate?: Date;
        retryCount?: number;
        runAlways?: number;
        runInterval?: number;
        runIntervalUnit?: string;
        runLastProcessedDate?: Date;
        scheduledDate?: Date;
        scheduledTaskId?: number;
        systemDate?: Date;
        taskDescription?: string;
        taskState?: number;
        taskStateName?: string;
        taskType?: number;
        terminalName?: string;
        tranDate?: Date;
        userName?: string;
        winRarExePath?: string;
    }
    interface SecurityHelper {
    }
    interface SessionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        agentJournal?: string;
        callCloseType?: number;
        callId?: number;
        cardNumber?: string;
        deviceId?: number;
        endTime?: Date;
        escrowStatus?: number;
        isAgentClosedCall?: boolean;
        isCallClosedByTimer?: boolean;
        isRetracted?: boolean;
        journal?: string;
        sessionId?: number;
        startTime?: Date;
        tranDate?: Date;
    }
    interface SmsTelephoneNumberContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        personId?: number;
        telephoneNumber?: string;
    }
    interface SopWriteParameterContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        endDate?: Date;
        isWorkDay?: boolean;
    }
    interface SysmonTransactionContract extends BOA.Common.Types.ContractBase {
        colorFlag?: boolean;
        errorCount?: number;
        resultCode?: string;
        resultMessage?: string;
        soundFlag?: boolean;
    }
    interface TaskManagerErrorContract extends BOA.Common.Types.ContractBase {
        deviceCode?: string;
        deviceType?: number;
        errorCode?: string;
        errorMessage?: string;
        systemDate?: Date;
        taskManagerErrorId?: number;
    }
    interface TaskTypesContract extends BOA.Common.Types.ContractBase {
        description?: string;
        processApplicationType?: number;
        taskId?: number;
        taskName?: string;
    }
    interface TcknBlackListContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        systemDate?: Date;
        tckn?: string;
    }
    interface TLVData {
        hasSubTLVData?: boolean;
        lenHex?: string;
        lenInt?: number;
        subTLVData?: BOA.Types.Kernel.SelfService.TLVData[];
        tag?: string;
        value?: string;
    }
    interface TransactionCode {
    }
    interface TransactionCodeContract extends BOA.Common.Types.ContractBase {
        isChecked?: boolean;
        transactionCode?: string;
        transactionGroup?: number;
        transactionName?: string;
        transactionType?: string;
    }
    interface TransactionsByColumnsContract extends BOA.Common.Types.ContractBase {
        atmModel?: number;
        atmModelName?: string;
        b_10_TL?: number;
        b_100_TL?: number;
        b_100_USD?: number;
        b_20_TL?: number;
        b_20_USD?: number;
        b_5_TL?: number;
        b_50_TL?: number;
        bankType?: number;
        bankTypeString?: string;
        beginDate?: Date;
        billingAmount?: number;
        billingCurrency?: string;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        c_0_25_TL?: number;
        c_0_50_TL?: number;
        c_1_5_GOLD?: number;
        c_1_5_TL?: number;
        c_1_GOLD?: number;
        c_1_TL?: number;
        cancelCode?: string;
        cancelCodeDescription?: string;
        cardBrand?: number;
        cardBrandString?: string;
        cardNumber?: string;
        cardType?: number;
        cardTypeString?: string;
        cityCode?: number;
        cityName?: string;
        endDate?: Date;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromTckn?: string;
        hasCancelCode?: boolean;
        hasChip?: boolean;
        hasChipString?: string;
        highestPrice?: number;
        id?: number;
        invoiceAmount?: number;
        invoiceCashRefund?: number;
        invoiceCorporationCode?: string;
        invoiceCorporationName?: string;
        invoiceEquipmentNumber?: string;
        isMernisChecked?: boolean;
        isOffSide?: boolean;
        isReverseTransaction?: number;
        lowestPrice?: number;
        phoneNumber?: string;
        rate?: number;
        requestName?: string;
        resultCode?: string;
        resultCodeString?: string;
        resultMessage?: string;
        reverseCode?: string;
        reverseMessage?: string;
        selectedCancelCodeList?: BOA.Types.Kernel.SelfService.CancelCodeContract[];
        selectedResultCodeList?: BOA.Types.Kernel.SelfService.ResponseCodeContract[];
        selectedTransactionCodeList?: BOA.Types.Kernel.SelfService.TransactionCodeContract[];
        settlementAmount?: number;
        settlementCurrency?: string;
        settlementCurrencyString?: string;
        systemTime?: string;
        termId?: string;
        terminalName?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        tranDate?: string;
        transactionAmount?: number;
        transactionCode?: number;
        transactionCurrency?: string;
        transactionName?: string;
        transactionStatus?: string;
        userName?: string;
    }
    interface TransactionsContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        banksoftReferenceNumber?: string;
        bankType?: number;
        billingAmount?: number;
        billingCurrency?: string;
        businessKey?: number;
        cancelCode?: string;
        cardBrand?: number;
        cardNumber?: string;
        cardType?: number;
        channelId?: number;
        dateBegin?: Date;
        dateEnd?: Date;
        fromAccountNumber?: number;
        fromAccountSuffix?: number;
        fromTckn?: string;
        fxRate?: number;
        hasChip?: boolean;
        hostName?: string;
        iD?: number;
        invoiceAmount?: number;
        invoiceCashRefund?: number;
        invoiceCorporationCode?: string;
        invoiceCorporationName?: string;
        invoiceEquipmentNumber?: string;
        isMernisChecked?: boolean;
        isReverseTransaction?: number;
        phoneNumber?: string;
        requestName?: string;
        resultCode?: string;
        resultMessage?: string;
        reverseBusinessKey?: number;
        settlementAmount?: number;
        settlementCurrency?: string;
        systemDate?: Date;
        timeBegin?: Date;
        timeEnd?: Date;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        tranDate?: Date;
        tranRef?: string;
        transactionAmount?: number;
        transactionCode?: string;
        transactionCurrency?: string;
        transactionGuid?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TransactionsReverseContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        banksoftReferenceNumber?: string;
        businessKeyToRevoke?: number;
        tranDate?: Date;
        tranRef?: string;
    }
    interface Utils {
    }
    interface WebIntegrationContract extends BOA.Common.Types.ContractBase {
        prodURL?: string;
        testURL?: string;
        webIntegrationCode?: string;
        webPageTitle?: string;
    }
    interface WorkingPeriodsContract extends BOA.Common.Types.ContractBase {
        day?: number;
        deviceCode?: string[];
        endTime?: Date;
        iD?: number;
        startTime?: Date;
        systemDate?: Date;
        updatedDate?: Date;
        updatedUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.SelfService.BoaKernel {
    interface KtmBidAskContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        amount?: number;
        atmLedgerId?: number;
        bidAskId?: number;
        commissionAccount?: BOA.Types.Kernel.SelfService.KtmAccountComponentAccountsContract;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionKey?: string;
        fec?: number;
        grossAmount?: number;
        isFromCreditCard?: boolean;
        isHaveCommissionKey?: boolean;
        isOnUsCreditCard?: boolean;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        productType?: number;
        productUnitDescription?: string;
        receiverBirthDate?: Date;
        receiverFatherName?: string;
        receiverName?: string;
        receiverPhone?: string;
        receiverTaxNumber?: string;
        serialNumbers?: string;
    }
}
declare namespace BOA.Types.Kernel.SelfService.Constants {
    interface CardConstants {
    }
}
declare namespace BOA.Types.Kernel.SelfService.Extensions {
    interface Extensions {
    }
}
declare namespace BOA.Types.Kernel.SelfService.ForecastATMDataParser {
    interface Data {
    }
}
declare namespace BOA.Types.Kernel.SelfService.Helpers {
    interface CoinHelper {
    }
    interface DeviceFinancialJournalContract {
        accountBranchCode?: string;
        accountBranchName?: string;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        banknoteInfo?: BOA.Common.Types.TellerTransactionContract[];
        banknoteJournalData?: any;
        businessKey?: number;
        fec?: string;
        fromIBAN?: string;
        hasToAccount?: boolean;
        referenceNumber?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toBranchCode?: string;
        toBranchName?: string;
        toIBAN?: string;
        transactionName?: string;
        transactionResult?: boolean;
        transactionResultDescription?: string;
    }
    interface DeviceJournalFactory {
    }
    interface DeviceJournalManager {
        isRejected?: boolean;
        isRetracted?: boolean;
        journal?: string;
        sessionId?: number;
        traceLogger?: any;
    }
    interface FecHelper {
    }
    interface SerializationHelper {
    }
}
declare namespace BOA.Types.Kernel.SelfService.KtmProductSegmentContract {
    interface ProductSegmentComparer {
    }
}
declare namespace BOA.Types.Kernel.SelfService.PrePaidEnums {
    export const enum GsmCorporates {
        Turkcell = 1,
        Avea = 2,
        Vodafone = 3
    }
    export const enum PrepaidPaymentType {
        Account = 1,
        CreditCard = 2
    }
}
declare namespace BOA.Types.Kernel.SelfService.TaskManager {
    interface TaskManagerErrorCode {
    }
}
declare namespace BOA.Types.Kernel.SelfService.TaskManager.TaskManagerErrorCode {
    interface ErrorCode {
    }
}
declare namespace BOA.Types.Kernel.SGK {
    interface CreditCardContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        creditCardNo?: string;
        productType?: string;
    }
}
declare namespace BOA.Types.Kernel.Slip {
    interface OldSlipContract extends BOA.Common.Types.ContractBase {
        columnName?: string;
        order?: number;
        titleEn?: string;
        titleTr?: string;
    }
    interface OldSlipItemContract {
        columnName?: string;
        titleEn?: string;
        titleTR?: string;
        type?: string;
        value?: string;
    }
    interface SlipTranslationContract extends BOA.Common.Types.ContractBase {
        languageId?: number;
        messageKey?: string;
        value?: string;
    }
}
declare namespace BOA.Types.Kernel.SMS {
    export const enum DistributionChannelParameterCode {
        AllOption = 0,
        SMS = 1,
        EMail = 2
    }
    export const enum GSMOperator {
        NONE = 0,
        AVEA = 1,
        TURKCELL = 2,
        VODAFONE = 3,
        ANY = 4,
        SOPHOS = 5
    }
    export const enum IsActiveParameterCode {
        AllOption = 0,
        Active = 1,
        Passive = 2
    }
    export const enum QueueStatus {
        WaitForProcess = 0,
        Processing = 1,
        WaitForTime = 2,
        Processed = 3,
        Canceled = 4,
        DeliveryChecking = 5,
        DeliveryChecked = 6,
        Failed = 7,
        LanguageFailed = 8
    }
    export const enum SmsDeliveryResultType {
        SimChange = 0,
        MnpChange = 1,
        SystemException = 2,
        InvalidXmlFormat = 3,
        InvalidAuthorization = 4,
        InvalidParameter = 5,
        InvalidDate = 6,
        InvalidMSISDN = 7,
        ProviderException = 8,
        ChannelException = 9,
        Successful = 10,
        SimBlocked = 11
    }
    export const enum TextDefinitionType {
        CampaignDefinition = 0,
        CampaignStartSms = 1,
        CampaignEndSms = 2,
        CampaignStartEmail = 3,
        CampaignEndEmail = 4,
        ChannelAcknowledgementEmail = 5,
        UnsubscriptionFormHtml = 6,
        UnsubscriptionAcknowledgementHtml = 7,
        UnsubscriptionLinkHtml = 8,
        InteractiveChannelAcknowledgementEmail = 9,
        MersisText = 10
    }
    export const enum TransactionType {
        ServiceLog = 0,
        ErrorOccuredWhileSending = 1,
        SentToOperator = 2,
        SentToRecipient = 3,
        ErrorOccuredWhileCheckingStatus = 4
    }
    interface BlacklistContract extends BOA.Common.Types.ContractBase {
        address?: string;
        blacklistId?: number;
        closeDescription?: string;
        customerId?: number;
        description?: string;
        distributionChannelDescription?: string;
        fullName?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isActiveDescription?: string;
        isMSISDN?: boolean;
        personId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface BlacklistRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.BlacklistContract;
    }
    interface Common {
    }
    interface DomainDetailContract extends BOA.Common.Types.ContractBase {
        domainName?: string;
        failCount?: number;
        pendingCount?: number;
        readCount?: number;
        successCount?: number;
        totalCount?: number;
        unreadCount?: number;
    }
    interface EmailMessageContract extends BOA.Common.Types.ContractBase {
        body?: string;
        campaignId?: number;
        emailAccount?: number;
        emailMessageId?: number;
        guid?: any;
        hostIP?: string;
        hostName?: string;
        priority?: number;
        readInformationList?: BOA.Types.Kernel.SMS.EmailReadInformationContract[];
        status?: BOA.Types.Kernel.SMS.Enum.EmailMessageStatus;
        subject?: string;
        systemDate?: Date;
        toAddress?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface EmailMessageRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.EmailMessageContract;
        dataContractList?: BOA.Types.Kernel.SMS.EmailMessageContract[];
        isReadInformationRequired?: boolean;
    }
    interface EmailReadInformationContract extends BOA.Common.Types.ContractBase {
        clientIP?: string;
        emailGuid?: any;
        emailReadInformationId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        userAgent?: string;
        userName?: string;
    }
    interface EmailReadInformationRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.EmailReadInformationContract;
    }
    interface EmailSummaryContract extends BOA.Common.Types.ContractBase {
        campaignId?: number;
        domainDetailList?: BOA.Types.Kernel.SMS.DomainDetailContract[];
        readTimeDetailList?: BOA.Types.Kernel.SMS.ReadTimeDetailContract[];
    }
    interface EmailTransactionContract extends BOA.Common.Types.ContractBase {
        campaignId?: number;
        campaignName?: string;
        emailAddress?: string;
        emailBody?: string;
        emailMessageId?: number;
        emailTransactionId?: number;
        emailTransactionType?: BOA.Types.Kernel.SMS.Enum.EmailTransactionType;
        emailTransactionTypeName?: string;
        exceptionMessage?: string;
        exceptionStackTrace?: string;
        exceptionType?: string;
        extraData?: string;
        hasException?: boolean;
        hostIP?: string;
        hostName?: string;
        maxSystemDate?: Date;
        minSystemDate?: Date;
        systemDate?: Date;
        userName?: string;
    }
    interface EmailTransactionRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.EmailTransactionContract;
    }
    interface IncomingSmsConfigurationGroup {
        configurations?: BOA.Types.Kernel.SMS.SmsConfigurationContract[];
        isStillValid?: boolean;
        replacedAt?: Date;
        validFor?: any;
    }
    interface IncomingSmsMessageContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        hostIP?: string;
        hostName?: string;
        incomingSmsMessageId?: number;
        messageDate?: Date;
        messageText?: string;
        operatorCode?: BOA.Types.Kernel.SMS.GSMOperator;
        recipient?: string;
        sender?: string;
        status?: BOA.Types.Kernel.SMS.Enum.IncomingSmsMessageStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface IncomingSmsMessageRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.SMS.IncomingSmsMessageContract;
        dataContractList?: BOA.Types.Kernel.SMS.IncomingSmsMessageContract[];
    }
    interface OperatorDetailContract extends BOA.Common.Types.ContractBase {
        deliveredCount?: number;
        operatorName?: string;
        queueStatus?: BOA.Types.Kernel.SMS.QueueStatus;
        totalCount?: number;
        undeliveredCount?: number;
    }
    interface PersonInfoContract extends BOA.Common.Types.ContractBase {
        emailAddress?: string;
        fullName?: string;
        gsmNumber?: string;
        personId?: number;
    }
    interface QueueStatusGroup {
        cancelled?: BOA.Types.Kernel.SMS.QueueStatus[];
        inQueue?: BOA.Types.Kernel.SMS.QueueStatus[];
        sent?: BOA.Types.Kernel.SMS.QueueStatus[];
    }
    interface ReadTimeDetailContract extends BOA.Common.Types.ContractBase {
        readCount?: number;
        timeRange?: string;
    }
    interface SimBlockingContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        branchName?: string;
        changeDate?: Date;
        changeExpiryDate?: Date;
        changeType?: string;
        customerId?: number;
        description?: string;
        filterEndDate?: Date;
        hostIP?: string;
        hostName?: string;
        isBlockingEnded?: boolean;
        mSISDN?: string;
        provider?: string;
        simBlockingId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SimBlockingRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.SMS.SimBlockingContract;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface SmsAccountContract extends BOA.Common.Types.ContractBase {
        accountName?: string;
        accountPassword?: string;
        accountUserName?: string;
        extraValue?: string;
        extraValue2?: string;
        hostIP?: string;
        hostName?: string;
        mSISDN?: string;
        operatorCode?: string;
        smsAccountId?: number;
        smsType?: string;
        systemDate?: Date;
        timeout?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsAccountRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.SmsAccountContract;
    }
    interface SmsChannelContract extends BOA.Common.Types.ContractBase {
        channelName?: string;
        dateConstraintFilter?: boolean;
        encryptedJobId?: string;
        endTime?: any;
        hasDateConstraint?: boolean;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        isActiveDescription?: string;
        priority?: number;
        responsibleEmail?: string;
        responsibleName?: string;
        responsibleUserName?: string;
        smsChannelId?: number;
        smsType?: number;
        smsTypeDescription?: string;
        startTime?: any;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userFullName?: string;
        userName?: string;
    }
    interface SmsChannelRequest extends BOA.Common.Types.RequestBase {
        configurationList?: BOA.Types.Kernel.SMS.SmsConfigurationContract[];
        dataContract?: BOA.Types.Kernel.SMS.SmsChannelContract;
        userAcknowledgementMail?: BOA.Types.Kernel.SMS.EmailMessageContract;
    }
    interface SmsConfigurationContract extends BOA.Common.Types.ContractBase {
        account?: BOA.Types.Kernel.SMS.SmsAccountContract;
        activeAccountId?: number;
        activeEnvironmentId?: number;
        activeHeaderId?: number;
        bulkServiceLink?: string;
        channelId?: number;
        defaultOperatorCode?: string;
        header?: string;
        hostIP?: string;
        hostName?: string;
        incomingSmsConfigurationId?: number;
        isActive?: boolean;
        isInteractiveConfiguration?: boolean;
        longestMatchingPrefix?: string;
        operatorCode?: string;
        otpServiceLink?: string;
        smsConfigurationId?: number;
        smsType?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsConfigurationGroup extends BOA.Common.Types.ContractBase {
        cacheDate?: Date;
        channelContract?: BOA.Types.Kernel.SMS.SmsChannelContract;
        channelId?: number;
        configurationList?: BOA.Types.Kernel.SMS.SmsConfigurationContract[];
        operatorSendRouteDictionary?: any;
    }
    interface SmsConfigurationRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.SmsConfigurationContract;
        isInteractiveRequest?: boolean;
    }
    interface SmsDeliveryResult extends BOA.Common.Types.Result {
        extraValue?: any;
        jobId?: number;
        jobSuffixId?: number;
        methodName?: string;
        mSISDN?: string;
        relatedOperator?: BOA.Types.Kernel.SMS.GSMOperator;
        resultType?: BOA.Types.Kernel.SMS.SmsDeliveryResultType;
        smsMessageId?: number;
    }
    interface SmsEnvironmentContract extends BOA.Common.Types.ContractBase {
        bulkServiceLink?: string;
        environmentName?: string;
        hostIP?: string;
        hostName?: string;
        operatorCode?: string;
        otpServiceLink?: string;
        smsEnvironmentId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsHeaderContract extends BOA.Common.Types.ContractBase {
        accountId?: number;
        header?: string;
        hostIP?: string;
        hostName?: string;
        smsHeaderId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsMessageContract extends BOA.Common.Types.ContractBase {
        content?: string;
        customerId?: number;
        deliveryDate?: Date;
        dequeueCount?: number;
        dispatchDate?: Date;
        gSMAccountId?: number;
        gSMOperator?: BOA.Types.Kernel.SMS.GSMOperator;
        hostIP?: string;
        hostName?: string;
        jobId?: number;
        jobSuffixId?: number;
        mSISDN?: string;
        operatorSendId?: string;
        priority?: number;
        queueStatus?: number;
        smsMessageId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsMessageOperatorDeliveryReportContract extends BOA.Common.Types.ContractBase {
        deliveryDate?: Date;
        hostIP?: string;
        hostName?: string;
        response?: string;
        responseCode?: string;
        smsMessageId?: number;
        smsMessageOperatorDeliveryReportId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsMessageQueueContract extends BOA.Common.Types.ContractBase {
        priority?: number;
        smsChannelId?: number;
        smsMessageId?: number;
        status?: number;
    }
    interface SmsMessageQueueRequest extends BOA.Common.Types.RequestBase {
        count?: number;
        dataContract?: BOA.Types.Kernel.SMS.SmsMessageQueueContract;
        dequeueInterval?: any;
        smsMessageId?: number;
    }
    interface SmsMessageRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.SmsMessageContract[];
        jobId?: string;
    }
    interface SmsMessageTransactionContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        jobId?: number;
        jobSuffixId?: number;
        smsMessageId?: number;
        smsMessageTransactionId?: number;
        source?: string;
        status?: string;
        systemDate?: Date;
        transactionType?: BOA.Types.Kernel.SMS.TransactionType;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsMessageTransactionRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.SmsMessageTransactionContract;
    }
    interface SmsOperatorSessionContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        sessionKey?: string;
        smsAccountId?: number;
        smsEnvironmentId?: number;
        smsOperatorSessionId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SmsSessionContract extends BOA.Common.Types.ContractBase {
        sessionId?: string;
        sessionStart?: Date;
    }
    interface SmsSummaryContract extends BOA.Common.Types.ContractBase {
        campaignId?: number;
        operatorDetailList?: BOA.Types.Kernel.SMS.OperatorDetailContract[];
    }
    interface SmsWhitelistContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        mSISDN?: string;
        smsWhitelistId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface StringExtension {
    }
    interface SubscriberContract extends BOA.Common.Types.ContractBase {
        gsmOperator?: BOA.Types.Kernel.SMS.GSMOperator;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        mSISDN?: string;
        operatorCode?: number;
        source?: BOA.Types.Kernel.SMS.Enum.SubscriberSource;
        subscriberId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SubscriberRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.SMS.SubscriberContract;
    }
    interface TimeConstraintContract extends BOA.Common.Types.ContractBase {
        endDate?: Date;
        endTime?: any;
        isSatisfied?: boolean;
        smsMessageId?: number;
        startDate?: Date;
        startTime?: any;
    }
}
declare namespace BOA.Types.Kernel.SMS.Enum {
    export const enum EmailMessageStatus {
        InQueue = 0,
        Sent = 1,
        TimeConstrained = 2,
        Cancelled = 3,
        LanguageFailed = 4
    }
    export const enum EmailTransactionType {
        ServiceStopped = 0,
        Dequeued = 1,
        EmptyQueue = 2,
        StartedProcessing = 3,
        SentSuccessfully = 4,
        SkippedCancelled = 5,
        SkippedSent = 6,
        SkippedConstrained = 7,
        SkippedBlacklisted = 8,
        ErrorOccured = 9,
        UnableToUpdateSent = 10,
        NotInSafeInterval = 11,
        AccountNotFound = 12
    }
    export const enum IncomingSmsMessageStatus {
        Unprocessed = 0,
        Processed = 1
    }
    export const enum SubscriberSource {
        Vip = 1,
        Interactive = 2,
        InternationalManual = 3
    }
}
declare namespace BOA.Types.Kernel.SourceCode {
    export const enum ReferenceType {
        Assembly = 0,
        System = 1
    }
    interface Project {
        assemblyName?: string;
        branchName?: string;
        buildVersion?: string;
        compiles?: BOA.Types.Kernel.SourceCode.ProjectCompileItemElement[];
        contents?: BOA.Types.Kernel.SourceCode.ProjectContentItemElement[];
        defaultTargets?: string;
        embeddedResources?: BOA.Types.Kernel.SourceCode.ProjectEmbeddedResourceItemElement[];
        fileName?: string;
        folderName?: string;
        fullPath?: string;
        imports?: BOA.Types.Kernel.SourceCode.ProjectImportElement[];
        isInSolution?: boolean;
        localPath?: string;
        nones?: BOA.Types.Kernel.SourceCode.ProjectNoneItemElement[];
        outputType?: string;
        pages?: BOA.Types.Kernel.SourceCode.ProjectPageItemElement[];
        postBuildEvent?: string;
        preBuildEvent?: string;
        projectGuid?: any;
        projectName?: string;
        projectReferences?: BOA.Types.Kernel.SourceCode.ProjectProjectReferenceItemElement[];
        properties?: BOA.Types.Kernel.SourceCode.ProjectPropertyElement[];
        references?: BOA.Types.Kernel.SourceCode.ProjectReferenceItemElement[];
        resources?: BOA.Types.Kernel.SourceCode.ProjectResourceItemElement[];
        rootNamespace?: string;
        solutionName?: string;
        solutionProject?: BOA.Types.Kernel.SourceCode.SolutionProject;
        sourceControlPath?: string;
        targetFrameworkVersion?: string;
        toolsVersion?: string;
    }
    interface ProjectCompileItemElement {
        autoGen?: boolean;
        copyToOutputDirectory?: string;
        dependentUpon?: string;
        designTime?: boolean;
        designTimeSharedInput?: string;
        include?: string;
        link?: string;
        subType?: string;
        visible?: boolean;
    }
    interface ProjectContentItemElement {
        copyToOutputDirectory?: string;
        customToolNamespace?: string;
        dependentUpon?: string;
        generator?: string;
        group?: string;
        include?: string;
        isAssembly?: boolean;
        lastGenOutput?: string;
        link?: string;
        publishState?: string;
        subType?: string;
        visible?: boolean;
    }
    interface ProjectEmbeddedResourceItemElement {
        copyToOutputDirectory?: string;
        customToolNamespace?: string;
        dependentUpon?: string;
        generator?: string;
        include?: string;
        lastGenOutput?: string;
        link?: string;
        logicalName?: string;
        subType?: string;
        visible?: boolean;
    }
    interface ProjectImportElement {
        condition?: string;
        label?: string;
        project?: string;
    }
    interface ProjectNoneItemElement {
        copyToOutputDirectory?: string;
        customToolNamespace?: string;
        dependentUpon?: string;
        generator?: string;
        include?: string;
        lastGenOutput?: string;
        link?: string;
        visible?: boolean;
    }
    interface ProjectPageItemElement {
        copyToOutputDirectory?: string;
        customToolNamespace?: string;
        dependentUpon?: string;
        generator?: string;
        group?: string;
        include?: string;
        lastGenOutput?: string;
        link?: string;
        subType?: string;
    }
    interface ProjectProjectReferenceItemElement {
        embedInteropTypes?: boolean;
        include?: string;
        name?: string;
        outputItemType?: string;
        package?: string;
        project?: any;
        referenceOutputAssembly?: boolean;
        specificVersion?: boolean;
        targets?: string;
    }
    interface ProjectPropertyElement {
        condition?: string;
        name?: string;
        value?: string;
    }
    interface ProjectReferenceItemElement {
        aliases?: string;
        assembly?: string;
        culture?: string;
        embedInteropTypes?: boolean;
        fusionName?: string;
        hintPath?: string;
        include?: string;
        isAbsolutePath?: boolean;
        name?: string;
        private?: boolean;
        processorArchitecture?: string;
        publicKeyToken?: string;
        requiredTargetFramework?: string;
        specificVersion?: boolean;
        type?: BOA.Types.Kernel.SourceCode.ReferenceType;
        version?: string;
    }
    interface ProjectResourceItemElement {
        copyToOutputDirectory?: string;
        customToolNamespace?: string;
        dependentUpon?: string;
        generator?: string;
        group?: string;
        include?: string;
        lastGenOutput?: string;
        link?: string;
        subType?: string;
    }
    interface SchemaContract extends BOA.Common.Types.ContractBase {
        databaseName?: string;
        name?: string;
    }
    interface Solution {
        fileName?: string;
        fullPath?: string;
        localPath?: string;
        name?: string;
        projects?: BOA.Types.Kernel.SourceCode.Project[];
        sourceControlPath?: string;
    }
    interface SolutionProject {
        projectGuid?: string;
        projectName?: string;
        projectType?: string;
        relativePath?: string;
    }
    interface TableContract extends BOA.Common.Types.ContractBase {
        databaseName?: string;
        name?: string;
        schemaName?: string;
    }
}
declare namespace BOA.Types.Kernel.SourceControl {
    export const enum ChangeType {
        None = 1,
        Add = 2,
        Edit = 4,
        Encoding = 8,
        Rename = 16,
        Delete = 32,
        Undelete = 64,
        Branch = 128,
        Merge = 256,
        Lock = 512,
        Rollback = 1024,
        SourceRename = 2048,
        Property = 8192
    }
    export const enum DeletedState {
        NonDeleted = 0,
        Deleted = 1,
        Any = 2
    }
    export const enum GetOptions {
        None = 0,
        Overwrite = 1,
        GetAll = 2,
        Preview = 4,
        Remap = 8,
        NoAutoResolve = 16
    }
    export const enum ItemType {
        Any = 0,
        Folder = 1,
        File = 2
    }
    export const enum RecursionType {
        None = 0,
        OneLevel = 1,
        Full = 2
    }
    interface AssociatedWorkItemInfo {
        assignedTo?: string;
        id?: number;
        state?: string;
        title?: string;
        workItemType?: string;
    }
    interface Change {
        changeType?: BOA.Types.Kernel.SourceControl.ChangeType;
        item?: BOA.Types.Kernel.SourceControl.Item;
        mergeSources?: BOA.Types.Kernel.SourceControl.MergeSource[];
    }
    interface Changeset {
        artifactUri?: any;
        associatedWorkItems?: BOA.Types.Kernel.SourceControl.AssociatedWorkItemInfo[];
        changes?: BOA.Types.Kernel.SourceControl.Change[];
        changesetId?: number;
        checkinNote?: BOA.Types.Kernel.SourceControl.CheckinNote;
        comment?: string;
        committer?: string;
        committerDisplayName?: string;
        creationDate?: Date;
        owner?: string;
        ownerDisplayName?: string;
        policyOverride?: BOA.Types.Kernel.SourceControl.PolicyOverrideInfo;
        properties?: BOA.Types.Kernel.SourceControl.PropertyValue[];
    }
    interface CheckinNote {
        values?: BOA.Types.Kernel.SourceControl.CheckinNoteFieldValue[];
    }
    interface CheckinNoteFieldValue {
        name?: string;
        value?: string;
    }
    interface Item {
        artifactUri?: any;
        artifactUriLatestItemVersion?: any;
        attributes?: BOA.Types.Kernel.SourceControl.PropertyValue[];
        changesetId?: number;
        checkinDate?: Date;
        contentLength?: number;
        deletionId?: number;
        downloadUrl?: string;
        encoding?: number;
        hashValue?: number[];
        isBranch?: boolean;
        isContentDestroyed?: boolean;
        itemId?: number;
        itemType?: BOA.Types.Kernel.SourceControl.ItemType;
        propertyValues?: BOA.Types.Kernel.SourceControl.PropertyValue[];
        serverItem?: string;
    }
    interface MergeCandidate {
        changeset?: BOA.Types.Kernel.SourceControl.Changeset;
        partial?: boolean;
    }
    interface MergeSource {
        isRename?: boolean;
        serverItem?: string;
        versionFrom?: number;
        versionTo?: number;
    }
    interface PolicyFailureInfo {
        message?: string;
        policyName?: string;
    }
    interface PolicyOverrideInfo {
        comment?: string;
        policyFailures?: BOA.Types.Kernel.SourceControl.PolicyFailureInfo[];
    }
    interface PropertyValue {
        propertyName?: string;
        propertyType?: any;
        value?: any;
    }
}
declare namespace BOA.Types.Kernel.Stock {
    interface StockContract {
        paramName?: string;
        paramValue?: string;
    }
    interface StockRequest {
        requestParams?: BOA.Types.Kernel.Stock.StockContract[];
    }
    interface StockResponse {
        responseParams?: string;
    }
}
declare namespace BOA.Types.Kernel.STS {
    interface CmsEnvelope {
        cipherText?: string;
        secretKey?: string;
        verificationKey?: string;
        verificationSignature?: string;
    }
    interface Constants {
    }
    interface Customer {
        customerId?: string;
        customerNo?: string;
        deviceId?: string;
        password?: string;
        publicKey?: string;
    }
    interface CustomerContract extends BOA.Types.Kernel.STS.STSContractBase {
        customerId?: string;
        deviceId?: string;
        publicKey?: string;
    }
    interface CustomerRequest extends BOA.Types.Kernel.STS.STSRequestBase {
        dataContract?: BOA.Types.Kernel.STS.CustomerContract;
        deviceId?: string;
        publicKey?: string;
        sTSContract?: BOA.Types.Kernel.STS.STSContractBase;
    }
    interface DeviceInfoContract extends BOA.Types.Kernel.STS.STSContractBase {
        activationCode?: string;
        activationDate?: Date;
        description?: string;
        deviceId?: string;
        isLocked?: boolean;
        publicKey?: string;
        registrationDate?: Date;
    }
    interface DeviceInfoRequest extends BOA.Types.Kernel.STS.STSRequestBase {
        dataContract?: BOA.Types.Kernel.STS.DeviceInfoContract;
        sTSContract?: BOA.Types.Kernel.STS.STSContractBase;
    }
    interface DeviceKey {
        deviceId?: string;
        publicKey?: string;
    }
    interface Error {
        errorCode?: string;
        errorMessage?: string;
    }
    interface IEncryptable {
        cmsEnvelope?: BOA.Types.Kernel.STS.CmsEnvelope;
        plainText?: string;
    }
    interface IntegrationBase {
        encryptedValue?: string;
    }
    interface ISTSIntegrationService {
    }
    interface ISTSService {
    }
    interface KeyPair {
        privateKey?: string;
        publicKey?: string;
    }
    interface Member {
        customerList?: BOA.Types.Kernel.STS.Customer[];
        privateKey?: string;
        publicKey?: string;
    }
    interface MemberInfoContract extends BOA.Types.Kernel.STS.STSContractBase {
        memberId?: number;
        name?: string;
        privateKey?: string;
        publicKey?: string;
        registrationDate?: Date;
    }
    interface MemberInfoRequest extends BOA.Types.Kernel.STS.STSRequestBase {
        dataContract?: BOA.Types.Kernel.STS.MemberInfoContract;
        privateKey?: string;
        publicKey?: string;
        sTSContract?: BOA.Types.Kernel.STS.STSContractBase;
    }
    interface MembershipContract extends BOA.Types.Kernel.STS.STSContractBase {
        deviceId?: string;
        memberId?: number;
        otpCode?: string;
        publicKey?: string;
        registrationDate?: Date;
    }
    interface MembershipRequest extends BOA.Types.Kernel.STS.STSRequestBase {
        dataContract?: BOA.Types.Kernel.STS.MembershipContract;
        sTSContract?: BOA.Types.Kernel.STS.STSContractBase;
    }
    interface OtpInfoContract extends BOA.Types.Kernel.STS.STSContractBase {
        creationDate?: Date;
        deviceId?: string;
        expirationDate?: Date;
        otpCode?: string;
    }
    interface OtpInfoRequest extends BOA.Types.Kernel.STS.STSRequestBase {
        dataContract?: BOA.Types.Kernel.STS.OtpInfoContract;
        sTSContract?: BOA.Types.Kernel.STS.STSContractBase;
    }
    interface SecureMessageContract extends BOA.Types.Kernel.STS.STSContractBase {
        cmsEnvelope?: BOA.Types.Kernel.STS.CmsEnvelope;
        deviceId?: string;
        memberId?: number;
        messageText?: string;
        pinRequired?: boolean;
        plainText?: string;
    }
    interface SecureMessageRequest extends BOA.Types.Kernel.STS.STSRequestBase {
        dataContract?: BOA.Types.Kernel.STS.SecureMessageContract;
        sTSContract?: BOA.Types.Kernel.STS.STSContractBase;
    }
    interface STSContractBase {
    }
    interface STSRequestBase extends BOA.Common.Types.TransactionRequestBase {
        endTime?: Date;
        startTime?: Date;
        sTSContract?: BOA.Types.Kernel.STS.STSContractBase;
    }
    interface Utilities {
    }
}
declare namespace BOA.Types.Kernel.SurveyManagement {
    export const enum QuestionStatusType {
        Practical = 1,
        Theoretical = 2
    }
    export const enum SurveySendType {
        Email = 1,
        Sms = 2,
        Phone = 3
    }
    export const enum SurveyType {
        InternalCustomerSurvey = 1,
        OuterCustomerSurvey = 2
    }
    interface CompletedSurveyReportContract extends BOA.Common.Types.ContractBase {
        pointLabel?: string;
        pointValue?: number;
        status?: string;
    }
    interface Contract extends BOA.Common.Types.ContractBase {
        email?: string;
        requestedBeginDate?: Date;
        requestedEndDate?: Date;
        subeOrganizationId?: number;
        subeOrganizationName?: string;
        surveyCode?: string;
        userId?: number;
        userName?: string;
    }
    interface DynamicMatrixQuestionChoiceAnswerContract extends BOA.Common.Types.ContractBase {
        dynamicMatrixQuestionChoiceAnswerId?: number;
        dynamicMatrixQuestionChoiceId?: number;
        surveyQuestionMatrixLabelId?: number;
    }
    interface DynamicMatrixQuestionChoiceContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        dynamicMatrixQuestionChoiceId?: number;
        gUID?: string;
        sortId?: number;
        surveyCode?: string;
        surveyQuestionId?: number;
    }
    interface ExternalSurveyContract extends BOA.Common.Types.ContractBase {
        approveDate?: Date;
        code?: string;
        customerList?: BOA.Types.Kernel.SurveyManagement.ExternalSurveySendContract[];
        externalSurveyId?: number;
        hostName?: string;
        isDayControlRequired?: boolean;
        isPublished?: boolean;
        name?: string;
        sendingUserEmail?: string;
        sentType?: number;
        survey?: BOA.Types.Kernel.General.SurveyContract;
        surveyCode?: string;
        surveyId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ExternalSurveyRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.SurveyManagement.ExternalSurveyContract;
        externalSurveyId?: number;
        hostName?: string;
        isDayControlRequired?: boolean;
        isMockPublish?: boolean;
        isPublished?: boolean;
        name?: string;
        sentType?: number;
        surveyId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface ExternalSurveySendContract extends BOA.Common.Types.ContractBase {
        customerEMail?: string;
        customerName?: string;
        customerNumber?: number;
        customerPhone?: string;
        externalSurveyId?: number;
        surveyTraceId?: number;
    }
    interface ExternalSurveySendRequest extends BOA.Common.Types.RequestBase {
        customerEMail?: string;
        customerName?: string;
        customerNumber?: number;
        customerPhone?: string;
        dataContract?: BOA.Types.Kernel.SurveyManagement.ExternalSurveySendContract;
        externalSurveyId?: number;
        surveyTraceGuid?: string;
    }
    interface GeneralSurveyReportContract extends BOA.Common.Types.ContractBase {
        listSurveyReport?: BOA.Types.Kernel.SurveyManagement.SurveyReportContract[];
    }
    interface InternalCustomerDynamicMatrixQuestionChoiceContract {
        choice?: string;
        sortId?: number;
    }
    interface InternalSurveyAccessPointContract extends BOA.Common.Types.ContractBase {
        accessPoint?: number;
        internalSurveyId?: number;
    }
    interface InternalSurveyContract extends BOA.Common.Types.ContractBase {
        accessPointList?: number[];
        approveDate?: Date;
        code?: string;
        hostName?: string;
        internalSurveyId?: number;
        internalSurveySendList?: BOA.Types.Kernel.SurveyManagement.InternalSurveySendContract[];
        isPublished?: boolean;
        mailSurveyBody?: string;
        name?: string;
        sendingUserEmail?: string;
        sentType?: number;
        survey?: BOA.Types.Kernel.General.SurveyContract;
        surveyCode?: string;
        surveyId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface InternalSurveyRequest extends BOA.Common.Types.TransactionRequestBase {
        dataContract?: BOA.Types.Kernel.SurveyManagement.InternalSurveyContract;
        hostName?: string;
        internalSurveyId?: number;
        isMockPublish?: boolean;
        name?: string;
        sentType?: number;
        surveyId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface InternalSurveySendContract extends BOA.Common.Types.ContractBase {
        internalSurveyId?: number;
        surveyTraceId?: number;
        userId?: number;
    }
    interface InternalWorkflowBasedProcessSurveyContract extends BOA.Common.Types.ContractBase {
        approveDate?: Date;
        approverUserFullName?: string;
        approverUserId?: number;
        approverUserOrganizationId?: number;
        approverUserOrganizationName?: string;
        businessUnitType?: number;
        businessUnitTypeName?: string;
        contractId1?: string;
        contractId2?: string;
        startUserFullName?: string;
        startUserId?: number;
        startUserMail?: string;
        startUserOrganizationId?: number;
        startUserOrganizationName?: string;
        surveyCode?: string;
        surveyName?: string;
        workflowActionId?: number;
        workflowInstanceId?: number;
        workflowStateId?: number;
    }
    interface InternalWorkflowBasedProcessSurveyTraceContract extends BOA.Common.Types.ContractBase {
        approveDate?: Date;
        approverUserId?: number;
        approverUserOrganizationId?: number;
        businessUnitType?: number;
        contractId1?: string;
        contractId2?: string;
        startUserId?: number;
        startUserOrganizationId?: number;
        surveyTraceId?: number;
        workflowActionId?: number;
        workflowInstanceId?: number;
        workflowStateId?: number;
    }
    interface Label {
        accessPoint?: string;
        addFromFavoriteQuestions?: string;
        afterStartTime?: string;
        afterStartTimeTooltip?: string;
        all?: string;
        answer?: string;
        answerDistributions?: string;
        answerSelectionInformation?: string;
        approveDate?: string;
        areShown?: string;
        branch?: string;
        branchName?: string;
        callBranchLimit?: string;
        canSurveyHeaderShown?: string;
        channel?: string;
        channelTooltip?: string;
        choose?: string;
        columnOptions?: string;
        columnOptionsOfQuestion?: string;
        commonInformations?: string;
        conditionalQuestion?: string;
        countForAccountShared?: string;
        countForEMailAddressIsEmpty?: string;
        countForSurveyLastSend?: string;
        countForUserInBlackList?: string;
        countForUserIsPersonal?: string;
        customerNameAndSurName?: string;
        customerNumber?: string;
        date?: string;
        dateRange?: string;
        doNotCheckPreviousSendDate?: string;
        email?: string;
        endDate?: string;
        endHour?: string;
        evaluater?: string;
        explanationIsRequired?: string;
        favoriteQuestion?: string;
        finishOnTimeout?: string;
        finishOnTimeoutTooltip?: string;
        groupInformations?: string;
        groupName?: string;
        groups?: string;
        hasMail?: string;
        hasNoMail?: string;
        isJointAccount?: string;
        isRequired?: string;
        isSendPersonal?: string;
        jobOfEvaluator?: string;
        jobOfEvalutedPerson?: string;
        lineOptions?: string;
        mailSurvey?: string;
        multiplier?: string;
        myDefinitions?: string;
        nameOfEvaluator?: string;
        nameOfEvalutedPerson?: string;
        offForEveryOne?: string;
        option?: string;
        options?: string;
        order?: string;
        otherSelection?: string;
        participationRate?: string;
        percentControl?: string;
        personnelName?: string;
        phone?: string;
        processInformations?: string;
        processName?: string;
        question?: string;
        questionInformation?: string;
        questionOfGroup?: string;
        questionOrderNumberAreShown?: string;
        questionStatusType?: string;
        questionType?: string;
        role?: string;
        sendType?: string;
        sMS?: string;
        smsCountForHasEMailTooltip?: string;
        smsCountForHasNoEMailTooltip?: string;
        smsInformationDefinition?: string;
        smsTresholdTooltip?: string;
        startDate?: string;
        startHour?: string;
        survey?: string;
        surveyDefinition?: string;
        surveyEffectiveDateRange?: string;
        surveyExplanation?: string;
        surveyHeader?: string;
        surveyKod?: string;
        surveyList?: string;
        surveyName?: string;
        surveyOwner?: string;
        surveySendType?: string;
        surveyTimeOutSecond?: string;
        surveyTimeOutSecondTooltip?: string;
        surveyType?: string;
        timeoutInterval?: string;
        transmissionTimeInterval?: string;
        type?: string;
        validityTime?: string;
        validityTimeSms?: string;
        validityTimeSmsTooltip?: string;
        validityTimeTooltip?: string;
        weight?: string;
        workgroupName?: string;
    }
    interface Messages {
        addingRemovingNotAllowedBecauseItisPublished?: string;
        anErrorOccuredWhenCheckingWaitingApproveProcess?: string;
        anErrorOccuredWhenProcessing?: string;
        anErrorOccuredWhenProcessingGetSurveyList?: string;
        areYouSureForDeleteQuestion?: string;
        areYouSureForDeleteSurvey?: string;
        columnNotFoundColumnNameIs?: string;
        enterChoose?: string;
        enterGroupName?: string;
        enterQuestion?: string;
        informationMustBeEnterInformationIs?: string;
        messageHasAlreadyRecordInWorkflow?: string;
        pleaseDoAnySelection?: string;
        processIsSuccess?: string;
        questionTypeNotFound?: string;
        sameSurveyKodCanNotBeEnter?: string;
        selectGroupForAddingQuestion?: string;
        selectQuestionForAddingQuestionChoose?: string;
        selectQuestionType?: string;
        surveyCanNotBeDeleteBecauseItisAnswered?: string;
        surveyIsDeleted?: string;
        surveyLinkNotCreated?: string;
        surveyMustHaveOnlyOneDynamicMatrixQuestion?: string;
        surveyNotDeleted?: string;
        totalOfRecordsRetrieved?: string;
        totalSentSurvey?: string;
        whenQuestionGroupDeletedThenGroupQuestionsWillBeDeleteAreYouSure?: string;
    }
    interface OrderingSurveyCreatorContract extends BOA.Common.Types.ContractBase {
        questionMessage?: string;
        surveyCode?: string;
        userIdListTobeSorted?: number[];
    }
    interface SurveyBlackListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        hostName?: string;
        surveyBlackListId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyBlackListRequest extends BOA.Common.Types.RequestBase {
        gUID?: string;
    }
    interface SurveyChannelRequest extends BOA.Common.Types.RequestBase {
        channel?: number;
        channels?: number[];
        dataContract?: BOA.Types.Kernel.General.SurveyChannelContract;
        surveyId?: number;
    }
    interface SurveyInfoRequest extends BOA.Common.Types.RequestBase {
        dataContract?: BOA.Types.Kernel.General.SurveyInfoContract;
        gUID?: string;
        header?: string;
        hostName?: string;
        surveyInfoId?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface SurveyInternalCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        dynamicMatrixQuestionChoiceContracts?: BOA.Types.Kernel.SurveyManagement.InternalCustomerDynamicMatrixQuestionChoiceContract[];
        gUID?: string;
        header?: string;
        informationCode?: string;
        mail?: string;
        surveyCode?: string;
        surveyTraceId?: number;
        surveyTraceStatus?: BOA.Types.Kernel.General.SurveyTraceStatus;
        surveyTraceUserId?: number;
        traceBusinessKey?: number;
    }
    interface SurveyProcessRequest extends BOA.Common.Types.RequestBase {
        accountNumber?: number;
        orderingSurveyCreatorContract?: BOA.Types.Kernel.SurveyManagement.OrderingSurveyCreatorContract;
        sendInformation?: boolean;
        sendTypeIsSms?: boolean;
        surveyCode?: string;
        traceGuid?: string;
        transactionBusinessKey?: number;
    }
    interface SurveyQuestionChoiceAnswerContract extends BOA.Common.Types.ContractBase {
        explanation?: string;
        gUID?: string;
        orderValue?: number;
        rate?: number;
        surveyQuestionChoiceAnswerId?: number;
        surveyQuestionChoiceId?: number;
        surveyQuestionId?: number;
    }
    interface SurveyQuestionChoiceReportContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        pointLabel?: string;
        pointValue?: number;
        rate?: number;
        totalSelect?: number;
    }
    interface SurveyQuestionMatrixAnswerContract extends BOA.Common.Types.ContractBase {
        gUID?: string;
        rate?: number;
        surveyQuestionChoiceId?: number;
        surveyQuestionId?: number;
        surveyQuestionMatrixAnswerId?: number;
        surveyQuestionMatrixLabelId?: number;
    }
    interface SurveyQuestionMatrixReportContract extends BOA.Common.Types.ContractBase {
        choice?: string;
        choiceId?: number;
        label?: string;
        labelId?: number;
        totalSelect?: number;
    }
    interface SurveyQuestionReportContract extends BOA.Common.Types.ContractBase {
        listQuestionChoiceReport?: BOA.Types.Kernel.SurveyManagement.SurveyQuestionChoiceReportContract[];
        listQuestionMatrixChoice?: BOA.Types.Kernel.General.SurveyQuestionChoiceContract[];
        listQuestionMatrixReport?: BOA.Types.Kernel.SurveyManagement.SurveyQuestionMatrixReportContract[];
        listQuestionTextReport?: BOA.Types.Kernel.SurveyManagement.SurveyQuestionTextReportContract[];
        pointLabel?: string;
        pointValue?: number;
        question?: string;
        totalAnswer?: number;
        type?: BOA.Types.Kernel.General.SurveyQuestionType;
    }
    interface SurveyQuestionTextAnswerContract extends BOA.Common.Types.ContractBase {
        answer?: string;
        gUID?: string;
        surveyQuestionId?: number;
        surveyQuestionTextAnswerId?: number;
    }
    interface SurveyQuestionTextReportContract extends BOA.Common.Types.ContractBase {
        answer?: string;
    }
    interface SurveyReportContract extends BOA.Common.Types.ContractBase {
        countForAccountShared?: number;
        countForEMailAddressIsEmpty?: number;
        countForSurveyLastSend?: number;
        countForUserInBlackList?: number;
        countForUserIsPersonal?: number;
        isCompleted?: boolean;
        listQuestionReport?: BOA.Types.Kernel.SurveyManagement.SurveyQuestionReportContract[];
        participantCustomerCount?: number;
        surveyCode?: string;
        surveyName?: string;
        totalCustomerCount?: number;
    }
    interface SurveyReportForTemporaryPersonnelContract extends BOA.Common.Types.ContractBase {
        answer?: string;
        answerD?: string;
        branchId?: number;
        businessKey?: number;
        date?: Date;
        endDate?: Date;
        jobOfEvaluator?: string;
        jobOfEvalutedPerson?: string;
        nameOfEvaluator?: string;
        nameOfEvalutedPerson?: string;
        organizationName?: string;
        question?: string;
        questionType?: number;
        startDate?: Date;
        surveyTraceId?: number;
    }
    interface SurveyReportForTemporaryPersonnelRequest extends BOA.Common.Types.RequestBase {
        branchId?: number;
        endDate?: Date;
        evaluatorStatus?: number;
        startDate?: Date;
    }
    interface SurveyReportRequest extends BOA.Common.Types.RequestBase {
        surveyCode?: string;
    }
    interface SurveyRequest extends BOA.Common.Types.TransactionRequestBase {
        data?: string;
        dataContract?: BOA.Types.Kernel.General.SurveyContract;
        internalWorkflowBasedProcessSurveyContract?: BOA.Types.Kernel.SurveyManagement.InternalWorkflowBasedProcessSurveyContract;
        isClosedDueToTimeout?: boolean;
        isClosedDueToTimeoutAndFinishOnTimeout?: boolean;
        mailSurveyChoiceAnswerId?: number;
        orderingData?: number[];
    }
    interface SurveyTemporaryAssignedRequest extends BOA.Common.Types.RequestBase {
        geciciGoreveGidenPersonel?: BOA.Types.Kernel.SurveyManagement.Contract;
        yonetici?: BOA.Types.Kernel.SurveyManagement.Contract;
    }
    interface TemporaryAssignedUserSurveyContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        id?: number;
        relatedSurveyTraceId?: number;
        searchRelatedSurveyTraceIdEnd?: number;
        searchRelatedSurveyTraceIdIsNull?: boolean;
        searchRelatedSurveyTraceIdStart?: number;
        searchSurveyTraceIdEnd?: number;
        searchSurveyTraceIdIsNull?: boolean;
        searchSurveyTraceIdStart?: number;
        searchSystemDateEnd?: Date;
        searchSystemDateIsNull?: boolean;
        searchSystemDateStart?: Date;
        searchTaskTypeEnd?: number;
        searchTaskTypeIsNull?: boolean;
        searchTaskTypeStart?: number;
        surveyTraceId?: number;
        systemDate?: Date;
        taskType?: number;
        updateHostIP?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.SystemDocumentManagement {
    interface DocumentStoreContract extends BOA.Common.Types.ContractBase {
        createdDate?: Date;
        documentContent?: number[];
        documentId?: number;
        documentName?: string;
        endDate?: Date;
        extension?: string;
        hostName?: string;
        isActive?: number;
        isActiveName?: string;
        screenId?: number;
        screenName?: string;
        startDate?: Date;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface DocumentStoreRequest extends BOA.Common.Types.RequestBase {
        dataContract?: any;
    }
}
declare namespace BOA.Types.Kernel.Technology {
    interface InstanceSubStateContract extends BOA.Common.Types.ContractBase {
        endDate?: Date;
        instanceId?: number;
        instanceStateId?: number;
        instanceSubStateId?: number;
        stateId?: number;
        subStateCode?: string;
        userCode?: string;
    }
}
declare namespace BOA.Types.Kernel.Technology.Analytic {
    interface MethodDefinitionContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isActiveText?: string;
        mainResponsible?: number;
        methodAction?: string;
        methodCode?: string;
        methodDefinitionId?: number;
        methodName?: string;
        responsible?: number;
        severity?: number;
        severityText?: string;
        systemDate?: Date;
        timeout?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MethodMessageMappingContract extends BOA.Common.Types.ContractBase {
        condition?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        methodCode?: string;
        methodMessageMappingId?: number;
        methodName?: string;
        registryId?: number;
        registryName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MethodMessageMappingDetailContract extends BOA.Common.Types.ContractBase {
        fieldValue?: string;
        hostIP?: string;
        hostName?: string;
        methodMessageMappingDetailId?: number;
        methodMessageMappingId?: number;
        parameterName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MethodParameterContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        isActive?: number;
        isReturnParam?: number;
        methodCode?: string;
        methodParameterId?: number;
        paramName?: string;
        paramType?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.Technology.Fraud {
    export const enum ActionRunAbility {
        JustOnline = 1,
        JustOffline = 2,
        Both = 3
    }
    export const enum ActionRunType {
        Offline = 0,
        Online = 1
    }
    export const enum ActionStatus {
        Passive = 0,
        Active = 1
    }
    export const enum ActionTakenStatus {
        Waiting = 0,
        Success = 1,
        Error = 2
    }
    export const enum ActionType {
        RejectTransaction = 1,
        SendSmsToCustomer = 2,
        SendSmsToAuthorized = 3,
        SendMailToCustomer = 4,
        SendMailToAuthorized = 5,
        SendMailToCardBranch = 6,
        UpdateDebitCardStatus = 7,
        DoWithholdingToAccount = 8,
        SendMailWithTemplateCode = 9,
        SetValueToEngineContext = 10,
        SendToIVR = 11
    }
    export const enum CallCenterRecordStatus {
        Cancelled = 0,
        Waiting = 1,
        Completed = 2
    }
    export const enum EngineRunType {
        Offline = 0,
        Online = 1
    }
    export const enum EngineStepType {
        OnlineInvestigationStarted = 1,
        OnlineInvestigationFinished = 2,
        SentToOfflineInvestigationQueue = 3,
        OfflineInvestigationStarted = 4,
        OfflineInvestigationFinished = 5
    }
    export const enum FraudDetectionStatus {
        Waiting = 1,
        Processing = 2,
        Fraud = 3,
        NotFraud = 4,
        ConfirmedNotFraud = 5,
        CouldNotReachedToCustomer = 6
    }
    export const enum FraudDetectionSubStatus {
        IVRProcessing = 1,
        IVRFraud = 2,
        IVRNotFraud = 3,
        IVRNotReached = 4,
        IVRCancel = 5
    }
    export const enum FraudProcessingType {
        GeneralOffline = 1,
        MoneyTransferOnline = 2,
        MoneyTransferOffline = 3,
        DebitCardOnline = 4,
        DebitCardOnlineAsync = 5
    }
    export const enum FraudTrackerType {
        InternetMobileFraudTracker = 1,
        DebitCardFraudTracker = 2,
        GeneralFraudTracker = 3
    }
    export const enum HiddenStatus {
        NotHidden = 0,
        Hidden = 1
    }
    export const enum ProcessingStatus {
        Started = 0,
        WaitingForOffline = 1,
        Completed = 2
    }
    export const enum RuleHasError {
        Yes = 1,
        No = 0
    }
    export const enum RuleRunType {
        Online = 1,
        Offline = 0
    }
    export const enum TrackerRuleStatus {
        Active = 1,
        Passive = 0
    }
    export const enum TrackerRunTimeType {
        Normal = 1,
        OfflineAfterInvestigation = 2
    }
    export const enum TrackerStatus {
        Active = 1,
        Passive = 0
    }
    interface ActionDefinitionContract extends BOA.Common.Types.ContractBase {
        actionCode?: string;
        actionDefinitionId?: number;
        actionName?: string;
        actionType?: number;
        runType?: number;
        status?: number;
        trackerType?: number;
    }
    interface ActionTakenContract extends BOA.Common.Types.ContractBase {
        actionDefinitionId?: number;
        actionParameterValueList?: BOA.Types.Kernel.Technology.Fraud.TrackerRuleActionParameterContract[];
        actionTakenId?: number;
        actionType?: number;
        businessKey?: number;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        investigationBusinessKey?: number;
        parameterValue?: string;
        ruleCode?: string;
        status?: number;
        systemDate?: Date;
        trackerId?: number;
        trackerRuleActionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CallCenterRecordStatusContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        businessKey?: number;
        callCenterRecordId?: number;
        callCount?: number;
        callStatus?: string;
        hostIP?: string;
        hostName?: string;
        phoneNumber?: string;
        status?: number;
        systemDate?: Date;
        typedCharacter?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface ChannelAndTransactionContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        transactionCode?: string;
    }
    interface DebitCardFraudRuleEngineRequest extends BOA.Common.Types.RequestBase {
        transactionLog?: BOA.Types.Kernel.Technology.Fraud.FraudDebitCardTransactionContract;
    }
    interface DebitCardTransactionDBContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        systemDate?: Date;
        tranDate?: Date;
        transactionData?: BOA.Types.Kernel.Technology.Fraud.FraudDebitCardTransactionContract;
        userName?: string;
    }
    interface EngineLogContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        engineRunType?: number;
        errorCode?: string;
        errorMessage?: string;
        hostIP?: string;
        hostName?: string;
        investigationBusinessKey?: number;
        isWarning?: number;
        systemDate?: Date;
        userName?: string;
    }
    interface EngineStepContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        hostIP?: string;
        hostName?: string;
        investigationBusinessKey?: number;
        stepNumber?: number;
        systemDate?: Date;
        trackerType?: number;
        userName?: string;
    }
    interface Extensions {
    }
    interface FraudConstants {
    }
    interface FraudDebitCardTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        acquirerBankId?: string;
        additionalResponseData?: string;
        authorizationCode?: string;
        billingAmount?: number;
        billingAmountFEC?: string;
        bKMUniqueMerchantId?: string;
        businessKey?: number;
        cardBIN?: string;
        cardBranchId?: number;
        cardBrand?: string;
        cardFirstTransactionDate?: Date;
        cardLastTransactionDate?: Date;
        cardNumber?: string;
        channelId?: number;
        debitCardTransactionCode?: string;
        expireDate?: string;
        externalResponseCode?: string;
        externalSourceCode?: string;
        externalTerminalType?: string;
        iCCData?: string;
        localTransactionDate?: Date;
        mCC?: string;
        merchantCity?: string;
        merchantCountryCode?: string;
        merchantName?: string;
        merchantNumber?: string;
        originalAmount?: number;
        originalAmountFEC?: string;
        pOSData?: string;
        pOSEntryMode?: string;
        processTransactionDate?: Date;
        retrievalReferenceNumber?: string;
        settlementAmount?: number;
        settlementAmountFEC?: string;
        terminalId?: string;
        transactionCode?: string;
    }
    interface FraudDetectionContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        description?: string;
        fraudDetectionId?: number;
        inquiryEndDate?: Date;
        inquiryStartDate?: Date;
        ruleCode?: string;
        status?: number;
        suspicion?: number;
        trackerId?: number;
        tranDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface FraudEngineAssemblyCache {
        trackerFilterAssembly?: any;
    }
    interface FraudEngineDefinitionCache {
        riskLevelList?: BOA.Types.Kernel.Technology.Fraud.RiskLevelContract[];
        trackerDefinitionList?: BOA.Types.Kernel.Technology.Fraud.TrackerContract[];
        trackerTypeList?: BOA.Types.Kernel.General.ParameterContract[];
        transactionGroupList?: BOA.Types.Kernel.Technology.Fraud.FraudTransactionGroupContract[];
    }
    interface FraudEngineExecutionRequiredData {
        fraudTransactionData?: BOA.Types.Kernel.Technology.Fraud.IFraudTransactionData;
        investigationBusinessKey?: number;
    }
    interface FraudEngineExecutionResult {
        isOfflineExecutionRequired?: boolean;
        offlineActionList?: BOA.Types.Kernel.Technology.Fraud.ActionTakenContract[];
        offlineExecutionQueueMessageList?: string[];
        onlineActionList?: BOA.Types.Kernel.Technology.Fraud.ActionTakenContract[];
        totalScore?: number;
        transactionBusinesssKey?: number;
    }
    interface FraudGeneralTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountTL?: number;
        branchId?: number;
        businessKey?: number;
        cardNumber?: string;
        channelId?: number;
        fec?: number;
        fer?: number;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        methodName?: string;
        personId?: number;
        requestName?: string;
        resourceCode?: string;
        systemDate?: Date;
        taxNumber?: string;
        toAccountNumber?: number;
        toAccountSuffix?: number;
        toAmount?: number;
        toBankId?: number;
        toBranchId?: number;
        toFEC?: number;
        toPersonId?: number;
        toTaxNumber?: string;
        tranBranchId?: number;
        tranDate?: Date;
        transactionCode?: string;
        transactionGroup?: number;
        unitId?: number;
        userName?: string;
        webUserId?: number;
    }
    interface FraudParameterContract extends BOA.Common.Types.ContractBase {
        hostName?: string;
        paramCode?: string;
        paramDescription?: string;
        paramName?: string;
        paramValue?: string;
        systemDate?: Date;
        userName?: string;
    }
    interface FraudTransactionGroupContract extends BOA.Common.Types.ContractBase {
        processingType?: number;
        transactionCode?: string;
        transactionGroup?: number;
    }
    interface GeneralFraudRuleEngineRequest extends BOA.Common.Types.RequestBase {
        transactionLog?: BOA.Types.Kernel.Technology.Fraud.FraudGeneralTransactionContract;
    }
    interface GeneralFraudTransactionDBContract extends BOA.Common.Types.ContractBase {
        transactionLog?: BOA.Types.Kernel.Technology.Fraud.FraudGeneralTransactionContract;
    }
    interface IFraudRuleEngineRequest {
        businessKey?: number;
    }
    interface IFraudTrackerFilter {
        request?: BOA.Types.Kernel.Technology.Fraud.IFraudRuleEngineRequest;
    }
    interface IFraudTransactionData {
        businessKey?: number;
        channelId?: number;
        transactionCode?: string;
    }
    interface InvestigationResultContract extends BOA.Common.Types.ContractBase {
        beginDate?: Date;
        businessKey?: number;
        description?: string;
        endDate?: Date;
        hostIP?: string;
        hostName?: string;
        riskLevel?: number;
        status?: number;
        subStatus?: number;
        systemDate?: Date;
        totalScore?: number;
        trackerType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface MoneyTransferFraudRuleEngineRequest extends BOA.Common.Types.RequestBase {
        transactionLog?: BOA.Types.Kernel.Technology.Fraud.MoneyTransferTransactionContract;
    }
    interface MoneyTransferTransactionContract extends BOA.Types.Kernel.Technology.Fraud.FraudGeneralTransactionContract {
        cityName?: string;
        gSMPhoneNumber?: string;
        isLocalNetwork?: boolean;
        loginType?: string;
        loginTypeId?: number;
        receiverAccountNumber?: string;
        receiverName?: string;
        regionName?: string;
        webBrowser?: string;
        webCountry?: string;
        webDailySum?: number;
        webIP?: string;
        webPlatform?: string;
    }
    interface MoneyTransferTransactionDBContract extends BOA.Common.Types.ContractBase {
        transactionLog?: BOA.Types.Kernel.Technology.Fraud.MoneyTransferTransactionContract;
    }
    interface OfflineFraudProcessingRequest extends BOA.Common.Types.RequestBase {
        trackerType?: number;
        transactionBusinessKey?: number;
    }
    interface RiskLevelContract extends BOA.Common.Types.ContractBase {
        color?: string;
        maximumScore?: number;
        minimumScore?: number;
        riskLevel?: number;
        trackerType?: number;
    }
    interface RuleRunHistoryContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        engineRunType?: number;
        hasError?: number;
        investigationBusinessKey?: number;
        ruleCode?: string;
        ruleName?: string;
        score?: number;
        systemDate?: Date;
        trackerId?: number;
        tranDate?: Date;
    }
    interface StringConstants {
    }
    interface TrackerChannelContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        trackerId?: number;
    }
    interface TrackerContract extends BOA.Common.Types.ContractBase {
        channelList?: BOA.Types.Kernel.Technology.Fraud.TrackerChannelContract[];
        description?: string;
        filterRuleList?: BOA.Types.Kernel.Technology.Fraud.TrackerRuleContract[];
        hasOfflineRule?: boolean;
        hostIP?: string;
        hostName?: string;
        name?: string;
        processingType?: number;
        ruleList?: BOA.Types.Kernel.Technology.Fraud.TrackerRuleContract[];
        runTimeType?: number;
        status?: number;
        systemDate?: Date;
        trackerId?: number;
        trackerType?: number;
        transactionFilter?: string;
        transactionList?: BOA.Types.Kernel.Technology.Fraud.TrackerTransactionContract[];
        updateHostIP?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TrackerRuleActionContract extends BOA.Common.Types.ContractBase {
        actionDefinitionId?: number;
        actionParameterValueList?: BOA.Types.Kernel.Technology.Fraud.TrackerRuleActionParameterContract[];
        actionType?: number;
        hostIP?: string;
        hostName?: string;
        maximumScore?: number;
        minimumScore?: number;
        runOnline?: number;
        systemDate?: Date;
        trackerRuleActionId?: number;
        trackerRuleId?: number;
        userName?: string;
    }
    interface TrackerRuleActionParameterContract extends BOA.Common.Types.ContractBase {
        actionParameterDefinitionId?: number;
        dataSourceName?: string;
        hostIP?: string;
        hostName?: string;
        paramCode?: string;
        paramValue?: string;
        systemDate?: Date;
        trackerRuleActionId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TrackerRuleContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        isFilter?: number;
        isHidden?: number;
        isPublished?: boolean;
        offlineActionList?: BOA.Types.Kernel.Technology.Fraud.TrackerRuleActionContract[];
        onlineActionList?: BOA.Types.Kernel.Technology.Fraud.TrackerRuleActionContract[];
        ruleCode?: string;
        runOnline?: number;
        runOrder?: number;
        status?: number;
        systemDate?: Date;
        trackerId?: number;
        trackerRuleId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TrackerTransactionContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        trackerId?: number;
        transactionCode?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.Technology.Fraud.FraudConstants {
    export const enum CallCenterRecordStatus {
        SentToCallCenter = 1
    }
    export const enum TransactionGroup {
        OutgoingIntrabankMoneyTransfer = 1,
        OutgoingKAS = 2,
        IncomingKAS = 3
    }
    export const enum ValueCodes {
        AccountNumber = 0,
        AccountSuffix = 1,
        CardBranchMailAddress = 2,
        RejectCode = 3,
        TransactionShortDate = 4,
        TransactionHourAndMinute = 5,
        CardNumber = 6,
        TransactionAmount = 7,
        CustomerName = 8,
        MerchantName = 9,
        TransactionSystemDate = 10,
        PersonId = 11,
        FEC = 12,
        ClientIP = 13,
        WebUserId = 14,
        GSMPhoneNumber = 15
    }
}
declare namespace BOA.Types.Kernel.Treasury {
    interface AskRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        approveLimit?: number;
        bidAskInfo?: BOA.Types.Kernel.Treasury.BidAskContract;
        cardBranchId?: number;
        coinSerialList?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalCoinSerialContract[];
        commissionAmount?: number;
        commissionBaseCount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionKey?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        creditCardAccountSuffix?: number;
        dataContract?: BOA.Types.Kernel.FX.FXTransactionsContract;
        fXJournalData?: BOA.Types.Kernel.FX.FXJournalContract;
        isFromCard?: boolean;
        isOnusCard?: boolean;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
        selectedCommissionAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface BidAskContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        amount?: number;
        atmLedgerId?: number;
        bidAskId?: number;
        commissionAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionKey?: string;
        fec?: number;
        grossAmount?: number;
        isFromCreditCard?: boolean;
        isHaveCommissionKey?: boolean;
        isOnUsCreditCard?: boolean;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        productType?: number;
        productUnitDescription?: string;
        receiverBirthDate?: Date;
        receiverFatherName?: string;
        receiverName?: string;
        receiverPhone?: string;
        receiverTaxNumber?: string;
        serialNumbers?: string;
    }
    interface BidAskContract extends BOA.Common.Types.ContractBase {
        accountingBusinessKey?: number;
        amount?: number;
        atmLedgerId?: number;
        bidAskId?: number;
        commissionAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionKey?: string;
        fec?: number;
        grossAmount?: number;
        isFromCreditCard?: boolean;
        isHaveCommissionKey?: boolean;
        isOnUsCreditCard?: boolean;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        productType?: number;
        productUnitDescription?: string;
        receiverBirthDate?: Date;
        receiverFatherName?: string;
        receiverName?: string;
        receiverPhone?: string;
        receiverTaxNumber?: string;
        serialNumbers?: string;
    }
    interface BloombergDealContract extends BOA.Common.Types.ContractBase {
        allocationType?: string;
        backToBackRef?: string;
        dataProcessDate?: Date;
        dealDate?: string;
        dealTime?: string;
        executionId?: string;
        executionStyle?: string;
        executionType?: string;
        externalReference?: string;
        fileContent?: string;
        fileName?: string;
        fileState?: string;
        fileTime?: Date;
        fxCrossDealCcy1?: string;
        fxCrossDealCcy2?: string;
        fxCrossDealType?: string;
        instrument?: string;
        makerFullName?: string;
        makerGroupFullName?: string;
        makerGroupName?: string;
        makerId?: string;
        makerName?: string;
        manual?: string;
        mmetsId?: string;
        name?: string;
        orderId?: string;
        parentSubmitId?: string;
        parentSubmitIdLegId?: string;
        parentSubmitIdReqId?: string;
        processingState?: string;
        proxyGroupFullName?: string;
        proxyGroupName?: string;
        requiresPublishing?: string;
        role?: string;
        sourceOfData?: string;
        status?: string;
        submitId?: string;
        systemDate?: Date;
        takerFullName?: string;
        takerGroupFullName?: string;
        takerGroupName?: string;
        takerId?: string;
        takerName?: string;
        tradeDate?: string;
        tradeTime?: string;
    }
    interface BloombergDealLegContract extends BOA.Common.Types.ContractBase {
        contraAmount?: string;
        crossComponentCcyPair?: string;
        crossComponentFwdScaleDps?: string;
        crossComponentQuoteAllIn?: string;
        crossComponentQuoteBasis?: string;
        crossComponentQuoteFwdPts?: string;
        crossComponentQuoteSpotPrice?: string;
        crossComponentSide?: string;
        dealtAmount?: string;
        dealtCcy?: string;
        fileName?: string;
        requirement0ContraAmount?: string;
        requirement0DealtAmount?: string;
        requirement0DealtCcy?: string;
        requirement0TakerBuysBase?: string;
        requirement1ContraAmount?: string;
        requirement1DealtAmount?: string;
        requirement1DealtCcy?: string;
        requirement1TakerBuysBase?: string;
        requirement2ContraAmount?: string;
        requirement2DealtAmount?: string;
        requirement2DealtCcy?: string;
        requirement2TakerBuysBase?: string;
        requirement3ContraAmount?: string;
        requirement3DealtAmount?: string;
        requirement3DealtCcy?: string;
        requirement3TakerBuysBase?: string;
        requirement4ContraAmount?: string;
        requirement4DealtAmount?: string;
        requirement4DealtCcy?: string;
        requirement4TakerBuysBase?: string;
        takerBuysBase?: string;
        type?: string;
        valueDate?: string;
        valueDateSpotDate?: string;
        valueDateType?: string;
    }
    interface Constants {
    }
    interface EffectiveTransactionsArbitrageProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface EffectiveTransactionsAskProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface EffectiveTransactionsBidProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface EffectiveTransactionsProcessRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.FX.FXTransactionsContract;
    }
    interface EffectiveTransactionsProfitLossProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface GenIndividualAccountMapContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        company?: string;
        genIndividualAccountMapId?: number;
        individual?: string;
        txnSource?: string;
    }
    interface GenPlatformCounterpartyContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        platformCounterpartyId?: number;
        productCode?: string;
        systemName?: string;
        txnSource?: string;
    }
    interface PaymentOptionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        confirmationMessageType?: string;
        description?: string;
        hostIP?: string;
        hostName?: string;
        netSettlementCC?: string;
        netSettlementCorrespondentCC?: string;
        netSettlementCorrespondentTo?: string;
        netSettlementTo?: string;
        paymentFrequency?: number;
        paymentOptionId?: number;
        paymentType?: number;
        productType?: string;
        subProductType?: string;
        swapProductCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOptionDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        fec?: number;
        paymentOptionDetailId?: number;
        paymentOptionId?: number;
        updateSystemDate?: Date;
        updateUserName?: string;
    }
    interface PhysicalPreciousMetalCoinSerialContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        coin?: number;
        counts?: number;
        entryId?: number;
        hostIp?: string;
        hostName?: string;
        isPicked?: boolean;
        productId?: number;
        serialNumber?: string;
        status?: number;
        stock?: number;
        systemDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalCoinSerialContract extends BOA.Common.Types.ContractBase {
        branchId?: number;
        coin?: number;
        counts?: number;
        entryId?: number;
        hostIp?: string;
        hostName?: string;
        isPicked?: boolean;
        productId?: number;
        serialNumber?: string;
        status?: number;
        stock?: number;
        systemDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProduct extends BOA.Common.Types.ContractBase {
        fec?: number;
        fecCode?: string;
        fineness?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        serialNumber?: string;
        systemDate?: Date;
        type?: number;
        unit?: number;
        unitDescription?: string;
        unitValue?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProduct extends BOA.Common.Types.ContractBase {
        fec?: number;
        fecCode?: string;
        fineness?: number;
        hostIp?: string;
        hostName?: string;
        isActive?: number;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        serialNumber?: string;
        systemDate?: Date;
        type?: number;
        unit?: number;
        unitDescription?: string;
        unitValue?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProductCoin extends BOA.Common.Types.ContractBase {
        coin?: number;
        commissionAmount?: number;
        hostIp?: string;
        hostName?: string;
        productId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProductCoin extends BOA.Common.Types.ContractBase {
        coin?: number;
        commissionAmount?: number;
        hostIp?: string;
        hostName?: string;
        productId?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalProductDetail extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        productId?: number;
        systemDate?: Date;
        type?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        value?: number;
    }
    interface PhysicalPreciousMetalProductInfo extends BOA.Common.Types.ContractBase {
        product?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalProduct;
        productCoinList?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalProductCoin[];
        productDetailList?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalProductDetail[];
        tranDefinitionDetailList?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalTranDefinitionDetail[];
        tranDefinitionList?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalTranDefinition[];
    }
    interface PhysicalPreciousMetalTranDefinition extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        coinSerial?: number;
        commissionKey?: string;
        entryType?: number;
        finishTime?: string;
        hostIp?: string;
        hostName?: string;
        id?: number;
        isActive?: number;
        productId?: number;
        resourceCode?: string;
        resourceId?: number;
        startTime?: string;
        systemDate?: Date;
        tranType?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalTranDefinitionDetail extends BOA.Common.Types.ContractBase {
        hostIp?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        tranId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PhysicalPreciousMetalTransferToBranchContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        fec?: number;
        fromBranchId?: number;
        grossAmount?: number;
        hostIp?: string;
        hostName?: string;
        id?: number;
        isActive?: number;
        ledgerId?: string;
        productId?: number;
        productType?: number;
        systemDate?: Date;
        toBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PortfolioContract extends BOA.Common.Types.ContractBase {
        countryCode?: string;
        functionalFec?: number;
        hostIP?: string;
        hostName?: string;
        inventoryTypeNo?: number;
        isActive?: boolean;
        isTradable?: boolean;
        legalVehicleNo?: number;
        localFec?: number;
        parentNo?: number;
        portfolioCode?: string;
        portfolioFlags?: number;
        portfolioName?: string;
        portfolioNo?: number;
        portfolioPath?: string;
        prfTypeNo?: number;
        systemDate?: Date;
        timeZoneNo?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PPMDepositWithdrawalContract extends BOA.Common.Types.ContractBase {
        accountBranchId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        atmLedgerId?: number;
        businessKey?: number;
        channelId?: number;
        description?: string;
        divitId?: any;
        fec?: number;
        grossAmount?: number;
        hostIp?: string;
        hostName?: string;
        id?: number;
        isActive?: number;
        isFromAccount?: number;
        isHaveCommissionKey?: boolean;
        isWithdrawal?: boolean;
        ledgerId?: string;
        productId?: number;
        productName?: string;
        productType?: number;
        productUnitDescription?: string;
        receiverBirthDate?: Date;
        receiverFatherName?: string;
        receiverName?: string;
        receiverPhone?: string;
        receiverTaxNumber?: string;
        relativePersonId?: number;
        resourceCode?: string;
        serialNumbers?: string;
        systemDate?: Date;
        thirdPersonId?: number;
        tranBranchId?: number;
        tranDate?: Date;
        tranRef?: string;
        unitId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PPMWithdrawalRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        approveLimit?: number;
        coinSerialList?: BOA.Types.Kernel.Treasury.PhysicalPreciousMetalCoinSerialContract[];
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        dataContract?: BOA.Types.Kernel.Treasury.PPMDepositWithdrawalContract;
        revokableRequestData?: BOA.Common.Types.RevokableRequestData;
        selectedCommissionAccount?: BOA.Types.Kernel.Account.AccountComponentAccountsContract;
        tellerTransactionList?: BOA.Common.Types.TellerTransactionContract[];
        thirdPartyIdentityNumber?: string;
        workFlowData?: BOA.Common.Types.WorkFlowRequestData;
        workFlowInternalData?: BOA.Common.Types.WorkFlowRequestInternalData;
    }
    interface PreciousMetalTransactionsArbitrageProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface PreciousMetalTransactionsAskProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface PreciousMetalTransactionsBidProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface PreciousMetalTransactionsProfitLossProcessRequest extends BOA.Types.Kernel.Treasury.EffectiveTransactionsProcessRequest {
    }
    interface ReutersDetailContract extends BOA.Common.Types.ContractBase {
        conversation?: string;
        insertTime?: Date;
        logicalRef?: string;
    }
    interface ReutersRTNSDealContract extends BOA.Common.Types.ContractBase {
        allocationType?: string;
        backToBackRef?: string;
        dataProcessDate?: Date;
        dealDate?: string;
        dealTime?: string;
        executionId?: string;
        executionStyle?: string;
        executionType?: string;
        externalReference?: string;
        fileContent?: string;
        fileName?: string;
        fileState?: string;
        fileTime?: Date;
        fxCrossDealCcy1?: string;
        fxCrossDealCcy2?: string;
        fxCrossDealType?: string;
        instrument?: string;
        makerFullName?: string;
        makerGroupFullName?: string;
        makerGroupName?: string;
        makerId?: string;
        makerName?: string;
        manual?: string;
        mmetsId?: string;
        name?: string;
        orderId?: string;
        parentSubmitId?: string;
        parentSubmitIdLegId?: string;
        parentSubmitIdReqId?: string;
        processingState?: string;
        proxyGroupFullName?: string;
        proxyGroupName?: string;
        requiresPublishing?: string;
        role?: string;
        sourceOfData?: string;
        status?: string;
        submitId?: string;
        systemDate?: Date;
        takerFullName?: string;
        takerGroupFullName?: string;
        takerGroupName?: string;
        takerId?: string;
        takerName?: string;
        tradeDate?: string;
        tradeTime?: string;
    }
    interface ReutersRTNSDealLegContract extends BOA.Common.Types.ContractBase {
        contraAmount?: string;
        crossComponentCcyPair?: string;
        crossComponentFwdScaleDps?: string;
        crossComponentQuoteAllIn?: string;
        crossComponentQuoteBasis?: string;
        crossComponentQuoteFwdPts?: string;
        crossComponentQuoteSpotPrice?: string;
        crossComponentSide?: string;
        dealtAmount?: string;
        dealtCcy?: string;
        fileName?: string;
        requirement0ContraAmount?: string;
        requirement0DealtAmount?: string;
        requirement0DealtCcy?: string;
        requirement0TakerBuysBase?: string;
        requirement1ContraAmount?: string;
        requirement1DealtAmount?: string;
        requirement1DealtCcy?: string;
        requirement1TakerBuysBase?: string;
        requirement2ContraAmount?: string;
        requirement2DealtAmount?: string;
        requirement2DealtCcy?: string;
        requirement2TakerBuysBase?: string;
        requirement3ContraAmount?: string;
        requirement3DealtAmount?: string;
        requirement3DealtCcy?: string;
        requirement3TakerBuysBase?: string;
        requirement4ContraAmount?: string;
        requirement4DealtAmount?: string;
        requirement4DealtCcy?: string;
        requirement4TakerBuysBase?: string;
        takerBuysBase?: string;
        type?: string;
        valueDate?: string;
        valueDateSpotDate?: string;
        valueDateType?: string;
    }
    interface ReutersTOFContract extends BOA.Common.Types.ContractBase {
        amount1?: number;
        amount2?: number;
        comment?: string;
        conversation?: string;
        currencyType1?: string;
        currencyType2?: string;
        dealRateNet?: number;
        dealRateSpot?: number;
        depositAmount?: number;
        depositRate?: number;
        externalReference?: string;
        fAmount1?: number;
        fAmount2?: number;
        fDealRateNet?: number;
        fMaturityDate?: Date;
        forwardPoints?: number;
        insertTime?: Date;
        interestAmount?: number;
        maturityDate?: Date;
        pureDealType?: number;
        rateDirection?: number;
        reutersCode?: string;
        sourceOfData?: number;
        state?: string;
        systemDate?: Date;
        tradeDate?: Date;
        trader?: string;
        txnType?: number;
    }
    interface RTNSConstants {
    }
    interface T360TDealContract extends BOA.Common.Types.ContractBase {
        backToBackExternalReferenceId?: string;
        backToBackInternalReferenceId?: string;
        backToBackRef?: string;
        buyer?: string;
        currency1?: string;
        currency2?: string;
        dataProcessDate?: Date;
        externalReference?: string;
        fileContent?: string;
        fileName?: string;
        fileState?: string;
        fileTime?: Date;
        forwardPointMargin?: string;
        forwardPointMargin2?: string;
        forwardPoints?: string;
        forwardPoints2?: string;
        forwardTraderSpread?: string;
        forwardTraderSpread2?: string;
        generalInstrument?: string;
        groupTreasuryCompany?: string;
        groupTreasuryIndividual?: string;
        margin?: string;
        margin2?: string;
        marketMakerCompany?: string;
        marketMakerIndividual?: string;
        notionalAmount?: string;
        notionalAmount2?: string;
        notionalCurrency?: string;
        oppositeAmount?: string;
        oppositeAmount2?: string;
        outrightRate?: string;
        outrightRate2?: string;
        outrightValueDate?: string;
        outrightValueDate2?: string;
        processingState?: string;
        proxyGroupName?: string;
        referenceId?: string;
        referenceSpotRate?: string;
        referenceSpotRate2?: string;
        requestorCompany?: string;
        requestorIndividual?: string;
        schemaVersion?: string;
        seller?: string;
        spotMargin?: string;
        spotMargin2?: string;
        spotTraderSpread?: string;
        spotTraderSpread2?: string;
        spotValueDate?: string;
        systemDate?: Date;
        tradeDate?: string;
    }
    interface TOFConstants {
    }
    interface TradAirDealContract extends BOA.Common.Types.ContractBase {
        backToBackExternalReferenceId?: string;
        backToBackInternalReferenceId?: string;
        backToBackRef?: string;
        buyer?: string;
        currency1?: string;
        currency2?: string;
        dataProcessDate?: Date;
        externalReference?: string;
        fileContent?: string;
        fileName?: string;
        fileState?: string;
        fileTime?: Date;
        forwardPointMargin?: string;
        generalInstrument?: string;
        groupTreasuryCompany?: string;
        groupTreasuryIndividual?: string;
        margin?: string;
        marketMakerCompany?: string;
        notionalAmount?: string;
        notionalCurrency?: string;
        oppositeAmount?: string;
        outrightRate?: string;
        outrightValueDate?: string;
        processingState?: string;
        proxyGroupName?: string;
        referenceId?: string;
        referenceSpotRate?: string;
        requestorCompany?: string;
        requestorIndividual?: string;
        seller?: string;
        spotMargin?: string;
        systemDate?: Date;
        tradeDate?: string;
    }
    interface TxnExternalLogContract extends BOA.Common.Types.ContractBase {
        code?: string;
        externalRef?: string;
        logNo?: number;
        message?: string;
        product?: string;
        status?: number;
        systemDate?: Date;
        txnSource?: string;
        updateSystemDate?: Date;
        codeDescription?:string;
        statusDescription?:string;
        txnSourceDescription?:string;
    }
}
declare namespace BOA.Types.Kernel.Treasury.Constants {
    interface BOANotifications {
    }
    interface CustomProductSubType {
    }
    interface ExternalDataProcessingState {
    }
    interface ExternalFileState {
    }
    interface ExternalLogCode {
    }
    interface ExternalLogProduct {
    }
    interface ExternalLogStatus {
    }
    interface ParameterDefaultTypes {
    }
    interface ParameterRateTypes {
    }
    interface ParameterTypes {
    }
    interface PaymentOptionSubProductTypes {
    }
    interface PaymentType {
    }
    interface PortfolioFlags {
    }
    interface ProductCode {
    }
    interface RootPortfolioPaths {
    }
    interface StateFlagGroups {
    }
    interface StateFlags {
    }
}
declare namespace BOA.Types.Kernel.Treasury.EFT {
    interface InComingEFTContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        hostName?: string;
        id?: number;
        msgAmount?: number;
        msgComment?: string;
        msgCreditCardNumber?: string;
        msgEndMessageMarker?: string;
        msgEnteranceTime?: string;
        msgGroupType?: string;
        msgMessageCode?: string;
        msgPartitionNumber?: string;
        msgPaymentSource?: string;
        msgPriority?: number;
        msgReceiverAccountNumber?: string;
        msgReceiverBankCode?: string;
        msgReceiverBranchCode?: string;
        msgReceiverCitizenshipId?: string;
        msgReceiverCityCode?: string;
        msgReceiverName?: string;
        msgReceiverPhone?: string;
        msgRecievedFlag?: string;
        msgReferenceNumber?: string;
        msgSenderAccountNumber?: string;
        msgSenderBankCode?: string;
        msgSenderBranchCode?: string;
        msgSenderCitizenshipId?: string;
        msgSenderCityCode?: string;
        msgSenderName?: string;
        msgSenderPhone?: string;
        msgSequenceNumber?: string;
        msgSystemCode?: string;
        msgTransactionDate?: Date;
        msgTransactionTime?: string;
        paymentAccount?: string;
        paymentAccountType?: number;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverBranchId?: number;
        relationType?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        state?: number;
        stateDetail?: number;
        statusReason?: number;
        systemDate?: Date;
        transactionBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
    }
    interface InComingEFTRequest extends BOA.Common.Types.RequestBase {
        channelId?: number;
        dataContract?: BOA.Types.Kernel.Treasury.EFT.InComingEFTContract;
        hostName?: string;
        id?: number;
        msgAmount?: number;
        msgComment?: string;
        msgCreditCardNumber?: string;
        msgEndMessageMarker?: string;
        msgEnteranceTime?: string;
        msgGroupType?: string;
        msgMessageCode?: string;
        msgPartitionNumber?: string;
        msgPaymentSource?: string;
        msgPriority?: number;
        msgReceiverAccountNumber?: string;
        msgReceiverBankCode?: string;
        msgReceiverBranchCode?: string;
        msgReceiverCitizenshipId?: string;
        msgReceiverCityCode?: string;
        msgReceiverName?: string;
        msgReceiverPhone?: string;
        msgRecievedFlag?: string;
        msgReferenceNumber?: string;
        msgSenderAccountNumber?: string;
        msgSenderBankCode?: string;
        msgSenderBranchCode?: string;
        msgSenderCitizenshipId?: string;
        msgSenderCityCode?: string;
        msgSenderName?: string;
        msgSenderPhone?: string;
        msgSequenceNumber?: string;
        msgSystemCode?: string;
        msgTransactionDate?: Date;
        msgTransactionTime?: string;
        paymentAccount?: string;
        paymentAccountType?: number;
        receiverAccountNumber?: number;
        receiverAccountSuffix?: number;
        receiverBranchId?: number;
        relationType?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        state?: number;
        stateDetail?: number;
        statusReason?: number;
        systemDate?: Date;
        transactionBranchId?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
    }
    interface OutGoingEFTContract extends BOA.Common.Types.ContractBase {
        address?: string;
        amount?: number;
        authorizedPersonID?: number;
        beginDate?: Date;
        birthDate?: Date;
        birthPlace?: string;
        capital?: number;
        channelId?: number;
        chargeAmount?: number;
        commissionAmount?: number;
        correspondentBankBillNumber?: number;
        creditCardNumber?: string;
        customerId?: string;
        description?: string;
        divitId?: string;
        endDate?: Date;
        errorCode?: string;
        fec?: string;
        fecAmount?: number;
        fer?: number;
        gIBTransferType?: number;
        hostName?: string;
        ibanNotDeclared?: boolean;
        incomeAmount?: number;
        incomeRate?: number;
        isAuthorized?: boolean;
        isAuthorizedOrOrder?: number;
        isEndOfDay?: boolean;
        isMatched?: boolean;
        isOrder?: boolean;
        kasProcessDate?: Date;
        kasReceiveDate?: Date;
        messageSendDate?: Date;
        nationality?: string;
        operationNumber?: string;
        outGoingId?: number;
        passportNumber?: string;
        paymentAccount?: string;
        paymentAccountNumber?: number;
        paymentAccountSuffix?: number;
        paymentAccountType?: BOA.Types.KAS.PaymentAccountType;
        paymentBranchId?: number;
        paymentSource?: string;
        paymentType?: string;
        priority?: number;
        processInfo?: string;
        processType?: string;
        queryToken?: number;
        receiverAccountNumber?: string;
        receiverAddress?: string;
        receiverBranchCode?: number;
        receiverBranchName?: string;
        receiverCityCode?: string;
        receiverFatherName?: string;
        receiverIdentityNumber?: string;
        receiverName?: string;
        receiverParticipantCode?: number;
        receiverParticipantName?: string;
        receiverPhoneNumber?: string;
        referenceNumber?: string;
        relationalMessageDate?: Date;
        relationalQueryToken?: number;
        resourceBusinessKey?: number;
        resourceCode?: string;
        returnCode?: string;
        senderAccountNumber?: string;
        senderAddress?: string;
        senderBankBillNumber?: number;
        senderBirthDate?: Date;
        senderBirthPlace?: string;
        senderBranchCode?: number;
        senderCityCode?: string;
        senderIdentityNumber?: string;
        senderName?: string;
        senderParticipantCode?: number;
        senderPersonType?: number;
        senderPhoneNumber?: string;
        senderTaxOffice?: string;
        state?: number;
        statusReason?: number;
        systemDate?: Date;
        taxAmount?: number;
        transactionBranchId?: number;
        transferToEFT?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        uSDAmount?: number;
        userName?: string;
        withoutLimit?: number;
        workFlowInstanceId?: number;
    }
    interface OutGoingEFTTranContract extends BOA.Common.Types.ContractBase {
        approveUserName?: string;
        businessKey?: number;
        errorCode?: string;
        hostName?: string;
        outGoingEFTId?: number;
        reverseBusinessKey?: number;
        state?: number;
        stateDetail?: number;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
    interface OutGoingEFTTranRequest extends BOA.Common.Types.RequestBase {
        approveUserName?: string;
        businessKey?: number;
        dataContract?: BOA.Types.Kernel.Treasury.EFT.OutGoingEFTTranContract;
        errorCode?: string;
        hostName?: string;
        outGoingEFTId?: number;
        reverseBusinessKey?: number;
        state?: number;
        tranDate?: Date;
        tranRef?: string;
        tranType?: number;
        userName?: string;
        workFlowInstanceId?: number;
    }
}
declare namespace BOA.Types.Kernel.Treasury.EMKT {
    interface Constants {
    }
}
declare namespace BOA.Types.Kernel.Treasury.EMKT.Constants {
    export const enum OutgoingEMKTStatus {
        WaitingForClient = 1,
        MessageBeingProcessed = 2,
        TransmittedToTCMB = 3,
        TransmittedToReceiverBank = 4,
        CancellationRequested = 5,
        Cancelled = 6,
        Error = 7,
        Deleted = 8,
        Completed = 9,
        SentByAdup = 10,
        PreRegistration = 11
    }
}
declare namespace BOA.Types.Kernel.Treasury.EquityMarket {
    interface AccountPortfolioContract extends BOA.Common.Types.ContractBase {
        cost?: number;
        intermediaryAccountNumber?: number;
        price?: number;
        quantity?: number;
        securityCode?: string;
        securityGroup?: string;
        securityGroupCode?: string;
        sellableCount?: number;
        shortSelling?: number;
        totalValue?: number;
    }
    interface AccountPortfolioSummaryContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        dailyCommissionAddedNetProcessValue?: number;
        intermediaryAccountNumber?: number;
        liquidOverall?: number;
        portfolioStockQuantity?: number;
        processLimit?: number;
        simpleAccountBalance?: BOA.Types.Kernel.Treasury.EquityMarket.SimpleAccountBalanceContract;
        t1CurrentBalance?: number;
        t1NetBalance?: number;
        t2CreditBalance?: number;
        t2CurrentBalance?: number;
        tCurrentBalance?: number;
        totalPortfolioValue?: number;
    }
    interface CorporationAccountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        accountType?: number;
        branchId?: number;
        channelName?: string;
        corporationAccountId?: number;
        corporationChannelId?: number;
        corporationName?: string;
        fec?: number;
        hostIP?: string;
        hostName?: string;
        subCorporationCode?: string;
        subCorporationName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationChannelContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        corporationChannelId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        status?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.RecordStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        workBeginTime?: string;
        workEndTime?: string;
    }
    interface CorporationConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configProdValue?: string;
        configTestValue?: string;
        corporationConfigId?: number;
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        configList?: BOA.Types.Kernel.Treasury.EquityMarket.CorporationConfigContract[];
        corporationId?: number;
        dataConnectionType?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.ConnectionType;
        digitCount?: number;
        hasMultipleWebService?: number;
        hostIP?: string;
        hostName?: string;
        isDefault?: number;
        keyword?: string;
        name?: string;
        processType?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.ProcessType;
        reconConnectionType?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.ConnectionType;
        status?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.RecordStatus;
        systemDate?: Date;
        unconformityDayCount?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CorporationErrorContract extends BOA.Common.Types.ContractBase {
        corporationErrorId?: number;
        corporationId?: number;
        errorCode?: string;
        errorDescription?: string;
        errorUIDescription?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        languageName?: string;
        methodName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CustomerAccountContract extends BOA.Common.Types.ContractBase {
        accountClass?: number;
        bankAccountNumber?: string;
        bankCifNumber?: string;
        beginPortfolioValue?: number;
        borrowedBrokerage?: number;
        borrowedOpeningBrokerage?: string;
        bPCommission?: number;
        bPPBrokerage?: number;
        branchCode?: number;
        bSMV?: number;
        clearingRegisterNumber?: number;
        commercialRegistersAgency?: string;
        commissionReturn?: string;
        companyName?: string;
        companyPerson?: string;
        countryCode?: string;
        creditLimit?: string;
        customerGroup?: string;
        customerIdCounter?: number;
        customerName?: string;
        customerNumber?: number;
        customerSurname?: string;
        customerType?: string;
        dailyStockBrokerage?: string;
        dealer?: string;
        deliveryType?: string;
        foreignStockCommission?: number;
        hBDTBrokerage?: number;
        interest?: string;
        interestMethod?: string;
        interestType?: number;
        internetBrokerage?: string;
        intraDayCommissionReturn?: string;
        joint?: number;
        liability?: string;
        mainAccount?: number;
        maxCreditLimit?: number;
        mKKInsertDate?: Date;
        mKKSector?: string;
        mKKSubSektor?: string;
        mKKSwift?: string;
        mKKVIdentityTitle?: string;
        notes?: string;
        openingCause?: string;
        partnershipType?: string;
        penalty?: string;
        poolNumber?: number;
        previousServer?: string;
        pYCommission?: string;
        resource?: number;
        resourceGuardRatio?: number;
        standard?: number;
        status?: string;
        stockBrokerage?: string;
        taxId?: string;
        taxPlace?: string;
        tradeId?: string;
        vOBBrokerage?: string;
        whoesReference?: string;
    }
    interface CustomerAccountIdentityRelationContract extends BOA.Common.Types.ContractBase {
        bankCIFNumber?: string;
        customerNumber?: number;
        language?: string;
        liability?: string;
        shareRatio?: number;
    }
    interface CustomerAddressContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressType?: string;
        businessAreaCode?: number;
        businessPhoneNumber?: string;
        cityCode?: number;
        clearingGuardCommission?: string;
        countryCode?: string;
        countyCode?: string;
        currencyCost?: string;
        customerNumber?: number;
        dailyExtre?: string;
        eFTCost?: string;
        eMail?: string;
        eMailCost?: string;
        exemptionEndDate?: Date;
        extreLanguage?: number;
        faxAreaCode?: number;
        faxCost?: string;
        faxNumber?: string;
        gSMAreaCode?: number;
        gSMNumber?: string;
        homeAreaCode?: number;
        homePhoneNumber?: string;
        monthlyBulletin?: string;
        monthlyExtre?: string;
        operatingCost?: string;
        postalCode?: string;
        postalCost?: string;
        preEmptiveRight?: string;
        sMSCost?: string;
        temKulTax?: string;
        transferCost?: string;
        vOBStockMarket?: string;
        weeklyExtre?: string;
    }
    interface CustomerAgreementContract extends BOA.Common.Types.ContractBase {
        contractEndDate?: Date;
        contractNumber?: string;
        contractStartDate?: Date;
        contractType?: number;
        customerNumber?: number;
    }
    interface CustomerIdentityContract extends BOA.Common.Types.ContractBase {
        address?: string;
        addressCityCode?: number;
        addressCountyCode?: string;
        addressType?: string;
        bankCIFNumber?: string;
        birthCityCode?: string;
        birthCountry?: string;
        birthDate?: Date;
        cIFNumber?: number;
        citizenshipNumber?: string;
        cityCode?: number;
        cityFaxAreaCode?: number;
        cityGSMAreaCode?: number;
        cityPhoneAreaCode?: number;
        clearingRegisterNumber?: number;
        commercialRegisterNumber?: string;
        countryCode?: string;
        cover?: string;
        customerName?: string;
        dateOfIssue?: Date;
        eMail?: string;
        familyCountNumber?: string;
        fatherName?: string;
        fax?: string;
        gender?: string;
        gSMNumber?: string;
        identityType?: string;
        localCode?: string;
        maritalStatus?: string;
        motherMaidenSurname?: string;
        motherName?: string;
        orderNumber?: string;
        personalQuestion?: string;
        personType?: string;
        phoneNumber?: string;
        placeOfIssue?: string;
        postalCode?: string;
        profession?: string;
        response?: string;
        serialNumber?: string;
        surname?: string;
        taxNumber?: string;
        taxOffice?: string;
        village?: string;
    }
    interface DailyAccountInfoContract extends BOA.Common.Types.ContractBase {
        conditionPrice?: number;
        conditionPriceDirection?: string;
        conditionPriceType?: string;
        conditionSession?: string;
        conditionSymbol?: string;
        conditionType?: string;
        createDate?: string;
        customerBranch?: string;
        execPrice?: number;
        expireDate?: string;
        iBST?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.OrderTransactionType[];
        intermediaryAccountNumber?: string;
        leftAmount?: number;
        limitType?: BOA.Types.Kernel.Treasury.EquityMarket.LimitTypeContract;
        maxFloor?: number;
        orderAmount?: number;
        orderNumber?: string;
        orderPeriod?: BOA.Types.Kernel.Treasury.EquityMarket.OrderPeriodContract;
        price?: number;
        securityCode?: string;
        securityTypeCode?: string;
        sessionId?: string;
        status?: string;
        statusDescription?: string;
        total?: number;
        typeOfOrder?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.OrderType;
        valorDate?: string;
    }
    interface EnumExtensions {
    }
    interface LimitTypeContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        isVisible?: number;
        languageId?: number;
        limitTypeCode?: string;
        orderPriceForceType?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.PriceForceType;
        status?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.RecordStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface LimitTypeOrderPeriodContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        limitTypeCode?: string;
        orderPeriodCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface OrderPeriodContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        orderPeriodCode?: string;
        status?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.RecordStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PriceStepContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        priceRangeEndAmount?: number;
        priceRangeStartAmount?: number;
        priceStepAmount?: number;
        priceStepId?: number;
        securityTypeCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface RiskGroupTypeContract extends BOA.Common.Types.ContractBase {
        approvalStatus?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.ApprovalType;
        attachmentPath?: string;
        description?: string;
        documentName?: string;
        hostIP?: string;
        hostName?: string;
        languageId?: number;
        riskGroupTypeCode?: string;
        status?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.RecordStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SecurityContract extends BOA.Common.Types.ContractBase {
        description?: string;
        hostIP?: string;
        hostName?: string;
        indexType?: number;
        iSIN?: string;
        issuerName?: string;
        riskGroupTypeCode?: string;
        securityCode?: string;
        securityGroupCode?: string;
        securityTypeCode?: string;
        status?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.RecordStatus;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface SimpleAccountBalanceContract extends BOA.Common.Types.ContractBase {
        availableBalance?: number;
        totalAmount?: number;
        withholdingAmount?: number;
    }
    interface StockCommon {
    }
    interface StockCustomerContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        canProcess?: boolean;
        commissionRate?: number;
        complianceTestScore?: number;
        customerAccount?: BOA.Types.Kernel.Treasury.EquityMarket.CustomerAccountContract;
        customerAccountIdentityRelation?: BOA.Types.Kernel.Treasury.EquityMarket.CustomerAccountIdentityRelationContract;
        customerAddress?: BOA.Types.Kernel.Treasury.EquityMarket.CustomerAddressContract;
        customerAgreement?: BOA.Types.Kernel.Treasury.EquityMarket.CustomerAgreementContract;
        customerIdentity?: BOA.Types.Kernel.Treasury.EquityMarket.CustomerIdentityContract;
        documentStatus?: number;
        hostIP?: string;
        hostName?: string;
        insertDate?: Date;
        intermediaryAccountNumber?: number;
        isBSMVAdded?: number;
        licenceType?: number;
        mKKCustomerCode?: string;
        status?: number;
        stockCustomerId?: number;
        systemDate?: Date;
        transactionStatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        withPersonInfo?: boolean;
    }
    interface StockOrderContract extends BOA.Common.Types.ContractBase {
        blockingAmount?: number;
        businessKey?: number;
        channelId?: number;
        comissionAmount?: number;
        corporationId?: number;
        externalIPAddress?: string;
        hostIP?: string;
        hostName?: string;
        incomingReferenceNumber?: string;
        intermediaryAccountNumber?: number;
        internelIPAddress?: string;
        limitTypeCode?: string;
        lotCount?: number;
        netAmount?: number;
        orderType?: number;
        outgoingReferenceNumber?: string;
        securityCode?: string;
        securityGroupCode?: string;
        stockOrderId?: number;
        systemDate?: Date;
        transactionDate?: Date;
        transactionTime?: any;
        unitPrice?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface StockOrderResponseContract extends BOA.Common.Types.ContractBase {
        isSucceed?: boolean;
        orderReferenceNumber?: string;
    }
    interface StockPriceBaseContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        previousClosingPrice?: number;
        priceCeiling?: number;
        priceFloor?: number;
        securityCode?: string;
        securityGroupCode?: string;
        status?: BOA.Types.Kernel.Treasury.EquityMarket.StockCommon.RecordStatus;
        stockPriceBaseId?: number;
        systemDate?: Date;
        transactionDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface StockPriceContract extends BOA.Common.Types.ContractBase {
        averagePrice?: number;
        barsInTrade?: number;
        buyPrice?: number;
        highestPrice?: number;
        lastPrice?: number;
        lowestPrice?: number;
        percentageChange?: number;
        priceStepList?: number[];
        sellPrice?: number;
        stockPriceStepBase?: BOA.Types.Kernel.Treasury.EquityMarket.StockPriceBaseContract;
        volume?: number;
    }
    interface StockServiceContract extends BOA.Common.Types.ContractBase {
        expiryTime?: number;
        externalIp?: string;
        internalIp?: string;
        languageId?: number;
        limitType?: BOA.Types.Kernel.Treasury.EquityMarket.LimitTypeContract;
        orderPeriod?: BOA.Types.Kernel.Treasury.EquityMarket.OrderPeriodContract;
        ordino?: string;
        price?: number;
        quantity?: number;
        referenceNumber?: string;
        security?: BOA.Types.Kernel.Treasury.EquityMarket.SecurityContract;
        stockCustomer?: BOA.Types.Kernel.Treasury.EquityMarket.StockCustomerContract;
    }
    interface SubCorporationContract extends BOA.Common.Types.ContractBase {
        corporationId?: number;
        hostIP?: string;
        hostName?: string;
        name?: string;
        subCorporationCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface WithholdingContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        blockingAmount?: number;
        intermediaryAccountNumber?: number;
        referenceNumber?: string;
        securityTypeCode?: string;
        stockCustomerId?: number;
    }
}
declare namespace BOA.Types.Kernel.Treasury.EquityMarket.Extensions {
    interface IEnumerableExtensions {
    }
    interface StringExtensions {
    }
}
declare namespace BOA.Types.Kernel.Treasury.EquityMarket.StockCommon {
    export const enum AccountClass {
        InvestorCustodianAccount = 1,
        PortfolioInvestorCustodianAccount = 2,
        InvestmentFundCustodianAccount = 3,
        AKCustodianAccount = 4,
        PublicOffering = 5,
        IssuerShareAccount = 6
    }
    export const enum AccountOpeningStandartTypes {
        Default = 0,
        EquityCompany = 2
    }
    export const enum ApprovalType {
        None = 1,
        Mandatory = 2
    }
    export const enum BSMVIndicator {
        Excluded = 0,
        Included = 1
    }
    export const enum ConnectionType {
        Online = 1,
        Offline = 2
    }
    export const enum CorporationErrorType {
        All = 1,
        OnlyUI = 2,
        OnlyBatch = 3
    }
    export const enum CorporationMaritalStatus {
        E = 0,
        B = 1,
        D = 2
    }
    export const enum CustomerClass {
        Professional = 1,
        CustomizedProfessional = 2,
        General = 3,
        Other = 4
    }
    export const enum CustomerStatus {
        WillBeSent = 0,
        WaitingResponse = 1,
        Active = 2,
        Passive = 3,
        Blocked = 4,
        Distrained = 5
    }
    export const enum CustomerTransactionStatus {
        Opened = 0,
        Closed = 1,
        TemporaryClosed = 2,
        Inactive = 3,
        ClearingClosed = 4,
        Demand = 5
    }
    export const enum CustomerTypeForStockBrokerage {
        Personnel = 1,
        Other = 2
    }
    export const enum DataVendor {
        Corporation = 1,
        Other = 2
    }
    export const enum DocumentStatus {
        Waiting = 1,
        Sent = 2
    }
    export const enum IndexType {
        Participation = 1,
        Other = 2
    }
    export const enum InterestTypes {
        OrdinaryWeeklyInterest = 1,
        CompoundWeeklyInterest = 2,
        OrdinaryDailyInterest = 3,
        CompoundDailyInterest = 4,
        OrdinaryMonthlyInterest = 5,
        CompoundMonthlyInterest = 6
    }
    export const enum JointTypes {
        Singular = 0,
        Joint = 1
    }
    export const enum MaritalStatus {
        Married = 0,
        Single = 1,
        Other = 2,
        Divorced = 3,
        Widow = 4
    }
    export const enum MKKCustomerStatus {
        General = 1,
        Professional = 4
    }
    export const enum OrderTransactionType {
        Improve = 1,
        Divisable = 2,
        Revocable = 3,
        TimeImprove = 4
    }
    export const enum OrderType {
        Buy = 1,
        Sell = 2
    }
    export const enum PhoneType {
        Telefon = 1,
        Faks = 2,
        Gsm = 3,
        CallCenter = 4
    }
    export const enum PriceForceType {
        CurrentPrice = 1,
        SelectedPrice = 2
    }
    export const enum ProcessType {
        Withholding = 1,
        Unrestricted = 2
    }
    export const enum ReconStatus {
        Empty = 0,
        Successful = 1,
        UnSuccessful = 2
    }
    export const enum ReconType {
        Automatic = 1,
        Manual = 2
    }
    export const enum RecordStatus {
        Active = 1,
        Passive = 2
    }
    export const enum SecurityType {
        Equity = 1,
        Debt = 2,
        Derivative = 3
    }
}
declare namespace BOA.Types.Kernel.Treasury.FX {
    interface Constants {
    }
    interface PortfolioContract extends BOA.Common.Types.ContractBase {
        countryCode?: string;
        functionalFec?: number;
        hostIP?: string;
        hostName?: string;
        inventoryTypeNo?: number;
        isActive?: boolean;
        isTradable?: boolean;
        legalVehicleNo?: number;
        localFec?: number;
        parentNo?: number;
        portfolioCode?: string;
        portfolioFlags?: number;
        portfolioName?: string;
        portfolioNo?: number;
        portfolioPath?: string;
        prfTypeNo?: number;
        systemDate?: Date;
        timeZoneNo?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.Treasury.FX.Constants {
    interface PortfolioFlags {
    }
    interface RootPortfolioPaths {
    }
    interface StateFlags {
    }
}
declare namespace BOA.Types.Kernel.Treasury.InvestmentFund {
    interface AvailableInvestmentFundTransactionCostContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        availableQuantity?: number;
        costId?: string;
        fundCode?: string;
        fundName?: string;
        investmentFundId?: number;
        iSIN?: string;
    }
    interface InvestmentFundConstants {
    }
    interface InvestmentFundEvaluatedContract extends BOA.Common.Types.ContractBase {
        actualPrice?: number;
        calculatedAmount?: number;
        calculatedQuantity?: number;
        code?: string;
        definitionDate?: Date;
        fec?: number;
        investmentFundId?: number;
        isBuy?: boolean;
        iSIN?: string;
        isSell?: boolean;
        mKKCustomerCode?: string;
        nonWorkingDaysList?: Date[];
        pricesAtPriceDate?: BOA.Types.Kernel.FX.InvestmentFundPriceViewContract;
        pricesAtReferenceDate?: BOA.Types.Kernel.FX.InvestmentFundPriceViewContract;
        priceValueDate?: Date;
        referenceDate?: Date;
        referencePrice?: number;
        shiftedValueDate?: Date;
        transactionType?: string;
        usesAskRate?: boolean;
        usesBidRate?: boolean;
        valueDate?: Date;
        valueDateShifted?: boolean;
    }
    interface InvestmentFundPortfolioReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        costAmount?: number;
        customerName?: string;
        expectedPNL?: number;
        fecCode?: string;
        fecId?: number;
        fundCode?: string;
        fundName?: string;
        iSIN?: string;
        marketValue?: number;
        marketValueInTL?: number;
        quantity?: number;
        reportDate?: Date;
    }
    interface InvestmentFundTransactionContract extends BOA.Common.Types.ContractBase {
        accountBranchId?: number;
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        branchId?: number;
        businessKey?: number;
        cashAccount?: string;
        channelId?: number;
        dealDate?: Date;
        description?: string;
        fec?: number;
        fundCode?: string;
        fundName?: string;
        hostIp?: string;
        hostName?: string;
        investmentFundId?: number;
        investmentFundTransactionId?: number;
        isAmount?: boolean;
        isCustomerBuy?: boolean;
        isCustomerSell?: boolean;
        isPriceValueDateT0?: boolean;
        isQuantity?: boolean;
        isRepurchase?: boolean;
        isSell?: boolean;
        isSubjectedToStoppage?: boolean;
        isTEFASQuotation?: boolean;
        mKKCustomerCode?: string;
        mKKCustomerFundAccount?: number;
        orderStatus?: string;
        priceValueDate?: Date;
        processStatus?: number;
        quantity?: number;
        realizedAmount?: number;
        realizedPrice?: number;
        realizedQuantity?: number;
        referencePrice?: number;
        settlementValueDate?: Date;
        status?: number;
        stoppageAccountBranchId?: number;
        stoppageAccountNumber?: number;
        stoppageAccountSuffix?: number;
        stoppageFEC?: number;
        systemDate?: Date;
        transactionFlags?: number;
        transactionMethod?: string;
        transactionQuantityChoice?: string;
        transactionType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        wFInstanceId?: number;
        withholdingId?: number;
    }
    interface InvestmentFundTransactionCostContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        costId?: string;
        fIFOType?: string;
        hostIP?: string;
        hostName?: string;
        investmentFundId?: number;
        investmentFundTransactionCostId?: number;
        price?: number;
        quantity?: number;
        stoppageAmount?: number;
        stoppageBalance?: number;
        stoppagePayAmount?: number;
        stoppageProfitAmount?: number;
        systemDate?: Date;
        transactionId?: number;
        transactionType?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
    }
    interface TefasConstants {
    }
    interface TefasOrderMonitorContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        businessKey?: number;
        calculatedAmount?: number;
        calculatedQuantity?: number;
        cancelDate?: Date;
        cancelUser?: string;
        cashAccount?: string;
        counterpartyMember?: string;
        custodianApproveRejectDate?: Date;
        custodianApproveRejectUser?: string;
        custodianCustomerAccount?: number;
        custodianCustomerCode?: string;
        custodianCustomerName?: string;
        custodianMember?: string;
        entryDate?: Date;
        entryUser?: string;
        fundCode?: string;
        hostIp?: string;
        hostName?: string;
        investmentFundId?: number;
        matchedQuantity?: number;
        memberDebtAmount?: number;
        memberDebtQuantity?: number;
        memberReferenceNumber?: number;
        nettingFlag?: string;
        orderCustomerAccount?: number;
        orderCustomerCode?: string;
        orderEntryPrice?: number;
        orderMember?: string;
        orderNumber?: number;
        orderType?: string;
        processStatus?: string;
        quantity?: number;
        realizationDate?: Date;
        realizationNumber?: number;
        realizedAmount?: number;
        realizedPrice?: number;
        realizedQuantity?: number;
        rejectExplanation?: string;
        status?: string;
        statusDescription?: string;
        systemDate?: Date;
        tefasOrderMonitorId?: number;
        transactionMethod?: string;
        transactionQuantityChoice?: string;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
    }
}
declare namespace BOA.Types.Kernel.Treasury.InvestmentFund.InvestmentFundConstants {
    interface Formatting {
    }
    interface InvestmentFundCostGeneratorTypes {
    }
    interface InvestmentFundProcessStatus {
    }
    interface InvestmentFundStateFlags {
    }
    interface InvestmentFundTransactionFlags {
    }
    interface TEFASProcessingStates {
    }
    interface TEFASStates {
    }
    interface TefasTimes {
    }
    interface TransactionMethod {
    }
    interface TransactionQuantityChoice {
    }
    interface TransactionType {
    }
}
declare namespace BOA.Types.Kernel.Treasury.InvestmentFund.TefasConstants {
    interface IslemTip {
    }
    interface IslemYontem {
    }
}
declare namespace BOA.Types.Kernel.Treasury.RTNSConstants {
    export const enum DealExecutionType {
        NEW = 1,
        MODIFICATION = 2,
        CANCELLATION = 3
    }
    export const enum DealRole {
        MAKER = 1,
        TAKER = 2
    }
    export const enum FxCrossDealType {
        SPOT = 1,
        FORWARD = 2,
        NDF = 3,
        SWAP = 4,
        BLOCK = 5
    }
    export const enum LegType {
        SPOT = 1,
        FORWARD = 2,
        NDF = 3,
        SWAP_NEAR = 4,
        SWAP_FAR = 5
    }
    export const enum YesOrNo {
        Y = 1,
        N = 2
    }
}
declare namespace BOA.Types.Kernel.Treasury.Sukuk {
    export const enum MarketCodes {
        OTC = 0,
        IHALE = 1
    }
    export const enum TransactionType {
        CTP = 0,
        CTS = 1
    }
    interface AvailableSukukTransactionCostContract {
        accountNumber?: number;
        availableNominal?: number;
        costId?: string;
        iSIN?: string;
        securityId?: number;
    }
    interface SukukConstants {
    }
    interface SukukPortfolioReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        availableNominal?: number;
        costAmount?: number;
        customerName?: string;
        daysToMaturity?: number;
        isin?: string;
        isoCode?: string;
        marketValue?: number;
        maturityDate?: Date;
        nominalBalance?: number;
        paymentAmount?: number;
        paymentDate?: Date;
    }
    interface SukukTransactionAccountingRequest extends BOA.Common.Types.TransactionRequestBase {
        accountingDescription?: string;
        accountingReverseBusinessKey?: number;
        accountingReverseOperation?: BOA.Common.Types.ReverseOperation;
        assetAmountLedgerId?: string;
        branchCostGain?: number;
        bsmvAmount?: number;
        commissionContract?: BOA.Common.Types.CommissionContract;
        commissionDescription?: string;
        commissionReverseBusinessKey?: number;
        commissionReverseOperation?: BOA.Common.Types.ReverseOperation;
        contingentNominalLedgerId?: string;
        contingentOffsetNominalLedgerId?: string;
        custodianAccountNumber?: number;
        custodianAccountSuffix?: number;
        dataContract?: BOA.Types.Kernel.Treasury.Sukuk.SukukTransactionContract;
        gainAmount?: number;
        iSIN?: string;
        issuerAccountNumber?: number;
        issuerAccountSuffix?: number;
        lossAmount?: number;
        stoppagePayAmount?: number;
    }
    interface SukukTransactionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchCostDirtyPrice?: number;
        branchId?: number;
        businessKey?: number;
        channelId?: number;
        currentAccountBranchId?: number;
        currentAccountSuffix?: number;
        customerName?: string;
        dealAmount?: number;
        dealDate?: Date;
        depotNo?: string;
        executionState?: number;
        executionTime?: Date;
        hostIP?: string;
        hostName?: string;
        instructions?: string;
        isSubjectedToStoppage?: boolean;
        isUnitDirtyPriceChanged?: boolean;
        marketCode?: string;
        nominal?: number;
        portfolioPath?: string;
        proposedCleanPrice?: number;
        proposedDirtyPrice?: number;
        securityId?: number;
        state?: number;
        stoppageAccountBranchId?: number;
        stoppageAccountSuffix?: number;
        sukukTransactionId?: number;
        systemDate?: Date;
        transactionType?: string;
        transactionTypeDesc?: string;
        unitCleanPrice?: number;
        unitDirtyPrice?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
        wFInstanceId?: number;
    }
    interface SukukTransactionCostContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        activeCouponNo?: number;
        costId?: string;
        depoNo?: string;
        fIFOType?: string;
        hostIP?: string;
        hostName?: string;
        iSIN?: string;
        nominal?: number;
        originalCostDate?: Date;
        portfolioPath?: string;
        securityId?: number;
        stoppageAmount?: number;
        stoppageBalance?: number;
        stoppagePayAmount?: number;
        stoppagePND?: number;
        stoppagePNDRemaining?: number;
        stoppageProfitAmount?: number;
        stoppageRENC?: number;
        sukukTransactionCostId?: number;
        systemDate?: Date;
        transactionId?: number;
        transactionType?: string;
        unitCleanPrice?: number;
        unitDirtyPrice?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        valueDate?: Date;
    }
    interface SukukTransactionReportContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        branchName?: string;
        businessKey?: number;
        customerName?: string;
        daysToMaturity?: number;
        dealAmount?: number;
        dealDate?: Date;
        iSIN?: string;
        iSOCode?: string;
        issueDate?: Date;
        marketCodeDesc?: string;
        maturityDate?: Date;
        nominal?: number;
        transactionType?: string;
        unitCleanPrice?: number;
        unitDirtyPrice?: number;
        valueDate?: Date;
        workflowStateName?: string;
    }
    interface SukukTransactionSlipContract extends BOA.Common.Types.ContractBase {
        couponCountToMaturity?: number;
        dayCountToFirstCouponPayment?: number;
        dayCountToMaturity?: number;
        firstCouponPaymentAmount?: number;
        firstCouponPaymentDate?: Date;
        firstCouponPaymentRate?: number;
        issueDate?: Date;
        maturityDate?: Date;
        period?: number;
    }
    interface SukukTransactionSlipRequest extends BOA.Common.Types.TransactionRequestBase {
        slipContract?: BOA.Types.Kernel.Treasury.Sukuk.SukukTransactionSlipContract;
    }
}
declare namespace BOA.Types.Kernel.Treasury.Sukuk.SukukConstants {
    interface ErrorCodes {
    }
}
declare namespace BOA.Types.Kernel.Treasury.TOFConstants {
    interface DealType {
    }
    interface PureDealType {
    }
    interface RateDirection {
    }
    interface SourceOfData {
    }
}
declare namespace BOA.Types.Kernel.Treasury.TradeLimit {
    interface Constants {
    }
    interface FXReferenceTradeLimitCheckContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        afterRiskAmount?: number;
        askAmount?: number;
        beforeRiskAmount?: number;
        bidAmount?: number;
        fecAsk?: number;
        fecBid?: number;
        fXReferenceTradeLimitCheckId?: number;
        hostIP?: string;
        hostName?: string;
        indicativeRate?: number;
        isApproved?: boolean;
        isForward?: boolean;
        limitAmount?: number;
        maturityDate?: Date;
        notionalAmount?: number;
        notionalFEC?: number;
        rawTradeLimitRequest?: string;
        systemDate?: Date;
        tranDate?: Date;
        userName?: string;
    }
    interface FXReferenceTradeLimitExceptionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        channelId?: number;
        fXReferenceTradeLimitExceptionId?: number;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface TradeLimitCalculatedRiskContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        detailGroupCode?: string;
        fec?: number;
        mainGroupCode?: string;
        profitableRisk?: number;
        profitableRiskUSD?: number;
        profitlessRisk?: number;
        profitlessRiskUSD?: number;
        subGroupCode?: string;
    }
}
declare namespace BOA.Types.Kernel.VirtualPOS {
    export const enum AddressType {
        Invoice = 1,
        Delivery = 2
    }
    export const enum CardType {
        NoDefined = 0,
        Visa = 1,
        MasterCard = 2,
        Troy = 3
    }
    export const enum CertificationPaths {
        MasterCardCertificatePath = 1,
        VisaCertificatePath = 2,
        BkmCertificatePath = 3
    }
    export const enum DataPacketType {
        VaResVaReq = 1,
        PaReqPaRes = 2
    }
    export const enum DocumentStatus {
        Passive = 0,
        Active = 1,
        All = 2,
        AllSelectionId = 0,
        SelectionId = 0
    }
    export const enum EndOfDayStatus {
        Open = 1,
        Close = 2
    }
    export const enum EntryGateMethod {
        VPOS_KTPayGate = 0,
        VPOS_ThreeDModelGate = 1,
        VPOS_ThreeDPayGate = 2,
        VPOS_Non3DPayGate = 3,
        VPOS_ThreeDModelPayGate = 4,
        VPOS_NewKTPayGate = 5,
        VPOS_PreAuthorization = 6,
        VPOS_PreAuthorizationReversal = 7,
        VPOS_PreAuthorizationClose = 8,
        INTEGRATION_NonThreeDPaymentByMaskedCards = 9,
        INTEGRATION_NonThreeDPayment = 10,
        INTEGRATION_ThreeDPayment = 11,
        CORPORATE_VirtualPosManuelPos = 12,
        CORPORATE_PaymentSaleEOD = 13,
        CORPORATE_PaymentBatchRetry = 14,
        CORPORATE_MerchantSafeSale = 15,
        INTEGRATION_MerchantSafeSale = 16,
        INTEGRATION_SaleReversal = 17
    }
    export const enum FecType {
        TL = 949
    }
    export const enum MerchantSecurityLevel {
        Only3dSecure = 1,
        All = 0
    }
    export const enum OrderStatus {
        Sale = 1,
        PreAuthorization = 2,
        ClosedPreAuthorization = 3,
        Drawback = 4,
        PartialDrawback = 5,
        SaleReversal = 6,
        IndependentDrawback = 7,
        PendingTransactions = 8,
        Settlement = 9,
        PreAuthorizationReversal = 10,
        ComingReversals = 11,
        IndependentDrawbackReversal = 12,
        MerchantSafeSale = 13
    }
    export const enum OrderType {
        Cash = 1,
        Installment = 2,
        Score = 3
    }
    export const enum PaymentStatus {
        Waiting = 1,
        Finish = 2
    }
    export const enum PERIOD {
        GUN = 1,
        HAFTA = 2,
        AY = 3,
        YIL = 4
    }
    export const enum ProductType {
        Freepos = 1,
        NetTahsilat = 2,
        FreeposNetTahsilat = 3
    }
    export const enum RecordSide {
        Manual = 1,
        Payment = 2,
        Ecommerce = 3,
        Integration = 4
    }
    export const enum Role {
        TamYetkili = 7,
        Izleyici = 8,
        Girisci = 9,
        Onayci = 10,
        Yetkili = 11,
        Api = 99
    }
    export const enum TaskPeriod {
        Dakika = 1,
        Saat = 2,
        Gün = 3
    }
    export const enum TransactionSecurity {
        NonThreeD = 1,
        HalfThreeD = 2,
        ThreeD = 3,
        ExpSign = 4
    }
    export const enum TransactionSide {
        Auto = 1,
        Manuel = 2,
        CommonPayment = 3,
        Integration = 4,
        Payment = 5
    }
    export const enum TransactionStatus {
        Success = 1,
        Fail = 2,
        TimeOut = 3,
        Waiting = 4
    }
    export const enum TransactionType {
        Sale = 1,
        PreAuthorization = 2,
        ClosedPreAuthorization = 3,
        Drawback = 4,
        PartialDrawback = 5,
        SaleReversal = 6,
        IndependentDrawback = 7,
        PendingTransactions = 8,
        Settlement = 9,
        PreAuthorizationReversal = 10,
        GoldSale = 11,
        GoldSaleReversal = 12
    }
    export const enum TroyGOresResultCodes {
        Success = 0,
        ValidationException = 2,
        SystemException = 3,
        UnknownException = 4,
        MACException = 5,
        InvalidStateException = 101,
        UrlExpiredException = 102,
        CounterExceeded = 103,
        TimeOut = 104,
        UserGaveUp = 105,
        IssuerException = 106,
        SimulatedResponse = 96,
        HalfThreeDResponse = 97,
        InvalidReturnCode = 98,
        ReturnCodeNotDefined = 99,
        CHNotEnrolled = 107,
        CHMSISDNNotFound = 108
    }
    export const enum TroySSTIssuerExceptionCodes {
        UnknownError = 1,
        CardholderNotFound = 2,
        CardDataInvalid = 3,
        CardholderMsisdnNotFound = 4,
        MacVerificationFailed = 5,
        IssuerRejected = 6,
        IssuerTimeout = 7,
        InvalidReturnCode = 98,
        ReturnCodeNotDefined = 99
    }
    export const enum TroySSTResponseCodes {
        Success = 0,
        CryptoException = 1,
        ValidationException = 2,
        SystemException = 3,
        UnknownException = 4,
        MacException = 5,
        IssuerBinNotFound = 6,
        IssuerException = 7,
        BankNotFound = 8,
        ExpsignNotSupported = 9,
        SimulatedResponse = 96,
        BkmSstResponseException = 97,
        InvalidReturnCode = 98,
        ReturnCodeNotDefined = 99,
        CardholderMsisdnNotFound = 10
    }
    export const enum VPosUrlType {
        Visa = 0,
        MasterCard = 1,
        JCB = 2,
        VisaPit = 3,
        BKMTest = 4,
        KT3DResTst = 5,
        KT3DResPrd = 6,
        Test = 7
    }
    export const enum VPSEntryMode {
        None = 0,
        Moto = 1
    }
    interface CustomerDefinitionContract extends BOA.Common.Types.ContractBase {
        adressText?: string;
        city?: string;
        country?: string;
        customerDefinitionId?: number;
        customerName?: string;
        district?: string;
        emailAdress?: string;
        extraField1?: string;
        extraField2?: string;
        extraField3?: string;
        extraField4?: string;
        extraField5?: string;
        faxNumber?: string;
        hostIP?: string;
        hostName?: string;
        merchantCustomerId?: number;
        merchantId?: number;
        paymentCustomerId?: number;
        paymentDefinitionId?: number;
        paymentOrderContract?: BOA.Types.Kernel.VirtualPOS.PaymentOrderDefinitionContract;
        phoneNumber?: string;
        postalCode?: string;
        recordSide?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
        vPosMessage?: BOA.Types.Kernel.VirtualPOS.KuveytTurkVPosMessage;
    }
    interface CustomerDefinitionRequest extends BOA.Common.Types.TransactionRequestBase {
        adressText?: string;
        cardContract?: BOA.Types.Kernel.VirtualPOS.PaymentCardContract;
        city?: string;
        country?: string;
        customerName?: string;
        dataContract?: BOA.Types.Kernel.VirtualPOS.CustomerDefinitionContract;
        district?: string;
        emailAdress?: string;
        faxNumber?: string;
        hostIP?: string;
        hostName?: string;
        merchantCustomerNumber?: number;
        merchantId?: number;
        paymentCustomerId?: number;
        paymentDefinitionId?: number;
        phoneNumber?: string;
        postalCode?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface Extensions {
    }
    interface Helper {
    }
    interface KuveytTurkVPosAddress {
        addressId?: number;
        city?: string;
        company?: string;
        country?: string;
        district?: string;
        email?: string;
        faxNumber?: string;
        gSMNumber?: string;
        lastName?: string;
        name?: string;
        orderId?: number;
        phoneNumber?: string;
        postalCode?: string;
        text?: string;
        type?: string;
    }
    interface KuveytTurkVPosMessage {
        additionalData?: BOA.Types.Kernel.VirtualPOS.MerchantMessages.AdditionalData;
        addresses?: BOA.Types.Kernel.VirtualPOS.KuveytTurkVPosAddress[];
        amount?: number;
        aPIVersion?: string;
        batchID?: number;
        cardCVV2?: string;
        cardExpireDateMonth?: string;
        cardExpireDateYear?: string;
        cardHolderIPAddress?: string;
        cardHolderName?: string;
        cardNumber?: string;
        cardType?: string;
        channelCode?: string;
        currencyCode?: string;
        customerEmailAddress?: string;
        customerId?: number;
        customerIPAddress?: string;
        debtId?: number;
        debtorName?: string;
        description?: string;
        displayAmount?: string;
        entryGateMethod?: string;
        enviroment?: string;
        explain?: string;
        explain2?: string;
        explain3?: string;
        expSign?: string;
        failUrl?: string;
        fecAmount?: number;
        hashData?: string;
        hashPassword?: string;
        identityTaxNumber?: string;
        installmentCount?: number;
        merchantId?: number;
        merchantOrderId?: string;
        okUrl?: string;
        orderId?: string;
        orderPOSTransactionId?: number;
        orderType?: string;
        pAResCAVV?: string;
        pAResCAVVAlgorithm?: string;
        pAResECI?: string;
        pAResSignatureTime?: string;
        pAResTransactionStatus?: string;
        paymentId?: number;
        period?: string;
        products?: BOA.Types.Kernel.VirtualPOS.KuveytTurkVPosProduct[];
        provisionNumber?: string;
        qeryId?: number;
        recurrring?: BOA.Types.Kernel.VirtualPOS.KuveytTurkVPosProductRecurringSale;
        rRN?: string;
        safeKey?: string;
        sGKDebtAmount?: number;
        stan?: string;
        subMerchantId?: number;
        surchargeAmount?: number;
        terminalID?: string;
        threeDSecureLevel?: string;
        tranDate?: Date;
        transactionSecurity?: number;
        transactionSide?: string;
        transactionType?: string;
        userName?: string;
        vPSEntryMode?: string;
    }
    interface KuveytTurkVPosProduct {
        description?: string;
        number?: string;
        orderId?: number;
        price?: number;
        productCode?: string;
        productId?: string;
        quantity?: number;
        totalAmount?: number;
    }
    interface KuveytTurkVPosProductRecurringSale {
        iterationCounter?: number;
        paymentId?: string;
        paymentStartDate?: Date;
        periodNumber?: number;
        periodType?: number;
    }
    interface KuveytTurkVPosResponse {
        amount?: number;
        batchID?: string;
        cardCVV2?: string;
        cardExpireDate?: string;
        cardHolderName?: string;
        cardNumber?: string;
        orderID?: number;
        provDate?: string;
        provNo?: string;
        transactionID?: number;
    }
    interface ManagedPSEContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        batchId?: number;
        canceledAmount?: number;
        canceledCount?: number;
        cardNumber?: string;
        cAVV?: string;
        count?: number;
        currencyCode?: string;
        cvv2?: string;
        eCI?: string;
        expireDate?: string;
        fecAmount?: string;
        installmentCount?: number;
        isCVVRequired?: boolean;
        isRecurringEnabled?: boolean;
        mailOrTelephoneOrder?: boolean;
        merchantOrderId?: string;
        orderId?: number;
        orderPosTxnId?: number;
        originalMerchantOrderId?: string;
        originalRRN?: string;
        originalStan?: string;
        posMerchantId?: string;
        provisionNumber?: string;
        sGKPeriod?: string;
        surchargeAmount?: string;
        terminalID?: string;
        totalAmount?: number;
        totalCount?: number;
        transactionId?: string;
    }
    interface MerchantDefinitionContract extends BOA.Common.Types.ContractBase {
        batchId?: number;
        customerId?: number;
        cVV2Requeired?: boolean;
        email?: string;
        firmOwner?: string;
        hostIP?: string;
        hostName?: string;
        iPRequeired?: boolean;
        isRecurringEnabled?: boolean;
        masterCardBin?: string;
        masterCardMerchantNumber?: string;
        masterCardPassword?: string;
        merchantId?: number;
        merchantIP?: string;
        merchantName?: string;
        password?: string;
        phoneNumber?: string;
        posMerchantId?: string;
        posTerminalId?: string;
        productType?: number;
        securityLevel?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userCode?: string;
        userName?: string;
        userRole?: number;
        visaBin?: string;
        visaMerchantNumber?: string;
        visaPassword?: string;
        webAddress?: string;
    }
    interface MerchantIpContract extends BOA.Common.Types.ContractBase {
        id?: number;
        iPAdress?: string;
        merchantId?: number;
    }
    interface Order3DTransactionContract extends BOA.Common.Types.ContractBase {
        acquirerBIN?: string;
        cardExpireDate?: string;
        cardPan?: string;
        cRErrorMessage?: string;
        cRVendorCode?: string;
        currencyExponent?: number;
        displayAmount?: string;
        merchantCountryCode?: string;
        merchantId?: number;
        merchantName?: string;
        merchantURL?: string;
        messageVersionNumber?: string;
        mpiMerchantNumber?: string;
        mpiMerchantPassword?: string;
        orderId?: number;
        pAErrorMessage?: string;
        pAResCAVV?: string;
        pAResCAVVAlgorithm?: string;
        pAResCAVVEncrypted?: string;
        pAResECI?: string;
        pAResSignatureTime?: string;
        pAResTransactionStatus?: string;
        pAVendorCode?: string;
        purchaseAmount?: string;
        purchaseCurrency?: string;
        purchaseTime?: string;
        termURL?: string;
        tranDate?: Date;
        transactionId?: string;
        vEErrorMessage?: string;
        vEResAccountIdentifier?: string;
        vEResACSUrl?: string;
        vEResPANAuthAvailable?: string;
        vEResPaymentProtocols?: string;
        vEVendorCode?: string;
    }
    interface OrderDetailContract extends BOA.Types.Kernel.VirtualPOS.Order3DTransactionContract {
        batchId?: number;
        cardNumber?: string;
        customerId?: number;
        cVV2?: string;
        cVV2Encrypted?: string;
        failURL?: string;
        hostIP?: string;
        hostName?: string;
        instalmentCount?: number;
        merchantOrderId?: string;
        merchantUserName?: string;
        orderPOSTransactionId?: number;
        password?: string;
        period?: string;
        posMerchantId?: string;
        posTerminalId?: string;
        provNumber?: string;
        responseCode?: string;
        responseExplain?: string;
        rRN?: string;
        securityLevel?: number;
        stan?: string;
        successURL?: string;
        surchargeAmount?: number;
        transactionSecurity?: number;
        transactionStatus?: number;
    }
    interface PaymentCardContract extends BOA.Common.Types.ContractBase {
        cardHolderName?: string;
        cardId?: number;
        cardNumber?: string;
        cVV2?: string;
        cVV2Encrypted?: string;
        expiryDate?: string;
        isActive?: boolean;
        merchantId?: number;
        paymentCustomerId?: number;
        safeKey?: string;
        sortNumber?: number;
    }
    interface PaymentOrderDefinitionContract extends BOA.Common.Types.ContractBase {
        altCardExpiryDate?: string;
        altCardHolderName?: string;
        altCVV2?: string;
        altCVV2Encrypted?: string;
        alternativeCardNumber?: string;
        amount?: number;
        cardExpiryDate?: string;
        cardHolderName?: string;
        cardNumber?: string;
        cVV2?: string;
        cVV2Encrypted?: string;
        extraField1?: string;
        extraField2?: string;
        extraField3?: string;
        extraField4?: string;
        extraField5?: string;
        fec?: string;
        fileId?: number;
        hostIP?: string;
        hostName?: string;
        isActive?: boolean;
        iterationCounter?: number;
        lastSelectedTime?: Date;
        lastTryCount?: number;
        lockProcess?: boolean;
        merchantId?: number;
        orderId?: number;
        orderStatus?: number;
        parentPaymentId?: number;
        paymentCustomerId?: number;
        paymentId?: number;
        paymentList?: any;
        paymentStartDate?: Date;
        paymentStatus?: number;
        periodNumber?: number;
        periodType?: number;
        provNumber?: string;
        recordSide?: number;
        systemDate?: Date;
        transactionStatus?: number;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PaymentOrderDefinitionRequest extends BOA.Common.Types.TransactionRequestBase {
        altCardExpirationNumber?: Date;
        altCVV2?: string;
        alternativeCardNumber?: string;
        amount?: number;
        cardExpirationNumber?: Date;
        cardNumber?: string;
        cVV2?: string;
        dataContract?: BOA.Types.Kernel.VirtualPOS.PaymentOrderDefinitionContract;
        explain?: string;
        explain2?: string;
        explain3?: string;
        explain4?: string;
        explain5?: string;
        fecCode?: string;
        hostIP?: string;
        hostName?: string;
        iterationCounter?: number;
        merchantId?: number;
        orderStatus?: number;
        paymentCustomerId?: number;
        paymentStartDate?: Date;
        period?: string;
        provNumber?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface PSEContract extends BOA.Common.Types.ContractBase {
        acquiringId?: string;
        additionalData?: string;
        amount?: string;
        batchNo?: string;
        cardNumber?: string;
        currencyCode?: string;
        expireDate?: string;
        merchantID?: string;
        posConditionMode?: string;
        posEntryMode?: string;
        processingCode?: string;
        provisionNumber?: string;
        responseCode?: string;
        rRN?: string;
        sTAN?: string;
        terminalID?: string;
        transactionDate?: string;
        transactionTime?: string;
    }
    interface PSEResponseContract {
        provisionNumber?: string;
        requestString?: string;
        responseCode?: string;
        responseMessage?: string;
        responseString?: string;
        rrn?: string;
        stan?: string;
    }
    interface ResourceHelper {
    }
    interface ResponseMessageContract extends BOA.Common.Types.ContractBase {
        responseCode?: number;
        responseMessage?: string;
    }
    interface SettlementContract extends BOA.Common.Types.ContractBase {
        batchId?: number;
        drawbackOrderAmount?: number;
        drawbackOrderCount?: number;
        fec?: string;
        merchantId?: number;
        saleOrderAmount?: number;
        saleOrderCount?: number;
        sumOfOrderAmount?: number;
        sumOfOrderCount?: number;
    }
    interface TroyGoLiterals {
        acquirerId?: string;
        bkmCertificateKey?: string;
        gmgId?: string;
        gOreqMessageVersion?: string;
        goSecureController?: string;
        goThreeDModelController?: string;
        ktAESKey?: string;
        ktCertificateKey?: string;
        sstMessageVersion?: string;
        testKey?: string;
        timeFormat?: string;
        troyGoDebugKey?: string;
        troyGoDebugValue?: string;
        troyGoMD?: string;
        troySSTRequestURLKey?: string;
    }
    interface TroyGOreqDataContract {
        expiry?: string;
        goStamp?: string;
        id?: string;
        mac?: string;
        time?: string;
        version?: string;
    }
    interface TroyGOresDataContract {
        expSign?: string;
        id?: string;
        mac?: string;
        merchantData?: string;
        refId?: string;
        result?: BOA.Types.Kernel.VirtualPOS.TroyGOresResult;
        time?: string;
        version?: string;
    }
    interface TroyGOresResult {
        code?: string;
        description?: string;
        message?: string;
    }
    interface TroySSTRequestDataContract {
        acquirerId?: string;
        amount?: string;
        ccInfo?: string;
        currencyCode?: string;
        gmgId?: string;
        mac?: string;
        merchantData?: string;
        merchantId?: string;
        merchantName?: string;
        refId?: string;
        time?: string;
        url?: string;
        version?: string;
    }
    interface TroySSTResponseDataContract {
        expSign?: string;
        goStamp?: string;
        id?: string;
        mac?: string;
        refId?: string;
        result?: BOA.Types.Kernel.VirtualPOS.TroySSTResponseResult;
        url?: string;
        urlExpirationTime?: string;
    }
    interface TroySSTResponseResult {
        code?: string;
        description?: string;
        message?: string;
    }
    interface VirtualPosEndorsementCalculationContract extends BOA.Common.Types.ContractBase {
        amount?: number;
        beginDate?: Date;
        branchId?: number;
        customerId?: number;
        endDate?: Date;
        merchantId?: string;
    }
    interface VposCommon {
        estIntIP?: string;
        estIntPort?: number;
    }
    interface VPosConstants {
        bS_AcquiringId?: string;
        bS_MESSAGE_TYPE_DRAWBACK?: string;
        bS_MESSAGE_TYPE_PREAUTH?: string;
        bS_MESSAGE_TYPE_SALES?: string;
        bS_MTI_BATCHUPLOAD?: string;
        bS_MTI_DRAWBACK?: string;
        bS_MTI_GOLD_REVERSAL?: string;
        bS_MTI_GOLD_SALE?: string;
        bS_MTI_POSTAUTH?: string;
        bS_MTI_PREAUTH?: string;
        bS_MTI_PREAUTHCLOSE?: string;
        bS_MTI_REVERSAL?: string;
        bS_MTI_SALE?: string;
        bS_MTI_SETTLEMENT?: string;
        bS_MTI_TECHNICALCANCEL?: string;
        bS_POSConditionCode?: string;
        bS_PROCESSING_CODE_DRAWBACK?: string;
        bS_PROCESSING_CODE_GOLDSALE?: string;
        bS_PROCESSING_CODE_INDEPDRAWBACK?: string;
        bS_PROCESSING_CODE_POSTAUTH?: string;
        bS_PROCESSING_CODE_PREAUTH?: string;
        bS_PROCESSING_CODE_PREAUTHCLOSE?: string;
        bS_PROCESSING_CODE_PREAUTHREVERSAL?: string;
        bS_PROCESSING_CODE_SALE?: string;
        bS_PROCESSING_CODE_SALEREVERSAL?: string;
        bS_PROCESSING_CODE_SETTLEMENT?: string;
        bS_PROCESSING_CODE_TECHNICALCANCEL?: string;
        bS_SUCCESS_CODE?: string;
        bS_SYSTEMEXCEPTION_CODE?: string;
        bS_TL_CURRENCY_CODE?: string;
        currencyExponent?: string;
        loginBusinessError?: string;
        loginFailError?: string;
        transactionSecurity?: string;
        transactionSecurity3D?: string;
    }
    interface VposError {
        apiUserNotDefined?: BOA.Common.Types.Result;
        banksoftConfigurationError?: BOA.Common.Types.Result;
        banksoftIPError?: BOA.Common.Types.Result;
        cardNotEnrolled?: BOA.Common.Types.Result;
        cardNotFoundException?: BOA.Common.Types.Result;
        certificateParameterNotFound?: BOA.Common.Types.Result;
        certificationPathNotDefined?: BOA.Common.Types.Result;
        dSUrlNotDefined?: BOA.Common.Types.Result;
        emptyAmountField?: BOA.Common.Types.Result;
        emptyCardExpireDateField?: BOA.Common.Types.Result;
        emptyCardHolderNameField?: BOA.Common.Types.Result;
        emptyCardNumberField?: BOA.Common.Types.Result;
        emptyCurrencyCodeField?: BOA.Common.Types.Result;
        emptyCustomerIdField?: BOA.Common.Types.Result;
        emptyCVV2Field?: BOA.Common.Types.Result;
        emptyMDException?: BOA.Common.Types.Result;
        emptyMerchantIdField?: BOA.Common.Types.Result;
        emptyMerchantOrderIdField?: BOA.Common.Types.Result;
        emptyParameterException?: BOA.Common.Types.Result;
        emptyResponseException?: BOA.Common.Types.Result;
        hashDataError?: BOA.Common.Types.Result;
        invalidCardExpireDateFormat?: BOA.Common.Types.Result;
        invalidCardNumber?: BOA.Common.Types.Result;
        invalidExpireDate?: BOA.Common.Types.Result;
        invalidMetaData?: BOA.Common.Types.Result;
        invalidTransactionSecurity?: BOA.Common.Types.Result;
        lengthControlCardNumberField?: BOA.Common.Types.Result;
        mDParseException?: BOA.Common.Types.Result;
        merchantNotDefined?: BOA.Common.Types.Result;
        metaDataNotFound?: BOA.Common.Types.Result;
        mPIAuthenticationStatusA?: BOA.Common.Types.Result;
        mPIAuthenticationStatusE?: BOA.Common.Types.Result;
        mPIAuthenticationStatusN?: BOA.Common.Types.Result;
        mPIAuthenticationStatusU?: BOA.Common.Types.Result;
        non3dUsageUnavailable?: BOA.Common.Types.Result;
        orderDataNotFound?: BOA.Common.Types.Result;
        orderIsProcessedBefore?: BOA.Common.Types.Result;
        orderValidateError?: BOA.Common.Types.Result;
        posMerchantIPError?: BOA.Common.Types.Result;
        provisionException?: BOA.Common.Types.Result;
        pseReturnError?: BOA.Common.Types.Result;
        responseDSError?: BOA.Common.Types.Result;
        responseOrder3DTransactionError?: BOA.Common.Types.Result;
        responseParameterError?: BOA.Common.Types.Result;
        serviceUnavailable?: BOA.Common.Types.Result;
        sSTRequestValidationError?: BOA.Common.Types.Result;
        sSTResponseValidationError?: BOA.Common.Types.Result;
        technicalException?: BOA.Common.Types.Result;
        timeoutException?: BOA.Common.Types.Result;
        transactionAmountMismatchException?: BOA.Common.Types.Result;
        transactionIdNotMatched?: BOA.Common.Types.Result;
        troyGoACSUrlExpiredError?: BOA.Common.Types.Result;
        troyGoCertParamNotFoundError?: BOA.Common.Types.Result;
        troyGoGenericError?: BOA.Common.Types.Result;
        troyGoParamDBSelectError?: BOA.Common.Types.Result;
        troyGOParamsInvalidError?: BOA.Common.Types.Result;
        troyGOresIncompleteResponseError?: BOA.Common.Types.Result;
        troyGOresMACVerificationError?: BOA.Common.Types.Result;
        troyGoTechnicalError?: BOA.Common.Types.Result;
        troySSTMACVerificationError?: BOA.Common.Types.Result;
        unKnownCardTypeError?: BOA.Common.Types.Result;
    }
    interface VposParameterContract extends BOA.Common.Types.ContractBase {
        paramCode?: string;
        paramDescription?: string;
        paramType?: string;
        paramValue?: string;
        paramValue2?: string;
        paramValue3?: string;
        sortOrder?: number;
    }
    interface VPosTransactionResponseContract {
        aCSURL?: string;
        authenticationPacket?: string;
        hashData?: string;
        isEnrolled?: boolean;
        isSuccess?: boolean;
        isVirtual?: boolean;
        mD?: string;
        merchantOrderId?: string;
        orderId?: number;
        pareqHtmlFormString?: string;
        password?: string;
        provisionNumber?: string;
        responseCode?: string;
        responseMessage?: string;
        rRN?: string;
        safeKey?: string;
        stan?: string;
        transactionTime?: Date;
        transactionType?: string;
        vPosMessage?: BOA.Types.Kernel.VirtualPOS.KuveytTurkVPosMessage;
    }
}
declare namespace BOA.Types.Kernel.VirtualPOS.Helper {
    export const enum MetaDataInfo {
        TransactionId = 0,
        OrderId = 1,
        OkUrl = 2,
        FailUrl = 3,
        CustomerId = 4,
        CardNumber = 5,
        UserName = 6,
        MerchantOrderId = 7,
        SurchargeAmount = 8,
        Period = 9,
        OrderPosTransactionId = 10
    }
}
declare namespace BOA.Types.Kernel.VirtualPOS.MerchantMessages {
    interface AdditionalData {
        additionalDataList?: BOA.Types.Kernel.VirtualPOS.MerchantMessages.KuveytTurkVPosAdditionalData[];
    }
    interface KuveytTurkVPosAdditionalData {
        data?: string;
        description?: string;
        key?: string;
    }
}
declare namespace BOA.Types.Kernel.VirtualPOS.Utils {
    interface TemporaryParameter extends BOA.Common.Types.ContractBase {
        createdDate?: Date;
        duration?: any;
        value?: any;
    }
}
declare namespace BOA.Types.Kernel.VirtualPOSIntegration {
    interface EstIntProxyTraceContract {
        insertedTraceRecord?: any;
        managedTransactionType?: string;
        record?: BOA.Types.Kernel.VirtualPOSIntegration.IReadOnlyManagedPSEContract;
    }
    interface IEstIntProxyTracer {
    }
    interface IReadOnlyManagedPSEContract {
        amount?: number;
        batchId?: number;
        canceledAmount?: number;
        canceledCount?: number;
        cardNumber?: string;
        cAVV?: string;
        count?: number;
        currencyCode?: string;
        cvv2?: string;
        eCI?: string;
        expireDate?: string;
        fecAmount?: string;
        installmentCount?: number;
        isCVVRequired?: boolean;
        isRecurringEnabled?: boolean;
        mailOrTelephoneOrder?: boolean;
        merchantOrderId?: string;
        orderId?: number;
        orderPosTxnId?: number;
        originalMerchantOrderId?: string;
        originalRRN?: string;
        originalStan?: string;
        posMerchantId?: string;
        provisionNumber?: string;
        sGKPeriod?: string;
        surchargeAmount?: string;
        terminalID?: string;
        totalAmount?: number;
        totalCount?: number;
        transactionId?: string;
    }
}
declare namespace BOA.Types.Kernel.WebServiceProvider {
    interface WebServiceConfigContract extends BOA.Common.Types.ContractBase {
        configName?: string;
        configValue?: string;
        environment?: number;
        hostName?: string;
        id?: number;
        methodName?: string;
        serviceId?: number;
        systemDate?: Date;
        userName?: string;
    }
}
declare namespace BOA.Types.Kernel.Workflow {
    interface MobileApprovePushRequest extends BOA.Common.Types.RequestBase {
        flowName?: string;
        instanceId?: number;
        instanceStateId?: number;
        operatingUser?: string;
        pushBody?: string;
        pushSubject?: string;
        sendToOnlyOwnedUser?: boolean;
        stateName?: string;
        userAccessPointId?: number;
    }
}
declare namespace BOA.Types.LetterOfGuarantee {
    interface PrintedFormHistoryContract extends BOA.Common.Types.ContractBase {
        hostIP?: string;
        hostName?: string;
        printedFormHistoryId?: number;
        printedFormId?: number;
        processDescription?: string;
        processId?: number;
        processName?: string;
        processTime?: string;
        systemDate?: Date;
        userName?: string;
        workGroupId?: number;
        workGroupName?: string;
    }
}
declare namespace BOA.Types.Loans.CollectionSystem {
    interface LeasingTransferAmountReleaseWithHoldingContract extends BOA.Common.Types.ContractBase {
        businessKey?: number;
        projectPayBackPlanInstallmentId?: number;
    }
    interface PTTCollectionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        businessKey?: number;
        collectionDate?: Date;
        isActive?: number;
        ledgerId?: number;
        processDate?: Date;
        pTTCollectionId?: number;
        remainingAmount?: number;
        tranDate?: Date;
    }
    interface WithHoldingManagementContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        amount?: number;
        amountTL?: number;
        fec?: number;
        id?: number;
        isChangeAmount?: number;
        isDone?: boolean;
        isNewWithHolding?: number;
        ownerAccountNumber?: number;
        ownerType?: number;
        roleid?: number;
        sourceType?: number;
        withHoldingCode?: string;
        withHoldingId?: number;
    }
}
declare namespace BOA.Types.Loans.FundUtilization {
    interface BranchClassRuleHistoryContract extends BOA.Common.Types.ContractBase {
        classType?: string;
        reportTypeId?: number;
        reportTypeName?: string;
        ruleClass?: string;
        ruleCriteria?: string;
        ruleDate?: Date;
        ruleGroupNumber?: number;
        ruleNumber?: number;
        ruleOperator?: string;
        ruleReference?: string;
        ruleValue?: number;
        ruleValueOperator?: string;
    }
    interface BranchClassRuleHistoryRequest extends BOA.Common.Types.RequestBase {
        classType?: string;
        dataContract?: BOA.Types.Loans.FundUtilization.BranchClassRuleHistoryContract;
        dateType?: Date;
        ruleDate?: Date;
    }
    interface BRSACustomerInformationContract extends BOA.Common.Types.ContractBase {
        accountNumber?: string;
        bankRating?: string;
        bRSACustomerInformationID?: number;
        customerNumber?: string;
        generalEvaluation?: string;
        historyReport?: Date;
        hostIP?: string;
        hostName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface CommitmentProjectContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        aggrementType?: number;
        averageMaturityDayCount?: number;
        commissionRate?: number;
        debtFEC?: number;
        debtFECType?: number;
        fecType?: number;
        fecTypeName?: string;
        fundingAmount?: number;
        fundingFEC?: number;
        monthlyProfitRate?: number;
        portfolioClass?: number;
        productCode?: string;
        userCode?: string;
    }
    interface CommitmentProjectDetailContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        averageMaturityDayCount?: number;
        commissionRate?: number;
        commitmentDate?: Date;
        debtFEC?: number;
        debtFECName?: string;
        fundingAmount?: number;
        mainFundingAmount?: number;
        monthlyProfitRate?: number;
        projectId?: number;
        proposalId?: number;
        remainingFundingAmount?: number;
    }
    interface CustomsGoodsTariffPositionContract extends BOA.Common.Types.ContractBase {
        customsGoodsTariffPositionId?: number;
        description?: string;
        hasUpdate?: boolean;
        hostIP?: string;
        hostName?: string;
        positionNumber?: string;
        salesVatRate?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
    interface EarlyCollectionRediscountContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        businessKey?: number;
        collectionAmount?: number;
        collectionAmountTL?: number;
        collectionId?: number;
        debtFECType?: number;
        discountAmount?: number;
        earlyCollectionRediscountAmount?: number;
        earlyCollectionRediscountAmountTL?: number;
        fec?: number;
        fullCollection?: number;
        fundPool?: number;
        isLeasing?: number;
        ledgerId?: number;
        payBackPlanInstallmentId?: number;
        payBackPlanOrderNumber?: number;
        profitAmount?: number;
        profitAmountTL?: number;
        profitDiscountAmount?: number;
        reverseBusinessKey?: number;
        tranDate?: Date;
        unitID?: number;
    }
    interface EximBankReminderContract extends BOA.Common.Types.ContractBase {
        companyNumber?: string;
        customerName?: string;
        debtFEC?: string;
        fundingAmount?: number;
        loanReferanceNumber?: string;
        path?: string;
        paymentStatus?: string;
        projectId?: number;
        tranDate?: Date;
    }
    interface ImportProjectListContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        aggrementType?: number;
        averageMaturityDayCount?: number;
        debtFEC?: number;
        debtFECName?: string;
        debtFECType?: number;
        fecType?: number;
        fundingFEC?: number;
        maxAmount?: number;
        minAmount?: number;
        monthlyProfitRate?: number;
        portfolioClass?: number;
        productCode?: string;
        title?: string;
        transferAmount?: number;
        transferDate?: Date;
        transferFEC?: number;
        transferFECName?: string;
        userCode?: string;
    }
    interface WithHoldingManagementContract extends BOA.Common.Types.ContractBase {
    }
}
declare namespace BOA.Types.PaymentSystems.HGS {
    interface AccountTransferContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        branchName?: string;
        channelId?: number;
        collateralAmount?: number;
        collateralAmountOld?: number;
        collateralDate?: Date;
        collateralDefinitionId?: number;
        collateralId?: number;
        collateralName?: string;
        counterLedgerIdFC?: number;
        counterLedgerIdLC?: number;
        customerName?: string;
        description?: string;
        divitId?: string;
        divitInstanceId?: string;
        expiryDate?: Date;
        fec?: number;
        fecCode?: string;
        fecCodeOld?: string;
        fecOld?: number;
        hostIP?: string;
        hostName?: string;
        initialCollateralAmount?: number;
        initialFEC?: number;
        initialFECCode?: string;
        isFromBranch?: boolean;
        ledgerIdFC?: number;
        ledgerIdLC?: number;
        newAccountSuffix?: number;
        newBranchId?: number;
        portfolioClass?: number;
        releaseDate?: Date;
        state?: number;
        stateName?: string;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        usableAmountUSD?: number;
        userName?: string;
    }
}
declare namespace BOA.Types.PaymentSystems.SGK {
    interface GroupChannelContract extends BOA.Common.Types.ContractBase {
        channelId?: number;
        channelName?: string;
        groupChannelCode?: number;
        groupChannelId?: number;
        groupInfoCode?: number;
        hostIP?: string;
        hostName?: string;
        status?: number;
        systemDate?: Date;
        updateHostName?: string;
        updateSystemDate?: Date;
        updateUserName?: string;
        userName?: string;
    }
}
declare namespace BOA.Types.PaymentSystems.Tax {
    interface TaxOfficeMoneyTransferContract extends BOA.Common.Types.ContractBase {
        accountingAmount?: number;
        branchAccountNumber?: number;
        branchAccountSuffix?: number;
        branchId?: number;
        branchName?: string;
        businessKey?: number;
        cancelAmount?: number;
        cancelCount?: string;
        channelId?: number;
        eFTBank?: string;
        eFTBaseDate?: Date;
        eFTSuffix?: number;
        eFTType?: number;
        hostIP?: string;
        hostName?: string;
        iBAN?: string;
        paymentAmount?: number;
        paymentBeginDate?: Date;
        paymentCount?: string;
        paymentEndDate?: Date;
        paymentType?: number;
        paymentTypeGroup?: string;
        queryToken?: number;
        sendStatu?: number;
        sendStatuDesc?: string;
        status?: number;
        statusDesc?: string;
        systemDate?: Date;
        taxOfficeAccountNumber?: number;
        taxOfficeAccountSuffix?: number;
        taxOfficeAccountSuffixForCreditCard?: number;
        taxOfficeCode?: string;
        taxOfficeMoneyTransferId?: number;
        taxOfficeName?: string;
        transactionDate?: Date;
        userName?: string;
    }
}
declare namespace BOA.Types.Test {
    interface LateChargeCollectionContract extends BOA.Common.Types.ContractBase {
        accountNumber?: number;
        accountSuffix?: number;
        branchId?: number;
        collectedAmount?: number;
        debtFECType?: number;
        debtFECTypeName?: string;
        detailDescription?: string;
        lateChargeFEC?: number;
        lateChargeFECName?: string;
        lCRId?: number;
        maturityDate?: Date;
        netLateChargeAmount?: number;
        orderNumber?: number;
        portfolioClass?: number;
    }
    interface LifePolicyPriceContract extends BOA.Common.Types.ContractBase {
    }
}
declare namespace BOA.Types.VirtualPOS.Service {
    interface LogJournalContract extends BOA.Common.Types.ContractBase {
        applicationServerName?: string;
        businessKey?: number;
        comingIP?: string;
        comingUrl?: string;
        dataPacketIn?: string;
        dataPacketOut?: string;
        dataPacketType?: number;
        exception?: string;
        hasException?: number;
        merchantId?: number;
        methodName?: string;
        parentTransactionId?: number;
        requestData?: string;
        responseData?: string;
        tranDate?: Date;
        transactionId?: number;
        transactionName?: string;
    }
}

declare namespace BOA.Types.DeviceManagement {
    export const enum BOANumeratorResultSeverity {
        Error = 0,
        Warning = 1,
        Information = 2
    }
    interface BOANumeratorResult {
        Exception: string;
        ErrorMessage: string;
        ErrorCode: string;
        Severity: BOANumeratorResultSeverity;
        IsFriendly: boolean;
        Params: string[];
    }
    interface NumeratorResult {

        BOAResult: BOANumeratorResult;
        ResultCode: string;
        ErrorMessage: string;
        UserName: string;
        UserCode: string;
        UserPriorityCode: string;
        DeskNumber: string;
        TicketNumber: string;
        CustomerNumber: string;
        CustomerName: string;
        CardNo: string;
        CardStatus: string;
        CategoryCode: string;
        CategoryName: string;
        WaitingTime: string;
        AverageProcessTime: string;
        ServedCustomerCount: string;
        WaitingCustomerCount: string;
        WaitingButtonCount: string;
        ButtonNumber: string;
        IsThereAnyWaitingCustomer: string;
    }
    interface Font {
        FamilyName: string,
        Size: number
    }
    interface PassbookItem {
        Text: string,
        Font: Font,
        TextColor: string,
        X: number,
        Y: number
    }
    interface PassbookPrintModel {
        DeviceInstance: any,
        PassbookItems: PassbookItem[]
    }
    interface PrintFileModel {
        DeviceInstance: any,
        FileName: string,
        Base64FileData: string
    }
}