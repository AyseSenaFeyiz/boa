/* eslint-disable no-console */
/**
 * Generated by b-build module
 */
import 'colors';
import fsp from 'fs-promise';
import { baseRoot, buildRoot, buildSuffix, deployRootTemplate } from './constants';
import rimraf from 'rimraf';
var cp = require('child_process');
var fs = require('fs'), path = require('path');
var StringBuilder = require('string-builder');
var winattr = require('winattr');
var writeFile = require('write');
var glob = require('glob');
var replace = require('replace-in-file');
var deployRoot = null;
var projectName = null;
var module = null;
var subModule = null;

function findDeployRoot(isBuild = false) {
  if (!deployRoot) {
    module = 'Module';
    subModule = 'SubModule';

    const ext = '.njsproj';
    const root = path.resolve('');
    var projectFileName = '';
    var files = fs.readdirSync(root);
    for (var i = 0; i < files.length; i++) {
      if (files[i].endsWith(ext)) { // Ex: BOA.One.Office.CoreBanking.Teller.njsproj
        projectFileName = files[i].replace(ext, ''); // Ex: BOA.One.Office.CoreBanking.Teller
        break;
      }
    }
    var projectKeys = projectFileName ? projectFileName.split('.') : path.basename(root).split('.'); // Ex:BOA, One, Office, CoreBanking, Teller
    if (projectKeys.length == 5) { // [BOA.BusinessModules] - Ex:BOA.One.Office.CoreBanking.Teller
      module = projectKeys[3]; // Ex:CoreBanking
      subModule = projectKeys[4]; // Ex:Teller
    } else if (projectKeys.length == 4) { // [BOA.Modules] - Ex:BOA.One.Office.BPM
      module = 'Modules'; // Ex:Modules
      subModule = projectKeys[3]; // Ex:BPM
    }
    deployRoot = deployRootTemplate.replace('{Root}', isBuild ? buildRoot : baseRoot).replace('{ModuleName}', module).replace('{SubModuleName}', subModule);
    console.log('Deploy Root: ' + deployRoot);
    projectName = `${module}.${subModule}`;
  }
  return deployRoot;
}

function copyFiles(srcDirectory) {
  rimraf.sync(deployRoot);
  fsp.copySync(srcDirectory, deployRoot);
  if (!fs.existsSync(path.join(deployRoot, 'routes'))) {
    fs.mkdirSync(path.join(deployRoot, 'routes'));
  }
  fs.closeSync(fs.openSync(path.join(deployRoot, 'routes', 'index.js'), 'w'));
  var routeBuilder = new StringBuilder();
  routeBuilder.append('module.exports = {');
  var corefolder = deployRoot.replace(baseRoot + '/', '').replace(buildRoot + '/', '');
  routeBuilder.appendLine('path: ' + "'" + corefolder.toLowerCase() + "',");
  var pageRoot = path.join(deployRoot, 'pages');
  var fileContents = fs.readdirSync(pageRoot), stats;
  if (fileContents.length > 0) {
    routeBuilder.appendLine('childRoutes: [');

    generateDynamicChildRoutes(
      routeBuilder,
      pageRoot);

    // fileContents.forEach(function (fileName) {
    // stats = fs.lstatSync(pageRoot + '/' + fileName);
    // if (stats.isDirectory()) {
    // generateDynamicChildRoutes(
    // routeBuilder,
    // path.join(pageRoot, fileName),
    // fileName.toLowerCase());
    // }
    // });
    routeBuilder.appendLine(']}');
  }
  var routeFile = path.join(deployRoot, 'routes', 'index.js');
  writeFile.sync(routeFile, routeBuilder.toString());
}

function copyFilesFinalize(srcDirectory) {
  rimraf.sync(path.join(baseRoot, 'typings'));
  if (!fs.existsSync(path.join(baseRoot, 'typings'))) {
    fs.mkdirSync(path.join(baseRoot, 'typings'));
  }
  fsp.copySync('./typings', path.join(baseRoot, 'typings'));
}

function generateDynamicChildRoutes(routeBuilder, pageroot) {
  var fileContents = fs.readdirSync(pageroot), stats;
  if (fileContents.length > 0) {
    fileContents.forEach(function (fileName) {
      stats = fs.lstatSync(pageroot + '/' + fileName);
      const baseFileName = fileName.replace(buildSuffix, '');
      if (stats.isDirectory()) {
        routeBuilder.appendLine("{path:'" + baseFileName + "',");
        routeBuilder.appendLine('childRoutes: [');
        generateDynamicChildRoutes(
          routeBuilder,
          path.join(pageroot, fileName),
          fileName.toLowerCase());
        routeBuilder.appendLine(']},');
      } else {
        var subroute = pageroot.substring(pageroot.indexOf('pages') + 5, pageroot.length);
        subroute = subroute.replace(/\\/g, '/');
        var fileNoExt = baseFileName.replace('.tsx', '');
        routeBuilder.appendLine("{path:'" + fileNoExt.toLowerCase() + "',");
        // console.log(('Path: ' + fileNoExt.toLowerCase()).yellow);
        routeBuilder.appendLine('getComponent(location, cb) {');
        var chunkNameDraft = deployRoot.replace(baseRoot + '/', '').replace(buildRoot + '/', '').replace('/', '.') + '.' + subroute.replace('/', '') + '.' + fileNoExt;
        var chunkName = chunkNameDraft.replace('..', '.').toLowerCase();
        routeBuilder.appendLine('import(/* webpackChunkName: "' + chunkName + '" */ "../pages' + subroute + '/' + fileNoExt + '")');
        routeBuilder.appendLine('.then(module => { cb(null, module.default); })');
        routeBuilder.appendLine('.catch(error => { throw new Error(`Dynamic page loading failed: ${error}`); } ); ');
        routeBuilder.appendLine('},},');
      }
    });
  }
}

function generateDynamicRoutes() {
  var routeBuilder = new StringBuilder();
  routeBuilder.appendLine('/*DYNAMIC-ROUTES-START*/');

  var fileContents = fs.readdirSync(baseRoot), stats;
  if (fileContents.length > 0) {
    fileContents.forEach(function (folderName) {
      stats = fs.lstatSync(baseRoot + '/' + folderName);
      if (stats.isDirectory() && folderName != 'Office' &&
        folderName != 'typings' &&
        folderName != 'node_modules' &&
        folderName != 'wwwroot' &&
        folderName != 'vendor') {
        var files = glob.sync(folderName + '/**/routes/index.js', { cwd: baseRoot });

        files.forEach((filename) => {
          var filenameArray = filename.split('/');
          filenameArray.pop();
          routeBuilder.appendLine("require('../../" + filenameArray.join('/') + "'),");
        });

      }
    });
  }

  winattr.set(path.join(baseRoot, 'Office', 'routes', 'index.tsx'), { readonly: false }, function (err) {
    if (err != null) {
      console.log('Error: ReadOnly Problemi');
      console.log(err);
    }
  });

  routeBuilder.appendLine('/*DYNAMIC-ROUTES-END*/');

  const options = {
    files: path.join(baseRoot, 'Office', 'routes', 'index.tsx'),
    replace: /\/\*DYNAMIC-ROUTES-START\*\/[\s\S]*\/\*DYNAMIC-ROUTES-END\*\//g,
    with: routeBuilder.toString()
  };
  replace.sync(options);
}

export function generateRoutes() {
  console.log('Dynamic Route Generation started'.white);
  generateDynamicRoutes();
  console.log('Dynamic Route Generation finished successfully.'.cyan);
}

export function generateDevScripts(indexPath) {
  console.log('DevScript generation started.'.white);
  generateDevIndex(indexPath);
  console.log('DevScript generation finished successfully.'.cyan);
}

export function publishFiles() {
  findDeployRoot();
  console.log(`${projectName} publishing started.`.white);
  copyFiles(path.resolve('./ClientApp'));
  generateDynamicRoutes();
  console.log(`${projectName} publishing finished successfully.`.cyan);
}

export function publishBuildFiles() {
  findDeployRoot(true);
  console.log(`${projectName} build files publishing started.`.white);
  copyFiles(path.resolve('./ClientApp'));
  console.log(`${projectName} build files publishing finished successfully.`.cyan);
}

export function publishFilesAutomation() {
  findDeployRoot();
  console.log(`${projectName} publishing started.`.white);
  copyFiles(path.resolve('./ClientApp'));
  console.log(`${projectName} publishing finished successfully.`.cyan);
}

export function publishFilesFinalize() {
  findDeployRoot();
  console.log('BOA.One.Office publishing finalizing.'.white);
  copyFilesFinalize(path.resolve('./ClientApp'));
  console.log('BOA.One.Office publishing finalized successfully.'.cyan);
}

export function tscompile(isBuild = false) {
  findDeployRoot(isBuild);
  console.log('Typescript compilation started.'.white);
  const baseProjectRoot = path.join(baseRoot, module, subModule);
  if (isBuild) {
    try {
      cp.execSync('npm run tscompile', { cwd: buildRoot, stdio: 'inherit' });
      const filter = (src, dest) => {
        return !(src.endsWith(".ts") || src.endsWith(".tsx"));
      }
      fsp.copySync(deployRoot, baseProjectRoot, { filter: filter });
    } finally {
      rimraf.sync(deployRoot);
    }
  } else {
    cp.execSync('npm run tscompile', { cwd: baseRoot, stdio: 'inherit' });
  }
  console.log('Typescript compilation finished successfully.'.cyan);
}

export function webpack() {
  console.log('Webpack started.'.white);
  cp.execSync('npm run dowebpack -- --display errors-only', { cwd: baseRoot, stdio: 'inherit' });
  console.log('Webpack finished successfully.'.cyan);
}

export function webpackVendor() {
  console.log('Webpack vendor started.'.white);
  cp.execSync('npm run dowebpackvendor -- --display errors-only', { cwd: baseRoot, stdio: 'inherit' });
  console.log('Webpack vendor finished successfully.'.cyan);
}

export function npmInstall() {
  console.log('Npm install started'.white);
  cp.execSync('npm install --no-shrinkwrap --no-package-lock', { cwd: baseRoot });
  console.log('Npm install finished successfully.'.cyan);
}

export function npmUpdate() {
  console.log('Npm update started'.white);
  cp.execSync('npm update  --no-shrinkwrap --no-package-lock', { cwd: baseRoot });
  console.log('Npm update finished successfully.'.cyan);
}

export function npmInstallAndUpdate() {
  npmInstall();
  npmUpdate();
}

export function generateVendorConfigs() {
  console.log('Vendor Config Generation started.'.white);
  generateVendorConfigScripts();
  console.log('Vendor Config Generation finished successfully.'.cyan);
}

export function updateTypings() {
  console.log('Typings update started'.white);
  cp.execSync('npm update b-typings');
  console.log('Typings updated successfully.'.cyan);
}
